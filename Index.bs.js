(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback2, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback2(module.exports, module);
    }
    return module.exports;
  };
  var __exportStar = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", {value: module, enumerable: true})), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from3;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from3 = Object(arguments[s]);
        for (var key in from3) {
          if (hasOwnProperty.call(from3, key)) {
            to[key] = from3[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from3);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from3, symbols[i])) {
              to[symbols[i]] = from3[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS((exports) => {
    /** @license React v17.0.1
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    var l = require_object_assign();
    var n = 60103;
    var p = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var q = 60109;
    var r2 = 60110;
    var t2 = 60112;
    exports.Suspense = 60113;
    var u = 60115;
    var v = 60116;
    if (typeof Symbol === "function" && Symbol.for) {
      w = Symbol.for;
      n = w("react.element");
      p = w("react.portal");
      exports.Fragment = w("react.fragment");
      exports.StrictMode = w("react.strict_mode");
      exports.Profiler = w("react.profiler");
      q = w("react.provider");
      r2 = w("react.context");
      t2 = w("react.forward_ref");
      exports.Suspense = w("react.suspense");
      u = w("react.memo");
      v = w("react.lazy");
    }
    var w;
    var x = typeof Symbol === "function" && Symbol.iterator;
    function y(a) {
      if (a === null || typeof a !== "object")
        return null;
      a = x && a[x] || a["@@iterator"];
      return typeof a === "function" ? a : null;
    }
    function z(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var A = {isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    }};
    var B = {};
    function C(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = B;
      this.updater = c || A;
    }
    C.prototype.isReactComponent = {};
    C.prototype.setState = function(a, b) {
      if (typeof a !== "object" && typeof a !== "function" && a != null)
        throw Error(z(85));
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    C.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function D() {
    }
    D.prototype = C.prototype;
    function E(a, b, c) {
      this.props = a;
      this.context = b;
      this.refs = B;
      this.updater = c || A;
    }
    var F = E.prototype = new D();
    F.constructor = E;
    l(F, C.prototype);
    F.isPureReactComponent = true;
    var G = {current: null};
    var H = Object.prototype.hasOwnProperty;
    var I = {key: true, ref: true, __self: true, __source: true};
    function J(a, b, c) {
      var e, d2 = {}, k = null, h = null;
      if (b != null)
        for (e in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
          H.call(b, e) && !I.hasOwnProperty(e) && (d2[e] = b[e]);
      var g = arguments.length - 2;
      if (g === 1)
        d2.children = c;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++)
          f[m] = arguments[m + 2];
        d2.children = f;
      }
      if (a && a.defaultProps)
        for (e in g = a.defaultProps, g)
          d2[e] === void 0 && (d2[e] = g[e]);
      return {$$typeof: n, type: a, key: k, ref: h, props: d2, _owner: G.current};
    }
    function K(a, b) {
      return {$$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner};
    }
    function L(a) {
      return typeof a === "object" && a !== null && a.$$typeof === n;
    }
    function escape2(a) {
      var b = {"=": "=0", ":": "=2"};
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var M = /\/+/g;
    function N(a, b) {
      return typeof a === "object" && a !== null && a.key != null ? escape2("" + a.key) : b.toString(36);
    }
    function O(a, b, c, e, d2) {
      var k = typeof a;
      if (k === "undefined" || k === "boolean")
        a = null;
      var h = false;
      if (a === null)
        h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case n:
              case p:
                h = true;
            }
        }
      if (h)
        return h = a, d2 = d2(h), a = e === "" ? "." + N(h, 0) : e, Array.isArray(d2) ? (c = "", a != null && (c = a.replace(M, "$&/") + "/"), O(d2, b, c, "", function(a2) {
          return a2;
        })) : d2 != null && (L(d2) && (d2 = K(d2, c + (!d2.key || h && h.key === d2.key ? "" : ("" + d2.key).replace(M, "$&/") + "/") + a)), b.push(d2)), 1;
      h = 0;
      e = e === "" ? "." : e + ":";
      if (Array.isArray(a))
        for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = e + N(k, g);
          h += O(k, b, c, f, d2);
        }
      else if (f = y(a), typeof f === "function")
        for (a = f.call(a), g = 0; !(k = a.next()).done; )
          k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d2);
      else if (k === "object")
        throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
      return h;
    }
    function P(a, b, c) {
      if (a == null)
        return a;
      var e = [], d2 = 0;
      O(a, e, "", "", function(a2) {
        return b.call(c, a2, d2++);
      });
      return e;
    }
    function Q(a) {
      if (a._status === -1) {
        var b = a._result;
        b = b();
        a._status = 0;
        a._result = b;
        b.then(function(b2) {
          a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
        }, function(b2) {
          a._status === 0 && (a._status = 2, a._result = b2);
        });
      }
      if (a._status === 1)
        return a._result;
      throw a._result;
    }
    var R = {current: null};
    function S() {
      var a = R.current;
      if (a === null)
        throw Error(z(321));
      return a;
    }
    var T = {ReactCurrentDispatcher: R, ReactCurrentBatchConfig: {transition: 0}, ReactCurrentOwner: G, IsSomeRendererActing: {current: false}, assign: l};
    exports.Children = {map: P, forEach: function(a, b, c) {
      P(a, function() {
        b.apply(this, arguments);
      }, c);
    }, count: function(a) {
      var b = 0;
      P(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return P(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!L(a))
        throw Error(z(143));
      return a;
    }};
    exports.Component = C;
    exports.PureComponent = E;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
    exports.cloneElement = function(a, b, c) {
      if (a === null || a === void 0)
        throw Error(z(267, a));
      var e = l({}, a.props), d2 = a.key, k = a.ref, h = a._owner;
      if (b != null) {
        b.ref !== void 0 && (k = b.ref, h = G.current);
        b.key !== void 0 && (d2 = "" + b.key);
        if (a.type && a.type.defaultProps)
          var g = a.type.defaultProps;
        for (f in b)
          H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
      }
      var f = arguments.length - 2;
      if (f === 1)
        e.children = c;
      else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++)
          g[m] = arguments[m + 2];
        e.children = g;
      }
      return {
        $$typeof: n,
        type: a.type,
        key: d2,
        ref: k,
        props: e,
        _owner: h
      };
    };
    exports.createContext = function(a, b) {
      b === void 0 && (b = null);
      a = {$$typeof: r2, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null};
      a.Provider = {$$typeof: q, _context: a};
      return a.Consumer = a;
    };
    exports.createElement = J;
    exports.createFactory = function(a) {
      var b = J.bind(null, a);
      b.type = a;
      return b;
    };
    exports.createRef = function() {
      return {current: null};
    };
    exports.forwardRef = function(a) {
      return {$$typeof: t2, render: a};
    };
    exports.isValidElement = L;
    exports.lazy = function(a) {
      return {$$typeof: v, _payload: {_status: -1, _result: a}, _init: Q};
    };
    exports.memo = function(a, b) {
      return {$$typeof: u, type: a, compare: b === void 0 ? null : b};
    };
    exports.useCallback = function(a, b) {
      return S().useCallback(a, b);
    };
    exports.useContext = function(a, b) {
      return S().useContext(a, b);
    };
    exports.useDebugValue = function() {
    };
    exports.useEffect = function(a, b) {
      return S().useEffect(a, b);
    };
    exports.useImperativeHandle = function(a, b, c) {
      return S().useImperativeHandle(a, b, c);
    };
    exports.useLayoutEffect = function(a, b) {
      return S().useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return S().useMemo(a, b);
    };
    exports.useReducer = function(a, b, c) {
      return S().useReducer(a, b, c);
    };
    exports.useRef = function(a) {
      return S().useRef(a);
    };
    exports.useState = function(a) {
      return S().useState(a);
    };
    exports.version = "17.0.1";
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (true) {
      module.exports = require_react_production_min();
    } else {
      module.exports = null;
    }
  });

  // node_modules/video.js/node_modules/global/window.js
  var require_window = __commonJS((exports, module) => {
    var win2;
    if (typeof window !== "undefined") {
      win2 = window;
    } else if (typeof global !== "undefined") {
      win2 = global;
    } else if (typeof self !== "undefined") {
      win2 = self;
    } else {
      win2 = {};
    }
    module.exports = win2;
  });

  // empty:/home/runner/work/rescript-videojs-example/rescript-videojs-example/node_modules/min-document/index.js
  var require_min_document = __commonJS(() => {
  });

  // node_modules/video.js/node_modules/global/document.js
  var require_document = __commonJS((exports, module) => {
    var topLevel = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
    var minDoc = require_min_document();
    var doccy;
    if (typeof document !== "undefined") {
      doccy = document;
    } else {
      doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
      if (!doccy) {
        doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
      }
    }
    module.exports = doccy;
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS((exports, module) => {
    function _extends3() {
      module.exports = _extends3 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends3.apply(this, arguments);
    }
    module.exports = _extends3;
  });

  // node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS((exports, module) => {
    function _assertThisInitialized3(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    module.exports = _assertThisInitialized3;
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS((exports, module) => {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        module.exports = _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        module.exports = _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    module.exports = _typeof;
  });

  // node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
  var require_possibleConstructorReturn = __commonJS((exports, module) => {
    var _typeof = require_typeof();
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return assertThisInitialized(self2);
    }
    module.exports = _possibleConstructorReturn;
  });

  // node_modules/@babel/runtime/helpers/getPrototypeOf.js
  var require_getPrototypeOf = __commonJS((exports, module) => {
    function _getPrototypeOf(o) {
      module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    module.exports = _getPrototypeOf;
  });

  // node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS((exports, module) => {
    function _setPrototypeOf(o, p) {
      module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    module.exports = _setPrototypeOf;
  });

  // node_modules/@babel/runtime/helpers/inheritsLoose.js
  var require_inheritsLoose = __commonJS((exports, module) => {
    var setPrototypeOf = require_setPrototypeOf();
    function _inheritsLoose3(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      setPrototypeOf(subClass, superClass);
    }
    module.exports = _inheritsLoose3;
  });

  // node_modules/safe-json-parse/tuple.js
  var require_tuple = __commonJS((exports, module) => {
    module.exports = SafeParseTuple;
    function SafeParseTuple(obj, reviver) {
      var json;
      var error = null;
      try {
        json = JSON.parse(obj, reviver);
      } catch (err) {
        error = err;
      }
      return [error, json];
    }
  });

  // node_modules/keycode/index.js
  var require_keycode = __commonJS((exports, module) => {
    function keyCode(searchInput) {
      if (searchInput && typeof searchInput === "object") {
        var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
        if (hasKeyCode)
          searchInput = hasKeyCode;
      }
      if (typeof searchInput === "number")
        return names[searchInput];
      var search = String(searchInput);
      var foundNamedKey = codes[search.toLowerCase()];
      if (foundNamedKey)
        return foundNamedKey;
      var foundNamedKey = aliases[search.toLowerCase()];
      if (foundNamedKey)
        return foundNamedKey;
      if (search.length === 1)
        return search.charCodeAt(0);
      return void 0;
    }
    keyCode.isEventKey = function isEventKey(event, nameOrCode) {
      if (event && typeof event === "object") {
        var keyCode2 = event.which || event.keyCode || event.charCode;
        if (keyCode2 === null || keyCode2 === void 0) {
          return false;
        }
        if (typeof nameOrCode === "string") {
          var foundNamedKey = codes[nameOrCode.toLowerCase()];
          if (foundNamedKey) {
            return foundNamedKey === keyCode2;
          }
          var foundNamedKey = aliases[nameOrCode.toLowerCase()];
          if (foundNamedKey) {
            return foundNamedKey === keyCode2;
          }
        } else if (typeof nameOrCode === "number") {
          return nameOrCode === keyCode2;
        }
        return false;
      }
    };
    exports = module.exports = keyCode;
    var codes = exports.code = exports.codes = {
      backspace: 8,
      tab: 9,
      enter: 13,
      shift: 16,
      ctrl: 17,
      alt: 18,
      "pause/break": 19,
      "caps lock": 20,
      esc: 27,
      space: 32,
      "page up": 33,
      "page down": 34,
      end: 35,
      home: 36,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      insert: 45,
      delete: 46,
      command: 91,
      "left command": 91,
      "right command": 93,
      "numpad *": 106,
      "numpad +": 107,
      "numpad -": 109,
      "numpad .": 110,
      "numpad /": 111,
      "num lock": 144,
      "scroll lock": 145,
      "my computer": 182,
      "my calculator": 183,
      ";": 186,
      "=": 187,
      ",": 188,
      "-": 189,
      ".": 190,
      "/": 191,
      "`": 192,
      "[": 219,
      "\\": 220,
      "]": 221,
      "'": 222
    };
    var aliases = exports.aliases = {
      windows: 91,
      "\u21E7": 16,
      "\u2325": 18,
      "\u2303": 17,
      "\u2318": 91,
      ctl: 17,
      control: 17,
      option: 18,
      pause: 19,
      break: 19,
      caps: 20,
      return: 13,
      escape: 27,
      spc: 32,
      spacebar: 32,
      pgup: 33,
      pgdn: 34,
      ins: 45,
      del: 46,
      cmd: 91
    };
    /*!
     * Programatically add the following
     */
    for (i = 97; i < 123; i++)
      codes[String.fromCharCode(i)] = i - 32;
    for (var i = 48; i < 58; i++)
      codes[i - 48] = i;
    for (i = 1; i < 13; i++)
      codes["f" + i] = i + 111;
    for (i = 0; i < 10; i++)
      codes["numpad " + i] = i + 96;
    var names = exports.names = exports.title = {};
    for (i in codes)
      names[codes[i]] = i;
    for (var alias in aliases) {
      codes[alias] = aliases[alias];
    }
  });

  // node_modules/global/window.js
  var require_window2 = __commonJS((exports, module) => {
    var win2;
    if (typeof window !== "undefined") {
      win2 = window;
    } else if (typeof global !== "undefined") {
      win2 = global;
    } else if (typeof self !== "undefined") {
      win2 = self;
    } else {
      win2 = {};
    }
    module.exports = win2;
  });

  // node_modules/is-function/index.js
  var require_is_function = __commonJS((exports, module) => {
    module.exports = isFunction;
    var toString2 = Object.prototype.toString;
    function isFunction(fn) {
      if (!fn) {
        return false;
      }
      var string = toString2.call(fn);
      return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    }
  });

  // node_modules/@videojs/xhr/index.js
  var require_xhr = __commonJS((exports, module) => {
    "use strict";
    var window3 = require_window2();
    var _extends3 = require_extends();
    var isFunction = require_is_function();
    /**
     * @license
     * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
     * Copyright (c) 2014 David Björklund
     * Available under the MIT license
     * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
     */
    var parseHeaders = function(headers) {
      var result = {};
      if (!headers) {
        return result;
      }
      headers.trim().split("\n").forEach(function(row) {
        var index = row.indexOf(":");
        var key = row.slice(0, index).trim().toLowerCase();
        var value = row.slice(index + 1).trim();
        if (typeof result[key] === "undefined") {
          result[key] = value;
        } else if (Array.isArray(result[key])) {
          result[key].push(value);
        } else {
          result[key] = [result[key], value];
        }
      });
      return result;
    };
    module.exports = createXHR;
    module.exports.default = createXHR;
    createXHR.XMLHttpRequest = window3.XMLHttpRequest || noop2;
    createXHR.XDomainRequest = "withCredentials" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window3.XDomainRequest;
    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
      createXHR[method === "delete" ? "del" : method] = function(uri, options, callback2) {
        options = initParams(uri, options, callback2);
        options.method = method.toUpperCase();
        return _createXHR(options);
      };
    });
    function forEachArray(array, iterator) {
      for (var i = 0; i < array.length; i++) {
        iterator(array[i]);
      }
    }
    function isEmpty(obj) {
      for (var i in obj) {
        if (obj.hasOwnProperty(i))
          return false;
      }
      return true;
    }
    function initParams(uri, options, callback2) {
      var params = uri;
      if (isFunction(options)) {
        callback2 = options;
        if (typeof uri === "string") {
          params = {uri};
        }
      } else {
        params = _extends3({}, options, {uri});
      }
      params.callback = callback2;
      return params;
    }
    function createXHR(uri, options, callback2) {
      options = initParams(uri, options, callback2);
      return _createXHR(options);
    }
    function _createXHR(options) {
      if (typeof options.callback === "undefined") {
        throw new Error("callback argument missing");
      }
      var called = false;
      var callback2 = function cbOnce(err, response, body2) {
        if (!called) {
          called = true;
          options.callback(err, response, body2);
        }
      };
      function readystatechange() {
        if (xhr.readyState === 4) {
          setTimeout(loadFunc, 0);
        }
      }
      function getBody() {
        var body2 = void 0;
        if (xhr.response) {
          body2 = xhr.response;
        } else {
          body2 = xhr.responseText || getXml(xhr);
        }
        if (isJson) {
          try {
            body2 = JSON.parse(body2);
          } catch (e) {
          }
        }
        return body2;
      }
      function errorFunc(evt) {
        clearTimeout(timeoutTimer);
        if (!(evt instanceof Error)) {
          evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"));
        }
        evt.statusCode = 0;
        return callback2(evt, failureResponse);
      }
      function loadFunc() {
        if (aborted)
          return;
        var status;
        clearTimeout(timeoutTimer);
        if (options.useXDR && xhr.status === void 0) {
          status = 200;
        } else {
          status = xhr.status === 1223 ? 204 : xhr.status;
        }
        var response = failureResponse;
        var err = null;
        if (status !== 0) {
          response = {
            body: getBody(),
            statusCode: status,
            method,
            headers: {},
            url: uri,
            rawRequest: xhr
          };
          if (xhr.getAllResponseHeaders) {
            response.headers = parseHeaders(xhr.getAllResponseHeaders());
          }
        } else {
          err = new Error("Internal XMLHttpRequest Error");
        }
        return callback2(err, response, response.body);
      }
      var xhr = options.xhr || null;
      if (!xhr) {
        if (options.cors || options.useXDR) {
          xhr = new createXHR.XDomainRequest();
        } else {
          xhr = new createXHR.XMLHttpRequest();
        }
      }
      var key;
      var aborted;
      var uri = xhr.url = options.uri || options.url;
      var method = xhr.method = options.method || "GET";
      var body = options.body || options.data;
      var headers = xhr.headers = options.headers || {};
      var sync = !!options.sync;
      var isJson = false;
      var timeoutTimer;
      var failureResponse = {
        body: void 0,
        headers: {},
        statusCode: 0,
        method,
        url: uri,
        rawRequest: xhr
      };
      if ("json" in options && options.json !== false) {
        isJson = true;
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json");
        if (method !== "GET" && method !== "HEAD") {
          headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json");
          body = JSON.stringify(options.json === true ? body : options.json);
        }
      }
      xhr.onreadystatechange = readystatechange;
      xhr.onload = loadFunc;
      xhr.onerror = errorFunc;
      xhr.onprogress = function() {
      };
      xhr.onabort = function() {
        aborted = true;
      };
      xhr.ontimeout = errorFunc;
      xhr.open(method, uri, !sync, options.username, options.password);
      if (!sync) {
        xhr.withCredentials = !!options.withCredentials;
      }
      if (!sync && options.timeout > 0) {
        timeoutTimer = setTimeout(function() {
          if (aborted)
            return;
          aborted = true;
          xhr.abort("timeout");
          var e = new Error("XMLHttpRequest timeout");
          e.code = "ETIMEDOUT";
          errorFunc(e);
        }, options.timeout);
      }
      if (xhr.setRequestHeader) {
        for (key in headers) {
          if (headers.hasOwnProperty(key)) {
            xhr.setRequestHeader(key, headers[key]);
          }
        }
      } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object");
      }
      if ("responseType" in options) {
        xhr.responseType = options.responseType;
      }
      if ("beforeSend" in options && typeof options.beforeSend === "function") {
        options.beforeSend(xhr);
      }
      xhr.send(body || null);
      return xhr;
    }
    function getXml(xhr) {
      try {
        if (xhr.responseType === "document") {
          return xhr.responseXML;
        }
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
          return xhr.responseXML;
        }
      } catch (e) {
      }
      return null;
    }
    function noop2() {
    }
  });

  // node_modules/global/document.js
  var require_document2 = __commonJS((exports, module) => {
    var topLevel = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
    var minDoc = require_min_document();
    var doccy;
    if (typeof document !== "undefined") {
      doccy = document;
    } else {
      doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"];
      if (!doccy) {
        doccy = topLevel["__GLOBAL_DOCUMENT_CACHE@4"] = minDoc;
      }
    }
    module.exports = doccy;
  });

  // node_modules/videojs-vtt.js/lib/vtt.js
  var require_vtt = __commonJS((exports, module) => {
    var document3 = require_document2();
    var _objCreate = Object.create || function() {
      function F() {
      }
      return function(o) {
        if (arguments.length !== 1) {
          throw new Error("Object.create shim only accepts one parameter.");
        }
        F.prototype = o;
        return new F();
      };
    }();
    function ParsingError(errorData, message) {
      this.name = "ParsingError";
      this.code = errorData.code;
      this.message = message || errorData.message;
    }
    ParsingError.prototype = _objCreate(Error.prototype);
    ParsingError.prototype.constructor = ParsingError;
    ParsingError.Errors = {
      BadSignature: {
        code: 0,
        message: "Malformed WebVTT signature."
      },
      BadTimeStamp: {
        code: 1,
        message: "Malformed time stamp."
      }
    };
    function parseTimeStamp(input) {
      function computeSeconds(h, m2, s, f) {
        return (h | 0) * 3600 + (m2 | 0) * 60 + (s | 0) + (f | 0) / 1e3;
      }
      var m = input.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);
      if (!m) {
        return null;
      }
      if (m[3]) {
        return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
      } else if (m[1] > 59) {
        return computeSeconds(m[1], m[2], 0, m[4]);
      } else {
        return computeSeconds(0, m[1], m[2], m[4]);
      }
    }
    function Settings() {
      this.values = _objCreate(null);
    }
    Settings.prototype = {
      set: function(k, v) {
        if (!this.get(k) && v !== "") {
          this.values[k] = v;
        }
      },
      get: function(k, dflt, defaultKey) {
        if (defaultKey) {
          return this.has(k) ? this.values[k] : dflt[defaultKey];
        }
        return this.has(k) ? this.values[k] : dflt;
      },
      has: function(k) {
        return k in this.values;
      },
      alt: function(k, v, a) {
        for (var n = 0; n < a.length; ++n) {
          if (v === a[n]) {
            this.set(k, v);
            break;
          }
        }
      },
      integer: function(k, v) {
        if (/^-?\d+$/.test(v)) {
          this.set(k, parseInt(v, 10));
        }
      },
      percent: function(k, v) {
        var m;
        if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
          v = parseFloat(v);
          if (v >= 0 && v <= 100) {
            this.set(k, v);
            return true;
          }
        }
        return false;
      }
    };
    function parseOptions(input, callback2, keyValueDelim, groupDelim) {
      var groups = groupDelim ? input.split(groupDelim) : [input];
      for (var i in groups) {
        if (typeof groups[i] !== "string") {
          continue;
        }
        var kv = groups[i].split(keyValueDelim);
        if (kv.length !== 2) {
          continue;
        }
        var k = kv[0];
        var v = kv[1];
        callback2(k, v);
      }
    }
    function parseCue(input, cue, regionList) {
      var oInput = input;
      function consumeTimeStamp() {
        var ts = parseTimeStamp(input);
        if (ts === null) {
          throw new ParsingError(ParsingError.Errors.BadTimeStamp, "Malformed timestamp: " + oInput);
        }
        input = input.replace(/^[^\sa-zA-Z-]+/, "");
        return ts;
      }
      function consumeCueSettings(input2, cue2) {
        var settings = new Settings();
        parseOptions(input2, function(k, v) {
          switch (k) {
            case "region":
              for (var i = regionList.length - 1; i >= 0; i--) {
                if (regionList[i].id === v) {
                  settings.set(k, regionList[i].region);
                  break;
                }
              }
              break;
            case "vertical":
              settings.alt(k, v, ["rl", "lr"]);
              break;
            case "line":
              var vals = v.split(","), vals0 = vals[0];
              settings.integer(k, vals0);
              settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
              settings.alt(k, vals0, ["auto"]);
              if (vals.length === 2) {
                settings.alt("lineAlign", vals[1], ["start", "center", "end"]);
              }
              break;
            case "position":
              vals = v.split(",");
              settings.percent(k, vals[0]);
              if (vals.length === 2) {
                settings.alt("positionAlign", vals[1], ["start", "center", "end"]);
              }
              break;
            case "size":
              settings.percent(k, v);
              break;
            case "align":
              settings.alt(k, v, ["start", "center", "end", "left", "right"]);
              break;
          }
        }, /:/, /\s/);
        cue2.region = settings.get("region", null);
        cue2.vertical = settings.get("vertical", "");
        try {
          cue2.line = settings.get("line", "auto");
        } catch (e) {
        }
        cue2.lineAlign = settings.get("lineAlign", "start");
        cue2.snapToLines = settings.get("snapToLines", true);
        cue2.size = settings.get("size", 100);
        try {
          cue2.align = settings.get("align", "center");
        } catch (e) {
          cue2.align = settings.get("align", "middle");
        }
        try {
          cue2.position = settings.get("position", "auto");
        } catch (e) {
          cue2.position = settings.get("position", {
            start: 0,
            left: 0,
            center: 50,
            middle: 50,
            end: 100,
            right: 100
          }, cue2.align);
        }
        cue2.positionAlign = settings.get("positionAlign", {
          start: "start",
          left: "start",
          center: "center",
          middle: "center",
          end: "end",
          right: "end"
        }, cue2.align);
      }
      function skipWhitespace() {
        input = input.replace(/^\s+/, "");
      }
      skipWhitespace();
      cue.startTime = consumeTimeStamp();
      skipWhitespace();
      if (input.substr(0, 3) !== "-->") {
        throw new ParsingError(ParsingError.Errors.BadTimeStamp, "Malformed time stamp (time stamps must be separated by '-->'): " + oInput);
      }
      input = input.substr(3);
      skipWhitespace();
      cue.endTime = consumeTimeStamp();
      skipWhitespace();
      consumeCueSettings(input, cue);
    }
    var TEXTAREA_ELEMENT = document3.createElement("textarea");
    var TAG_NAME = {
      c: "span",
      i: "i",
      b: "b",
      u: "u",
      ruby: "ruby",
      rt: "rt",
      v: "span",
      lang: "span"
    };
    var DEFAULT_COLOR_CLASS = {
      white: "rgba(255,255,255,1)",
      lime: "rgba(0,255,0,1)",
      cyan: "rgba(0,255,255,1)",
      red: "rgba(255,0,0,1)",
      yellow: "rgba(255,255,0,1)",
      magenta: "rgba(255,0,255,1)",
      blue: "rgba(0,0,255,1)",
      black: "rgba(0,0,0,1)"
    };
    var TAG_ANNOTATION = {
      v: "title",
      lang: "lang"
    };
    var NEEDS_PARENT = {
      rt: "ruby"
    };
    function parseContent(window3, input) {
      function nextToken() {
        if (!input) {
          return null;
        }
        function consume(result) {
          input = input.substr(result.length);
          return result;
        }
        var m2 = input.match(/^([^<]*)(<[^>]*>?)?/);
        return consume(m2[1] ? m2[1] : m2[2]);
      }
      function unescape2(s) {
        TEXTAREA_ELEMENT.innerHTML = s;
        s = TEXTAREA_ELEMENT.textContent;
        TEXTAREA_ELEMENT.textContent = "";
        return s;
      }
      function shouldAdd(current2, element) {
        return !NEEDS_PARENT[element.localName] || NEEDS_PARENT[element.localName] === current2.localName;
      }
      function createElement4(type3, annotation) {
        var tagName = TAG_NAME[type3];
        if (!tagName) {
          return null;
        }
        var element = window3.document.createElement(tagName);
        var name = TAG_ANNOTATION[type3];
        if (name && annotation) {
          element[name] = annotation.trim();
        }
        return element;
      }
      var rootDiv = window3.document.createElement("div"), current = rootDiv, t2, tagStack = [];
      while ((t2 = nextToken()) !== null) {
        if (t2[0] === "<") {
          if (t2[1] === "/") {
            if (tagStack.length && tagStack[tagStack.length - 1] === t2.substr(2).replace(">", "")) {
              tagStack.pop();
              current = current.parentNode;
            }
            continue;
          }
          var ts = parseTimeStamp(t2.substr(1, t2.length - 2));
          var node;
          if (ts) {
            node = window3.document.createProcessingInstruction("timestamp", ts);
            current.appendChild(node);
            continue;
          }
          var m = t2.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
          if (!m) {
            continue;
          }
          node = createElement4(m[1], m[3]);
          if (!node) {
            continue;
          }
          if (!shouldAdd(current, node)) {
            continue;
          }
          if (m[2]) {
            var classes = m[2].split(".");
            classes.forEach(function(cl) {
              var bgColor = /^bg_/.test(cl);
              var colorName = bgColor ? cl.slice(3) : cl;
              if (DEFAULT_COLOR_CLASS.hasOwnProperty(colorName)) {
                var propName = bgColor ? "background-color" : "color";
                var propValue = DEFAULT_COLOR_CLASS[colorName];
                node.style[propName] = propValue;
              }
            });
            node.className = classes.join(" ");
          }
          tagStack.push(m[1]);
          current.appendChild(node);
          current = node;
          continue;
        }
        current.appendChild(window3.document.createTextNode(unescape2(t2)));
      }
      return rootDiv;
    }
    var strongRTLRanges = [
      [1470, 1470],
      [1472, 1472],
      [1475, 1475],
      [1478, 1478],
      [1488, 1514],
      [1520, 1524],
      [1544, 1544],
      [1547, 1547],
      [1549, 1549],
      [1563, 1563],
      [1566, 1610],
      [1645, 1647],
      [1649, 1749],
      [1765, 1766],
      [1774, 1775],
      [1786, 1805],
      [1807, 1808],
      [1810, 1839],
      [1869, 1957],
      [1969, 1969],
      [1984, 2026],
      [2036, 2037],
      [2042, 2042],
      [2048, 2069],
      [2074, 2074],
      [2084, 2084],
      [2088, 2088],
      [2096, 2110],
      [2112, 2136],
      [2142, 2142],
      [2208, 2208],
      [2210, 2220],
      [8207, 8207],
      [64285, 64285],
      [64287, 64296],
      [64298, 64310],
      [64312, 64316],
      [64318, 64318],
      [64320, 64321],
      [64323, 64324],
      [64326, 64449],
      [64467, 64829],
      [64848, 64911],
      [64914, 64967],
      [65008, 65020],
      [65136, 65140],
      [65142, 65276],
      [67584, 67589],
      [67592, 67592],
      [67594, 67637],
      [67639, 67640],
      [67644, 67644],
      [67647, 67669],
      [67671, 67679],
      [67840, 67867],
      [67872, 67897],
      [67903, 67903],
      [67968, 68023],
      [68030, 68031],
      [68096, 68096],
      [68112, 68115],
      [68117, 68119],
      [68121, 68147],
      [68160, 68167],
      [68176, 68184],
      [68192, 68223],
      [68352, 68405],
      [68416, 68437],
      [68440, 68466],
      [68472, 68479],
      [68608, 68680],
      [126464, 126467],
      [126469, 126495],
      [126497, 126498],
      [126500, 126500],
      [126503, 126503],
      [126505, 126514],
      [126516, 126519],
      [126521, 126521],
      [126523, 126523],
      [126530, 126530],
      [126535, 126535],
      [126537, 126537],
      [126539, 126539],
      [126541, 126543],
      [126545, 126546],
      [126548, 126548],
      [126551, 126551],
      [126553, 126553],
      [126555, 126555],
      [126557, 126557],
      [126559, 126559],
      [126561, 126562],
      [126564, 126564],
      [126567, 126570],
      [126572, 126578],
      [126580, 126583],
      [126585, 126588],
      [126590, 126590],
      [126592, 126601],
      [126603, 126619],
      [126625, 126627],
      [126629, 126633],
      [126635, 126651],
      [1114109, 1114109]
    ];
    function isStrongRTLChar(charCode) {
      for (var i = 0; i < strongRTLRanges.length; i++) {
        var currentRange = strongRTLRanges[i];
        if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
          return true;
        }
      }
      return false;
    }
    function determineBidi(cueDiv) {
      var nodeStack = [], text = "", charCode;
      if (!cueDiv || !cueDiv.childNodes) {
        return "ltr";
      }
      function pushNodes(nodeStack2, node) {
        for (var i2 = node.childNodes.length - 1; i2 >= 0; i2--) {
          nodeStack2.push(node.childNodes[i2]);
        }
      }
      function nextTextNode(nodeStack2) {
        if (!nodeStack2 || !nodeStack2.length) {
          return null;
        }
        var node = nodeStack2.pop(), text2 = node.textContent || node.innerText;
        if (text2) {
          var m = text2.match(/^.*(\n|\r)/);
          if (m) {
            nodeStack2.length = 0;
            return m[0];
          }
          return text2;
        }
        if (node.tagName === "ruby") {
          return nextTextNode(nodeStack2);
        }
        if (node.childNodes) {
          pushNodes(nodeStack2, node);
          return nextTextNode(nodeStack2);
        }
      }
      pushNodes(nodeStack, cueDiv);
      while (text = nextTextNode(nodeStack)) {
        for (var i = 0; i < text.length; i++) {
          charCode = text.charCodeAt(i);
          if (isStrongRTLChar(charCode)) {
            return "rtl";
          }
        }
      }
      return "ltr";
    }
    function computeLinePos(cue) {
      if (typeof cue.line === "number" && (cue.snapToLines || cue.line >= 0 && cue.line <= 100)) {
        return cue.line;
      }
      if (!cue.track || !cue.track.textTrackList || !cue.track.textTrackList.mediaElement) {
        return -1;
      }
      var track = cue.track, trackList = track.textTrackList, count = 0;
      for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
        if (trackList[i].mode === "showing") {
          count++;
        }
      }
      return ++count * -1;
    }
    function StyleBox() {
    }
    StyleBox.prototype.applyStyles = function(styles, div) {
      div = div || this.div;
      for (var prop in styles) {
        if (styles.hasOwnProperty(prop)) {
          div.style[prop] = styles[prop];
        }
      }
    };
    StyleBox.prototype.formatStyle = function(val, unit) {
      return val === 0 ? 0 : val + unit;
    };
    function CueStyleBox(window3, cue, styleOptions) {
      StyleBox.call(this);
      this.cue = cue;
      this.cueDiv = parseContent(window3, cue.text);
      var styles = {
        color: "rgba(255, 255, 255, 1)",
        backgroundColor: "rgba(0, 0, 0, 0.8)",
        position: "relative",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        display: "inline",
        writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
        unicodeBidi: "plaintext"
      };
      this.applyStyles(styles, this.cueDiv);
      this.div = window3.document.createElement("div");
      styles = {
        direction: determineBidi(this.cueDiv),
        writingMode: cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl",
        unicodeBidi: "plaintext",
        textAlign: cue.align === "middle" ? "center" : cue.align,
        font: styleOptions.font,
        whiteSpace: "pre-line",
        position: "absolute"
      };
      this.applyStyles(styles);
      this.div.appendChild(this.cueDiv);
      var textPos = 0;
      switch (cue.positionAlign) {
        case "start":
          textPos = cue.position;
          break;
        case "center":
          textPos = cue.position - cue.size / 2;
          break;
        case "end":
          textPos = cue.position - cue.size;
          break;
      }
      if (cue.vertical === "") {
        this.applyStyles({
          left: this.formatStyle(textPos, "%"),
          width: this.formatStyle(cue.size, "%")
        });
      } else {
        this.applyStyles({
          top: this.formatStyle(textPos, "%"),
          height: this.formatStyle(cue.size, "%")
        });
      }
      this.move = function(box) {
        this.applyStyles({
          top: this.formatStyle(box.top, "px"),
          bottom: this.formatStyle(box.bottom, "px"),
          left: this.formatStyle(box.left, "px"),
          right: this.formatStyle(box.right, "px"),
          height: this.formatStyle(box.height, "px"),
          width: this.formatStyle(box.width, "px")
        });
      };
    }
    CueStyleBox.prototype = _objCreate(StyleBox.prototype);
    CueStyleBox.prototype.constructor = CueStyleBox;
    function BoxPosition(obj) {
      var lh, height2, width2, top;
      if (obj.div) {
        height2 = obj.div.offsetHeight;
        width2 = obj.div.offsetWidth;
        top = obj.div.offsetTop;
        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) && rects.getClientRects && rects.getClientRects();
        obj = obj.div.getBoundingClientRect();
        lh = rects ? Math.max(rects[0] && rects[0].height || 0, obj.height / rects.length) : 0;
      }
      this.left = obj.left;
      this.right = obj.right;
      this.top = obj.top || top;
      this.height = obj.height || height2;
      this.bottom = obj.bottom || top + (obj.height || height2);
      this.width = obj.width || width2;
      this.lineHeight = lh !== void 0 ? lh : obj.lineHeight;
    }
    BoxPosition.prototype.move = function(axis, toMove) {
      toMove = toMove !== void 0 ? toMove : this.lineHeight;
      switch (axis) {
        case "+x":
          this.left += toMove;
          this.right += toMove;
          break;
        case "-x":
          this.left -= toMove;
          this.right -= toMove;
          break;
        case "+y":
          this.top += toMove;
          this.bottom += toMove;
          break;
        case "-y":
          this.top -= toMove;
          this.bottom -= toMove;
          break;
      }
    };
    BoxPosition.prototype.overlaps = function(b2) {
      return this.left < b2.right && this.right > b2.left && this.top < b2.bottom && this.bottom > b2.top;
    };
    BoxPosition.prototype.overlapsAny = function(boxes) {
      for (var i = 0; i < boxes.length; i++) {
        if (this.overlaps(boxes[i])) {
          return true;
        }
      }
      return false;
    };
    BoxPosition.prototype.within = function(container) {
      return this.top >= container.top && this.bottom <= container.bottom && this.left >= container.left && this.right <= container.right;
    };
    BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
      switch (axis) {
        case "+x":
          return this.left < container.left;
        case "-x":
          return this.right > container.right;
        case "+y":
          return this.top < container.top;
        case "-y":
          return this.bottom > container.bottom;
      }
    };
    BoxPosition.prototype.intersectPercentage = function(b2) {
      var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)), y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)), intersectArea = x * y;
      return intersectArea / (this.height * this.width);
    };
    BoxPosition.prototype.toCSSCompatValues = function(reference) {
      return {
        top: this.top - reference.top,
        bottom: reference.bottom - this.bottom,
        left: this.left - reference.left,
        right: reference.right - this.right,
        height: this.height,
        width: this.width
      };
    };
    BoxPosition.getSimpleBoxPosition = function(obj) {
      var height2 = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
      var width2 = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
      var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
      obj = obj.div ? obj.div.getBoundingClientRect() : obj.tagName ? obj.getBoundingClientRect() : obj;
      var ret = {
        left: obj.left,
        right: obj.right,
        top: obj.top || top,
        height: obj.height || height2,
        bottom: obj.bottom || top + (obj.height || height2),
        width: obj.width || width2
      };
      return ret;
    };
    function moveBoxToLinePosition(window3, styleBox, containerBox, boxPositions) {
      function findBestPosition(b, axis2) {
        var bestPosition2, specifiedPosition = new BoxPosition(b), percentage = 1;
        for (var i = 0; i < axis2.length; i++) {
          while (b.overlapsOppositeAxis(containerBox, axis2[i]) || b.within(containerBox) && b.overlapsAny(boxPositions)) {
            b.move(axis2[i]);
          }
          if (b.within(containerBox)) {
            return b;
          }
          var p = b.intersectPercentage(containerBox);
          if (percentage > p) {
            bestPosition2 = new BoxPosition(b);
            percentage = p;
          }
          b = new BoxPosition(specifiedPosition);
        }
        return bestPosition2 || specifiedPosition;
      }
      var boxPosition = new BoxPosition(styleBox), cue = styleBox.cue, linePos = computeLinePos(cue), axis = [];
      if (cue.snapToLines) {
        var size;
        switch (cue.vertical) {
          case "":
            axis = ["+y", "-y"];
            size = "height";
            break;
          case "rl":
            axis = ["+x", "-x"];
            size = "width";
            break;
          case "lr":
            axis = ["-x", "+x"];
            size = "width";
            break;
        }
        var step = boxPosition.lineHeight, position = step * Math.round(linePos), maxPosition = containerBox[size] + step, initialAxis = axis[0];
        if (Math.abs(position) > maxPosition) {
          position = position < 0 ? -1 : 1;
          position *= Math.ceil(maxPosition / step) * step;
        }
        if (linePos < 0) {
          position += cue.vertical === "" ? containerBox.height : containerBox.width;
          axis = axis.reverse();
        }
        boxPosition.move(initialAxis, position);
      } else {
        var calculatedPercentage = boxPosition.lineHeight / containerBox.height * 100;
        switch (cue.lineAlign) {
          case "center":
            linePos -= calculatedPercentage / 2;
            break;
          case "end":
            linePos -= calculatedPercentage;
            break;
        }
        switch (cue.vertical) {
          case "":
            styleBox.applyStyles({
              top: styleBox.formatStyle(linePos, "%")
            });
            break;
          case "rl":
            styleBox.applyStyles({
              left: styleBox.formatStyle(linePos, "%")
            });
            break;
          case "lr":
            styleBox.applyStyles({
              right: styleBox.formatStyle(linePos, "%")
            });
            break;
        }
        axis = ["+y", "-x", "+x", "-y"];
        boxPosition = new BoxPosition(styleBox);
      }
      var bestPosition = findBestPosition(boxPosition, axis);
      styleBox.move(bestPosition.toCSSCompatValues(containerBox));
    }
    function WebVTT2() {
    }
    WebVTT2.StringDecoder = function() {
      return {
        decode: function(data) {
          if (!data) {
            return "";
          }
          if (typeof data !== "string") {
            throw new Error("Error - expected string data.");
          }
          return decodeURIComponent(encodeURIComponent(data));
        }
      };
    };
    WebVTT2.convertCueToDOMTree = function(window3, cuetext) {
      if (!window3 || !cuetext) {
        return null;
      }
      return parseContent(window3, cuetext);
    };
    var FONT_SIZE_PERCENT = 0.05;
    var FONT_STYLE = "sans-serif";
    var CUE_BACKGROUND_PADDING = "1.5%";
    WebVTT2.processCues = function(window3, cues, overlay) {
      if (!window3 || !cues || !overlay) {
        return null;
      }
      while (overlay.firstChild) {
        overlay.removeChild(overlay.firstChild);
      }
      var paddedOverlay = window3.document.createElement("div");
      paddedOverlay.style.position = "absolute";
      paddedOverlay.style.left = "0";
      paddedOverlay.style.right = "0";
      paddedOverlay.style.top = "0";
      paddedOverlay.style.bottom = "0";
      paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
      overlay.appendChild(paddedOverlay);
      function shouldCompute(cues2) {
        for (var i2 = 0; i2 < cues2.length; i2++) {
          if (cues2[i2].hasBeenReset || !cues2[i2].displayState) {
            return true;
          }
        }
        return false;
      }
      if (!shouldCompute(cues)) {
        for (var i = 0; i < cues.length; i++) {
          paddedOverlay.appendChild(cues[i].displayState);
        }
        return;
      }
      var boxPositions = [], containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay), fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
      var styleOptions = {
        font: fontSize + "px " + FONT_STYLE
      };
      (function() {
        var styleBox, cue;
        for (var i2 = 0; i2 < cues.length; i2++) {
          cue = cues[i2];
          styleBox = new CueStyleBox(window3, cue, styleOptions);
          paddedOverlay.appendChild(styleBox.div);
          moveBoxToLinePosition(window3, styleBox, containerBox, boxPositions);
          cue.displayState = styleBox.div;
          boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
        }
      })();
    };
    WebVTT2.Parser = function(window3, vttjs, decoder) {
      if (!decoder) {
        decoder = vttjs;
        vttjs = {};
      }
      if (!vttjs) {
        vttjs = {};
      }
      this.window = window3;
      this.vttjs = vttjs;
      this.state = "INITIAL";
      this.buffer = "";
      this.decoder = decoder || new TextDecoder("utf8");
      this.regionList = [];
    };
    WebVTT2.Parser.prototype = {
      reportOrThrowError: function(e) {
        if (e instanceof ParsingError) {
          this.onparsingerror && this.onparsingerror(e);
        } else {
          throw e;
        }
      },
      parse: function(data) {
        var self2 = this;
        if (data) {
          self2.buffer += self2.decoder.decode(data, {stream: true});
        }
        function collectNextLine() {
          var buffer = self2.buffer;
          var pos = 0;
          while (pos < buffer.length && buffer[pos] !== "\r" && buffer[pos] !== "\n") {
            ++pos;
          }
          var line2 = buffer.substr(0, pos);
          if (buffer[pos] === "\r") {
            ++pos;
          }
          if (buffer[pos] === "\n") {
            ++pos;
          }
          self2.buffer = buffer.substr(pos);
          return line2;
        }
        function parseRegion(input) {
          var settings = new Settings();
          parseOptions(input, function(k, v) {
            switch (k) {
              case "id":
                settings.set(k, v);
                break;
              case "width":
                settings.percent(k, v);
                break;
              case "lines":
                settings.integer(k, v);
                break;
              case "regionanchor":
              case "viewportanchor":
                var xy = v.split(",");
                if (xy.length !== 2) {
                  break;
                }
                var anchor = new Settings();
                anchor.percent("x", xy[0]);
                anchor.percent("y", xy[1]);
                if (!anchor.has("x") || !anchor.has("y")) {
                  break;
                }
                settings.set(k + "X", anchor.get("x"));
                settings.set(k + "Y", anchor.get("y"));
                break;
              case "scroll":
                settings.alt(k, v, ["up"]);
                break;
            }
          }, /=/, /\s/);
          if (settings.has("id")) {
            var region = new (self2.vttjs.VTTRegion || self2.window.VTTRegion)();
            region.width = settings.get("width", 100);
            region.lines = settings.get("lines", 3);
            region.regionAnchorX = settings.get("regionanchorX", 0);
            region.regionAnchorY = settings.get("regionanchorY", 100);
            region.viewportAnchorX = settings.get("viewportanchorX", 0);
            region.viewportAnchorY = settings.get("viewportanchorY", 100);
            region.scroll = settings.get("scroll", "");
            self2.onregion && self2.onregion(region);
            self2.regionList.push({
              id: settings.get("id"),
              region
            });
          }
        }
        function parseTimestampMap(input) {
          var settings = new Settings();
          parseOptions(input, function(k, v) {
            switch (k) {
              case "MPEGT":
                settings.integer(k + "S", v);
                break;
              case "LOCA":
                settings.set(k + "L", parseTimeStamp(v));
                break;
            }
          }, /[^\d]:/, /,/);
          self2.ontimestampmap && self2.ontimestampmap({
            MPEGTS: settings.get("MPEGTS"),
            LOCAL: settings.get("LOCAL")
          });
        }
        function parseHeader(input) {
          if (input.match(/X-TIMESTAMP-MAP/)) {
            parseOptions(input, function(k, v) {
              switch (k) {
                case "X-TIMESTAMP-MAP":
                  parseTimestampMap(v);
                  break;
              }
            }, /=/);
          } else {
            parseOptions(input, function(k, v) {
              switch (k) {
                case "Region":
                  parseRegion(v);
                  break;
              }
            }, /:/);
          }
        }
        try {
          var line;
          if (self2.state === "INITIAL") {
            if (!/\r\n|\n/.test(self2.buffer)) {
              return this;
            }
            line = collectNextLine();
            var m = line.match(/^WEBVTT([ \t].*)?$/);
            if (!m || !m[0]) {
              throw new ParsingError(ParsingError.Errors.BadSignature);
            }
            self2.state = "HEADER";
          }
          var alreadyCollectedLine = false;
          while (self2.buffer) {
            if (!/\r\n|\n/.test(self2.buffer)) {
              return this;
            }
            if (!alreadyCollectedLine) {
              line = collectNextLine();
            } else {
              alreadyCollectedLine = false;
            }
            switch (self2.state) {
              case "HEADER":
                if (/:/.test(line)) {
                  parseHeader(line);
                } else if (!line) {
                  self2.state = "ID";
                }
                continue;
              case "NOTE":
                if (!line) {
                  self2.state = "ID";
                }
                continue;
              case "ID":
                if (/^NOTE($|[ \t])/.test(line)) {
                  self2.state = "NOTE";
                  break;
                }
                if (!line) {
                  continue;
                }
                self2.cue = new (self2.vttjs.VTTCue || self2.window.VTTCue)(0, 0, "");
                try {
                  self2.cue.align = "center";
                } catch (e) {
                  self2.cue.align = "middle";
                }
                self2.state = "CUE";
                if (line.indexOf("-->") === -1) {
                  self2.cue.id = line;
                  continue;
                }
              case "CUE":
                try {
                  parseCue(line, self2.cue, self2.regionList);
                } catch (e) {
                  self2.reportOrThrowError(e);
                  self2.cue = null;
                  self2.state = "BADCUE";
                  continue;
                }
                self2.state = "CUETEXT";
                continue;
              case "CUETEXT":
                var hasSubstring = line.indexOf("-->") !== -1;
                if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                  self2.oncue && self2.oncue(self2.cue);
                  self2.cue = null;
                  self2.state = "ID";
                  continue;
                }
                if (self2.cue.text) {
                  self2.cue.text += "\n";
                }
                self2.cue.text += line.replace(/\u2028/g, "\n").replace(/u2029/g, "\n");
                continue;
              case "BADCUE":
                if (!line) {
                  self2.state = "ID";
                }
                continue;
            }
          }
        } catch (e) {
          self2.reportOrThrowError(e);
          if (self2.state === "CUETEXT" && self2.cue && self2.oncue) {
            self2.oncue(self2.cue);
          }
          self2.cue = null;
          self2.state = self2.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
        }
        return this;
      },
      flush: function() {
        var self2 = this;
        try {
          self2.buffer += self2.decoder.decode();
          if (self2.cue || self2.state === "HEADER") {
            self2.buffer += "\n\n";
            self2.parse();
          }
          if (self2.state === "INITIAL") {
            throw new ParsingError(ParsingError.Errors.BadSignature);
          }
        } catch (e) {
          self2.reportOrThrowError(e);
        }
        self2.onflush && self2.onflush();
        return this;
      }
    };
    module.exports = WebVTT2;
  });

  // node_modules/videojs-vtt.js/lib/vttcue.js
  var require_vttcue = __commonJS((exports, module) => {
    var autoKeyword = "auto";
    var directionSetting = {
      "": 1,
      lr: 1,
      rl: 1
    };
    var alignSetting = {
      start: 1,
      center: 1,
      end: 1,
      left: 1,
      right: 1,
      auto: 1,
      "line-left": 1,
      "line-right": 1
    };
    function findDirectionSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var dir = directionSetting[value.toLowerCase()];
      return dir ? value.toLowerCase() : false;
    }
    function findAlignSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var align = alignSetting[value.toLowerCase()];
      return align ? value.toLowerCase() : false;
    }
    function VTTCue(startTime, endTime, text) {
      this.hasBeenReset = false;
      var _id = "";
      var _pauseOnExit = false;
      var _startTime = startTime;
      var _endTime = endTime;
      var _text = text;
      var _region = null;
      var _vertical = "";
      var _snapToLines = true;
      var _line = "auto";
      var _lineAlign = "start";
      var _position = "auto";
      var _positionAlign = "auto";
      var _size = 100;
      var _align = "center";
      Object.defineProperties(this, {
        id: {
          enumerable: true,
          get: function() {
            return _id;
          },
          set: function(value) {
            _id = "" + value;
          }
        },
        pauseOnExit: {
          enumerable: true,
          get: function() {
            return _pauseOnExit;
          },
          set: function(value) {
            _pauseOnExit = !!value;
          }
        },
        startTime: {
          enumerable: true,
          get: function() {
            return _startTime;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("Start time must be set to a number.");
            }
            _startTime = value;
            this.hasBeenReset = true;
          }
        },
        endTime: {
          enumerable: true,
          get: function() {
            return _endTime;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("End time must be set to a number.");
            }
            _endTime = value;
            this.hasBeenReset = true;
          }
        },
        text: {
          enumerable: true,
          get: function() {
            return _text;
          },
          set: function(value) {
            _text = "" + value;
            this.hasBeenReset = true;
          }
        },
        region: {
          enumerable: true,
          get: function() {
            return _region;
          },
          set: function(value) {
            _region = value;
            this.hasBeenReset = true;
          }
        },
        vertical: {
          enumerable: true,
          get: function() {
            return _vertical;
          },
          set: function(value) {
            var setting = findDirectionSetting(value);
            if (setting === false) {
              throw new SyntaxError("Vertical: an invalid or illegal direction string was specified.");
            }
            _vertical = setting;
            this.hasBeenReset = true;
          }
        },
        snapToLines: {
          enumerable: true,
          get: function() {
            return _snapToLines;
          },
          set: function(value) {
            _snapToLines = !!value;
            this.hasBeenReset = true;
          }
        },
        line: {
          enumerable: true,
          get: function() {
            return _line;
          },
          set: function(value) {
            if (typeof value !== "number" && value !== autoKeyword) {
              throw new SyntaxError("Line: an invalid number or illegal string was specified.");
            }
            _line = value;
            this.hasBeenReset = true;
          }
        },
        lineAlign: {
          enumerable: true,
          get: function() {
            return _lineAlign;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              console.warn("lineAlign: an invalid or illegal string was specified.");
            } else {
              _lineAlign = setting;
              this.hasBeenReset = true;
            }
          }
        },
        position: {
          enumerable: true,
          get: function() {
            return _position;
          },
          set: function(value) {
            if (value < 0 || value > 100) {
              throw new Error("Position must be between 0 and 100.");
            }
            _position = value;
            this.hasBeenReset = true;
          }
        },
        positionAlign: {
          enumerable: true,
          get: function() {
            return _positionAlign;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              console.warn("positionAlign: an invalid or illegal string was specified.");
            } else {
              _positionAlign = setting;
              this.hasBeenReset = true;
            }
          }
        },
        size: {
          enumerable: true,
          get: function() {
            return _size;
          },
          set: function(value) {
            if (value < 0 || value > 100) {
              throw new Error("Size must be between 0 and 100.");
            }
            _size = value;
            this.hasBeenReset = true;
          }
        },
        align: {
          enumerable: true,
          get: function() {
            return _align;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              throw new SyntaxError("align: an invalid or illegal alignment string was specified.");
            }
            _align = setting;
            this.hasBeenReset = true;
          }
        }
      });
      this.displayState = void 0;
    }
    VTTCue.prototype.getCueAsHTML = function() {
      return WebVTT.convertCueToDOMTree(window, this.text);
    };
    module.exports = VTTCue;
  });

  // node_modules/videojs-vtt.js/lib/vttregion.js
  var require_vttregion = __commonJS((exports, module) => {
    var scrollSetting = {
      "": true,
      up: true
    };
    function findScrollSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var scroll = scrollSetting[value.toLowerCase()];
      return scroll ? value.toLowerCase() : false;
    }
    function isValidPercentValue(value) {
      return typeof value === "number" && (value >= 0 && value <= 100);
    }
    function VTTRegion() {
      var _width = 100;
      var _lines = 3;
      var _regionAnchorX = 0;
      var _regionAnchorY = 100;
      var _viewportAnchorX = 0;
      var _viewportAnchorY = 100;
      var _scroll = "";
      Object.defineProperties(this, {
        width: {
          enumerable: true,
          get: function() {
            return _width;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("Width must be between 0 and 100.");
            }
            _width = value;
          }
        },
        lines: {
          enumerable: true,
          get: function() {
            return _lines;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("Lines must be set to a number.");
            }
            _lines = value;
          }
        },
        regionAnchorY: {
          enumerable: true,
          get: function() {
            return _regionAnchorY;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("RegionAnchorX must be between 0 and 100.");
            }
            _regionAnchorY = value;
          }
        },
        regionAnchorX: {
          enumerable: true,
          get: function() {
            return _regionAnchorX;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("RegionAnchorY must be between 0 and 100.");
            }
            _regionAnchorX = value;
          }
        },
        viewportAnchorY: {
          enumerable: true,
          get: function() {
            return _viewportAnchorY;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("ViewportAnchorY must be between 0 and 100.");
            }
            _viewportAnchorY = value;
          }
        },
        viewportAnchorX: {
          enumerable: true,
          get: function() {
            return _viewportAnchorX;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("ViewportAnchorX must be between 0 and 100.");
            }
            _viewportAnchorX = value;
          }
        },
        scroll: {
          enumerable: true,
          get: function() {
            return _scroll;
          },
          set: function(value) {
            var setting = findScrollSetting(value);
            if (setting === false) {
              console.warn("Scroll: an invalid or illegal string was specified.");
            } else {
              _scroll = setting;
            }
          }
        }
      });
    }
    module.exports = VTTRegion;
  });

  // node_modules/videojs-vtt.js/lib/browser-index.js
  var require_browser_index = __commonJS((exports, module) => {
    var window3 = require_window2();
    var vttjs = module.exports = {
      WebVTT: require_vtt(),
      VTTCue: require_vttcue(),
      VTTRegion: require_vttregion()
    };
    window3.vttjs = vttjs;
    window3.WebVTT = vttjs.WebVTT;
    var cueShim = vttjs.VTTCue;
    var regionShim = vttjs.VTTRegion;
    var nativeVTTCue = window3.VTTCue;
    var nativeVTTRegion = window3.VTTRegion;
    vttjs.shim = function() {
      window3.VTTCue = cueShim;
      window3.VTTRegion = regionShim;
    };
    vttjs.restore = function() {
      window3.VTTCue = nativeVTTCue;
      window3.VTTRegion = nativeVTTRegion;
    };
    if (!window3.VTTCue) {
      vttjs.shim();
    }
  });

  // node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
  var require_isNativeReflectConstruct = __commonJS((exports, module) => {
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct)
        return false;
      if (Reflect.construct.sham)
        return false;
      if (typeof Proxy === "function")
        return true;
      try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    module.exports = _isNativeReflectConstruct;
  });

  // node_modules/@babel/runtime/helpers/construct.js
  var require_construct = __commonJS((exports, module) => {
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    function _construct2(Parent, args, Class) {
      if (isNativeReflectConstruct()) {
        module.exports = _construct2 = Reflect.construct;
      } else {
        module.exports = _construct2 = function _construct3(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2)
            setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct2.apply(null, arguments);
    }
    module.exports = _construct2;
  });

  // node_modules/@babel/runtime/helpers/inherits.js
  var require_inherits = __commonJS((exports, module) => {
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits2(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: true,
          configurable: true
        }
      });
      if (superClass)
        setPrototypeOf(subClass, superClass);
    }
    module.exports = _inherits2;
  });

  // node_modules/url-toolkit/src/url-toolkit.js
  var require_url_toolkit = __commonJS((exports, module) => {
    (function(root2) {
      var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/;
      var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
      var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
      var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
      var URLToolkit = {
        buildAbsoluteURL: function(baseURL, relativeURL, opts) {
          opts = opts || {};
          baseURL = baseURL.trim();
          relativeURL = relativeURL.trim();
          if (!relativeURL) {
            if (!opts.alwaysNormalize) {
              return baseURL;
            }
            var basePartsForNormalise = URLToolkit.parseURL(baseURL);
            if (!basePartsForNormalise) {
              throw new Error("Error trying to parse base URL.");
            }
            basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
            return URLToolkit.buildURLFromParts(basePartsForNormalise);
          }
          var relativeParts = URLToolkit.parseURL(relativeURL);
          if (!relativeParts) {
            throw new Error("Error trying to parse relative URL.");
          }
          if (relativeParts.scheme) {
            if (!opts.alwaysNormalize) {
              return relativeURL;
            }
            relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
            return URLToolkit.buildURLFromParts(relativeParts);
          }
          var baseParts = URLToolkit.parseURL(baseURL);
          if (!baseParts) {
            throw new Error("Error trying to parse base URL.");
          }
          if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== "/") {
            var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
            baseParts.netLoc = pathParts[1];
            baseParts.path = pathParts[2];
          }
          if (baseParts.netLoc && !baseParts.path) {
            baseParts.path = "/";
          }
          var builtParts = {
            scheme: baseParts.scheme,
            netLoc: relativeParts.netLoc,
            path: null,
            params: relativeParts.params,
            query: relativeParts.query,
            fragment: relativeParts.fragment
          };
          if (!relativeParts.netLoc) {
            builtParts.netLoc = baseParts.netLoc;
            if (relativeParts.path[0] !== "/") {
              if (!relativeParts.path) {
                builtParts.path = baseParts.path;
                if (!relativeParts.params) {
                  builtParts.params = baseParts.params;
                  if (!relativeParts.query) {
                    builtParts.query = baseParts.query;
                  }
                }
              } else {
                var baseURLPath = baseParts.path;
                var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf("/") + 1) + relativeParts.path;
                builtParts.path = URLToolkit.normalizePath(newPath);
              }
            }
          }
          if (builtParts.path === null) {
            builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
          }
          return URLToolkit.buildURLFromParts(builtParts);
        },
        parseURL: function(url) {
          var parts = URL_REGEX.exec(url);
          if (!parts) {
            return null;
          }
          return {
            scheme: parts[1] || "",
            netLoc: parts[2] || "",
            path: parts[3] || "",
            params: parts[4] || "",
            query: parts[5] || "",
            fragment: parts[6] || ""
          };
        },
        normalizePath: function(path) {
          path = path.split("").reverse().join("").replace(SLASH_DOT_REGEX, "");
          while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, "")).length) {
          }
          return path.split("").reverse().join("");
        },
        buildURLFromParts: function(parts) {
          return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
        }
      };
      if (typeof exports === "object" && typeof module === "object")
        module.exports = URLToolkit;
      else if (typeof define === "function" && define.amd)
        define([], function() {
          return URLToolkit;
        });
      else if (typeof exports === "object")
        exports["URLToolkit"] = URLToolkit;
      else
        root2["URLToolkit"] = URLToolkit;
    })(exports);
  });

  // node_modules/@videojs/vhs-utils/dist/resolve-url.js
  var require_resolve_url = __commonJS((exports, module) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var URLToolkit = _interopDefault(require_url_toolkit());
    var window3 = _interopDefault(require_window2());
    var resolveUrl3 = function resolveUrl4(baseUrl, relativeUrl) {
      if (/^[a-z]+:/i.test(relativeUrl)) {
        return relativeUrl;
      }
      if (!/\/\//i.test(baseUrl)) {
        baseUrl = URLToolkit.buildAbsoluteURL(window3.location && window3.location.href || "", baseUrl);
      }
      return URLToolkit.buildAbsoluteURL(baseUrl, relativeUrl);
    };
    module.exports = resolveUrl3;
  });

  // node_modules/@videojs/vhs-utils/dist/stream.js
  var require_stream = __commonJS((exports, module) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    var Stream2 = /* @__PURE__ */ function() {
      function Stream3() {
        this.listeners = {};
      }
      var _proto = Stream3.prototype;
      _proto.on = function on3(type3, listener) {
        if (!this.listeners[type3]) {
          this.listeners[type3] = [];
        }
        this.listeners[type3].push(listener);
      };
      _proto.off = function off2(type3, listener) {
        if (!this.listeners[type3]) {
          return false;
        }
        var index = this.listeners[type3].indexOf(listener);
        this.listeners[type3] = this.listeners[type3].slice(0);
        this.listeners[type3].splice(index, 1);
        return index > -1;
      };
      _proto.trigger = function trigger2(type3) {
        var callbacks = this.listeners[type3];
        if (!callbacks) {
          return;
        }
        if (arguments.length === 2) {
          var length = callbacks.length;
          for (var i = 0; i < length; ++i) {
            callbacks[i].call(this, arguments[1]);
          }
        } else {
          var args = Array.prototype.slice.call(arguments, 1);
          var _length = callbacks.length;
          for (var _i = 0; _i < _length; ++_i) {
            callbacks[_i].apply(this, args);
          }
        }
      };
      _proto.dispose = function dispose3() {
        this.listeners = {};
      };
      _proto.pipe = function pipe(destination) {
        this.on("data", function(data) {
          destination.push(data);
        });
      };
      return Stream3;
    }();
    module.exports = Stream2;
  });

  // node_modules/@videojs/vhs-utils/dist/decode-b64-to-uint8-array.js
  var require_decode_b64_to_uint8_array = __commonJS((exports, module) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var window3 = _interopDefault(require_window2());
    var atob = function atob2(s) {
      return window3.atob ? window3.atob(s) : Buffer.from(s, "base64").toString("binary");
    };
    function decodeB64ToUint8Array3(b64Text) {
      var decodedString = atob(b64Text);
      var array = new Uint8Array(decodedString.length);
      for (var i = 0; i < decodedString.length; i++) {
        array[i] = decodedString.charCodeAt(i);
      }
      return array;
    }
    module.exports = decodeB64ToUint8Array3;
  });

  // node_modules/@videojs/vhs-utils/dist/media-types.js
  var require_media_types = __commonJS((exports) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var MPEGURL_REGEX = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;
    var DASH_REGEX = /^application\/dash\+xml/i;
    var simpleTypeFromSourceType2 = function simpleTypeFromSourceType3(type3) {
      if (MPEGURL_REGEX.test(type3)) {
        return "hls";
      }
      if (DASH_REGEX.test(type3)) {
        return "dash";
      }
      if (type3 === "application/vnd.videojs.vhs+json") {
        return "vhs-json";
      }
      return null;
    };
    exports.simpleTypeFromSourceType = simpleTypeFromSourceType2;
  });

  // node_modules/xmldom/sax.js
  var require_sax = __commonJS((exports) => {
    var nameStartChar = /[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    var nameChar = new RegExp("[\\-\\.0-9" + nameStartChar.source.slice(1, -1) + "\\u00B7\\u0300-\\u036F\\u203F-\\u2040]");
    var tagNamePattern = new RegExp("^" + nameStartChar.source + nameChar.source + "*(?::" + nameStartChar.source + nameChar.source + "*)?$");
    var S_TAG = 0;
    var S_ATTR = 1;
    var S_ATTR_SPACE = 2;
    var S_EQ = 3;
    var S_ATTR_NOQUOT_VALUE = 4;
    var S_ATTR_END = 5;
    var S_TAG_SPACE = 6;
    var S_TAG_CLOSE = 7;
    function XMLReader() {
    }
    XMLReader.prototype = {
      parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        _copy(defaultNSMap, defaultNSMap = {});
        parse3(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
        domBuilder.endDocument();
      }
    };
    function parse3(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
      function fixedFromCharCode(code) {
        if (code > 65535) {
          code -= 65536;
          var surrogate1 = 55296 + (code >> 10), surrogate2 = 56320 + (code & 1023);
          return String.fromCharCode(surrogate1, surrogate2);
        } else {
          return String.fromCharCode(code);
        }
      }
      function entityReplacer(a2) {
        var k = a2.slice(1, -1);
        if (k in entityMap) {
          return entityMap[k];
        } else if (k.charAt(0) === "#") {
          return fixedFromCharCode(parseInt(k.substr(1).replace("x", "0x")));
        } else {
          errorHandler.error("entity not found:" + a2);
          return a2;
        }
      }
      function appendText(end2) {
        if (end2 > start2) {
          var xt = source.substring(start2, end2).replace(/&#?\w+;/g, entityReplacer);
          locator && position(start2);
          domBuilder.characters(xt, 0, end2 - start2);
          start2 = end2;
        }
      }
      function position(p, m) {
        while (p >= lineEnd && (m = linePattern.exec(source))) {
          lineStart = m.index;
          lineEnd = lineStart + m[0].length;
          locator.lineNumber++;
        }
        locator.columnNumber = p - lineStart + 1;
      }
      var lineStart = 0;
      var lineEnd = 0;
      var linePattern = /.*(?:\r\n?|\n)|.*$/g;
      var locator = domBuilder.locator;
      var parseStack = [{currentNSMap: defaultNSMapCopy}];
      var closeMap = {};
      var start2 = 0;
      while (true) {
        try {
          var tagStart = source.indexOf("<", start2);
          if (tagStart < 0) {
            if (!source.substr(start2).match(/^\s*$/)) {
              var doc = domBuilder.doc;
              var text = doc.createTextNode(source.substr(start2));
              doc.appendChild(text);
              domBuilder.currentElement = text;
            }
            return;
          }
          if (tagStart > start2) {
            appendText(tagStart);
          }
          switch (source.charAt(tagStart + 1)) {
            case "/":
              var end = source.indexOf(">", tagStart + 3);
              var tagName = source.substring(tagStart + 2, end);
              var config = parseStack.pop();
              if (end < 0) {
                tagName = source.substring(tagStart + 2).replace(/[\s<].*/, "");
                errorHandler.error("end tag name: " + tagName + " is not complete:" + config.tagName);
                end = tagStart + 1 + tagName.length;
              } else if (tagName.match(/\s</)) {
                tagName = tagName.replace(/[\s<].*/, "");
                errorHandler.error("end tag name: " + tagName + " maybe not complete");
                end = tagStart + 1 + tagName.length;
              }
              var localNSMap = config.localNSMap;
              var endMatch = config.tagName == tagName;
              var endIgnoreCaseMach = endMatch || config.tagName && config.tagName.toLowerCase() == tagName.toLowerCase();
              if (endIgnoreCaseMach) {
                domBuilder.endElement(config.uri, config.localName, tagName);
                if (localNSMap) {
                  for (var prefix in localNSMap) {
                    domBuilder.endPrefixMapping(prefix);
                  }
                }
                if (!endMatch) {
                  errorHandler.fatalError("end tag name: " + tagName + " is not match the current start tagName:" + config.tagName);
                }
              } else {
                parseStack.push(config);
              }
              end++;
              break;
            case "?":
              locator && position(tagStart);
              end = parseInstruction(source, tagStart, domBuilder);
              break;
            case "!":
              locator && position(tagStart);
              end = parseDCC(source, tagStart, domBuilder, errorHandler);
              break;
            default:
              locator && position(tagStart);
              var el = new ElementAttributes();
              var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
              var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler);
              var len = el.length;
              if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {
                el.closed = true;
                if (!entityMap.nbsp) {
                  errorHandler.warning("unclosed xml attribute");
                }
              }
              if (locator && len) {
                var locator2 = copyLocator(locator, {});
                for (var i = 0; i < len; i++) {
                  var a = el[i];
                  position(a.offset);
                  a.locator = copyLocator(locator, {});
                }
                domBuilder.locator = locator2;
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
                domBuilder.locator = locator;
              } else {
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
              }
              if (el.uri === "http://www.w3.org/1999/xhtml" && !el.closed) {
                end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);
              } else {
                end++;
              }
          }
        } catch (e) {
          errorHandler.error("element parse error: " + e);
          end = -1;
        }
        if (end > start2) {
          start2 = end;
        } else {
          appendText(Math.max(tagStart, start2) + 1);
        }
      }
    }
    function copyLocator(f, t2) {
      t2.lineNumber = f.lineNumber;
      t2.columnNumber = f.columnNumber;
      return t2;
    }
    function parseElementStartPart(source, start2, el, currentNSMap, entityReplacer, errorHandler) {
      var attrName;
      var value;
      var p = ++start2;
      var s = S_TAG;
      while (true) {
        var c = source.charAt(p);
        switch (c) {
          case "=":
            if (s === S_ATTR) {
              attrName = source.slice(start2, p);
              s = S_EQ;
            } else if (s === S_ATTR_SPACE) {
              s = S_EQ;
            } else {
              throw new Error("attribute equal must after attrName");
            }
            break;
          case "'":
          case '"':
            if (s === S_EQ || s === S_ATTR) {
              if (s === S_ATTR) {
                errorHandler.warning('attribute value must after "="');
                attrName = source.slice(start2, p);
              }
              start2 = p + 1;
              p = source.indexOf(c, start2);
              if (p > 0) {
                value = source.slice(start2, p).replace(/&#?\w+;/g, entityReplacer);
                el.add(attrName, value, start2 - 1);
                s = S_ATTR_END;
              } else {
                throw new Error("attribute value no end '" + c + "' match");
              }
            } else if (s == S_ATTR_NOQUOT_VALUE) {
              value = source.slice(start2, p).replace(/&#?\w+;/g, entityReplacer);
              el.add(attrName, value, start2);
              errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c + ")!!");
              start2 = p + 1;
              s = S_ATTR_END;
            } else {
              throw new Error('attribute value must after "="');
            }
            break;
          case "/":
            switch (s) {
              case S_TAG:
                el.setTagName(source.slice(start2, p));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                s = S_TAG_CLOSE;
                el.closed = true;
              case S_ATTR_NOQUOT_VALUE:
              case S_ATTR:
              case S_ATTR_SPACE:
                break;
              default:
                throw new Error("attribute invalid close char('/')");
            }
            break;
          case "":
            errorHandler.error("unexpected end of input");
            if (s == S_TAG) {
              el.setTagName(source.slice(start2, p));
            }
            return p;
          case ">":
            switch (s) {
              case S_TAG:
                el.setTagName(source.slice(start2, p));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                break;
              case S_ATTR_NOQUOT_VALUE:
              case S_ATTR:
                value = source.slice(start2, p);
                if (value.slice(-1) === "/") {
                  el.closed = true;
                  value = value.slice(0, -1);
                }
              case S_ATTR_SPACE:
                if (s === S_ATTR_SPACE) {
                  value = attrName;
                }
                if (s == S_ATTR_NOQUOT_VALUE) {
                  errorHandler.warning('attribute "' + value + '" missed quot(")!!');
                  el.add(attrName, value.replace(/&#?\w+;/g, entityReplacer), start2);
                } else {
                  if (currentNSMap[""] !== "http://www.w3.org/1999/xhtml" || !value.match(/^(?:disabled|checked|selected)$/i)) {
                    errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
                  }
                  el.add(value, value, start2);
                }
                break;
              case S_EQ:
                throw new Error("attribute value missed!!");
            }
            return p;
          case "\x80":
            c = " ";
          default:
            if (c <= " ") {
              switch (s) {
                case S_TAG:
                  el.setTagName(source.slice(start2, p));
                  s = S_TAG_SPACE;
                  break;
                case S_ATTR:
                  attrName = source.slice(start2, p);
                  s = S_ATTR_SPACE;
                  break;
                case S_ATTR_NOQUOT_VALUE:
                  var value = source.slice(start2, p).replace(/&#?\w+;/g, entityReplacer);
                  errorHandler.warning('attribute "' + value + '" missed quot(")!!');
                  el.add(attrName, value, start2);
                case S_ATTR_END:
                  s = S_TAG_SPACE;
                  break;
              }
            } else {
              switch (s) {
                case S_ATTR_SPACE:
                  var tagName = el.tagName;
                  if (currentNSMap[""] !== "http://www.w3.org/1999/xhtml" || !attrName.match(/^(?:disabled|checked|selected)$/i)) {
                    errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
                  }
                  el.add(attrName, attrName, start2);
                  start2 = p;
                  s = S_ATTR;
                  break;
                case S_ATTR_END:
                  errorHandler.warning('attribute space is required"' + attrName + '"!!');
                case S_TAG_SPACE:
                  s = S_ATTR;
                  start2 = p;
                  break;
                case S_EQ:
                  s = S_ATTR_NOQUOT_VALUE;
                  start2 = p;
                  break;
                case S_TAG_CLOSE:
                  throw new Error("elements closed character '/' and '>' must be connected to");
              }
            }
        }
        p++;
      }
    }
    function appendElement(el, domBuilder, currentNSMap) {
      var tagName = el.tagName;
      var localNSMap = null;
      var i = el.length;
      while (i--) {
        var a = el[i];
        var qName = a.qName;
        var value = a.value;
        var nsp = qName.indexOf(":");
        if (nsp > 0) {
          var prefix = a.prefix = qName.slice(0, nsp);
          var localName = qName.slice(nsp + 1);
          var nsPrefix = prefix === "xmlns" && localName;
        } else {
          localName = qName;
          prefix = null;
          nsPrefix = qName === "xmlns" && "";
        }
        a.localName = localName;
        if (nsPrefix !== false) {
          if (localNSMap == null) {
            localNSMap = {};
            _copy(currentNSMap, currentNSMap = {});
          }
          currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
          a.uri = "http://www.w3.org/2000/xmlns/";
          domBuilder.startPrefixMapping(nsPrefix, value);
        }
      }
      var i = el.length;
      while (i--) {
        a = el[i];
        var prefix = a.prefix;
        if (prefix) {
          if (prefix === "xml") {
            a.uri = "http://www.w3.org/XML/1998/namespace";
          }
          if (prefix !== "xmlns") {
            a.uri = currentNSMap[prefix || ""];
          }
        }
      }
      var nsp = tagName.indexOf(":");
      if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
      } else {
        prefix = null;
        localName = el.localName = tagName;
      }
      var ns = el.uri = currentNSMap[prefix || ""];
      domBuilder.startElement(ns, localName, tagName, el);
      if (el.closed) {
        domBuilder.endElement(ns, localName, tagName);
        if (localNSMap) {
          for (prefix in localNSMap) {
            domBuilder.endPrefixMapping(prefix);
          }
        }
      } else {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        return true;
      }
    }
    function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
      if (/^(?:script|textarea)$/i.test(tagName)) {
        var elEndStart = source.indexOf("</" + tagName + ">", elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (/[&<]/.test(text)) {
          if (/^script$/i.test(tagName)) {
            domBuilder.characters(text, 0, text.length);
            return elEndStart;
          }
          text = text.replace(/&#?\w+;/g, entityReplacer);
          domBuilder.characters(text, 0, text.length);
          return elEndStart;
        }
      }
      return elStartEnd + 1;
    }
    function fixSelfClosed(source, elStartEnd, tagName, closeMap) {
      var pos = closeMap[tagName];
      if (pos == null) {
        pos = source.lastIndexOf("</" + tagName + ">");
        if (pos < elStartEnd) {
          pos = source.lastIndexOf("</" + tagName);
        }
        closeMap[tagName] = pos;
      }
      return pos < elStartEnd;
    }
    function _copy(source, target) {
      for (var n in source) {
        target[n] = source[n];
      }
    }
    function parseDCC(source, start2, domBuilder, errorHandler) {
      var next = source.charAt(start2 + 2);
      switch (next) {
        case "-":
          if (source.charAt(start2 + 3) === "-") {
            var end = source.indexOf("-->", start2 + 4);
            if (end > start2) {
              domBuilder.comment(source, start2 + 4, end - start2 - 4);
              return end + 3;
            } else {
              errorHandler.error("Unclosed comment");
              return -1;
            }
          } else {
            return -1;
          }
        default:
          if (source.substr(start2 + 3, 6) == "CDATA[") {
            var end = source.indexOf("]]>", start2 + 9);
            domBuilder.startCDATA();
            domBuilder.characters(source, start2 + 9, end - start2 - 9);
            domBuilder.endCDATA();
            return end + 3;
          }
          var matchs = split(source, start2);
          var len = matchs.length;
          if (len > 1 && /!doctype/i.test(matchs[0][0])) {
            var name = matchs[1][0];
            var pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];
            var sysid = len > 4 && matchs[4][0];
            var lastMatch = matchs[len - 1];
            domBuilder.startDTD(name, pubid && pubid.replace(/^(['"])(.*?)\1$/, "$2"), sysid && sysid.replace(/^(['"])(.*?)\1$/, "$2"));
            domBuilder.endDTD();
            return lastMatch.index + lastMatch[0].length;
          }
      }
      return -1;
    }
    function parseInstruction(source, start2, domBuilder) {
      var end = source.indexOf("?>", start2);
      if (end) {
        var match = source.substring(start2, end).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);
        if (match) {
          var len = match[0].length;
          domBuilder.processingInstruction(match[1], match[2]);
          return end + 2;
        } else {
          return -1;
        }
      }
      return -1;
    }
    function ElementAttributes(source) {
    }
    ElementAttributes.prototype = {
      setTagName: function(tagName) {
        if (!tagNamePattern.test(tagName)) {
          throw new Error("invalid tagName:" + tagName);
        }
        this.tagName = tagName;
      },
      add: function(qName, value, offset) {
        if (!tagNamePattern.test(qName)) {
          throw new Error("invalid attribute:" + qName);
        }
        this[this.length++] = {qName, value, offset};
      },
      length: 0,
      getLocalName: function(i) {
        return this[i].localName;
      },
      getLocator: function(i) {
        return this[i].locator;
      },
      getQName: function(i) {
        return this[i].qName;
      },
      getURI: function(i) {
        return this[i].uri;
      },
      getValue: function(i) {
        return this[i].value;
      }
    };
    function _set_proto_(thiz, parent) {
      thiz.__proto__ = parent;
      return thiz;
    }
    if (!(_set_proto_({}, _set_proto_.prototype) instanceof _set_proto_)) {
      _set_proto_ = function(thiz, parent) {
        function p() {
        }
        ;
        p.prototype = parent;
        p = new p();
        for (parent in thiz) {
          p[parent] = thiz[parent];
        }
        return p;
      };
    }
    function split(source, start2) {
      var match;
      var buf = [];
      var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
      reg.lastIndex = start2;
      reg.exec(source);
      while (match = reg.exec(source)) {
        buf.push(match);
        if (match[1])
          return buf;
      }
    }
    exports.XMLReader = XMLReader;
  });

  // node_modules/xmldom/dom.js
  var require_dom = __commonJS((exports) => {
    function copy(src, dest) {
      for (var p in src) {
        dest[p] = src[p];
      }
    }
    function _extends3(Class, Super) {
      var pt = Class.prototype;
      if (Object.create) {
        var ppt = Object.create(Super.prototype);
        pt.__proto__ = ppt;
      }
      if (!(pt instanceof Super)) {
        let t3 = function() {
        };
        var t2 = t3;
        ;
        t3.prototype = Super.prototype;
        t3 = new t3();
        copy(pt, t3);
        Class.prototype = pt = t3;
      }
      if (pt.constructor != Class) {
        if (typeof Class != "function") {
          console.error("unknow Class:" + Class);
        }
        pt.constructor = Class;
      }
    }
    var htmlns = "http://www.w3.org/1999/xhtml";
    var NodeType = {};
    var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;
    var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
    var TEXT_NODE = NodeType.TEXT_NODE = 3;
    var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
    var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
    var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
    var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
    var COMMENT_NODE = NodeType.COMMENT_NODE = 8;
    var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
    var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
    var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
    var NOTATION_NODE = NodeType.NOTATION_NODE = 12;
    var ExceptionCode = {};
    var ExceptionMessage = {};
    var INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = "Index size error", 1);
    var DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = "DOMString size error", 2);
    var HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = "Hierarchy request error", 3);
    var WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = "Wrong document", 4);
    var INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = "Invalid character", 5);
    var NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = "No data allowed", 6);
    var NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = "No modification allowed", 7);
    var NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = "Not found", 8);
    var NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = "Not supported", 9);
    var INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = "Attribute in use", 10);
    var INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = "Invalid state", 11);
    var SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = "Syntax error", 12);
    var INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = "Invalid modification", 13);
    var NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = "Invalid namespace", 14);
    var INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = "Invalid access", 15);
    function DOMException(code, message) {
      if (message instanceof Error) {
        var error = message;
      } else {
        error = this;
        Error.call(this, ExceptionMessage[code]);
        this.message = ExceptionMessage[code];
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, DOMException);
      }
      error.code = code;
      if (message)
        this.message = this.message + ": " + message;
      return error;
    }
    DOMException.prototype = Error.prototype;
    copy(ExceptionCode, DOMException);
    function NodeList() {
    }
    NodeList.prototype = {
      length: 0,
      item: function(index) {
        return this[index] || null;
      },
      toString: function(isHTML, nodeFilter) {
        for (var buf = [], i = 0; i < this.length; i++) {
          serializeToString(this[i], buf, isHTML, nodeFilter);
        }
        return buf.join("");
      }
    };
    function LiveNodeList(node, refresh) {
      this._node = node;
      this._refresh = refresh;
      _updateLiveList(this);
    }
    function _updateLiveList(list) {
      var inc = list._node._inc || list._node.ownerDocument._inc;
      if (list._inc != inc) {
        var ls = list._refresh(list._node);
        __set__(list, "length", ls.length);
        copy(ls, list);
        list._inc = inc;
      }
    }
    LiveNodeList.prototype.item = function(i) {
      _updateLiveList(this);
      return this[i];
    };
    _extends3(LiveNodeList, NodeList);
    function NamedNodeMap() {
    }
    function _findNodeIndex(list, node) {
      var i = list.length;
      while (i--) {
        if (list[i] === node) {
          return i;
        }
      }
    }
    function _addNamedNode(el, list, newAttr, oldAttr) {
      if (oldAttr) {
        list[_findNodeIndex(list, oldAttr)] = newAttr;
      } else {
        list[list.length++] = newAttr;
      }
      if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
          oldAttr && _onRemoveAttribute(doc, el, oldAttr);
          _onAddAttribute(doc, el, newAttr);
        }
      }
    }
    function _removeNamedNode(el, list, attr) {
      var i = _findNodeIndex(list, attr);
      if (i >= 0) {
        var lastIndex = list.length - 1;
        while (i < lastIndex) {
          list[i] = list[++i];
        }
        list.length = lastIndex;
        if (el) {
          var doc = el.ownerDocument;
          if (doc) {
            _onRemoveAttribute(doc, el, attr);
            attr.ownerElement = null;
          }
        }
      } else {
        throw DOMException(NOT_FOUND_ERR, new Error(el.tagName + "@" + attr));
      }
    }
    NamedNodeMap.prototype = {
      length: 0,
      item: NodeList.prototype.item,
      getNamedItem: function(key) {
        var i = this.length;
        while (i--) {
          var attr = this[i];
          if (attr.nodeName == key) {
            return attr;
          }
        }
      },
      setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el != this._ownerElement) {
          throw new DOMException(INUSE_ATTRIBUTE_ERR);
        }
        var oldAttr = this.getNamedItem(attr.nodeName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      setNamedItemNS: function(attr) {
        var el = attr.ownerElement, oldAttr;
        if (el && el != this._ownerElement) {
          throw new DOMException(INUSE_ATTRIBUTE_ERR);
        }
        oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      removeNamedItem: function(key) {
        var attr = this.getNamedItem(key);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      getNamedItemNS: function(namespaceURI, localName) {
        var i = this.length;
        while (i--) {
          var node = this[i];
          if (node.localName == localName && node.namespaceURI == namespaceURI) {
            return node;
          }
        }
        return null;
      }
    };
    function DOMImplementation(features) {
      this._features = {};
      if (features) {
        for (var feature in features) {
          this._features = features[feature];
        }
      }
    }
    DOMImplementation.prototype = {
      hasFeature: function(feature, version2) {
        var versions = this._features[feature.toLowerCase()];
        if (versions && (!version2 || version2 in versions)) {
          return true;
        } else {
          return false;
        }
      },
      createDocument: function(namespaceURI, qualifiedName, doctype) {
        var doc = new Document();
        doc.implementation = this;
        doc.childNodes = new NodeList();
        doc.doctype = doctype;
        if (doctype) {
          doc.appendChild(doctype);
        }
        if (qualifiedName) {
          var root2 = doc.createElementNS(namespaceURI, qualifiedName);
          doc.appendChild(root2);
        }
        return doc;
      },
      createDocumentType: function(qualifiedName, publicId, systemId) {
        var node = new DocumentType();
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId;
        node.systemId = systemId;
        return node;
      }
    };
    function Node() {
    }
    Node.prototype = {
      firstChild: null,
      lastChild: null,
      previousSibling: null,
      nextSibling: null,
      attributes: null,
      parentNode: null,
      childNodes: null,
      ownerDocument: null,
      nodeValue: null,
      namespaceURI: null,
      prefix: null,
      localName: null,
      insertBefore: function(newChild, refChild) {
        return _insertBefore(this, newChild, refChild);
      },
      replaceChild: function(newChild, oldChild) {
        this.insertBefore(newChild, oldChild);
        if (oldChild) {
          this.removeChild(oldChild);
        }
      },
      removeChild: function(oldChild) {
        return _removeChild(this, oldChild);
      },
      appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
      },
      hasChildNodes: function() {
        return this.firstChild != null;
      },
      cloneNode: function(deep) {
        return cloneNode(this.ownerDocument || this, this, deep);
      },
      normalize: function() {
        var child = this.firstChild;
        while (child) {
          var next = child.nextSibling;
          if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {
            this.removeChild(next);
            child.appendData(next.data);
          } else {
            child.normalize();
            child = next;
          }
        }
      },
      isSupported: function(feature, version2) {
        return this.ownerDocument.implementation.hasFeature(feature, version2);
      },
      hasAttributes: function() {
        return this.attributes.length > 0;
      },
      lookupPrefix: function(namespaceURI) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            for (var n in map) {
              if (map[n] == namespaceURI) {
                return n;
              }
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      lookupNamespaceURI: function(prefix) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            if (prefix in map) {
              return map[prefix];
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return prefix == null;
      }
    };
    function _xmlEncoder(c) {
      return c == "<" && "&lt;" || c == ">" && "&gt;" || c == "&" && "&amp;" || c == '"' && "&quot;" || "&#" + c.charCodeAt() + ";";
    }
    copy(NodeType, Node);
    copy(NodeType, Node.prototype);
    function _visitNode(node, callback2) {
      if (callback2(node)) {
        return true;
      }
      if (node = node.firstChild) {
        do {
          if (_visitNode(node, callback2)) {
            return true;
          }
        } while (node = node.nextSibling);
      }
    }
    function Document() {
    }
    function _onAddAttribute(doc, el, newAttr) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns == "http://www.w3.org/2000/xmlns/") {
        el._nsMap[newAttr.prefix ? newAttr.localName : ""] = newAttr.value;
      }
    }
    function _onRemoveAttribute(doc, el, newAttr, remove2) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns == "http://www.w3.org/2000/xmlns/") {
        delete el._nsMap[newAttr.prefix ? newAttr.localName : ""];
      }
    }
    function _onUpdateChild(doc, el, newChild) {
      if (doc && doc._inc) {
        doc._inc++;
        var cs = el.childNodes;
        if (newChild) {
          cs[cs.length++] = newChild;
        } else {
          var child = el.firstChild;
          var i = 0;
          while (child) {
            cs[i++] = child;
            child = child.nextSibling;
          }
          cs.length = i;
        }
      }
    }
    function _removeChild(parentNode, child) {
      var previous = child.previousSibling;
      var next = child.nextSibling;
      if (previous) {
        previous.nextSibling = next;
      } else {
        parentNode.firstChild = next;
      }
      if (next) {
        next.previousSibling = previous;
      } else {
        parentNode.lastChild = previous;
      }
      _onUpdateChild(parentNode.ownerDocument, parentNode);
      return child;
    }
    function _insertBefore(parentNode, newChild, nextChild) {
      var cp = newChild.parentNode;
      if (cp) {
        cp.removeChild(newChild);
      }
      if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var newFirst = newChild.firstChild;
        if (newFirst == null) {
          return newChild;
        }
        var newLast = newChild.lastChild;
      } else {
        newFirst = newLast = newChild;
      }
      var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;
      newFirst.previousSibling = pre;
      newLast.nextSibling = nextChild;
      if (pre) {
        pre.nextSibling = newFirst;
      } else {
        parentNode.firstChild = newFirst;
      }
      if (nextChild == null) {
        parentNode.lastChild = newLast;
      } else {
        nextChild.previousSibling = newLast;
      }
      do {
        newFirst.parentNode = parentNode;
      } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
      _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);
      if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
        newChild.firstChild = newChild.lastChild = null;
      }
      return newChild;
    }
    function _appendSingleChild(parentNode, newChild) {
      var cp = newChild.parentNode;
      if (cp) {
        var pre = parentNode.lastChild;
        cp.removeChild(newChild);
        var pre = parentNode.lastChild;
      }
      var pre = parentNode.lastChild;
      newChild.parentNode = parentNode;
      newChild.previousSibling = pre;
      newChild.nextSibling = null;
      if (pre) {
        pre.nextSibling = newChild;
      } else {
        parentNode.firstChild = newChild;
      }
      parentNode.lastChild = newChild;
      _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);
      return newChild;
    }
    Document.prototype = {
      nodeName: "#document",
      nodeType: DOCUMENT_NODE,
      doctype: null,
      documentElement: null,
      _inc: 1,
      insertBefore: function(newChild, refChild) {
        if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {
          var child = newChild.firstChild;
          while (child) {
            var next = child.nextSibling;
            this.insertBefore(child, refChild);
            child = next;
          }
          return newChild;
        }
        if (this.documentElement == null && newChild.nodeType == ELEMENT_NODE) {
          this.documentElement = newChild;
        }
        return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;
      },
      removeChild: function(oldChild) {
        if (this.documentElement == oldChild) {
          this.documentElement = null;
        }
        return _removeChild(this, oldChild);
      },
      importNode: function(importedNode, deep) {
        return importNode(this, importedNode, deep);
      },
      getElementById: function(id) {
        var rtv = null;
        _visitNode(this.documentElement, function(node) {
          if (node.nodeType == ELEMENT_NODE) {
            if (node.getAttribute("id") == id) {
              rtv = node;
              return true;
            }
          }
        });
        return rtv;
      },
      createElement: function(tagName) {
        var node = new Element();
        node.ownerDocument = this;
        node.nodeName = tagName;
        node.tagName = tagName;
        node.childNodes = new NodeList();
        var attrs = node.attributes = new NamedNodeMap();
        attrs._ownerElement = node;
        return node;
      },
      createDocumentFragment: function() {
        var node = new DocumentFragment();
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        return node;
      },
      createTextNode: function(data) {
        var node = new Text();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createComment: function(data) {
        var node = new Comment();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createCDATASection: function(data) {
        var node = new CDATASection();
        node.ownerDocument = this;
        node.appendData(data);
        return node;
      },
      createProcessingInstruction: function(target, data) {
        var node = new ProcessingInstruction();
        node.ownerDocument = this;
        node.tagName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
      },
      createAttribute: function(name) {
        var node = new Attr();
        node.ownerDocument = this;
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
      },
      createEntityReference: function(name) {
        var node = new EntityReference();
        node.ownerDocument = this;
        node.nodeName = name;
        return node;
      },
      createElementNS: function(namespaceURI, qualifiedName) {
        var node = new Element();
        var pl = qualifiedName.split(":");
        var attrs = node.attributes = new NamedNodeMap();
        node.childNodes = new NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = namespaceURI;
        if (pl.length == 2) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else {
          node.localName = qualifiedName;
        }
        attrs._ownerElement = node;
        return node;
      },
      createAttributeNS: function(namespaceURI, qualifiedName) {
        var node = new Attr();
        var pl = qualifiedName.split(":");
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.namespaceURI = namespaceURI;
        node.specified = true;
        if (pl.length == 2) {
          node.prefix = pl[0];
          node.localName = pl[1];
        } else {
          node.localName = qualifiedName;
        }
        return node;
      }
    };
    _extends3(Document, Node);
    function Element() {
      this._nsMap = {};
    }
    Element.prototype = {
      nodeType: ELEMENT_NODE,
      hasAttribute: function(name) {
        return this.getAttributeNode(name) != null;
      },
      getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr && attr.value || "";
      },
      getAttributeNode: function(name) {
        return this.attributes.getNamedItem(name);
      },
      setAttribute: function(name, value) {
        var attr = this.ownerDocument.createAttribute(name);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
      },
      appendChild: function(newChild) {
        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
          return this.insertBefore(newChild, null);
        } else {
          return _appendSingleChild(this, newChild);
        }
      },
      setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
      },
      setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
      },
      removeAttributeNode: function(oldAttr) {
        return this.attributes.removeNamedItem(oldAttr.nodeName);
      },
      removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
      },
      hasAttributeNS: function(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName) != null;
      },
      getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr && attr.value || "";
      },
      setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
        attr.value = attr.nodeValue = "" + value;
        this.setAttributeNode(attr);
      },
      getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
      },
      getElementsByTagName: function(tagName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === "*" || node.tagName == tagName)) {
              ls.push(node);
            }
          });
          return ls;
        });
      },
      getElementsByTagNameNS: function(namespaceURI, localName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === "*" || node.namespaceURI === namespaceURI) && (localName === "*" || node.localName == localName)) {
              ls.push(node);
            }
          });
          return ls;
        });
      }
    };
    Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
    Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
    _extends3(Element, Node);
    function Attr() {
    }
    Attr.prototype.nodeType = ATTRIBUTE_NODE;
    _extends3(Attr, Node);
    function CharacterData() {
    }
    CharacterData.prototype = {
      data: "",
      substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
      },
      appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
      },
      insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
      },
      appendChild: function(newChild) {
        throw new Error(ExceptionMessage[HIERARCHY_REQUEST_ERR]);
      },
      deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
      },
      replaceData: function(offset, count, text) {
        var start2 = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start2 + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
      }
    };
    _extends3(CharacterData, Node);
    function Text() {
    }
    Text.prototype = {
      nodeName: "#text",
      nodeType: TEXT_NODE,
      splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        if (this.parentNode) {
          this.parentNode.insertBefore(newNode, this.nextSibling);
        }
        return newNode;
      }
    };
    _extends3(Text, CharacterData);
    function Comment() {
    }
    Comment.prototype = {
      nodeName: "#comment",
      nodeType: COMMENT_NODE
    };
    _extends3(Comment, CharacterData);
    function CDATASection() {
    }
    CDATASection.prototype = {
      nodeName: "#cdata-section",
      nodeType: CDATA_SECTION_NODE
    };
    _extends3(CDATASection, CharacterData);
    function DocumentType() {
    }
    DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
    _extends3(DocumentType, Node);
    function Notation() {
    }
    Notation.prototype.nodeType = NOTATION_NODE;
    _extends3(Notation, Node);
    function Entity() {
    }
    Entity.prototype.nodeType = ENTITY_NODE;
    _extends3(Entity, Node);
    function EntityReference() {
    }
    EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
    _extends3(EntityReference, Node);
    function DocumentFragment() {
    }
    DocumentFragment.prototype.nodeName = "#document-fragment";
    DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
    _extends3(DocumentFragment, Node);
    function ProcessingInstruction() {
    }
    ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
    _extends3(ProcessingInstruction, Node);
    function XMLSerializer() {
    }
    XMLSerializer.prototype.serializeToString = function(node, isHtml, nodeFilter) {
      return nodeSerializeToString.call(node, isHtml, nodeFilter);
    };
    Node.prototype.toString = nodeSerializeToString;
    function nodeSerializeToString(isHtml, nodeFilter) {
      var buf = [];
      var refNode = this.nodeType == 9 ? this.documentElement : this;
      var prefix = refNode.prefix;
      var uri = refNode.namespaceURI;
      if (uri && prefix == null) {
        var prefix = refNode.lookupPrefix(uri);
        if (prefix == null) {
          var visibleNamespaces = [
            {namespace: uri, prefix: null}
          ];
        }
      }
      serializeToString(this, buf, isHtml, nodeFilter, visibleNamespaces);
      return buf.join("");
    }
    function needNamespaceDefine(node, isHTML, visibleNamespaces) {
      var prefix = node.prefix || "";
      var uri = node.namespaceURI;
      if (!prefix && !uri) {
        return false;
      }
      if (prefix === "xml" && uri === "http://www.w3.org/XML/1998/namespace" || uri == "http://www.w3.org/2000/xmlns/") {
        return false;
      }
      var i = visibleNamespaces.length;
      while (i--) {
        var ns = visibleNamespaces[i];
        if (ns.prefix == prefix) {
          return ns.namespace != uri;
        }
      }
      return true;
    }
    function serializeToString(node, buf, isHTML, nodeFilter, visibleNamespaces) {
      if (nodeFilter) {
        node = nodeFilter(node);
        if (node) {
          if (typeof node == "string") {
            buf.push(node);
            return;
          }
        } else {
          return;
        }
      }
      switch (node.nodeType) {
        case ELEMENT_NODE:
          if (!visibleNamespaces)
            visibleNamespaces = [];
          var startVisibleNamespaces = visibleNamespaces.length;
          var attrs = node.attributes;
          var len = attrs.length;
          var child = node.firstChild;
          var nodeName = node.tagName;
          isHTML = htmlns === node.namespaceURI || isHTML;
          buf.push("<", nodeName);
          for (var i = 0; i < len; i++) {
            var attr = attrs.item(i);
            if (attr.prefix == "xmlns") {
              visibleNamespaces.push({prefix: attr.localName, namespace: attr.value});
            } else if (attr.nodeName == "xmlns") {
              visibleNamespaces.push({prefix: "", namespace: attr.value});
            }
          }
          for (var i = 0; i < len; i++) {
            var attr = attrs.item(i);
            if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
              var prefix = attr.prefix || "";
              var uri = attr.namespaceURI;
              var ns = prefix ? " xmlns:" + prefix : " xmlns";
              buf.push(ns, '="', uri, '"');
              visibleNamespaces.push({prefix, namespace: uri});
            }
            serializeToString(attr, buf, isHTML, nodeFilter, visibleNamespaces);
          }
          if (needNamespaceDefine(node, isHTML, visibleNamespaces)) {
            var prefix = node.prefix || "";
            var uri = node.namespaceURI;
            var ns = prefix ? " xmlns:" + prefix : " xmlns";
            buf.push(ns, '="', uri, '"');
            visibleNamespaces.push({prefix, namespace: uri});
          }
          if (child || isHTML && !/^(?:meta|link|img|br|hr|input)$/i.test(nodeName)) {
            buf.push(">");
            if (isHTML && /^script$/i.test(nodeName)) {
              while (child) {
                if (child.data) {
                  buf.push(child.data);
                } else {
                  serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
                }
                child = child.nextSibling;
              }
            } else {
              while (child) {
                serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
                child = child.nextSibling;
              }
            }
            buf.push("</", nodeName, ">");
          } else {
            buf.push("/>");
          }
          return;
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          var child = node.firstChild;
          while (child) {
            serializeToString(child, buf, isHTML, nodeFilter, visibleNamespaces);
            child = child.nextSibling;
          }
          return;
        case ATTRIBUTE_NODE:
          return buf.push(" ", node.name, '="', node.value.replace(/[<&"]/g, _xmlEncoder), '"');
        case TEXT_NODE:
          return buf.push(node.data.replace(/[<&]/g, _xmlEncoder));
        case CDATA_SECTION_NODE:
          return buf.push("<![CDATA[", node.data, "]]>");
        case COMMENT_NODE:
          return buf.push("<!--", node.data, "-->");
        case DOCUMENT_TYPE_NODE:
          var pubid = node.publicId;
          var sysid = node.systemId;
          buf.push("<!DOCTYPE ", node.name);
          if (pubid) {
            buf.push(' PUBLIC "', pubid);
            if (sysid && sysid != ".") {
              buf.push('" "', sysid);
            }
            buf.push('">');
          } else if (sysid && sysid != ".") {
            buf.push(' SYSTEM "', sysid, '">');
          } else {
            var sub = node.internalSubset;
            if (sub) {
              buf.push(" [", sub, "]");
            }
            buf.push(">");
          }
          return;
        case PROCESSING_INSTRUCTION_NODE:
          return buf.push("<?", node.target, " ", node.data, "?>");
        case ENTITY_REFERENCE_NODE:
          return buf.push("&", node.nodeName, ";");
        default:
          buf.push("??", node.nodeName);
      }
    }
    function importNode(doc, node, deep) {
      var node2;
      switch (node.nodeType) {
        case ELEMENT_NODE:
          node2 = node.cloneNode(false);
          node2.ownerDocument = doc;
        case DOCUMENT_FRAGMENT_NODE:
          break;
        case ATTRIBUTE_NODE:
          deep = true;
          break;
      }
      if (!node2) {
        node2 = node.cloneNode(false);
      }
      node2.ownerDocument = doc;
      node2.parentNode = null;
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(importNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function cloneNode(doc, node, deep) {
      var node2 = new node.constructor();
      for (var n in node) {
        var v = node[n];
        if (typeof v != "object") {
          if (v != node2[n]) {
            node2[n] = v;
          }
        }
      }
      if (node.childNodes) {
        node2.childNodes = new NodeList();
      }
      node2.ownerDocument = doc;
      switch (node2.nodeType) {
        case ELEMENT_NODE:
          var attrs = node.attributes;
          var attrs2 = node2.attributes = new NamedNodeMap();
          var len = attrs.length;
          attrs2._ownerElement = node2;
          for (var i = 0; i < len; i++) {
            node2.setAttributeNode(cloneNode(doc, attrs.item(i), true));
          }
          break;
          ;
        case ATTRIBUTE_NODE:
          deep = true;
      }
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(cloneNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function __set__(object, key, value) {
      object[key] = value;
    }
    try {
      if (Object.defineProperty) {
        let getTextContent2 = function(node) {
          switch (node.nodeType) {
            case ELEMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
              var buf = [];
              node = node.firstChild;
              while (node) {
                if (node.nodeType !== 7 && node.nodeType !== 8) {
                  buf.push(getTextContent2(node));
                }
                node = node.nextSibling;
              }
              return buf.join("");
            default:
              return node.nodeValue;
          }
        };
        var getTextContent = getTextContent2;
        Object.defineProperty(LiveNodeList.prototype, "length", {
          get: function() {
            _updateLiveList(this);
            return this.$$length;
          }
        });
        Object.defineProperty(Node.prototype, "textContent", {
          get: function() {
            return getTextContent2(this);
          },
          set: function(data) {
            switch (this.nodeType) {
              case ELEMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE:
                while (this.firstChild) {
                  this.removeChild(this.firstChild);
                }
                if (data || String(data)) {
                  this.appendChild(this.ownerDocument.createTextNode(data));
                }
                break;
              default:
                this.data = data;
                this.value = data;
                this.nodeValue = data;
            }
          }
        });
        __set__ = function(object, key, value) {
          object["$$" + key] = value;
        };
      }
    } catch (e) {
    }
    exports.DOMImplementation = DOMImplementation;
    exports.XMLSerializer = XMLSerializer;
  });

  // node_modules/xmldom/dom-parser.js
  var require_dom_parser = __commonJS((exports) => {
    function DOMParser2(options) {
      this.options = options || {locator: {}};
    }
    DOMParser2.prototype.parseFromString = function(source, mimeType) {
      var options = this.options;
      var sax = new XMLReader();
      var domBuilder = options.domBuilder || new DOMHandler();
      var errorHandler = options.errorHandler;
      var locator = options.locator;
      var defaultNSMap = options.xmlns || {};
      var entityMap = {lt: "<", gt: ">", amp: "&", quot: '"', apos: "'"};
      if (locator) {
        domBuilder.setDocumentLocator(locator);
      }
      sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);
      sax.domBuilder = options.domBuilder || domBuilder;
      if (/\/x?html?$/.test(mimeType)) {
        entityMap.nbsp = "\xA0";
        entityMap.copy = "\xA9";
        defaultNSMap[""] = "http://www.w3.org/1999/xhtml";
      }
      defaultNSMap.xml = defaultNSMap.xml || "http://www.w3.org/XML/1998/namespace";
      if (source) {
        sax.parse(source, defaultNSMap, entityMap);
      } else {
        sax.errorHandler.error("invalid doc source");
      }
      return domBuilder.doc;
    };
    function buildErrorHandler(errorImpl, domBuilder, locator) {
      if (!errorImpl) {
        if (domBuilder instanceof DOMHandler) {
          return domBuilder;
        }
        errorImpl = domBuilder;
      }
      var errorHandler = {};
      var isCallback = errorImpl instanceof Function;
      locator = locator || {};
      function build(key) {
        var fn = errorImpl[key];
        if (!fn && isCallback) {
          fn = errorImpl.length == 2 ? function(msg) {
            errorImpl(key, msg);
          } : errorImpl;
        }
        errorHandler[key] = fn && function(msg) {
          fn("[xmldom " + key + "]	" + msg + _locator(locator));
        } || function() {
        };
      }
      build("warning");
      build("error");
      build("fatalError");
      return errorHandler;
    }
    function DOMHandler() {
      this.cdata = false;
    }
    function position(locator, node) {
      node.lineNumber = locator.lineNumber;
      node.columnNumber = locator.columnNumber;
    }
    DOMHandler.prototype = {
      startDocument: function() {
        this.doc = new DOMImplementation().createDocument(null, null, null);
        if (this.locator) {
          this.doc.documentURI = this.locator.systemId;
        }
      },
      startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        appendElement(this, el);
        this.currentElement = el;
        this.locator && position(this.locator, el);
        for (var i = 0; i < len; i++) {
          var namespaceURI = attrs.getURI(i);
          var value = attrs.getValue(i);
          var qName = attrs.getQName(i);
          var attr = doc.createAttributeNS(namespaceURI, qName);
          this.locator && position(attrs.getLocator(i), attr);
          attr.value = attr.nodeValue = value;
          el.setAttributeNode(attr);
        }
      },
      endElement: function(namespaceURI, localName, qName) {
        var current = this.currentElement;
        var tagName = current.tagName;
        this.currentElement = current.parentNode;
      },
      startPrefixMapping: function(prefix, uri) {
      },
      endPrefixMapping: function(prefix) {
      },
      processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && position(this.locator, ins);
        appendElement(this, ins);
      },
      ignorableWhitespace: function(ch, start2, length) {
      },
      characters: function(chars, start2, length) {
        chars = _toString.apply(this, arguments);
        if (chars) {
          if (this.cdata) {
            var charNode = this.doc.createCDATASection(chars);
          } else {
            var charNode = this.doc.createTextNode(chars);
          }
          if (this.currentElement) {
            this.currentElement.appendChild(charNode);
          } else if (/^\s*$/.test(chars)) {
            this.doc.appendChild(charNode);
          }
          this.locator && position(this.locator, charNode);
        }
      },
      skippedEntity: function(name) {
      },
      endDocument: function() {
        this.doc.normalize();
      },
      setDocumentLocator: function(locator) {
        if (this.locator = locator) {
          locator.lineNumber = 0;
        }
      },
      comment: function(chars, start2, length) {
        chars = _toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && position(this.locator, comm);
        appendElement(this, comm);
      },
      startCDATA: function() {
        this.cdata = true;
      },
      endCDATA: function() {
        this.cdata = false;
      },
      startDTD: function(name, publicId, systemId) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
          var dt = impl.createDocumentType(name, publicId, systemId);
          this.locator && position(this.locator, dt);
          appendElement(this, dt);
        }
      },
      warning: function(error) {
        console.warn("[xmldom warning]	" + error, _locator(this.locator));
      },
      error: function(error) {
        console.error("[xmldom error]	" + error, _locator(this.locator));
      },
      fatalError: function(error) {
        console.error("[xmldom fatalError]	" + error, _locator(this.locator));
        throw error;
      }
    };
    function _locator(l) {
      if (l) {
        return "\n@" + (l.systemId || "") + "#[line:" + l.lineNumber + ",col:" + l.columnNumber + "]";
      }
    }
    function _toString(chars, start2, length) {
      if (typeof chars == "string") {
        return chars.substr(start2, length);
      } else {
        if (chars.length >= start2 + length || start2) {
          return new java.lang.String(chars, start2, length) + "";
        }
        return chars;
      }
    }
    "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g, function(key) {
      DOMHandler.prototype[key] = function() {
        return null;
      };
    });
    function appendElement(hander, node) {
      if (!hander.currentElement) {
        hander.doc.appendChild(node);
      } else {
        hander.currentElement.appendChild(node);
      }
    }
    var XMLReader = require_sax().XMLReader;
    var DOMImplementation = exports.DOMImplementation = require_dom().DOMImplementation;
    exports.XMLSerializer = require_dom().XMLSerializer;
    exports.DOMParser = DOMParser2;
  });

  // node_modules/mux.js/lib/tools/parse-sidx.js
  var require_parse_sidx = __commonJS((exports, module) => {
    var MAX_UINT32 = Math.pow(2, 32);
    var parseSidx2 = function(data) {
      var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
        version: data[0],
        flags: new Uint8Array(data.subarray(1, 4)),
        references: [],
        referenceId: view.getUint32(4),
        timescale: view.getUint32(8)
      }, i = 12;
      if (result.version === 0) {
        result.earliestPresentationTime = view.getUint32(i);
        result.firstOffset = view.getUint32(i + 4);
        i += 8;
      } else {
        result.earliestPresentationTime = view.getUint32(i) * MAX_UINT32 + view.getUint32(i + 4);
        result.firstOffset = view.getUint32(i + 8) * MAX_UINT32 + view.getUint32(i + 12);
        i += 16;
      }
      i += 2;
      var referenceCount = view.getUint16(i);
      i += 2;
      for (; referenceCount > 0; i += 12, referenceCount--) {
        result.references.push({
          referenceType: (data[i] & 128) >>> 7,
          referencedSize: view.getUint32(i) & 2147483647,
          subsegmentDuration: view.getUint32(i + 4),
          startsWithSap: !!(data[i + 8] & 128),
          sapType: (data[i + 8] & 112) >>> 4,
          sapDeltaTime: view.getUint32(i + 8) & 268435455
        });
      }
      return result;
    };
    module.exports = parseSidx2;
  });

  // node_modules/@videojs/vhs-utils/dist/containers.js
  var require_containers = __commonJS((exports) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var toUint82 = function toUint83(bytes) {
      return bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);
    };
    var bytesToString = function bytesToString2(bytes) {
      if (!bytes) {
        return "";
      }
      bytes = Array.prototype.slice.call(bytes);
      var string = String.fromCharCode.apply(null, toUint82(bytes));
      try {
        return decodeURIComponent(escape(string));
      } catch (e) {
      }
      return string;
    };
    var id3Size = function id3Size2(bytes, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      bytes = toUint82(bytes);
      var returnSize = bytes[offset + 6] << 21 | bytes[offset + 7] << 14 | bytes[offset + 8] << 7 | bytes[offset + 9];
      var flags = bytes[offset + 5];
      var footerPresent = (flags & 16) >> 4;
      if (footerPresent) {
        return returnSize + 20;
      }
      return returnSize + 10;
    };
    var getId3Offset2 = function getId3Offset3(bytes, offset) {
      if (offset === void 0) {
        offset = 0;
      }
      bytes = toUint82(bytes);
      if (bytes.length - offset < 10 || bytesToString(bytes.subarray(offset, offset + 3)) !== "ID3") {
        return offset;
      }
      offset += id3Size(bytes, offset);
      return getId3Offset3(bytes, offset);
    };
    var isLikely = {
      aac: function aac(bytes) {
        var offset = getId3Offset2(bytes);
        return bytes.length >= offset + 2 && (bytes[offset] & 255) === 255 && (bytes[offset + 1] & 224) === 224 && (bytes[offset + 1] & 22) === 16;
      },
      mp3: function mp3(bytes) {
        var offset = getId3Offset2(bytes);
        return bytes.length >= offset + 2 && (bytes[offset] & 255) === 255 && (bytes[offset + 1] & 224) === 224 && (bytes[offset + 1] & 6) === 2;
      },
      webm: function webm(bytes) {
        return bytes.length >= 4 && (bytes[0] & 255) === 26 && (bytes[1] & 255) === 69 && (bytes[2] & 255) === 223 && (bytes[3] & 255) === 163;
      },
      mp4: function mp4(bytes) {
        return bytes.length >= 8 && /^(f|s)typ$/.test(bytesToString(bytes.subarray(4, 8))) && !/^ftyp3g$/.test(bytesToString(bytes.subarray(4, 10)));
      },
      "3gp": function gp(bytes) {
        return bytes.length >= 10 && /^ftyp3g$/.test(bytesToString(bytes.subarray(4, 10)));
      },
      ts: function ts(bytes) {
        if (bytes.length < 189 && bytes.length >= 1) {
          return bytes[0] === 71;
        }
        var i = 0;
        while (i + 188 < bytes.length && i < 188) {
          if (bytes[i] === 71 && bytes[i + 188] === 71) {
            return true;
          }
          i += 1;
        }
        return false;
      },
      flac: function flac(bytes) {
        return bytes.length >= 4 && /^fLaC$/.test(bytesToString(bytes.subarray(0, 4)));
      },
      ogg: function ogg(bytes) {
        return bytes.length >= 4 && /^OggS$/.test(bytesToString(bytes.subarray(0, 4)));
      }
    };
    var isLikelyTypes = Object.keys(isLikely).filter(function(t2) {
      return t2 !== "ts";
    }).concat("ts");
    isLikelyTypes.forEach(function(type3) {
      var isLikelyFn = isLikely[type3];
      isLikely[type3] = function(bytes) {
        return isLikelyFn(toUint82(bytes));
      };
    });
    var detectContainerForBytes2 = function detectContainerForBytes3(bytes) {
      bytes = toUint82(bytes);
      for (var i = 0; i < isLikelyTypes.length; i++) {
        var type3 = isLikelyTypes[i];
        if (isLikely[type3](bytes)) {
          return type3;
        }
      }
      return "";
    };
    var isLikelyFmp4MediaSegment2 = function isLikelyFmp4MediaSegment3(bytes) {
      bytes = toUint82(bytes);
      var i = 0;
      while (i < bytes.length) {
        var size = (bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]) >>> 0;
        var type3 = bytesToString(bytes.subarray(i + 4, i + 8));
        if (type3 === "moof") {
          return true;
        }
        if (size === 0 || size + i > bytes.length) {
          i = bytes.length;
        } else {
          i += size;
        }
      }
      return false;
    };
    exports.detectContainerForBytes = detectContainerForBytes2;
    exports.getId3Offset = getId3Offset2;
    exports.id3Size = id3Size;
    exports.isLikely = isLikely;
    exports.isLikelyFmp4MediaSegment = isLikelyFmp4MediaSegment2;
  });

  // node_modules/@videojs/vhs-utils/dist/byte-helpers.js
  var require_byte_helpers = __commonJS((exports) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var isTypedArray = function isTypedArray2(obj) {
      return ArrayBuffer.isView(obj);
    };
    var toUint82 = function toUint83(bytes) {
      return bytes instanceof Uint8Array ? bytes : new Uint8Array(bytes && bytes.buffer || bytes, bytes && bytes.byteOffset || 0, bytes && bytes.byteLength || 0);
    };
    var bytesToString = function bytesToString2(bytes) {
      if (!bytes) {
        return "";
      }
      bytes = Array.prototype.slice.call(bytes);
      var string = String.fromCharCode.apply(null, toUint82(bytes));
      try {
        return decodeURIComponent(escape(string));
      } catch (e) {
      }
      return string;
    };
    var stringToBytes2 = function stringToBytes3(string, stringIsBytes) {
      if (stringIsBytes === void 0) {
        stringIsBytes = false;
      }
      var bytes = [];
      if (typeof string !== "string" && string && typeof string.toString === "function") {
        string = string.toString();
      }
      if (typeof string !== "string") {
        return bytes;
      }
      if (!stringIsBytes) {
        string = unescape(encodeURIComponent(string));
      }
      return string.split("").map(function(s) {
        return s.charCodeAt(0) & 255;
      });
    };
    var concatTypedArrays2 = function concatTypedArrays3() {
      for (var _len = arguments.length, buffers = new Array(_len), _key = 0; _key < _len; _key++) {
        buffers[_key] = arguments[_key];
      }
      var totalLength = buffers.reduce(function(total, buf) {
        var len = buf && (buf.byteLength || buf.length);
        total += len || 0;
        return total;
      }, 0);
      var tempBuffer = new Uint8Array(totalLength);
      var offset = 0;
      buffers.forEach(function(buf) {
        buf = toUint82(buf);
        tempBuffer.set(buf, offset);
        offset += buf.byteLength;
      });
      return tempBuffer;
    };
    exports.bytesToString = bytesToString;
    exports.concatTypedArrays = concatTypedArrays2;
    exports.isTypedArray = isTypedArray;
    exports.stringToBytes = stringToBytes2;
    exports.toUint8 = toUint82;
  });

  // node_modules/mux.js/lib/m2ts/stream-types.js
  var require_stream_types = __commonJS((exports, module) => {
    "use strict";
    module.exports = {
      H264_STREAM_TYPE: 27,
      ADTS_STREAM_TYPE: 15,
      METADATA_STREAM_TYPE: 21
    };
  });

  // node_modules/mux.js/lib/utils/stream.js
  var require_stream2 = __commonJS((exports, module) => {
    "use strict";
    var Stream2 = function() {
      this.init = function() {
        var listeners = {};
        this.on = function(type3, listener) {
          if (!listeners[type3]) {
            listeners[type3] = [];
          }
          listeners[type3] = listeners[type3].concat(listener);
        };
        this.off = function(type3, listener) {
          var index;
          if (!listeners[type3]) {
            return false;
          }
          index = listeners[type3].indexOf(listener);
          listeners[type3] = listeners[type3].slice();
          listeners[type3].splice(index, 1);
          return index > -1;
        };
        this.trigger = function(type3) {
          var callbacks, i, length, args;
          callbacks = listeners[type3];
          if (!callbacks) {
            return;
          }
          if (arguments.length === 2) {
            length = callbacks.length;
            for (i = 0; i < length; ++i) {
              callbacks[i].call(this, arguments[1]);
            }
          } else {
            args = [];
            i = arguments.length;
            for (i = 1; i < arguments.length; ++i) {
              args.push(arguments[i]);
            }
            length = callbacks.length;
            for (i = 0; i < length; ++i) {
              callbacks[i].apply(this, args);
            }
          }
        };
        this.dispose = function() {
          listeners = {};
        };
      };
    };
    Stream2.prototype.pipe = function(destination) {
      this.on("data", function(data) {
        destination.push(data);
      });
      this.on("done", function(flushSource) {
        destination.flush(flushSource);
      });
      this.on("partialdone", function(flushSource) {
        destination.partialFlush(flushSource);
      });
      this.on("endedtimeline", function(flushSource) {
        destination.endTimeline(flushSource);
      });
      this.on("reset", function(flushSource) {
        destination.reset(flushSource);
      });
      return destination;
    };
    Stream2.prototype.push = function(data) {
      this.trigger("data", data);
    };
    Stream2.prototype.flush = function(flushSource) {
      this.trigger("done", flushSource);
    };
    Stream2.prototype.partialFlush = function(flushSource) {
      this.trigger("partialdone", flushSource);
    };
    Stream2.prototype.endTimeline = function(flushSource) {
      this.trigger("endedtimeline", flushSource);
    };
    Stream2.prototype.reset = function(flushSource) {
      this.trigger("reset", flushSource);
    };
    module.exports = Stream2;
  });

  // node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js
  var require_timestamp_rollover_stream = __commonJS((exports, module) => {
    "use strict";
    var Stream2 = require_stream2();
    var MAX_TS = 8589934592;
    var RO_THRESH = 4294967296;
    var TYPE_SHARED = "shared";
    var handleRollover = function(value, reference) {
      var direction = 1;
      if (value > reference) {
        direction = -1;
      }
      while (Math.abs(reference - value) > RO_THRESH) {
        value += direction * MAX_TS;
      }
      return value;
    };
    var TimestampRolloverStream = function(type3) {
      var lastDTS, referenceDTS;
      TimestampRolloverStream.prototype.init.call(this);
      this.type_ = type3 || TYPE_SHARED;
      this.push = function(data) {
        if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {
          return;
        }
        if (referenceDTS === void 0) {
          referenceDTS = data.dts;
        }
        data.dts = handleRollover(data.dts, referenceDTS);
        data.pts = handleRollover(data.pts, referenceDTS);
        lastDTS = data.dts;
        this.trigger("data", data);
      };
      this.flush = function() {
        referenceDTS = lastDTS;
        this.trigger("done");
      };
      this.endTimeline = function() {
        this.flush();
        this.trigger("endedtimeline");
      };
      this.discontinuity = function() {
        referenceDTS = void 0;
        lastDTS = void 0;
      };
      this.reset = function() {
        this.discontinuity();
        this.trigger("reset");
      };
    };
    TimestampRolloverStream.prototype = new Stream2();
    module.exports = {
      TimestampRolloverStream,
      handleRollover
    };
  });

  // node_modules/mux.js/lib/m2ts/probe.js
  var require_probe = __commonJS((exports, module) => {
    "use strict";
    var StreamTypes = require_stream_types();
    var parsePid = function(packet) {
      var pid = packet[1] & 31;
      pid <<= 8;
      pid |= packet[2];
      return pid;
    };
    var parsePayloadUnitStartIndicator = function(packet) {
      return !!(packet[1] & 64);
    };
    var parseAdaptionField = function(packet) {
      var offset = 0;
      if ((packet[3] & 48) >>> 4 > 1) {
        offset += packet[4] + 1;
      }
      return offset;
    };
    var parseType = function(packet, pmtPid) {
      var pid = parsePid(packet);
      if (pid === 0) {
        return "pat";
      } else if (pid === pmtPid) {
        return "pmt";
      } else if (pmtPid) {
        return "pes";
      }
      return null;
    };
    var parsePat = function(packet) {
      var pusi = parsePayloadUnitStartIndicator(packet);
      var offset = 4 + parseAdaptionField(packet);
      if (pusi) {
        offset += packet[offset] + 1;
      }
      return (packet[offset + 10] & 31) << 8 | packet[offset + 11];
    };
    var parsePmt = function(packet) {
      var programMapTable = {};
      var pusi = parsePayloadUnitStartIndicator(packet);
      var payloadOffset = 4 + parseAdaptionField(packet);
      if (pusi) {
        payloadOffset += packet[payloadOffset] + 1;
      }
      if (!(packet[payloadOffset + 5] & 1)) {
        return;
      }
      var sectionLength, tableEnd, programInfoLength;
      sectionLength = (packet[payloadOffset + 1] & 15) << 8 | packet[payloadOffset + 2];
      tableEnd = 3 + sectionLength - 4;
      programInfoLength = (packet[payloadOffset + 10] & 15) << 8 | packet[payloadOffset + 11];
      var offset = 12 + programInfoLength;
      while (offset < tableEnd) {
        var i = payloadOffset + offset;
        programMapTable[(packet[i + 1] & 31) << 8 | packet[i + 2]] = packet[i];
        offset += ((packet[i + 3] & 15) << 8 | packet[i + 4]) + 5;
      }
      return programMapTable;
    };
    var parsePesType = function(packet, programMapTable) {
      var pid = parsePid(packet);
      var type3 = programMapTable[pid];
      switch (type3) {
        case StreamTypes.H264_STREAM_TYPE:
          return "video";
        case StreamTypes.ADTS_STREAM_TYPE:
          return "audio";
        case StreamTypes.METADATA_STREAM_TYPE:
          return "timed-metadata";
        default:
          return null;
      }
    };
    var parsePesTime = function(packet) {
      var pusi = parsePayloadUnitStartIndicator(packet);
      if (!pusi) {
        return null;
      }
      var offset = 4 + parseAdaptionField(packet);
      if (offset >= packet.byteLength) {
        return null;
      }
      var pes = null;
      var ptsDtsFlags;
      ptsDtsFlags = packet[offset + 7];
      if (ptsDtsFlags & 192) {
        pes = {};
        pes.pts = (packet[offset + 9] & 14) << 27 | (packet[offset + 10] & 255) << 20 | (packet[offset + 11] & 254) << 12 | (packet[offset + 12] & 255) << 5 | (packet[offset + 13] & 254) >>> 3;
        pes.pts *= 4;
        pes.pts += (packet[offset + 13] & 6) >>> 1;
        pes.dts = pes.pts;
        if (ptsDtsFlags & 64) {
          pes.dts = (packet[offset + 14] & 14) << 27 | (packet[offset + 15] & 255) << 20 | (packet[offset + 16] & 254) << 12 | (packet[offset + 17] & 255) << 5 | (packet[offset + 18] & 254) >>> 3;
          pes.dts *= 4;
          pes.dts += (packet[offset + 18] & 6) >>> 1;
        }
      }
      return pes;
    };
    var parseNalUnitType = function(type3) {
      switch (type3) {
        case 5:
          return "slice_layer_without_partitioning_rbsp_idr";
        case 6:
          return "sei_rbsp";
        case 7:
          return "seq_parameter_set_rbsp";
        case 8:
          return "pic_parameter_set_rbsp";
        case 9:
          return "access_unit_delimiter_rbsp";
        default:
          return null;
      }
    };
    var videoPacketContainsKeyFrame = function(packet) {
      var offset = 4 + parseAdaptionField(packet);
      var frameBuffer = packet.subarray(offset);
      var frameI = 0;
      var frameSyncPoint = 0;
      var foundKeyFrame = false;
      var nalType;
      for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {
        if (frameBuffer[frameSyncPoint + 2] === 1) {
          frameI = frameSyncPoint + 5;
          break;
        }
      }
      while (frameI < frameBuffer.byteLength) {
        switch (frameBuffer[frameI]) {
          case 0:
            if (frameBuffer[frameI - 1] !== 0) {
              frameI += 2;
              break;
            } else if (frameBuffer[frameI - 2] !== 0) {
              frameI++;
              break;
            }
            if (frameSyncPoint + 3 !== frameI - 2) {
              nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
              if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
                foundKeyFrame = true;
              }
            }
            do {
              frameI++;
            } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);
            frameSyncPoint = frameI - 2;
            frameI += 3;
            break;
          case 1:
            if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {
              frameI += 3;
              break;
            }
            nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
            if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
              foundKeyFrame = true;
            }
            frameSyncPoint = frameI - 2;
            frameI += 3;
            break;
          default:
            frameI += 3;
            break;
        }
      }
      frameBuffer = frameBuffer.subarray(frameSyncPoint);
      frameI -= frameSyncPoint;
      frameSyncPoint = 0;
      if (frameBuffer && frameBuffer.byteLength > 3) {
        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 31);
        if (nalType === "slice_layer_without_partitioning_rbsp_idr") {
          foundKeyFrame = true;
        }
      }
      return foundKeyFrame;
    };
    module.exports = {
      parseType,
      parsePat,
      parsePmt,
      parsePayloadUnitStartIndicator,
      parsePesType,
      parsePesTime,
      videoPacketContainsKeyFrame
    };
  });

  // node_modules/mux.js/lib/aac/utils.js
  var require_utils = __commonJS((exports, module) => {
    "use strict";
    var ADTS_SAMPLING_FREQUENCIES = [
      96e3,
      88200,
      64e3,
      48e3,
      44100,
      32e3,
      24e3,
      22050,
      16e3,
      12e3,
      11025,
      8e3,
      7350
    ];
    var parseId3TagSize = function(header, byteIndex) {
      var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9], flags = header[byteIndex + 5], footerPresent = (flags & 16) >> 4;
      returnSize = returnSize >= 0 ? returnSize : 0;
      if (footerPresent) {
        return returnSize + 20;
      }
      return returnSize + 10;
    };
    var getId3Offset2 = function(data, offset) {
      if (data.length - offset < 10 || data[offset] !== "I".charCodeAt(0) || data[offset + 1] !== "D".charCodeAt(0) || data[offset + 2] !== "3".charCodeAt(0)) {
        return offset;
      }
      offset += parseId3TagSize(data, offset);
      return getId3Offset2(data, offset);
    };
    var isLikelyAacData = function(data) {
      var offset = getId3Offset2(data, 0);
      return data.length >= offset + 2 && (data[offset] & 255) === 255 && (data[offset + 1] & 240) === 240 && (data[offset + 1] & 22) === 16;
    };
    var parseSyncSafeInteger = function(data) {
      return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
    };
    var percentEncode = function(bytes, start2, end) {
      var i, result = "";
      for (i = start2; i < end; i++) {
        result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
      }
      return result;
    };
    var parseIso88591 = function(bytes, start2, end) {
      return unescape(percentEncode(bytes, start2, end));
    };
    var parseAdtsSize = function(header, byteIndex) {
      var lowThree = (header[byteIndex + 5] & 224) >> 5, middle = header[byteIndex + 4] << 3, highTwo = header[byteIndex + 3] & 3 << 11;
      return highTwo | middle | lowThree;
    };
    var parseType = function(header, byteIndex) {
      if (header[byteIndex] === "I".charCodeAt(0) && header[byteIndex + 1] === "D".charCodeAt(0) && header[byteIndex + 2] === "3".charCodeAt(0)) {
        return "timed-metadata";
      } else if (header[byteIndex] & true && (header[byteIndex + 1] & 240) === 240) {
        return "audio";
      }
      return null;
    };
    var parseSampleRate = function(packet) {
      var i = 0;
      while (i + 5 < packet.length) {
        if (packet[i] !== 255 || (packet[i + 1] & 246) !== 240) {
          i++;
          continue;
        }
        return ADTS_SAMPLING_FREQUENCIES[(packet[i + 2] & 60) >>> 2];
      }
      return null;
    };
    var parseAacTimestamp = function(packet) {
      var frameStart, frameSize, frame, frameHeader;
      frameStart = 10;
      if (packet[5] & 64) {
        frameStart += 4;
        frameStart += parseSyncSafeInteger(packet.subarray(10, 14));
      }
      do {
        frameSize = parseSyncSafeInteger(packet.subarray(frameStart + 4, frameStart + 8));
        if (frameSize < 1) {
          return null;
        }
        frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);
        if (frameHeader === "PRIV") {
          frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);
          for (var i = 0; i < frame.byteLength; i++) {
            if (frame[i] === 0) {
              var owner = parseIso88591(frame, 0, i);
              if (owner === "com.apple.streaming.transportStreamTimestamp") {
                var d2 = frame.subarray(i + 1);
                var size = (d2[3] & 1) << 30 | d2[4] << 22 | d2[5] << 14 | d2[6] << 6 | d2[7] >>> 2;
                size *= 4;
                size += d2[7] & 3;
                return size;
              }
              break;
            }
          }
        }
        frameStart += 10;
        frameStart += frameSize;
      } while (frameStart < packet.byteLength);
      return null;
    };
    module.exports = {
      isLikelyAacData,
      parseId3TagSize,
      parseAdtsSize,
      parseType,
      parseSampleRate,
      parseAacTimestamp
    };
  });

  // node_modules/mux.js/lib/utils/clock.js
  var require_clock = __commonJS((exports, module) => {
    var ONE_SECOND_IN_TS2 = 9e4;
    var secondsToVideoTs;
    var secondsToAudioTs;
    var videoTsToSeconds;
    var audioTsToSeconds;
    var audioTsToVideoTs;
    var videoTsToAudioTs;
    var metadataTsToSeconds;
    secondsToVideoTs = function(seconds) {
      return seconds * ONE_SECOND_IN_TS2;
    };
    secondsToAudioTs = function(seconds, sampleRate) {
      return seconds * sampleRate;
    };
    videoTsToSeconds = function(timestamp) {
      return timestamp / ONE_SECOND_IN_TS2;
    };
    audioTsToSeconds = function(timestamp, sampleRate) {
      return timestamp / sampleRate;
    };
    audioTsToVideoTs = function(timestamp, sampleRate) {
      return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
    };
    videoTsToAudioTs = function(timestamp, sampleRate) {
      return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
    };
    metadataTsToSeconds = function(timestamp, timelineStartPts, keepOriginalTimestamps) {
      return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
    };
    module.exports = {
      ONE_SECOND_IN_TS: ONE_SECOND_IN_TS2,
      secondsToVideoTs,
      secondsToAudioTs,
      videoTsToSeconds,
      audioTsToSeconds,
      audioTsToVideoTs,
      videoTsToAudioTs,
      metadataTsToSeconds
    };
  });

  // node_modules/mux.js/lib/tools/ts-inspector.js
  var require_ts_inspector = __commonJS((exports, module) => {
    "use strict";
    var StreamTypes = require_stream_types();
    var handleRollover = require_timestamp_rollover_stream().handleRollover;
    var probe = {};
    probe.ts = require_probe();
    probe.aac = require_utils();
    var ONE_SECOND_IN_TS2 = require_clock().ONE_SECOND_IN_TS;
    var MP2T_PACKET_LENGTH = 188;
    var SYNC_BYTE = 71;
    var parsePsi_ = function(bytes, pmt) {
      var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type3;
      while (endIndex < bytes.byteLength) {
        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
          packet = bytes.subarray(startIndex, endIndex);
          type3 = probe.ts.parseType(packet, pmt.pid);
          switch (type3) {
            case "pat":
              if (!pmt.pid) {
                pmt.pid = probe.ts.parsePat(packet);
              }
              break;
            case "pmt":
              if (!pmt.table) {
                pmt.table = probe.ts.parsePmt(packet);
              }
              break;
            default:
              break;
          }
          if (pmt.pid && pmt.table) {
            return;
          }
          startIndex += MP2T_PACKET_LENGTH;
          endIndex += MP2T_PACKET_LENGTH;
          continue;
        }
        startIndex++;
        endIndex++;
      }
    };
    var parseAudioPes_ = function(bytes, pmt, result) {
      var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type3, pesType, pusi, parsed;
      var endLoop = false;
      while (endIndex <= bytes.byteLength) {
        if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
          packet = bytes.subarray(startIndex, endIndex);
          type3 = probe.ts.parseType(packet, pmt.pid);
          switch (type3) {
            case "pes":
              pesType = probe.ts.parsePesType(packet, pmt.table);
              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
              if (pesType === "audio" && pusi) {
                parsed = probe.ts.parsePesTime(packet);
                if (parsed) {
                  parsed.type = "audio";
                  result.audio.push(parsed);
                  endLoop = true;
                }
              }
              break;
            default:
              break;
          }
          if (endLoop) {
            break;
          }
          startIndex += MP2T_PACKET_LENGTH;
          endIndex += MP2T_PACKET_LENGTH;
          continue;
        }
        startIndex++;
        endIndex++;
      }
      endIndex = bytes.byteLength;
      startIndex = endIndex - MP2T_PACKET_LENGTH;
      endLoop = false;
      while (startIndex >= 0) {
        if (bytes[startIndex] === SYNC_BYTE && (bytes[endIndex] === SYNC_BYTE || endIndex === bytes.byteLength)) {
          packet = bytes.subarray(startIndex, endIndex);
          type3 = probe.ts.parseType(packet, pmt.pid);
          switch (type3) {
            case "pes":
              pesType = probe.ts.parsePesType(packet, pmt.table);
              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
              if (pesType === "audio" && pusi) {
                parsed = probe.ts.parsePesTime(packet);
                if (parsed) {
                  parsed.type = "audio";
                  result.audio.push(parsed);
                  endLoop = true;
                }
              }
              break;
            default:
              break;
          }
          if (endLoop) {
            break;
          }
          startIndex -= MP2T_PACKET_LENGTH;
          endIndex -= MP2T_PACKET_LENGTH;
          continue;
        }
        startIndex--;
        endIndex--;
      }
    };
    var parseVideoPes_ = function(bytes, pmt, result) {
      var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, packet, type3, pesType, pusi, parsed, frame, i, pes;
      var endLoop = false;
      var currentFrame = {
        data: [],
        size: 0
      };
      while (endIndex < bytes.byteLength) {
        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
          packet = bytes.subarray(startIndex, endIndex);
          type3 = probe.ts.parseType(packet, pmt.pid);
          switch (type3) {
            case "pes":
              pesType = probe.ts.parsePesType(packet, pmt.table);
              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
              if (pesType === "video") {
                if (pusi && !endLoop) {
                  parsed = probe.ts.parsePesTime(packet);
                  if (parsed) {
                    parsed.type = "video";
                    result.video.push(parsed);
                    endLoop = true;
                  }
                }
                if (!result.firstKeyFrame) {
                  if (pusi) {
                    if (currentFrame.size !== 0) {
                      frame = new Uint8Array(currentFrame.size);
                      i = 0;
                      while (currentFrame.data.length) {
                        pes = currentFrame.data.shift();
                        frame.set(pes, i);
                        i += pes.byteLength;
                      }
                      if (probe.ts.videoPacketContainsKeyFrame(frame)) {
                        var firstKeyFrame = probe.ts.parsePesTime(frame);
                        if (firstKeyFrame) {
                          result.firstKeyFrame = firstKeyFrame;
                          result.firstKeyFrame.type = "video";
                        } else {
                          console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.");
                        }
                      }
                      currentFrame.size = 0;
                    }
                  }
                  currentFrame.data.push(packet);
                  currentFrame.size += packet.byteLength;
                }
              }
              break;
            default:
              break;
          }
          if (endLoop && result.firstKeyFrame) {
            break;
          }
          startIndex += MP2T_PACKET_LENGTH;
          endIndex += MP2T_PACKET_LENGTH;
          continue;
        }
        startIndex++;
        endIndex++;
      }
      endIndex = bytes.byteLength;
      startIndex = endIndex - MP2T_PACKET_LENGTH;
      endLoop = false;
      while (startIndex >= 0) {
        if (bytes[startIndex] === SYNC_BYTE && bytes[endIndex] === SYNC_BYTE) {
          packet = bytes.subarray(startIndex, endIndex);
          type3 = probe.ts.parseType(packet, pmt.pid);
          switch (type3) {
            case "pes":
              pesType = probe.ts.parsePesType(packet, pmt.table);
              pusi = probe.ts.parsePayloadUnitStartIndicator(packet);
              if (pesType === "video" && pusi) {
                parsed = probe.ts.parsePesTime(packet);
                if (parsed) {
                  parsed.type = "video";
                  result.video.push(parsed);
                  endLoop = true;
                }
              }
              break;
            default:
              break;
          }
          if (endLoop) {
            break;
          }
          startIndex -= MP2T_PACKET_LENGTH;
          endIndex -= MP2T_PACKET_LENGTH;
          continue;
        }
        startIndex--;
        endIndex--;
      }
    };
    var adjustTimestamp_ = function(segmentInfo, baseTimestamp) {
      if (segmentInfo.audio && segmentInfo.audio.length) {
        var audioBaseTimestamp = baseTimestamp;
        if (typeof audioBaseTimestamp === "undefined") {
          audioBaseTimestamp = segmentInfo.audio[0].dts;
        }
        segmentInfo.audio.forEach(function(info) {
          info.dts = handleRollover(info.dts, audioBaseTimestamp);
          info.pts = handleRollover(info.pts, audioBaseTimestamp);
          info.dtsTime = info.dts / ONE_SECOND_IN_TS2;
          info.ptsTime = info.pts / ONE_SECOND_IN_TS2;
        });
      }
      if (segmentInfo.video && segmentInfo.video.length) {
        var videoBaseTimestamp = baseTimestamp;
        if (typeof videoBaseTimestamp === "undefined") {
          videoBaseTimestamp = segmentInfo.video[0].dts;
        }
        segmentInfo.video.forEach(function(info) {
          info.dts = handleRollover(info.dts, videoBaseTimestamp);
          info.pts = handleRollover(info.pts, videoBaseTimestamp);
          info.dtsTime = info.dts / ONE_SECOND_IN_TS2;
          info.ptsTime = info.pts / ONE_SECOND_IN_TS2;
        });
        if (segmentInfo.firstKeyFrame) {
          var frame = segmentInfo.firstKeyFrame;
          frame.dts = handleRollover(frame.dts, videoBaseTimestamp);
          frame.pts = handleRollover(frame.pts, videoBaseTimestamp);
          frame.dtsTime = frame.dts / ONE_SECOND_IN_TS2;
          frame.ptsTime = frame.dts / ONE_SECOND_IN_TS2;
        }
      }
    };
    var inspectAac_ = function(bytes) {
      var endLoop = false, audioCount = 0, sampleRate = null, timestamp = null, frameSize = 0, byteIndex = 0, packet;
      while (bytes.length - byteIndex >= 3) {
        var type3 = probe.aac.parseType(bytes, byteIndex);
        switch (type3) {
          case "timed-metadata":
            if (bytes.length - byteIndex < 10) {
              endLoop = true;
              break;
            }
            frameSize = probe.aac.parseId3TagSize(bytes, byteIndex);
            if (frameSize > bytes.length) {
              endLoop = true;
              break;
            }
            if (timestamp === null) {
              packet = bytes.subarray(byteIndex, byteIndex + frameSize);
              timestamp = probe.aac.parseAacTimestamp(packet);
            }
            byteIndex += frameSize;
            break;
          case "audio":
            if (bytes.length - byteIndex < 7) {
              endLoop = true;
              break;
            }
            frameSize = probe.aac.parseAdtsSize(bytes, byteIndex);
            if (frameSize > bytes.length) {
              endLoop = true;
              break;
            }
            if (sampleRate === null) {
              packet = bytes.subarray(byteIndex, byteIndex + frameSize);
              sampleRate = probe.aac.parseSampleRate(packet);
            }
            audioCount++;
            byteIndex += frameSize;
            break;
          default:
            byteIndex++;
            break;
        }
        if (endLoop) {
          return null;
        }
      }
      if (sampleRate === null || timestamp === null) {
        return null;
      }
      var audioTimescale = ONE_SECOND_IN_TS2 / sampleRate;
      var result = {
        audio: [
          {
            type: "audio",
            dts: timestamp,
            pts: timestamp
          },
          {
            type: "audio",
            dts: timestamp + audioCount * 1024 * audioTimescale,
            pts: timestamp + audioCount * 1024 * audioTimescale
          }
        ]
      };
      return result;
    };
    var inspectTs_ = function(bytes) {
      var pmt = {
        pid: null,
        table: null
      };
      var result = {};
      parsePsi_(bytes, pmt);
      for (var pid in pmt.table) {
        if (pmt.table.hasOwnProperty(pid)) {
          var type3 = pmt.table[pid];
          switch (type3) {
            case StreamTypes.H264_STREAM_TYPE:
              result.video = [];
              parseVideoPes_(bytes, pmt, result);
              if (result.video.length === 0) {
                delete result.video;
              }
              break;
            case StreamTypes.ADTS_STREAM_TYPE:
              result.audio = [];
              parseAudioPes_(bytes, pmt, result);
              if (result.audio.length === 0) {
                delete result.audio;
              }
              break;
            default:
              break;
          }
        }
      }
      return result;
    };
    var inspect = function(bytes, baseTimestamp) {
      var isAacData = probe.aac.isLikelyAacData(bytes);
      var result;
      if (isAacData) {
        result = inspectAac_(bytes);
      } else {
        result = inspectTs_(bytes);
      }
      if (!result || !result.audio && !result.video) {
        return null;
      }
      adjustTimestamp_(result, baseTimestamp);
      return result;
    };
    module.exports = {
      inspect,
      parseAudioPes_
    };
  });

  // node_modules/mux.js/lib/utils/bin.js
  var require_bin = __commonJS((exports, module) => {
    var toUnsigned = function(value) {
      return value >>> 0;
    };
    var toHexString = function(value) {
      return ("00" + value.toString(16)).slice(-2);
    };
    module.exports = {
      toUnsigned,
      toHexString
    };
  });

  // node_modules/mux.js/lib/mp4/parse-type.js
  var require_parse_type = __commonJS((exports, module) => {
    var parseType = function(buffer) {
      var result = "";
      result += String.fromCharCode(buffer[0]);
      result += String.fromCharCode(buffer[1]);
      result += String.fromCharCode(buffer[2]);
      result += String.fromCharCode(buffer[3]);
      return result;
    };
    module.exports = parseType;
  });

  // node_modules/mux.js/lib/mp4/find-box.js
  var require_find_box = __commonJS((exports, module) => {
    var toUnsigned = require_bin().toUnsigned;
    var parseType = require_parse_type();
    var findBox = function(data, path) {
      var results = [], i, size, type3, end, subresults;
      if (!path.length) {
        return null;
      }
      for (i = 0; i < data.byteLength; ) {
        size = toUnsigned(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);
        type3 = parseType(data.subarray(i + 4, i + 8));
        end = size > 1 ? i + size : data.byteLength;
        if (type3 === path[0]) {
          if (path.length === 1) {
            results.push(data.subarray(i + 8, end));
          } else {
            subresults = findBox(data.subarray(i + 8, end), path.slice(1));
            if (subresults.length) {
              results = results.concat(subresults);
            }
          }
        }
        i = end;
      }
      return results;
    };
    module.exports = findBox;
  });

  // node_modules/mux.js/lib/tools/parse-tfhd.js
  var require_parse_tfhd = __commonJS((exports, module) => {
    var tfhd = function(data) {
      var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
        version: data[0],
        flags: new Uint8Array(data.subarray(1, 4)),
        trackId: view.getUint32(4)
      }, baseDataOffsetPresent = result.flags[2] & 1, sampleDescriptionIndexPresent = result.flags[2] & 2, defaultSampleDurationPresent = result.flags[2] & 8, defaultSampleSizePresent = result.flags[2] & 16, defaultSampleFlagsPresent = result.flags[2] & 32, durationIsEmpty = result.flags[0] & 65536, defaultBaseIsMoof = result.flags[0] & 131072, i;
      i = 8;
      if (baseDataOffsetPresent) {
        i += 4;
        result.baseDataOffset = view.getUint32(12);
        i += 4;
      }
      if (sampleDescriptionIndexPresent) {
        result.sampleDescriptionIndex = view.getUint32(i);
        i += 4;
      }
      if (defaultSampleDurationPresent) {
        result.defaultSampleDuration = view.getUint32(i);
        i += 4;
      }
      if (defaultSampleSizePresent) {
        result.defaultSampleSize = view.getUint32(i);
        i += 4;
      }
      if (defaultSampleFlagsPresent) {
        result.defaultSampleFlags = view.getUint32(i);
      }
      if (durationIsEmpty) {
        result.durationIsEmpty = true;
      }
      if (!baseDataOffsetPresent && defaultBaseIsMoof) {
        result.baseDataOffsetIsMoof = true;
      }
      return result;
    };
    module.exports = tfhd;
  });

  // node_modules/mux.js/lib/tools/parse-sample-flags.js
  var require_parse_sample_flags = __commonJS((exports, module) => {
    var parseSampleFlags = function(flags) {
      return {
        isLeading: (flags[0] & 12) >>> 2,
        dependsOn: flags[0] & 3,
        isDependedOn: (flags[1] & 192) >>> 6,
        hasRedundancy: (flags[1] & 48) >>> 4,
        paddingValue: (flags[1] & 14) >>> 1,
        isNonSyncSample: flags[1] & 1,
        degradationPriority: flags[2] << 8 | flags[3]
      };
    };
    module.exports = parseSampleFlags;
  });

  // node_modules/mux.js/lib/tools/parse-trun.js
  var require_parse_trun = __commonJS((exports, module) => {
    var parseSampleFlags = require_parse_sample_flags();
    var trun = function(data) {
      var result = {
        version: data[0],
        flags: new Uint8Array(data.subarray(1, 4)),
        samples: []
      }, view = new DataView(data.buffer, data.byteOffset, data.byteLength), dataOffsetPresent = result.flags[2] & 1, firstSampleFlagsPresent = result.flags[2] & 4, sampleDurationPresent = result.flags[1] & 1, sampleSizePresent = result.flags[1] & 2, sampleFlagsPresent = result.flags[1] & 4, sampleCompositionTimeOffsetPresent = result.flags[1] & 8, sampleCount = view.getUint32(4), offset = 8, sample;
      if (dataOffsetPresent) {
        result.dataOffset = view.getInt32(offset);
        offset += 4;
      }
      if (firstSampleFlagsPresent && sampleCount) {
        sample = {
          flags: parseSampleFlags(data.subarray(offset, offset + 4))
        };
        offset += 4;
        if (sampleDurationPresent) {
          sample.duration = view.getUint32(offset);
          offset += 4;
        }
        if (sampleSizePresent) {
          sample.size = view.getUint32(offset);
          offset += 4;
        }
        if (sampleCompositionTimeOffsetPresent) {
          if (result.version === 1) {
            sample.compositionTimeOffset = view.getInt32(offset);
          } else {
            sample.compositionTimeOffset = view.getUint32(offset);
          }
          offset += 4;
        }
        result.samples.push(sample);
        sampleCount--;
      }
      while (sampleCount--) {
        sample = {};
        if (sampleDurationPresent) {
          sample.duration = view.getUint32(offset);
          offset += 4;
        }
        if (sampleSizePresent) {
          sample.size = view.getUint32(offset);
          offset += 4;
        }
        if (sampleFlagsPresent) {
          sample.flags = parseSampleFlags(data.subarray(offset, offset + 4));
          offset += 4;
        }
        if (sampleCompositionTimeOffsetPresent) {
          if (result.version === 1) {
            sample.compositionTimeOffset = view.getInt32(offset);
          } else {
            sample.compositionTimeOffset = view.getUint32(offset);
          }
          offset += 4;
        }
        result.samples.push(sample);
      }
      return result;
    };
    module.exports = trun;
  });

  // node_modules/mux.js/lib/tools/parse-tfdt.js
  var require_parse_tfdt = __commonJS((exports, module) => {
    var toUnsigned = require_bin().toUnsigned;
    var tfdt = function(data) {
      var result = {
        version: data[0],
        flags: new Uint8Array(data.subarray(1, 4)),
        baseMediaDecodeTime: toUnsigned(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])
      };
      if (result.version === 1) {
        result.baseMediaDecodeTime *= Math.pow(2, 32);
        result.baseMediaDecodeTime += toUnsigned(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11]);
      }
      return result;
    };
    module.exports = tfdt;
  });

  // node_modules/mux.js/lib/mp4/probe.js
  var require_probe2 = __commonJS((exports, module) => {
    "use strict";
    var toUnsigned = require_bin().toUnsigned;
    var toHexString = require_bin().toHexString;
    var findBox = require_find_box();
    var parseType = require_parse_type();
    var parseTfhd = require_parse_tfhd();
    var parseTrun = require_parse_trun();
    var parseTfdt = require_parse_tfdt();
    var timescale2;
    var startTime;
    var compositionStartTime;
    var getVideoTrackIds;
    var getTracks;
    var getTimescaleFromMediaHeader;
    timescale2 = function(init) {
      var result = {}, traks = findBox(init, ["moov", "trak"]);
      return traks.reduce(function(result2, trak) {
        var tkhd, version2, index, id, mdhd;
        tkhd = findBox(trak, ["tkhd"])[0];
        if (!tkhd) {
          return null;
        }
        version2 = tkhd[0];
        index = version2 === 0 ? 12 : 20;
        id = toUnsigned(tkhd[index] << 24 | tkhd[index + 1] << 16 | tkhd[index + 2] << 8 | tkhd[index + 3]);
        mdhd = findBox(trak, ["mdia", "mdhd"])[0];
        if (!mdhd) {
          return null;
        }
        version2 = mdhd[0];
        index = version2 === 0 ? 12 : 20;
        result2[id] = toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
        return result2;
      }, result);
    };
    startTime = function(timescale3, fragment) {
      var trafs, baseTimes, result;
      trafs = findBox(fragment, ["moof", "traf"]);
      baseTimes = [].concat.apply([], trafs.map(function(traf) {
        return findBox(traf, ["tfhd"]).map(function(tfhd) {
          var id, scale, baseTime;
          id = toUnsigned(tfhd[4] << 24 | tfhd[5] << 16 | tfhd[6] << 8 | tfhd[7]);
          scale = timescale3[id] || 9e4;
          baseTime = findBox(traf, ["tfdt"]).map(function(tfdt) {
            var version2, result2;
            version2 = tfdt[0];
            result2 = toUnsigned(tfdt[4] << 24 | tfdt[5] << 16 | tfdt[6] << 8 | tfdt[7]);
            if (version2 === 1) {
              result2 *= Math.pow(2, 32);
              result2 += toUnsigned(tfdt[8] << 24 | tfdt[9] << 16 | tfdt[10] << 8 | tfdt[11]);
            }
            return result2;
          })[0];
          baseTime = typeof baseTime === "number" && !isNaN(baseTime) ? baseTime : Infinity;
          return baseTime / scale;
        });
      }));
      result = Math.min.apply(null, baseTimes);
      return isFinite(result) ? result : 0;
    };
    compositionStartTime = function(timescales, fragment) {
      var trafBoxes = findBox(fragment, ["moof", "traf"]);
      var baseMediaDecodeTime = 0;
      var compositionTimeOffset = 0;
      var trackId;
      if (trafBoxes && trafBoxes.length) {
        var tfhd = findBox(trafBoxes[0], ["tfhd"])[0];
        var trun = findBox(trafBoxes[0], ["trun"])[0];
        var tfdt = findBox(trafBoxes[0], ["tfdt"])[0];
        if (tfhd) {
          var parsedTfhd = parseTfhd(tfhd);
          trackId = parsedTfhd.trackId;
        }
        if (tfdt) {
          var parsedTfdt = parseTfdt(tfdt);
          baseMediaDecodeTime = parsedTfdt.baseMediaDecodeTime;
        }
        if (trun) {
          var parsedTrun = parseTrun(trun);
          if (parsedTrun.samples && parsedTrun.samples.length) {
            compositionTimeOffset = parsedTrun.samples[0].compositionTimeOffset || 0;
          }
        }
      }
      var timescale3 = timescales[trackId] || 9e4;
      return (baseMediaDecodeTime + compositionTimeOffset) / timescale3;
    };
    getVideoTrackIds = function(init) {
      var traks = findBox(init, ["moov", "trak"]);
      var videoTrackIds = [];
      traks.forEach(function(trak) {
        var hdlrs = findBox(trak, ["mdia", "hdlr"]);
        var tkhds = findBox(trak, ["tkhd"]);
        hdlrs.forEach(function(hdlr, index) {
          var handlerType = parseType(hdlr.subarray(8, 12));
          var tkhd = tkhds[index];
          var view;
          var version2;
          var trackId;
          if (handlerType === "vide") {
            view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
            version2 = view.getUint8(0);
            trackId = version2 === 0 ? view.getUint32(12) : view.getUint32(20);
            videoTrackIds.push(trackId);
          }
        });
      });
      return videoTrackIds;
    };
    getTimescaleFromMediaHeader = function(mdhd) {
      var version2 = mdhd[0];
      var index = version2 === 0 ? 12 : 20;
      return toUnsigned(mdhd[index] << 24 | mdhd[index + 1] << 16 | mdhd[index + 2] << 8 | mdhd[index + 3]);
    };
    getTracks = function(init) {
      var traks = findBox(init, ["moov", "trak"]);
      var tracks = [];
      traks.forEach(function(trak) {
        var track = {};
        var tkhd = findBox(trak, ["tkhd"])[0];
        var view, tkhdVersion;
        if (tkhd) {
          view = new DataView(tkhd.buffer, tkhd.byteOffset, tkhd.byteLength);
          tkhdVersion = view.getUint8(0);
          track.id = tkhdVersion === 0 ? view.getUint32(12) : view.getUint32(20);
        }
        var hdlr = findBox(trak, ["mdia", "hdlr"])[0];
        if (hdlr) {
          var type3 = parseType(hdlr.subarray(8, 12));
          if (type3 === "vide") {
            track.type = "video";
          } else if (type3 === "soun") {
            track.type = "audio";
          } else {
            track.type = type3;
          }
        }
        var stsd = findBox(trak, ["mdia", "minf", "stbl", "stsd"])[0];
        if (stsd) {
          var sampleDescriptions = stsd.subarray(8);
          track.codec = parseType(sampleDescriptions.subarray(4, 8));
          var codecBox = findBox(sampleDescriptions, [track.codec])[0];
          var codecConfig, codecConfigType;
          if (codecBox) {
            if (/^[a-z]vc[1-9]$/i.test(track.codec)) {
              codecConfig = codecBox.subarray(78);
              codecConfigType = parseType(codecConfig.subarray(4, 8));
              if (codecConfigType === "avcC" && codecConfig.length > 11) {
                track.codec += ".";
                track.codec += toHexString(codecConfig[9]);
                track.codec += toHexString(codecConfig[10]);
                track.codec += toHexString(codecConfig[11]);
              } else {
                track.codec = "avc1.4d400d";
              }
            } else if (/^mp4[a,v]$/i.test(track.codec)) {
              codecConfig = codecBox.subarray(28);
              codecConfigType = parseType(codecConfig.subarray(4, 8));
              if (codecConfigType === "esds" && codecConfig.length > 20 && codecConfig[19] !== 0) {
                track.codec += "." + toHexString(codecConfig[19]);
                track.codec += "." + toHexString(codecConfig[20] >>> 2 & 63).replace(/^0/, "");
              } else {
                track.codec = "mp4a.40.2";
              }
            } else {
              track.codec = track.codec.toLowerCase();
            }
          }
        }
        var mdhd = findBox(trak, ["mdia", "mdhd"])[0];
        if (mdhd) {
          track.timescale = getTimescaleFromMediaHeader(mdhd);
        }
        tracks.push(track);
      });
      return tracks;
    };
    module.exports = {
      findBox,
      parseType,
      timescale: timescale2,
      startTime,
      compositionStartTime,
      videoTrackIds: getVideoTrackIds,
      tracks: getTracks,
      getTimescaleFromMediaHeader
    };
  });

  // node_modules/@videojs/vhs-utils/dist/codecs.js
  var require_codecs = __commonJS((exports) => {
    /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var window3 = _interopDefault(require_window2());
    var regexs = {
      mp4: /^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,
      webm: /^(vp0?[89]|av0?1|opus|vorbis)/,
      ogg: /^(vp0?[89]|theora|flac|opus|vorbis)/,
      video: /^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,
      audio: /^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3)/,
      text: /^(stpp.ttml.im1t)/,
      muxerVideo: /^(avc0?1)/,
      muxerAudio: /^(mp4a)/,
      muxerText: /a^/
    };
    var mediaTypes = ["video", "audio", "text"];
    var upperMediaTypes = ["Video", "Audio", "Text"];
    var translateLegacyCodec2 = function translateLegacyCodec3(codec) {
      if (!codec) {
        return codec;
      }
      return codec.replace(/avc1\.(\d+)\.(\d+)/i, function(orig, profile, avcLevel) {
        var profileHex = ("00" + Number(profile).toString(16)).slice(-2);
        var avcLevelHex = ("00" + Number(avcLevel).toString(16)).slice(-2);
        return "avc1." + profileHex + "00" + avcLevelHex;
      });
    };
    var translateLegacyCodecs = function translateLegacyCodecs2(codecs) {
      return codecs.map(translateLegacyCodec2);
    };
    var mapLegacyAvcCodecs = function mapLegacyAvcCodecs2(codecString) {
      return codecString.replace(/avc1\.(\d+)\.(\d+)/i, function(match) {
        return translateLegacyCodecs([match])[0];
      });
    };
    var parseCodecs2 = function parseCodecs3(codecString) {
      if (codecString === void 0) {
        codecString = "";
      }
      var codecs = codecString.split(",");
      var result = {};
      var unknown = [];
      codecs.forEach(function(codec) {
        codec = codec.trim();
        var codecType;
        mediaTypes.forEach(function(name) {
          var match = regexs[name].exec(codec.toLowerCase());
          if (!match || match.length <= 1) {
            return;
          }
          codecType = name;
          var type3 = codec.substring(0, match[1].length);
          var details = codec.replace(type3, "");
          result[name] = {
            type: type3,
            details
          };
        });
        if (!codecType) {
          unknown.push(codec);
        }
      });
      if (unknown.length) {
        result.unknown = unknown;
      }
      return result;
    };
    var codecsFromDefault2 = function codecsFromDefault3(master, audioGroupId) {
      if (!master.mediaGroups.AUDIO || !audioGroupId) {
        return null;
      }
      var audioGroup = master.mediaGroups.AUDIO[audioGroupId];
      if (!audioGroup) {
        return null;
      }
      for (var name in audioGroup) {
        var audioType = audioGroup[name];
        if (audioType.default && audioType.playlists) {
          return parseCodecs2(audioType.playlists[0].attributes.CODECS);
        }
      }
      return null;
    };
    var isVideoCodec2 = function isVideoCodec3(codec) {
      if (codec === void 0) {
        codec = "";
      }
      return regexs.video.test(codec.trim().toLowerCase());
    };
    var isAudioCodec2 = function isAudioCodec3(codec) {
      if (codec === void 0) {
        codec = "";
      }
      return regexs.audio.test(codec.trim().toLowerCase());
    };
    var isTextCodec = function isTextCodec2(codec) {
      if (codec === void 0) {
        codec = "";
      }
      return regexs.text.test(codec.trim().toLowerCase());
    };
    var getMimeForCodec2 = function getMimeForCodec3(codecString) {
      if (!codecString || typeof codecString !== "string") {
        return;
      }
      var codecs = codecString.toLowerCase().split(",").map(function(c) {
        return translateLegacyCodec2(c.trim());
      });
      var type3 = "video";
      if (codecs.length === 1 && isAudioCodec2(codecs[0])) {
        type3 = "audio";
      } else if (codecs.length === 1 && isTextCodec(codecs[0])) {
        type3 = "application";
      }
      var container = "mp4";
      if (codecs.every(function(c) {
        return regexs.mp4.test(c);
      })) {
        container = "mp4";
      } else if (codecs.every(function(c) {
        return regexs.webm.test(c);
      })) {
        container = "webm";
      } else if (codecs.every(function(c) {
        return regexs.ogg.test(c);
      })) {
        container = "ogg";
      }
      return type3 + "/" + container + ';codecs="' + codecString + '"';
    };
    var browserSupportsCodec2 = function browserSupportsCodec3(codecString) {
      if (codecString === void 0) {
        codecString = "";
      }
      return window3.MediaSource && window3.MediaSource.isTypeSupported && window3.MediaSource.isTypeSupported(getMimeForCodec2(codecString)) || false;
    };
    var muxerSupportsCodec2 = function muxerSupportsCodec3(codecString) {
      if (codecString === void 0) {
        codecString = "";
      }
      return codecString.toLowerCase().split(",").every(function(codec) {
        codec = codec.trim();
        for (var i = 0; i < upperMediaTypes.length; i++) {
          var type3 = upperMediaTypes[i];
          if (regexs["muxer" + type3].test(codec)) {
            return true;
          }
        }
        return false;
      });
    };
    var DEFAULT_AUDIO_CODEC2 = "mp4a.40.2";
    var DEFAULT_VIDEO_CODEC2 = "avc1.4d400d";
    exports.DEFAULT_AUDIO_CODEC = DEFAULT_AUDIO_CODEC2;
    exports.DEFAULT_VIDEO_CODEC = DEFAULT_VIDEO_CODEC2;
    exports.browserSupportsCodec = browserSupportsCodec2;
    exports.codecsFromDefault = codecsFromDefault2;
    exports.getMimeForCodec = getMimeForCodec2;
    exports.isAudioCodec = isAudioCodec2;
    exports.isTextCodec = isTextCodec;
    exports.isVideoCodec = isVideoCodec2;
    exports.mapLegacyAvcCodecs = mapLegacyAvcCodecs;
    exports.muxerSupportsCodec = muxerSupportsCodec2;
    exports.parseCodecs = parseCodecs2;
    exports.translateLegacyCodec = translateLegacyCodec2;
    exports.translateLegacyCodecs = translateLegacyCodecs;
  });

  // node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS((exports) => {
    /** @license React v0.20.1
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    var f;
    var g;
    var h;
    var k;
    if (typeof performance === "object" && typeof performance.now === "function") {
      l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      p = Date, q = p.now();
      exports.unstable_now = function() {
        return p.now() - q;
      };
    }
    var l;
    var p;
    var q;
    if (typeof window === "undefined" || typeof MessageChannel !== "function") {
      t2 = null, u = null, w = function() {
        if (t2 !== null)
          try {
            var a = exports.unstable_now();
            t2(true, a);
            t2 = null;
          } catch (b) {
            throw setTimeout(w, 0), b;
          }
      };
      f = function(a) {
        t2 !== null ? setTimeout(f, 0, a) : (t2 = a, setTimeout(w, 0));
      };
      g = function(a, b) {
        u = setTimeout(a, b);
      };
      h = function() {
        clearTimeout(u);
      };
      exports.unstable_shouldYield = function() {
        return false;
      };
      k = exports.unstable_forceFrameRate = function() {
      };
    } else {
      x = window.setTimeout, y = window.clearTimeout;
      if (typeof console !== "undefined") {
        z = window.cancelAnimationFrame;
        typeof window.requestAnimationFrame !== "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        typeof z !== "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
      A = false, B = null, C = -1, D = 5, E = 0;
      exports.unstable_shouldYield = function() {
        return exports.unstable_now() >= E;
      };
      k = function() {
      };
      exports.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      F = new MessageChannel(), G = F.port2;
      F.port1.onmessage = function() {
        if (B !== null) {
          var a = exports.unstable_now();
          E = a + D;
          try {
            B(true, a) ? G.postMessage(null) : (A = false, B = null);
          } catch (b) {
            throw G.postMessage(null), b;
          }
        } else
          A = false;
      };
      f = function(a) {
        B = a;
        A || (A = true, G.postMessage(null));
      };
      g = function(a, b) {
        C = x(function() {
          a(exports.unstable_now());
        }, b);
      };
      h = function() {
        y(C);
        C = -1;
      };
    }
    var t2;
    var u;
    var w;
    var x;
    var y;
    var z;
    var A;
    var B;
    var C;
    var D;
    var E;
    var F;
    var G;
    function H(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; ; ) {
          var d2 = c - 1 >>> 1, e = a[d2];
          if (e !== void 0 && 0 < I(e, b))
            a[d2] = b, a[c] = e, c = d2;
          else
            break a;
        }
    }
    function J(a) {
      a = a[0];
      return a === void 0 ? null : a;
    }
    function K(a) {
      var b = a[0];
      if (b !== void 0) {
        var c = a.pop();
        if (c !== b) {
          a[0] = c;
          a:
            for (var d2 = 0, e = a.length; d2 < e; ) {
              var m = 2 * (d2 + 1) - 1, n = a[m], v = m + 1, r2 = a[v];
              if (n !== void 0 && 0 > I(n, c))
                r2 !== void 0 && 0 > I(r2, n) ? (a[d2] = r2, a[v] = c, d2 = v) : (a[d2] = n, a[m] = c, d2 = m);
              else if (r2 !== void 0 && 0 > I(r2, c))
                a[d2] = r2, a[v] = c, d2 = v;
              else
                break a;
            }
        }
        return b;
      }
      return null;
    }
    function I(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return c !== 0 ? c : a.id - b.id;
    }
    var L = [];
    var M = [];
    var N = 1;
    var O = null;
    var P = 3;
    var Q = false;
    var R = false;
    var S = false;
    function T(a) {
      for (var b = J(M); b !== null; ) {
        if (b.callback === null)
          K(M);
        else if (b.startTime <= a)
          K(M), b.sortIndex = b.expirationTime, H(L, b);
        else
          break;
        b = J(M);
      }
    }
    function U(a) {
      S = false;
      T(a);
      if (!R)
        if (J(L) !== null)
          R = true, f(V);
        else {
          var b = J(M);
          b !== null && g(U, b.startTime - a);
        }
    }
    function V(a, b) {
      R = false;
      S && (S = false, h());
      Q = true;
      var c = P;
      try {
        T(b);
        for (O = J(L); O !== null && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield()); ) {
          var d2 = O.callback;
          if (typeof d2 === "function") {
            O.callback = null;
            P = O.priorityLevel;
            var e = d2(O.expirationTime <= b);
            b = exports.unstable_now();
            typeof e === "function" ? O.callback = e : O === J(L) && K(L);
            T(b);
          } else
            K(L);
          O = J(L);
        }
        if (O !== null)
          var m = true;
        else {
          var n = J(M);
          n !== null && g(U, n.startTime - b);
          m = false;
        }
        return m;
      } finally {
        O = null, P = c, Q = false;
      }
    }
    var W = k;
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      R || Q || (R = true, f(V));
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return P;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return J(L);
    };
    exports.unstable_next = function(a) {
      switch (P) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = P;
      }
      var c = P;
      P = b;
      try {
        return a();
      } finally {
        P = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = W;
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = P;
      P = a;
      try {
        return b();
      } finally {
        P = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d2 = exports.unstable_now();
      typeof c === "object" && c !== null ? (c = c.delay, c = typeof c === "number" && 0 < c ? d2 + c : d2) : c = d2;
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = {id: N++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1};
      c > d2 ? (a.sortIndex = c, H(M, a), J(L) === null && a === J(M) && (S ? h() : S = true, g(U, c - d2))) : (a.sortIndex = e, H(L, a), R || Q || (R = true, f(V)));
      return a;
    };
    exports.unstable_wrapCallback = function(a) {
      var b = P;
      return function() {
        var c = P;
        P = b;
        try {
          return a.apply(this, arguments);
        } finally {
          P = c;
        }
      };
    };
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (true) {
      module.exports = require_scheduler_production_min();
    } else {
      module.exports = null;
    }
  });

  // node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS((exports) => {
    /** @license React v17.0.1
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    var aa = require_react();
    var m = require_object_assign();
    var r2 = require_scheduler();
    function y(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
        b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    if (!aa)
      throw Error(y(227));
    var ba = new Set();
    var ca = {};
    function da(a, b) {
      ea(a, b);
      ea(a + "Capture", b);
    }
    function ea(a, b) {
      ca[a] = b;
      for (a = 0; a < b.length; a++)
        ba.add(b[a]);
    }
    var fa = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined");
    var ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var ia = Object.prototype.hasOwnProperty;
    var ja = {};
    var ka = {};
    function la(a) {
      if (ia.call(ka, a))
        return true;
      if (ia.call(ja, a))
        return false;
      if (ha.test(a))
        return ka[a] = true;
      ja[a] = true;
      return false;
    }
    function ma(a, b, c, d2) {
      if (c !== null && c.type === 0)
        return false;
      switch (typeof b) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d2)
            return false;
          if (c !== null)
            return !c.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return a !== "data-" && a !== "aria-";
        default:
          return false;
      }
    }
    function na(a, b, c, d2) {
      if (b === null || typeof b === "undefined" || ma(a, b, c, d2))
        return true;
      if (d2)
        return false;
      if (c !== null)
        switch (c.type) {
          case 3:
            return !b;
          case 4:
            return b === false;
          case 5:
            return isNaN(b);
          case 6:
            return isNaN(b) || 1 > b;
        }
      return false;
    }
    function B(a, b, c, d2, e, f, g) {
      this.acceptsBooleans = b === 2 || b === 3 || b === 4;
      this.attributeName = d2;
      this.attributeNamespace = e;
      this.mustUseProperty = c;
      this.propertyName = a;
      this.type = b;
      this.sanitizeURL = f;
      this.removeEmptyString = g;
    }
    var D = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      D[a] = new B(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b = a[0];
      D[b] = new B(b, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      D[a] = new B(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      D[a] = new B(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      D[a] = new B(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      D[a] = new B(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      D[a] = new B(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      D[a] = new B(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      D[a] = new B(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var oa = /[\-:]([a-z])/g;
    function pa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b = a.replace(oa, pa);
      D[b] = new B(b, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b = a.replace(oa, pa);
      D[b] = new B(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b = a.replace(oa, pa);
      D[b] = new B(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      D[a] = new B(a, 1, false, a.toLowerCase(), null, false, false);
    });
    D.xlinkHref = new B("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      D[a] = new B(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function qa(a, b, c, d2) {
      var e = D.hasOwnProperty(b) ? D[b] : null;
      var f = e !== null ? e.type === 0 : d2 ? false : !(2 < b.length) || b[0] !== "o" && b[0] !== "O" || b[1] !== "n" && b[1] !== "N" ? false : true;
      f || (na(b, c, e, d2) && (c = null), d2 || e === null ? la(b) && (c === null ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = c === null ? e.type === 3 ? false : "" : c : (b = e.attributeName, d2 = e.attributeNamespace, c === null ? a.removeAttribute(b) : (e = e.type, c = e === 3 || e === 4 && c === true ? "" : "" + c, d2 ? a.setAttributeNS(d2, b, c) : a.setAttribute(b, c))));
    }
    var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var sa = 60103;
    var ta = 60106;
    var ua = 60107;
    var wa = 60108;
    var xa = 60114;
    var ya = 60109;
    var za = 60110;
    var Aa = 60112;
    var Ba = 60113;
    var Ca = 60120;
    var Da = 60115;
    var Ea = 60116;
    var Fa = 60121;
    var Ga = 60128;
    var Ha = 60129;
    var Ia = 60130;
    var Ja = 60131;
    if (typeof Symbol === "function" && Symbol.for) {
      E = Symbol.for;
      sa = E("react.element");
      ta = E("react.portal");
      ua = E("react.fragment");
      wa = E("react.strict_mode");
      xa = E("react.profiler");
      ya = E("react.provider");
      za = E("react.context");
      Aa = E("react.forward_ref");
      Ba = E("react.suspense");
      Ca = E("react.suspense_list");
      Da = E("react.memo");
      Ea = E("react.lazy");
      Fa = E("react.block");
      E("react.scope");
      Ga = E("react.opaque.id");
      Ha = E("react.debug_trace_mode");
      Ia = E("react.offscreen");
      Ja = E("react.legacy_hidden");
    }
    var E;
    var Ka = typeof Symbol === "function" && Symbol.iterator;
    function La(a) {
      if (a === null || typeof a !== "object")
        return null;
      a = Ka && a[Ka] || a["@@iterator"];
      return typeof a === "function" ? a : null;
    }
    var Ma;
    function Na(a) {
      if (Ma === void 0)
        try {
          throw Error();
        } catch (c) {
          var b = c.stack.trim().match(/\n( *(at )?)/);
          Ma = b && b[1] || "";
        }
      return "\n" + Ma + a;
    }
    var Oa = false;
    function Pa(a, b) {
      if (!a || Oa)
        return "";
      Oa = true;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b)
          if (b = function() {
            throw Error();
          }, Object.defineProperty(b.prototype, "props", {set: function() {
            throw Error();
          }}), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(b, []);
            } catch (k) {
              var d2 = k;
            }
            Reflect.construct(a, [], b);
          } else {
            try {
              b.call();
            } catch (k) {
              d2 = k;
            }
            a.call(b.prototype);
          }
        else {
          try {
            throw Error();
          } catch (k) {
            d2 = k;
          }
          a();
        }
      } catch (k) {
        if (k && d2 && typeof k.stack === "string") {
          for (var e = k.stack.split("\n"), f = d2.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
            h--;
          for (; 1 <= g && 0 <= h; g--, h--)
            if (e[g] !== f[h]) {
              if (g !== 1 || h !== 1) {
                do
                  if (g--, h--, 0 > h || e[g] !== f[h])
                    return "\n" + e[g].replace(" at new ", " at ");
                while (1 <= g && 0 <= h);
              }
              break;
            }
        }
      } finally {
        Oa = false, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
    }
    function Qa(a) {
      switch (a.tag) {
        case 5:
          return Na(a.type);
        case 16:
          return Na("Lazy");
        case 13:
          return Na("Suspense");
        case 19:
          return Na("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Pa(a.type, false), a;
        case 11:
          return a = Pa(a.type.render, false), a;
        case 22:
          return a = Pa(a.type._render, false), a;
        case 1:
          return a = Pa(a.type, true), a;
        default:
          return "";
      }
    }
    function Ra(a) {
      if (a == null)
        return null;
      if (typeof a === "function")
        return a.displayName || a.name || null;
      if (typeof a === "string")
        return a;
      switch (a) {
        case ua:
          return "Fragment";
        case ta:
          return "Portal";
        case xa:
          return "Profiler";
        case wa:
          return "StrictMode";
        case Ba:
          return "Suspense";
        case Ca:
          return "SuspenseList";
      }
      if (typeof a === "object")
        switch (a.$$typeof) {
          case za:
            return (a.displayName || "Context") + ".Consumer";
          case ya:
            return (a._context.displayName || "Context") + ".Provider";
          case Aa:
            var b = a.render;
            b = b.displayName || b.name || "";
            return a.displayName || (b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef");
          case Da:
            return Ra(a.type);
          case Fa:
            return Ra(a._render);
          case Ea:
            b = a._payload;
            a = a._init;
            try {
              return Ra(a(b));
            } catch (c) {
            }
        }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "object":
        case "string":
        case "undefined":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b = a.type;
      return (a = a.nodeName) && a.toLowerCase() === "input" && (b === "checkbox" || b === "radio");
    }
    function Ua(a) {
      var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d2 = "" + a[b];
      if (!a.hasOwnProperty(b) && typeof c !== "undefined" && typeof c.get === "function" && typeof c.set === "function") {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, {configurable: true, get: function() {
          return e.call(this);
        }, set: function(a2) {
          d2 = "" + a2;
          f.call(this, a2);
        }});
        Object.defineProperty(a, b, {enumerable: c.enumerable});
        return {getValue: function() {
          return d2;
        }, setValue: function(a2) {
          d2 = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b];
        }};
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a)
        return false;
      var b = a._valueTracker;
      if (!b)
        return true;
      var c = b.getValue();
      var d2 = "";
      a && (d2 = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d2;
      return a !== c ? (b.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || (typeof document !== "undefined" ? document : void 0);
      if (typeof a === "undefined")
        return null;
      try {
        return a.activeElement || a.body;
      } catch (b) {
        return a.body;
      }
    }
    function Ya(a, b) {
      var c = b.checked;
      return m({}, b, {defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c != null ? c : a._wrapperState.initialChecked});
    }
    function Za(a, b) {
      var c = b.defaultValue == null ? "" : b.defaultValue, d2 = b.checked != null ? b.checked : b.defaultChecked;
      c = Sa(b.value != null ? b.value : c);
      a._wrapperState = {initialChecked: d2, initialValue: c, controlled: b.type === "checkbox" || b.type === "radio" ? b.checked != null : b.value != null};
    }
    function $a(a, b) {
      b = b.checked;
      b != null && qa(a, "checked", b, false);
    }
    function ab(a, b) {
      $a(a, b);
      var c = Sa(b.value), d2 = b.type;
      if (c != null)
        if (d2 === "number") {
          if (c === 0 && a.value === "" || a.value != c)
            a.value = "" + c;
        } else
          a.value !== "" + c && (a.value = "" + c);
      else if (d2 === "submit" || d2 === "reset") {
        a.removeAttribute("value");
        return;
      }
      b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
      b.checked == null && b.defaultChecked != null && (a.defaultChecked = !!b.defaultChecked);
    }
    function cb(a, b, c) {
      if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d2 = b.type;
        if (!(d2 !== "submit" && d2 !== "reset" || b.value !== void 0 && b.value !== null))
          return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
      }
      c = a.name;
      c !== "" && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      c !== "" && (a.name = c);
    }
    function bb(a, b, c) {
      if (b !== "number" || Xa(a.ownerDocument) !== a)
        c == null ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
    }
    function db(a) {
      var b = "";
      aa.Children.forEach(a, function(a2) {
        a2 != null && (b += a2);
      });
      return b;
    }
    function eb(a, b) {
      a = m({children: void 0}, b);
      if (b = db(b.children))
        a.children = b;
      return a;
    }
    function fb(a, b, c, d2) {
      a = a.options;
      if (b) {
        b = {};
        for (var e = 0; e < c.length; e++)
          b["$" + c[e]] = true;
        for (c = 0; c < a.length; c++)
          e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d2 && (a[c].defaultSelected = true);
      } else {
        c = "" + Sa(c);
        b = null;
        for (e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = true;
            d2 && (a[e].defaultSelected = true);
            return;
          }
          b !== null || a[e].disabled || (b = a[e]);
        }
        b !== null && (b.selected = true);
      }
    }
    function gb(a, b) {
      if (b.dangerouslySetInnerHTML != null)
        throw Error(y(91));
      return m({}, b, {value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue});
    }
    function hb(a, b) {
      var c = b.value;
      if (c == null) {
        c = b.children;
        b = b.defaultValue;
        if (c != null) {
          if (b != null)
            throw Error(y(92));
          if (Array.isArray(c)) {
            if (!(1 >= c.length))
              throw Error(y(93));
            c = c[0];
          }
          b = c;
        }
        b == null && (b = "");
        c = b;
      }
      a._wrapperState = {initialValue: Sa(c)};
    }
    function ib(a, b) {
      var c = Sa(b.value), d2 = Sa(b.defaultValue);
      c != null && (c = "" + c, c !== a.value && (a.value = c), b.defaultValue == null && a.defaultValue !== c && (a.defaultValue = c));
      d2 != null && (a.defaultValue = "" + d2);
    }
    function jb(a) {
      var b = a.textContent;
      b === a._wrapperState.initialValue && b !== "" && b !== null && (a.value = b);
    }
    var kb = {html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg"};
    function lb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function mb(a, b) {
      return a == null || a === "http://www.w3.org/1999/xhtml" ? lb(b) : a === "http://www.w3.org/2000/svg" && b === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a;
    }
    var nb;
    var ob = function(a) {
      return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b, c, d2, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b, c, d2, e);
        });
      } : a;
    }(function(a, b) {
      if (a.namespaceURI !== kb.svg || "innerHTML" in a)
        a.innerHTML = b;
      else {
        nb = nb || document.createElement("div");
        nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for (b = nb.firstChild; a.firstChild; )
          a.removeChild(a.firstChild);
        for (; b.firstChild; )
          a.appendChild(b.firstChild);
      }
    });
    function pb(a, b) {
      if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && c.nodeType === 3) {
          c.nodeValue = b;
          return;
        }
      }
      a.textContent = b;
    }
    var qb = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var rb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(qb).forEach(function(a) {
      rb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        qb[b] = qb[a];
      });
    });
    function sb(a, b, c) {
      return b == null || typeof b === "boolean" || b === "" ? "" : c || typeof b !== "number" || b === 0 || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
    }
    function tb(a, b) {
      a = a.style;
      for (var c in b)
        if (b.hasOwnProperty(c)) {
          var d2 = c.indexOf("--") === 0, e = sb(c, b[c], d2);
          c === "float" && (c = "cssFloat");
          d2 ? a.setProperty(c, e) : a[c] = e;
        }
    }
    var ub = m({menuitem: true}, {area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true});
    function vb(a, b) {
      if (b) {
        if (ub[a] && (b.children != null || b.dangerouslySetInnerHTML != null))
          throw Error(y(137, a));
        if (b.dangerouslySetInnerHTML != null) {
          if (b.children != null)
            throw Error(y(60));
          if (!(typeof b.dangerouslySetInnerHTML === "object" && "__html" in b.dangerouslySetInnerHTML))
            throw Error(y(61));
        }
        if (b.style != null && typeof b.style !== "object")
          throw Error(y(62));
      }
    }
    function wb(a, b) {
      if (a.indexOf("-") === -1)
        return typeof b.is === "string";
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return a.nodeType === 3 ? a.parentNode : a;
    }
    var yb = null;
    var zb = null;
    var Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if (typeof yb !== "function")
          throw Error(y(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b)
          for (a = 0; a < b.length; a++)
            Bb(b[a]);
      }
    }
    function Gb(a, b) {
      return a(b);
    }
    function Hb(a, b, c, d2, e) {
      return a(b, c, d2, e);
    }
    function Ib() {
    }
    var Jb = Gb;
    var Kb = false;
    var Lb = false;
    function Mb() {
      if (zb !== null || Ab !== null)
        Ib(), Fb();
    }
    function Nb(a, b, c) {
      if (Lb)
        return a(b, c);
      Lb = true;
      try {
        return Jb(a, b, c);
      } finally {
        Lb = false, Mb();
      }
    }
    function Ob(a, b) {
      var c = a.stateNode;
      if (c === null)
        return null;
      var d2 = Db(c);
      if (d2 === null)
        return null;
      c = d2[b];
      a:
        switch (b) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d2 = !d2.disabled) || (a = a.type, d2 = !(a === "button" || a === "input" || a === "select" || a === "textarea"));
            a = !d2;
            break a;
          default:
            a = false;
        }
      if (a)
        return null;
      if (c && typeof c !== "function")
        throw Error(y(231, b, typeof c));
      return c;
    }
    var Pb = false;
    if (fa)
      try {
        Qb = {};
        Object.defineProperty(Qb, "passive", {get: function() {
          Pb = true;
        }});
        window.addEventListener("test", Qb, Qb);
        window.removeEventListener("test", Qb, Qb);
      } catch (a) {
        Pb = false;
      }
    var Qb;
    function Rb(a, b, c, d2, e, f, g, h, k) {
      var l = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, l);
      } catch (n) {
        this.onError(n);
      }
    }
    var Sb = false;
    var Tb = null;
    var Ub = false;
    var Vb = null;
    var Wb = {onError: function(a) {
      Sb = true;
      Tb = a;
    }};
    function Xb(a, b, c, d2, e, f, g, h, k) {
      Sb = false;
      Tb = null;
      Rb.apply(Wb, arguments);
    }
    function Yb(a, b, c, d2, e, f, g, h, k) {
      Xb.apply(this, arguments);
      if (Sb) {
        if (Sb) {
          var l = Tb;
          Sb = false;
          Tb = null;
        } else
          throw Error(y(198));
        Ub || (Ub = true, Vb = l);
      }
    }
    function Zb(a) {
      var b = a, c = a;
      if (a.alternate)
        for (; b.return; )
          b = b.return;
      else {
        a = b;
        do
          b = a, (b.flags & 1026) !== 0 && (c = b.return), a = b.return;
        while (a);
      }
      return b.tag === 3 ? c : null;
    }
    function $b(a) {
      if (a.tag === 13) {
        var b = a.memoizedState;
        b === null && (a = a.alternate, a !== null && (b = a.memoizedState));
        if (b !== null)
          return b.dehydrated;
      }
      return null;
    }
    function ac(a) {
      if (Zb(a) !== a)
        throw Error(y(188));
    }
    function bc(a) {
      var b = a.alternate;
      if (!b) {
        b = Zb(a);
        if (b === null)
          throw Error(y(188));
        return b !== a ? null : a;
      }
      for (var c = a, d2 = b; ; ) {
        var e = c.return;
        if (e === null)
          break;
        var f = e.alternate;
        if (f === null) {
          d2 = e.return;
          if (d2 !== null) {
            c = d2;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return ac(e), a;
            if (f === d2)
              return ac(e), b;
            f = f.sibling;
          }
          throw Error(y(188));
        }
        if (c.return !== d2.return)
          c = e, d2 = f;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d2 = f;
              break;
            }
            if (h === d2) {
              g = true;
              d2 = e;
              c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = true;
                c = f;
                d2 = e;
                break;
              }
              if (h === d2) {
                g = true;
                d2 = f;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g)
              throw Error(y(189));
          }
        }
        if (c.alternate !== d2)
          throw Error(y(190));
      }
      if (c.tag !== 3)
        throw Error(y(188));
      return c.stateNode.current === c ? a : b;
    }
    function cc(a) {
      a = bc(a);
      if (!a)
        return null;
      for (var b = a; ; ) {
        if (b.tag === 5 || b.tag === 6)
          return b;
        if (b.child)
          b.child.return = b, b = b.child;
        else {
          if (b === a)
            break;
          for (; !b.sibling; ) {
            if (!b.return || b.return === a)
              return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return null;
    }
    function dc(a, b) {
      for (var c = a.alternate; b !== null; ) {
        if (b === a || b === c)
          return true;
        b = b.return;
      }
      return false;
    }
    var ec;
    var fc;
    var gc;
    var hc;
    var ic = false;
    var jc = [];
    var kc = null;
    var lc = null;
    var mc = null;
    var nc = new Map();
    var oc = new Map();
    var pc = [];
    var qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function rc(a, b, c, d2, e) {
      return {blockedOn: a, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e, targetContainers: [d2]};
    }
    function sc(a, b) {
      switch (a) {
        case "focusin":
        case "focusout":
          kc = null;
          break;
        case "dragenter":
        case "dragleave":
          lc = null;
          break;
        case "mouseover":
        case "mouseout":
          mc = null;
          break;
        case "pointerover":
        case "pointerout":
          nc.delete(b.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          oc.delete(b.pointerId);
      }
    }
    function tc(a, b, c, d2, e, f) {
      if (a === null || a.nativeEvent !== f)
        return a = rc(b, c, d2, e, f), b !== null && (b = Cb(b), b !== null && fc(b)), a;
      a.eventSystemFlags |= d2;
      b = a.targetContainers;
      e !== null && b.indexOf(e) === -1 && b.push(e);
      return a;
    }
    function uc(a, b, c, d2, e) {
      switch (b) {
        case "focusin":
          return kc = tc(kc, a, b, c, d2, e), true;
        case "dragenter":
          return lc = tc(lc, a, b, c, d2, e), true;
        case "mouseover":
          return mc = tc(mc, a, b, c, d2, e), true;
        case "pointerover":
          var f = e.pointerId;
          nc.set(f, tc(nc.get(f) || null, a, b, c, d2, e));
          return true;
        case "gotpointercapture":
          return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d2, e)), true;
      }
      return false;
    }
    function vc(a) {
      var b = wc(a.target);
      if (b !== null) {
        var c = Zb(b);
        if (c !== null) {
          if (b = c.tag, b === 13) {
            if (b = $b(c), b !== null) {
              a.blockedOn = b;
              hc(a.lanePriority, function() {
                r2.unstable_runWithPriority(a.priority, function() {
                  gc(c);
                });
              });
              return;
            }
          } else if (b === 3 && c.stateNode.hydrate) {
            a.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function xc(a) {
      if (a.blockedOn !== null)
        return false;
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (c !== null)
          return b = Cb(c), b !== null && fc(b), a.blockedOn = c, false;
        b.shift();
      }
      return true;
    }
    function zc(a, b, c) {
      xc(a) && c.delete(b);
    }
    function Ac() {
      for (ic = false; 0 < jc.length; ) {
        var a = jc[0];
        if (a.blockedOn !== null) {
          a = Cb(a.blockedOn);
          a !== null && ec(a);
          break;
        }
        for (var b = a.targetContainers; 0 < b.length; ) {
          var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
          if (c !== null) {
            a.blockedOn = c;
            break;
          }
          b.shift();
        }
        a.blockedOn === null && jc.shift();
      }
      kc !== null && xc(kc) && (kc = null);
      lc !== null && xc(lc) && (lc = null);
      mc !== null && xc(mc) && (mc = null);
      nc.forEach(zc);
      oc.forEach(zc);
    }
    function Bc(a, b) {
      a.blockedOn === b && (a.blockedOn = null, ic || (ic = true, r2.unstable_scheduleCallback(r2.unstable_NormalPriority, Ac)));
    }
    function Cc(a) {
      function b(b2) {
        return Bc(b2, a);
      }
      if (0 < jc.length) {
        Bc(jc[0], a);
        for (var c = 1; c < jc.length; c++) {
          var d2 = jc[c];
          d2.blockedOn === a && (d2.blockedOn = null);
        }
      }
      kc !== null && Bc(kc, a);
      lc !== null && Bc(lc, a);
      mc !== null && Bc(mc, a);
      nc.forEach(b);
      oc.forEach(b);
      for (c = 0; c < pc.length; c++)
        d2 = pc[c], d2.blockedOn === a && (d2.blockedOn = null);
      for (; 0 < pc.length && (c = pc[0], c.blockedOn === null); )
        vc(c), c.blockedOn === null && pc.shift();
    }
    function Dc(a, b) {
      var c = {};
      c[a.toLowerCase()] = b.toLowerCase();
      c["Webkit" + a] = "webkit" + b;
      c["Moz" + a] = "moz" + b;
      return c;
    }
    var Ec = {animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd")};
    var Fc = {};
    var Gc = {};
    fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
    function Hc(a) {
      if (Fc[a])
        return Fc[a];
      if (!Ec[a])
        return a;
      var b = Ec[a], c;
      for (c in b)
        if (b.hasOwnProperty(c) && c in Gc)
          return Fc[a] = b[c];
      return a;
    }
    var Ic = Hc("animationend");
    var Jc = Hc("animationiteration");
    var Kc = Hc("animationstart");
    var Lc = Hc("transitionend");
    var Mc = new Map();
    var Nc = new Map();
    var Oc = [
      "abort",
      "abort",
      Ic,
      "animationEnd",
      Jc,
      "animationIteration",
      Kc,
      "animationStart",
      "canplay",
      "canPlay",
      "canplaythrough",
      "canPlayThrough",
      "durationchange",
      "durationChange",
      "emptied",
      "emptied",
      "encrypted",
      "encrypted",
      "ended",
      "ended",
      "error",
      "error",
      "gotpointercapture",
      "gotPointerCapture",
      "load",
      "load",
      "loadeddata",
      "loadedData",
      "loadedmetadata",
      "loadedMetadata",
      "loadstart",
      "loadStart",
      "lostpointercapture",
      "lostPointerCapture",
      "playing",
      "playing",
      "progress",
      "progress",
      "seeking",
      "seeking",
      "stalled",
      "stalled",
      "suspend",
      "suspend",
      "timeupdate",
      "timeUpdate",
      Lc,
      "transitionEnd",
      "waiting",
      "waiting"
    ];
    function Pc(a, b) {
      for (var c = 0; c < a.length; c += 2) {
        var d2 = a[c], e = a[c + 1];
        e = "on" + (e[0].toUpperCase() + e.slice(1));
        Nc.set(d2, b);
        Mc.set(d2, e);
        da(e, [d2]);
      }
    }
    var Qc = r2.unstable_now;
    Qc();
    var F = 8;
    function Rc(a) {
      if ((1 & a) !== 0)
        return F = 15, 1;
      if ((2 & a) !== 0)
        return F = 14, 2;
      if ((4 & a) !== 0)
        return F = 13, 4;
      var b = 24 & a;
      if (b !== 0)
        return F = 12, b;
      if ((a & 32) !== 0)
        return F = 11, 32;
      b = 192 & a;
      if (b !== 0)
        return F = 10, b;
      if ((a & 256) !== 0)
        return F = 9, 256;
      b = 3584 & a;
      if (b !== 0)
        return F = 8, b;
      if ((a & 4096) !== 0)
        return F = 7, 4096;
      b = 4186112 & a;
      if (b !== 0)
        return F = 6, b;
      b = 62914560 & a;
      if (b !== 0)
        return F = 5, b;
      if (a & 67108864)
        return F = 4, 67108864;
      if ((a & 134217728) !== 0)
        return F = 3, 134217728;
      b = 805306368 & a;
      if (b !== 0)
        return F = 2, b;
      if ((1073741824 & a) !== 0)
        return F = 1, 1073741824;
      F = 8;
      return a;
    }
    function Sc(a) {
      switch (a) {
        case 99:
          return 15;
        case 98:
          return 10;
        case 97:
        case 96:
          return 8;
        case 95:
          return 2;
        default:
          return 0;
      }
    }
    function Tc(a) {
      switch (a) {
        case 15:
        case 14:
          return 99;
        case 13:
        case 12:
        case 11:
        case 10:
          return 98;
        case 9:
        case 8:
        case 7:
        case 6:
        case 4:
        case 5:
          return 97;
        case 3:
        case 2:
        case 1:
          return 95;
        case 0:
          return 90;
        default:
          throw Error(y(358, a));
      }
    }
    function Uc(a, b) {
      var c = a.pendingLanes;
      if (c === 0)
        return F = 0;
      var d2 = 0, e = 0, f = a.expiredLanes, g = a.suspendedLanes, h = a.pingedLanes;
      if (f !== 0)
        d2 = f, e = F = 15;
      else if (f = c & 134217727, f !== 0) {
        var k = f & ~g;
        k !== 0 ? (d2 = Rc(k), e = F) : (h &= f, h !== 0 && (d2 = Rc(h), e = F));
      } else
        f = c & ~g, f !== 0 ? (d2 = Rc(f), e = F) : h !== 0 && (d2 = Rc(h), e = F);
      if (d2 === 0)
        return 0;
      d2 = 31 - Vc(d2);
      d2 = c & ((0 > d2 ? 0 : 1 << d2) << 1) - 1;
      if (b !== 0 && b !== d2 && (b & g) === 0) {
        Rc(b);
        if (e <= F)
          return b;
        F = e;
      }
      b = a.entangledLanes;
      if (b !== 0)
        for (a = a.entanglements, b &= d2; 0 < b; )
          c = 31 - Vc(b), e = 1 << c, d2 |= a[c], b &= ~e;
      return d2;
    }
    function Wc(a) {
      a = a.pendingLanes & -1073741825;
      return a !== 0 ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function Xc(a, b) {
      switch (a) {
        case 15:
          return 1;
        case 14:
          return 2;
        case 12:
          return a = Yc(24 & ~b), a === 0 ? Xc(10, b) : a;
        case 10:
          return a = Yc(192 & ~b), a === 0 ? Xc(8, b) : a;
        case 8:
          return a = Yc(3584 & ~b), a === 0 && (a = Yc(4186112 & ~b), a === 0 && (a = 512)), a;
        case 2:
          return b = Yc(805306368 & ~b), b === 0 && (b = 268435456), b;
      }
      throw Error(y(358, a));
    }
    function Yc(a) {
      return a & -a;
    }
    function Zc(a) {
      for (var b = [], c = 0; 31 > c; c++)
        b.push(a);
      return b;
    }
    function $c(a, b, c) {
      a.pendingLanes |= b;
      var d2 = b - 1;
      a.suspendedLanes &= d2;
      a.pingedLanes &= d2;
      a = a.eventTimes;
      b = 31 - Vc(b);
      a[b] = c;
    }
    var Vc = Math.clz32 ? Math.clz32 : ad;
    var bd = Math.log;
    var cd = Math.LN2;
    function ad(a) {
      return a === 0 ? 32 : 31 - (bd(a) / cd | 0) | 0;
    }
    var dd = r2.unstable_UserBlockingPriority;
    var ed = r2.unstable_runWithPriority;
    var fd = true;
    function gd(a, b, c, d2) {
      Kb || Ib();
      var e = hd, f = Kb;
      Kb = true;
      try {
        Hb(e, a, b, c, d2);
      } finally {
        (Kb = f) || Mb();
      }
    }
    function id(a, b, c, d2) {
      ed(dd, hd.bind(null, a, b, c, d2));
    }
    function hd(a, b, c, d2) {
      if (fd) {
        var e;
        if ((e = (b & 4) === 0) && 0 < jc.length && -1 < qc.indexOf(a))
          a = rc(null, a, b, c, d2), jc.push(a);
        else {
          var f = yc(a, b, c, d2);
          if (f === null)
            e && sc(a, d2);
          else {
            if (e) {
              if (-1 < qc.indexOf(a)) {
                a = rc(f, a, b, c, d2);
                jc.push(a);
                return;
              }
              if (uc(f, a, b, c, d2))
                return;
              sc(a, d2);
            }
            jd(a, b, d2, null, c);
          }
        }
      }
    }
    function yc(a, b, c, d2) {
      var e = xb(d2);
      e = wc(e);
      if (e !== null) {
        var f = Zb(e);
        if (f === null)
          e = null;
        else {
          var g = f.tag;
          if (g === 13) {
            e = $b(f);
            if (e !== null)
              return e;
            e = null;
          } else if (g === 3) {
            if (f.stateNode.hydrate)
              return f.tag === 3 ? f.stateNode.containerInfo : null;
            e = null;
          } else
            f !== e && (e = null);
        }
      }
      jd(a, b, d2, e, c);
      return null;
    }
    var kd = null;
    var ld = null;
    var md = null;
    function nd() {
      if (md)
        return md;
      var a, b = ld, c = b.length, d2, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
      for (a = 0; a < c && b[a] === e[a]; a++)
        ;
      var g = c - a;
      for (d2 = 1; d2 <= g && b[c - d2] === e[f - d2]; d2++)
        ;
      return md = e.slice(a, 1 < d2 ? 1 - d2 : void 0);
    }
    function od(a) {
      var b = a.keyCode;
      "charCode" in a ? (a = a.charCode, a === 0 && b === 13 && (a = 13)) : a = b;
      a === 10 && (a = 13);
      return 32 <= a || a === 13 ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b(b2, d2, e, f, g) {
        this._reactName = b2;
        this._targetInst = e;
        this.type = d2;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for (var c in a)
          a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
        this.isDefaultPrevented = (f.defaultPrevented != null ? f.defaultPrevented : f.returnValue === false) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      m(b.prototype, {preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : typeof a2.returnValue !== "unknown" && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : typeof a2.cancelBubble !== "unknown" && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd});
      return b;
    }
    var sd = {eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0};
    var td = rd(sd);
    var ud = m({}, sd, {view: 0, detail: 0});
    var vd = rd(ud);
    var wd;
    var xd;
    var yd;
    var Ad = m({}, ud, {screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return a.relatedTarget === void 0 ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a)
        return a.movementX;
      a !== yd && (yd && a.type === "mousemove" ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    }});
    var Bd = rd(Ad);
    var Cd = m({}, Ad, {dataTransfer: 0});
    var Dd = rd(Cd);
    var Ed = m({}, ud, {relatedTarget: 0});
    var Fd = rd(Ed);
    var Gd = m({}, sd, {animationName: 0, elapsedTime: 0, pseudoElement: 0});
    var Hd = rd(Gd);
    var Id = m({}, sd, {clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }});
    var Jd = rd(Id);
    var Kd = m({}, sd, {data: 0});
    var Ld = rd(Kd);
    var Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Od = {Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey"};
    function Pd(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = m({}, ud, {key: function(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if (b !== "Unidentified")
          return b;
      }
      return a.type === "keypress" ? (a = od(a), a === 13 ? "Enter" : String.fromCharCode(a)) : a.type === "keydown" || a.type === "keyup" ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return a.type === "keypress" ? od(a) : 0;
    }, keyCode: function(a) {
      return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    }, which: function(a) {
      return a.type === "keypress" ? od(a) : a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    }});
    var Rd = rd(Qd);
    var Sd = m({}, Ad, {pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0});
    var Td = rd(Sd);
    var Ud = m({}, ud, {touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd});
    var Vd = rd(Ud);
    var Wd = m({}, sd, {propertyName: 0, elapsedTime: 0, pseudoElement: 0});
    var Xd = rd(Wd);
    var Yd = m({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Zd = rd(Yd);
    var $d = [9, 13, 27, 32];
    var ae = fa && "CompositionEvent" in window;
    var be = null;
    fa && "documentMode" in document && (be = document.documentMode);
    var ce = fa && "TextEvent" in window && !be;
    var de = fa && (!ae || be && 8 < be && 11 >= be);
    var ee = String.fromCharCode(32);
    var fe = false;
    function ge(a, b) {
      switch (a) {
        case "keyup":
          return $d.indexOf(b.keyCode) !== -1;
        case "keydown":
          return b.keyCode !== 229;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a) {
      a = a.detail;
      return typeof a === "object" && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b) {
      switch (a) {
        case "compositionend":
          return he(b);
        case "keypress":
          if (b.which !== 32)
            return null;
          fe = true;
          return ee;
        case "textInput":
          return a = b.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b) {
      if (ie)
        return a === "compositionend" || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length)
              return b.char;
            if (b.which)
              return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return de && b.locale !== "ko" ? null : b.data;
        default:
          return null;
      }
    }
    var le = {color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true};
    function me(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b === "input" ? !!le[a.type] : b === "textarea" ? true : false;
    }
    function ne(a, b, c, d2) {
      Eb(d2);
      b = oe(b, "onChange");
      0 < b.length && (c = new td("onChange", "change", null, c, d2), a.push({event: c, listeners: b}));
    }
    var pe = null;
    var qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b = ue(a);
      if (Wa(b))
        return a;
    }
    function ve(a, b) {
      if (a === "change")
        return b;
    }
    var we = false;
    if (fa) {
      if (fa) {
        ye = "oninput" in document;
        if (!ye) {
          ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = typeof ze.oninput === "function";
        }
        xe = ye;
      } else
        xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    var xe;
    var ye;
    var ze;
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if (a.propertyName === "value" && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a));
        a = re;
        if (Kb)
          a(b);
        else {
          Kb = true;
          try {
            Gb(a, b);
          } finally {
            Kb = false, Mb();
          }
        }
      }
    }
    function Ce(a, b, c) {
      a === "focusin" ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : a === "focusout" && Ae();
    }
    function De(a) {
      if (a === "selectionchange" || a === "keyup" || a === "keydown")
        return te(qe);
    }
    function Ee(a, b) {
      if (a === "click")
        return te(b);
    }
    function Fe(a, b) {
      if (a === "input" || a === "change")
        return te(b);
    }
    function Ge(a, b) {
      return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var He = typeof Object.is === "function" ? Object.is : Ge;
    var Ie = Object.prototype.hasOwnProperty;
    function Je(a, b) {
      if (He(a, b))
        return true;
      if (typeof a !== "object" || a === null || typeof b !== "object" || b === null)
        return false;
      var c = Object.keys(a), d2 = Object.keys(b);
      if (c.length !== d2.length)
        return false;
      for (d2 = 0; d2 < c.length; d2++)
        if (!Ie.call(b, c[d2]) || !He(a[c[d2]], b[c[d2]]))
          return false;
      return true;
    }
    function Ke(a) {
      for (; a && a.firstChild; )
        a = a.firstChild;
      return a;
    }
    function Le(a, b) {
      var c = Ke(a);
      a = 0;
      for (var d2; c; ) {
        if (c.nodeType === 3) {
          d2 = a + c.textContent.length;
          if (a <= b && d2 >= b)
            return {node: c, offset: b - a};
          a = d2;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = Ke(c);
      }
    }
    function Me(a, b) {
      return a && b ? a === b ? true : a && a.nodeType === 3 ? false : b && b.nodeType === 3 ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
    }
    function Ne() {
      for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
        try {
          var c = typeof b.contentWindow.location.href === "string";
        } catch (d2) {
          c = false;
        }
        if (c)
          a = b.contentWindow;
        else
          break;
        b = Xa(a.document);
      }
      return b;
    }
    function Oe(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b && (b === "input" && (a.type === "text" || a.type === "search" || a.type === "tel" || a.type === "url" || a.type === "password") || b === "textarea" || a.contentEditable === "true");
    }
    var Pe = fa && "documentMode" in document && 11 >= document.documentMode;
    var Qe = null;
    var Re = null;
    var Se = null;
    var Te = false;
    function Ue(a, b, c) {
      var d2 = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument;
      Te || Qe == null || Qe !== Xa(d2) || (d2 = Qe, "selectionStart" in d2 && Oe(d2) ? d2 = {start: d2.selectionStart, end: d2.selectionEnd} : (d2 = (d2.ownerDocument && d2.ownerDocument.defaultView || window).getSelection(), d2 = {anchorNode: d2.anchorNode, anchorOffset: d2.anchorOffset, focusNode: d2.focusNode, focusOffset: d2.focusOffset}), Se && Je(Se, d2) || (Se = d2, d2 = oe(Re, "onSelect"), 0 < d2.length && (b = new td("onSelect", "select", null, b, c), a.push({event: b, listeners: d2}), b.target = Qe)));
    }
    Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
    Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
    Pc(Oc, 2);
    for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
      Nc.set(Ve[We], 0);
    ea("onMouseEnter", ["mouseout", "mouseover"]);
    ea("onMouseLeave", ["mouseout", "mouseover"]);
    ea("onPointerEnter", ["pointerout", "pointerover"]);
    ea("onPointerLeave", ["pointerout", "pointerover"]);
    da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
    function Ze(a, b, c) {
      var d2 = a.type || "unknown-event";
      a.currentTarget = c;
      Yb(d2, b, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b) {
      b = (b & 4) !== 0;
      for (var c = 0; c < a.length; c++) {
        var d2 = a[c], e = d2.event;
        d2 = d2.listeners;
        a: {
          var f = void 0;
          if (b)
            for (var g = d2.length - 1; 0 <= g; g--) {
              var h = d2[g], k = h.instance, l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              Ze(e, h, l);
              f = k;
            }
          else
            for (g = 0; g < d2.length; g++) {
              h = d2[g];
              k = h.instance;
              l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              Ze(e, h, l);
              f = k;
            }
        }
      }
      if (Ub)
        throw a = Vb, Ub = false, Vb = null, a;
    }
    function G(a, b) {
      var c = $e(b), d2 = a + "__bubble";
      c.has(d2) || (af(b, a, 2, false), c.add(d2));
    }
    var bf = "_reactListening" + Math.random().toString(36).slice(2);
    function cf(a) {
      a[bf] || (a[bf] = true, ba.forEach(function(b) {
        Ye.has(b) || df(b, false, a, null);
        df(b, true, a, null);
      }));
    }
    function df(a, b, c, d2) {
      var e = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, f = c;
      a === "selectionchange" && c.nodeType !== 9 && (f = c.ownerDocument);
      if (d2 !== null && !b && Ye.has(a)) {
        if (a !== "scroll")
          return;
        e |= 2;
        f = d2;
      }
      var g = $e(f), h = a + "__" + (b ? "capture" : "bubble");
      g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
    }
    function af(a, b, c, d2) {
      var e = Nc.get(b);
      switch (e === void 0 ? 2 : e) {
        case 0:
          e = gd;
          break;
        case 1:
          e = id;
          break;
        default:
          e = hd;
      }
      c = e.bind(null, b, c, a);
      e = void 0;
      !Pb || b !== "touchstart" && b !== "touchmove" && b !== "wheel" || (e = true);
      d2 ? e !== void 0 ? a.addEventListener(b, c, {capture: true, passive: e}) : a.addEventListener(b, c, true) : e !== void 0 ? a.addEventListener(b, c, {passive: e}) : a.addEventListener(b, c, false);
    }
    function jd(a, b, c, d2, e) {
      var f = d2;
      if ((b & 1) === 0 && (b & 2) === 0 && d2 !== null)
        a:
          for (; ; ) {
            if (d2 === null)
              return;
            var g = d2.tag;
            if (g === 3 || g === 4) {
              var h = d2.stateNode.containerInfo;
              if (h === e || h.nodeType === 8 && h.parentNode === e)
                break;
              if (g === 4)
                for (g = d2.return; g !== null; ) {
                  var k = g.tag;
                  if (k === 3 || k === 4) {
                    if (k = g.stateNode.containerInfo, k === e || k.nodeType === 8 && k.parentNode === e)
                      return;
                  }
                  g = g.return;
                }
              for (; h !== null; ) {
                g = wc(h);
                if (g === null)
                  return;
                k = g.tag;
                if (k === 5 || k === 6) {
                  d2 = f = g;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d2 = d2.return;
          }
      Nb(function() {
        var d3 = f, e2 = xb(c), g2 = [];
        a: {
          var h2 = Mc.get(a);
          if (h2 !== void 0) {
            var k2 = td, x = a;
            switch (a) {
              case "keypress":
                if (od(c) === 0)
                  break a;
              case "keydown":
              case "keyup":
                k2 = Rd;
                break;
              case "focusin":
                x = "focus";
                k2 = Fd;
                break;
              case "focusout":
                x = "blur";
                k2 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k2 = Fd;
                break;
              case "click":
                if (c.button === 2)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k2 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k2 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k2 = Vd;
                break;
              case Ic:
              case Jc:
              case Kc:
                k2 = Hd;
                break;
              case Lc:
                k2 = Xd;
                break;
              case "scroll":
                k2 = vd;
                break;
              case "wheel":
                k2 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k2 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k2 = Td;
            }
            var w = (b & 4) !== 0, z = !w && a === "scroll", u = w ? h2 !== null ? h2 + "Capture" : null : h2;
            w = [];
            for (var t2 = d3, q; t2 !== null; ) {
              q = t2;
              var v = q.stateNode;
              q.tag === 5 && v !== null && (q = v, u !== null && (v = Ob(t2, u), v != null && w.push(ef(t2, v, q))));
              if (z)
                break;
              t2 = t2.return;
            }
            0 < w.length && (h2 = new k2(h2, x, null, c, e2), g2.push({event: h2, listeners: w}));
          }
        }
        if ((b & 7) === 0) {
          a: {
            h2 = a === "mouseover" || a === "pointerover";
            k2 = a === "mouseout" || a === "pointerout";
            if (h2 && (b & 16) === 0 && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff]))
              break a;
            if (k2 || h2) {
              h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
              if (k2) {
                if (x = c.relatedTarget || c.toElement, k2 = d3, x = x ? wc(x) : null, x !== null && (z = Zb(x), x !== z || x.tag !== 5 && x.tag !== 6))
                  x = null;
              } else
                k2 = null, x = d3;
              if (k2 !== x) {
                w = Bd;
                v = "onMouseLeave";
                u = "onMouseEnter";
                t2 = "mouse";
                if (a === "pointerout" || a === "pointerover")
                  w = Td, v = "onPointerLeave", u = "onPointerEnter", t2 = "pointer";
                z = k2 == null ? h2 : ue(k2);
                q = x == null ? h2 : ue(x);
                h2 = new w(v, t2 + "leave", k2, c, e2);
                h2.target = z;
                h2.relatedTarget = q;
                v = null;
                wc(e2) === d3 && (w = new w(u, t2 + "enter", x, c, e2), w.target = q, w.relatedTarget = z, v = w);
                z = v;
                if (k2 && x)
                  b: {
                    w = k2;
                    u = x;
                    t2 = 0;
                    for (q = w; q; q = gf(q))
                      t2++;
                    q = 0;
                    for (v = u; v; v = gf(v))
                      q++;
                    for (; 0 < t2 - q; )
                      w = gf(w), t2--;
                    for (; 0 < q - t2; )
                      u = gf(u), q--;
                    for (; t2--; ) {
                      if (w === u || u !== null && w === u.alternate)
                        break b;
                      w = gf(w);
                      u = gf(u);
                    }
                    w = null;
                  }
                else
                  w = null;
                k2 !== null && hf(g2, h2, k2, w, false);
                x !== null && z !== null && hf(g2, z, x, w, true);
              }
            }
          }
          a: {
            h2 = d3 ? ue(d3) : window;
            k2 = h2.nodeName && h2.nodeName.toLowerCase();
            if (k2 === "select" || k2 === "input" && h2.type === "file")
              var J = ve;
            else if (me(h2))
              if (we)
                J = Fe;
              else {
                J = De;
                var K = Ce;
              }
            else
              (k2 = h2.nodeName) && k2.toLowerCase() === "input" && (h2.type === "checkbox" || h2.type === "radio") && (J = Ee);
            if (J && (J = J(a, d3))) {
              ne(g2, J, c, e2);
              break a;
            }
            K && K(a, h2, d3);
            a === "focusout" && (K = h2._wrapperState) && K.controlled && h2.type === "number" && bb(h2, "number", h2.value);
          }
          K = d3 ? ue(d3) : window;
          switch (a) {
            case "focusin":
              if (me(K) || K.contentEditable === "true")
                Qe = K, Re = d3, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g2, c, e2);
              break;
            case "selectionchange":
              if (Pe)
                break;
            case "keydown":
            case "keyup":
              Ue(g2, c, e2);
          }
          var Q;
          if (ae)
            b: {
              switch (a) {
                case "compositionstart":
                  var L = "onCompositionStart";
                  break b;
                case "compositionend":
                  L = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  L = "onCompositionUpdate";
                  break b;
              }
              L = void 0;
            }
          else
            ie ? ge(a, c) && (L = "onCompositionEnd") : a === "keydown" && c.keyCode === 229 && (L = "onCompositionStart");
          L && (de && c.locale !== "ko" && (ie || L !== "onCompositionStart" ? L === "onCompositionEnd" && ie && (Q = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), K = oe(d3, L), 0 < K.length && (L = new Ld(L, a, null, c, e2), g2.push({event: L, listeners: K}), Q ? L.data = Q : (Q = he(c), Q !== null && (L.data = Q))));
          if (Q = ce ? je(a, c) : ke(a, c))
            d3 = oe(d3, "onBeforeInput"), 0 < d3.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({event: e2, listeners: d3}), e2.data = Q);
        }
        se(g2, b);
      });
    }
    function ef(a, b, c) {
      return {instance: a, listener: b, currentTarget: c};
    }
    function oe(a, b) {
      for (var c = b + "Capture", d2 = []; a !== null; ) {
        var e = a, f = e.stateNode;
        e.tag === 5 && f !== null && (e = f, f = Ob(a, c), f != null && d2.unshift(ef(a, f, e)), f = Ob(a, b), f != null && d2.push(ef(a, f, e)));
        a = a.return;
      }
      return d2;
    }
    function gf(a) {
      if (a === null)
        return null;
      do
        a = a.return;
      while (a && a.tag !== 5);
      return a ? a : null;
    }
    function hf(a, b, c, d2, e) {
      for (var f = b._reactName, g = []; c !== null && c !== d2; ) {
        var h = c, k = h.alternate, l = h.stateNode;
        if (k !== null && k === d2)
          break;
        h.tag === 5 && l !== null && (h = l, e ? (k = Ob(c, f), k != null && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), k != null && g.push(ef(c, k, h))));
        c = c.return;
      }
      g.length !== 0 && a.push({event: b, listeners: g});
    }
    function jf() {
    }
    var kf = null;
    var lf = null;
    function mf(a, b) {
      switch (a) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!b.autoFocus;
      }
      return false;
    }
    function nf(a, b) {
      return a === "textarea" || a === "option" || a === "noscript" || typeof b.children === "string" || typeof b.children === "number" || typeof b.dangerouslySetInnerHTML === "object" && b.dangerouslySetInnerHTML !== null && b.dangerouslySetInnerHTML.__html != null;
    }
    var of = typeof setTimeout === "function" ? setTimeout : void 0;
    var pf = typeof clearTimeout === "function" ? clearTimeout : void 0;
    function qf(a) {
      a.nodeType === 1 ? a.textContent = "" : a.nodeType === 9 && (a = a.body, a != null && (a.textContent = ""));
    }
    function rf(a) {
      for (; a != null; a = a.nextSibling) {
        var b = a.nodeType;
        if (b === 1 || b === 3)
          break;
      }
      return a;
    }
    function sf(a) {
      a = a.previousSibling;
      for (var b = 0; a; ) {
        if (a.nodeType === 8) {
          var c = a.data;
          if (c === "$" || c === "$!" || c === "$?") {
            if (b === 0)
              return a;
            b--;
          } else
            c === "/$" && b++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var tf = 0;
    function uf(a) {
      return {$$typeof: Ga, toString: a, valueOf: a};
    }
    var vf = Math.random().toString(36).slice(2);
    var wf = "__reactFiber$" + vf;
    var xf = "__reactProps$" + vf;
    var ff = "__reactContainer$" + vf;
    var yf = "__reactEvents$" + vf;
    function wc(a) {
      var b = a[wf];
      if (b)
        return b;
      for (var c = a.parentNode; c; ) {
        if (b = c[ff] || c[wf]) {
          c = b.alternate;
          if (b.child !== null || c !== null && c.child !== null)
            for (a = sf(a); a !== null; ) {
              if (c = a[wf])
                return c;
              a = sf(a);
            }
          return b;
        }
        a = c;
        c = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[wf] || a[ff];
      return !a || a.tag !== 5 && a.tag !== 6 && a.tag !== 13 && a.tag !== 3 ? null : a;
    }
    function ue(a) {
      if (a.tag === 5 || a.tag === 6)
        return a.stateNode;
      throw Error(y(33));
    }
    function Db(a) {
      return a[xf] || null;
    }
    function $e(a) {
      var b = a[yf];
      b === void 0 && (b = a[yf] = new Set());
      return b;
    }
    var zf = [];
    var Af = -1;
    function Bf(a) {
      return {current: a};
    }
    function H(a) {
      0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
    }
    function I(a, b) {
      Af++;
      zf[Af] = a.current;
      a.current = b;
    }
    var Cf = {};
    var M = Bf(Cf);
    var N = Bf(false);
    var Df = Cf;
    function Ef(a, b) {
      var c = a.type.contextTypes;
      if (!c)
        return Cf;
      var d2 = a.stateNode;
      if (d2 && d2.__reactInternalMemoizedUnmaskedChildContext === b)
        return d2.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c)
        e[f] = b[f];
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Ff(a) {
      a = a.childContextTypes;
      return a !== null && a !== void 0;
    }
    function Gf() {
      H(N);
      H(M);
    }
    function Hf(a, b, c) {
      if (M.current !== Cf)
        throw Error(y(168));
      I(M, b);
      I(N, c);
    }
    function If(a, b, c) {
      var d2 = a.stateNode;
      a = b.childContextTypes;
      if (typeof d2.getChildContext !== "function")
        return c;
      d2 = d2.getChildContext();
      for (var e in d2)
        if (!(e in a))
          throw Error(y(108, Ra(b) || "Unknown", e));
      return m({}, c, d2);
    }
    function Jf(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
      Df = M.current;
      I(M, a);
      I(N, N.current);
      return true;
    }
    function Kf(a, b, c) {
      var d2 = a.stateNode;
      if (!d2)
        throw Error(y(169));
      c ? (a = If(a, b, Df), d2.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);
      I(N, c);
    }
    var Lf = null;
    var Mf = null;
    var Nf = r2.unstable_runWithPriority;
    var Of = r2.unstable_scheduleCallback;
    var Pf = r2.unstable_cancelCallback;
    var Qf = r2.unstable_shouldYield;
    var Rf = r2.unstable_requestPaint;
    var Sf = r2.unstable_now;
    var Tf = r2.unstable_getCurrentPriorityLevel;
    var Uf = r2.unstable_ImmediatePriority;
    var Vf = r2.unstable_UserBlockingPriority;
    var Wf = r2.unstable_NormalPriority;
    var Xf = r2.unstable_LowPriority;
    var Yf = r2.unstable_IdlePriority;
    var Zf = {};
    var $f = Rf !== void 0 ? Rf : function() {
    };
    var ag = null;
    var bg = null;
    var cg = false;
    var dg = Sf();
    var O = 1e4 > dg ? Sf : function() {
      return Sf() - dg;
    };
    function eg() {
      switch (Tf()) {
        case Uf:
          return 99;
        case Vf:
          return 98;
        case Wf:
          return 97;
        case Xf:
          return 96;
        case Yf:
          return 95;
        default:
          throw Error(y(332));
      }
    }
    function fg(a) {
      switch (a) {
        case 99:
          return Uf;
        case 98:
          return Vf;
        case 97:
          return Wf;
        case 96:
          return Xf;
        case 95:
          return Yf;
        default:
          throw Error(y(332));
      }
    }
    function gg(a, b) {
      a = fg(a);
      return Nf(a, b);
    }
    function hg(a, b, c) {
      a = fg(a);
      return Of(a, b, c);
    }
    function ig() {
      if (bg !== null) {
        var a = bg;
        bg = null;
        Pf(a);
      }
      jg();
    }
    function jg() {
      if (!cg && ag !== null) {
        cg = true;
        var a = 0;
        try {
          var b = ag;
          gg(99, function() {
            for (; a < b.length; a++) {
              var c = b[a];
              do
                c = c(true);
              while (c !== null);
            }
          });
          ag = null;
        } catch (c) {
          throw ag !== null && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
        } finally {
          cg = false;
        }
      }
    }
    var kg = ra.ReactCurrentBatchConfig;
    function lg(a, b) {
      if (a && a.defaultProps) {
        b = m({}, b);
        a = a.defaultProps;
        for (var c in a)
          b[c] === void 0 && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    var mg = Bf(null);
    var ng = null;
    var og = null;
    var pg = null;
    function qg() {
      pg = og = ng = null;
    }
    function rg(a) {
      var b = mg.current;
      H(mg);
      a.type._context._currentValue = b;
    }
    function sg(a, b) {
      for (; a !== null; ) {
        var c = a.alternate;
        if ((a.childLanes & b) === b)
          if (c === null || (c.childLanes & b) === b)
            break;
          else
            c.childLanes |= b;
        else
          a.childLanes |= b, c !== null && (c.childLanes |= b);
        a = a.return;
      }
    }
    function tg(a, b) {
      ng = a;
      pg = og = null;
      a = a.dependencies;
      a !== null && a.firstContext !== null && ((a.lanes & b) !== 0 && (ug = true), a.firstContext = null);
    }
    function vg(a, b) {
      if (pg !== a && b !== false && b !== 0) {
        if (typeof b !== "number" || b === 1073741823)
          pg = a, b = 1073741823;
        b = {context: a, observedBits: b, next: null};
        if (og === null) {
          if (ng === null)
            throw Error(y(308));
          og = b;
          ng.dependencies = {lanes: 0, firstContext: b, responders: null};
        } else
          og = og.next = b;
      }
      return a._currentValue;
    }
    var wg = false;
    function xg(a) {
      a.updateQueue = {baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: {pending: null}, effects: null};
    }
    function yg(a, b) {
      a = a.updateQueue;
      b.updateQueue === a && (b.updateQueue = {baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects});
    }
    function zg(a, b) {
      return {eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null};
    }
    function Ag(a, b) {
      a = a.updateQueue;
      if (a !== null) {
        a = a.shared;
        var c = a.pending;
        c === null ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
      }
    }
    function Bg(a, b) {
      var c = a.updateQueue, d2 = a.alternate;
      if (d2 !== null && (d2 = d2.updateQueue, c === d2)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (c !== null) {
          do {
            var g = {eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null};
            f === null ? e = f = g : f = f.next = g;
            c = c.next;
          } while (c !== null);
          f === null ? e = f = b : f = f.next = b;
        } else
          e = f = b;
        c = {baseState: d2.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d2.shared, effects: d2.effects};
        a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate;
      a === null ? c.firstBaseUpdate = b : a.next = b;
      c.lastBaseUpdate = b;
    }
    function Cg(a, b, c, d2) {
      var e = a.updateQueue;
      wg = false;
      var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (h !== null) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        g === null ? f = l : g.next = l;
        g = k;
        var n = a.alternate;
        if (n !== null) {
          n = n.updateQueue;
          var A = n.lastBaseUpdate;
          A !== g && (A === null ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
        }
      }
      if (f !== null) {
        A = e.baseState;
        g = 0;
        n = l = k = null;
        do {
          h = f.lane;
          var p = f.eventTime;
          if ((d2 & h) === h) {
            n !== null && (n = n.next = {
              eventTime: p,
              lane: 0,
              tag: f.tag,
              payload: f.payload,
              callback: f.callback,
              next: null
            });
            a: {
              var C = a, x = f;
              h = b;
              p = c;
              switch (x.tag) {
                case 1:
                  C = x.payload;
                  if (typeof C === "function") {
                    A = C.call(p, A, h);
                    break a;
                  }
                  A = C;
                  break a;
                case 3:
                  C.flags = C.flags & -4097 | 64;
                case 0:
                  C = x.payload;
                  h = typeof C === "function" ? C.call(p, A, h) : C;
                  if (h === null || h === void 0)
                    break a;
                  A = m({}, A, h);
                  break a;
                case 2:
                  wg = true;
              }
            }
            f.callback !== null && (a.flags |= 32, h = e.effects, h === null ? e.effects = [f] : h.push(f));
          } else
            p = {eventTime: p, lane: h, tag: f.tag, payload: f.payload, callback: f.callback, next: null}, n === null ? (l = n = p, k = A) : n = n.next = p, g |= h;
          f = f.next;
          if (f === null)
            if (h = e.shared.pending, h === null)
              break;
            else
              f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
        } while (1);
        n === null && (k = A);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = n;
        Dg |= g;
        a.lanes = g;
        a.memoizedState = A;
      }
    }
    function Eg(a, b, c) {
      a = b.effects;
      b.effects = null;
      if (a !== null)
        for (b = 0; b < a.length; b++) {
          var d2 = a[b], e = d2.callback;
          if (e !== null) {
            d2.callback = null;
            d2 = c;
            if (typeof e !== "function")
              throw Error(y(191, e));
            e.call(d2);
          }
        }
    }
    var Fg = new aa.Component().refs;
    function Gg(a, b, c, d2) {
      b = a.memoizedState;
      c = c(d2, b);
      c = c === null || c === void 0 ? b : m({}, b, c);
      a.memoizedState = c;
      a.lanes === 0 && (a.updateQueue.baseState = c);
    }
    var Kg = {isMounted: function(a) {
      return (a = a._reactInternals) ? Zb(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternals;
      var d2 = Hg(), e = Ig(a), f = zg(d2, e);
      f.payload = b;
      c !== void 0 && c !== null && (f.callback = c);
      Ag(a, f);
      Jg(a, e, d2);
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternals;
      var d2 = Hg(), e = Ig(a), f = zg(d2, e);
      f.tag = 1;
      f.payload = b;
      c !== void 0 && c !== null && (f.callback = c);
      Ag(a, f);
      Jg(a, e, d2);
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternals;
      var c = Hg(), d2 = Ig(a), e = zg(c, d2);
      e.tag = 2;
      b !== void 0 && b !== null && (e.callback = b);
      Ag(a, e);
      Jg(a, d2, c);
    }};
    function Lg(a, b, c, d2, e, f, g) {
      a = a.stateNode;
      return typeof a.shouldComponentUpdate === "function" ? a.shouldComponentUpdate(d2, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d2) || !Je(e, f) : true;
    }
    function Mg(a, b, c) {
      var d2 = false, e = Cf;
      var f = b.contextType;
      typeof f === "object" && f !== null ? f = vg(f) : (e = Ff(b) ? Df : M.current, d2 = b.contextTypes, f = (d2 = d2 !== null && d2 !== void 0) ? Ef(a, e) : Cf);
      b = new b(c, f);
      a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null;
      b.updater = Kg;
      a.stateNode = b;
      b._reactInternals = a;
      d2 && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
      return b;
    }
    function Ng(a, b, c, d2) {
      a = b.state;
      typeof b.componentWillReceiveProps === "function" && b.componentWillReceiveProps(c, d2);
      typeof b.UNSAFE_componentWillReceiveProps === "function" && b.UNSAFE_componentWillReceiveProps(c, d2);
      b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
    }
    function Og(a, b, c, d2) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = Fg;
      xg(a);
      var f = b.contextType;
      typeof f === "object" && f !== null ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));
      Cg(a, c, e, d2);
      e.state = a.memoizedState;
      f = b.getDerivedStateFromProps;
      typeof f === "function" && (Gg(a, b, f, c), e.state = a.memoizedState);
      typeof b.getDerivedStateFromProps === "function" || typeof e.getSnapshotBeforeUpdate === "function" || typeof e.UNSAFE_componentWillMount !== "function" && typeof e.componentWillMount !== "function" || (b = e.state, typeof e.componentWillMount === "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount === "function" && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d2), e.state = a.memoizedState);
      typeof e.componentDidMount === "function" && (a.flags |= 4);
    }
    var Pg = Array.isArray;
    function Qg(a, b, c) {
      a = c.ref;
      if (a !== null && typeof a !== "function" && typeof a !== "object") {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (c.tag !== 1)
              throw Error(y(309));
            var d2 = c.stateNode;
          }
          if (!d2)
            throw Error(y(147, a));
          var e = "" + a;
          if (b !== null && b.ref !== null && typeof b.ref === "function" && b.ref._stringRef === e)
            return b.ref;
          b = function(a2) {
            var b2 = d2.refs;
            b2 === Fg && (b2 = d2.refs = {});
            a2 === null ? delete b2[e] : b2[e] = a2;
          };
          b._stringRef = e;
          return b;
        }
        if (typeof a !== "string")
          throw Error(y(284));
        if (!c._owner)
          throw Error(y(290, a));
      }
      return a;
    }
    function Rg(a, b) {
      if (a.type !== "textarea")
        throw Error(y(31, Object.prototype.toString.call(b) === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
    }
    function Sg(a) {
      function b(b2, c2) {
        if (a) {
          var d3 = b2.lastEffect;
          d3 !== null ? (d3.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2;
          c2.nextEffect = null;
          c2.flags = 8;
        }
      }
      function c(c2, d3) {
        if (!a)
          return null;
        for (; d3 !== null; )
          b(c2, d3), d3 = d3.sibling;
        return null;
      }
      function d2(a2, b2) {
        for (a2 = new Map(); b2 !== null; )
          b2.key !== null ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
        return a2;
      }
      function e(a2, b2) {
        a2 = Tg(a2, b2);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f(b2, c2, d3) {
        b2.index = d3;
        if (!a)
          return c2;
        d3 = b2.alternate;
        if (d3 !== null)
          return d3 = d3.index, d3 < c2 ? (b2.flags = 2, c2) : d3;
        b2.flags = 2;
        return c2;
      }
      function g(b2) {
        a && b2.alternate === null && (b2.flags = 2);
        return b2;
      }
      function h(a2, b2, c2, d3) {
        if (b2 === null || b2.tag !== 6)
          return b2 = Ug(c2, a2.mode, d3), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function k(a2, b2, c2, d3) {
        if (b2 !== null && b2.elementType === c2.type)
          return d3 = e(b2, c2.props), d3.ref = Qg(a2, b2, c2), d3.return = a2, d3;
        d3 = Vg(c2.type, c2.key, c2.props, null, a2.mode, d3);
        d3.ref = Qg(a2, b2, c2);
        d3.return = a2;
        return d3;
      }
      function l(a2, b2, c2, d3) {
        if (b2 === null || b2.tag !== 4 || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation)
          return b2 = Wg(c2, a2.mode, d3), b2.return = a2, b2;
        b2 = e(b2, c2.children || []);
        b2.return = a2;
        return b2;
      }
      function n(a2, b2, c2, d3, f2) {
        if (b2 === null || b2.tag !== 7)
          return b2 = Xg(c2, a2.mode, d3, f2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function A(a2, b2, c2) {
        if (typeof b2 === "string" || typeof b2 === "number")
          return b2 = Ug("" + b2, a2.mode, c2), b2.return = a2, b2;
        if (typeof b2 === "object" && b2 !== null) {
          switch (b2.$$typeof) {
            case sa:
              return c2 = Vg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Qg(a2, null, b2), c2.return = a2, c2;
            case ta:
              return b2 = Wg(b2, a2.mode, c2), b2.return = a2, b2;
          }
          if (Pg(b2) || La(b2))
            return b2 = Xg(b2, a2.mode, c2, null), b2.return = a2, b2;
          Rg(a2, b2);
        }
        return null;
      }
      function p(a2, b2, c2, d3) {
        var e2 = b2 !== null ? b2.key : null;
        if (typeof c2 === "string" || typeof c2 === "number")
          return e2 !== null ? null : h(a2, b2, "" + c2, d3);
        if (typeof c2 === "object" && c2 !== null) {
          switch (c2.$$typeof) {
            case sa:
              return c2.key === e2 ? c2.type === ua ? n(a2, b2, c2.props.children, d3, e2) : k(a2, b2, c2, d3) : null;
            case ta:
              return c2.key === e2 ? l(a2, b2, c2, d3) : null;
          }
          if (Pg(c2) || La(c2))
            return e2 !== null ? null : n(a2, b2, c2, d3, null);
          Rg(a2, c2);
        }
        return null;
      }
      function C(a2, b2, c2, d3, e2) {
        if (typeof d3 === "string" || typeof d3 === "number")
          return a2 = a2.get(c2) || null, h(b2, a2, "" + d3, e2);
        if (typeof d3 === "object" && d3 !== null) {
          switch (d3.$$typeof) {
            case sa:
              return a2 = a2.get(d3.key === null ? c2 : d3.key) || null, d3.type === ua ? n(b2, a2, d3.props.children, e2, d3.key) : k(b2, a2, d3, e2);
            case ta:
              return a2 = a2.get(d3.key === null ? c2 : d3.key) || null, l(b2, a2, d3, e2);
          }
          if (Pg(d3) || La(d3))
            return a2 = a2.get(c2) || null, n(b2, a2, d3, e2, null);
          Rg(b2, d3);
        }
        return null;
      }
      function x(e2, g2, h2, k2) {
        for (var l2 = null, t2 = null, u = g2, z = g2 = 0, q = null; u !== null && z < h2.length; z++) {
          u.index > z ? (q = u, u = null) : q = u.sibling;
          var n2 = p(e2, u, h2[z], k2);
          if (n2 === null) {
            u === null && (u = q);
            break;
          }
          a && u && n2.alternate === null && b(e2, u);
          g2 = f(n2, g2, z);
          t2 === null ? l2 = n2 : t2.sibling = n2;
          t2 = n2;
          u = q;
        }
        if (z === h2.length)
          return c(e2, u), l2;
        if (u === null) {
          for (; z < h2.length; z++)
            u = A(e2, h2[z], k2), u !== null && (g2 = f(u, g2, z), t2 === null ? l2 = u : t2.sibling = u, t2 = u);
          return l2;
        }
        for (u = d2(e2, u); z < h2.length; z++)
          q = C(u, e2, z, h2[z], k2), q !== null && (a && q.alternate !== null && u.delete(q.key === null ? z : q.key), g2 = f(q, g2, z), t2 === null ? l2 = q : t2.sibling = q, t2 = q);
        a && u.forEach(function(a2) {
          return b(e2, a2);
        });
        return l2;
      }
      function w(e2, g2, h2, k2) {
        var l2 = La(h2);
        if (typeof l2 !== "function")
          throw Error(y(150));
        h2 = l2.call(h2);
        if (h2 == null)
          throw Error(y(151));
        for (var t2 = l2 = null, u = g2, z = g2 = 0, q = null, n2 = h2.next(); u !== null && !n2.done; z++, n2 = h2.next()) {
          u.index > z ? (q = u, u = null) : q = u.sibling;
          var w2 = p(e2, u, n2.value, k2);
          if (w2 === null) {
            u === null && (u = q);
            break;
          }
          a && u && w2.alternate === null && b(e2, u);
          g2 = f(w2, g2, z);
          t2 === null ? l2 = w2 : t2.sibling = w2;
          t2 = w2;
          u = q;
        }
        if (n2.done)
          return c(e2, u), l2;
        if (u === null) {
          for (; !n2.done; z++, n2 = h2.next())
            n2 = A(e2, n2.value, k2), n2 !== null && (g2 = f(n2, g2, z), t2 === null ? l2 = n2 : t2.sibling = n2, t2 = n2);
          return l2;
        }
        for (u = d2(e2, u); !n2.done; z++, n2 = h2.next())
          n2 = C(u, e2, z, n2.value, k2), n2 !== null && (a && n2.alternate !== null && u.delete(n2.key === null ? z : n2.key), g2 = f(n2, g2, z), t2 === null ? l2 = n2 : t2.sibling = n2, t2 = n2);
        a && u.forEach(function(a2) {
          return b(e2, a2);
        });
        return l2;
      }
      return function(a2, d3, f2, h2) {
        var k2 = typeof f2 === "object" && f2 !== null && f2.type === ua && f2.key === null;
        k2 && (f2 = f2.props.children);
        var l2 = typeof f2 === "object" && f2 !== null;
        if (l2)
          switch (f2.$$typeof) {
            case sa:
              a: {
                l2 = f2.key;
                for (k2 = d3; k2 !== null; ) {
                  if (k2.key === l2) {
                    switch (k2.tag) {
                      case 7:
                        if (f2.type === ua) {
                          c(a2, k2.sibling);
                          d3 = e(k2, f2.props.children);
                          d3.return = a2;
                          a2 = d3;
                          break a;
                        }
                        break;
                      default:
                        if (k2.elementType === f2.type) {
                          c(a2, k2.sibling);
                          d3 = e(k2, f2.props);
                          d3.ref = Qg(a2, k2, f2);
                          d3.return = a2;
                          a2 = d3;
                          break a;
                        }
                    }
                    c(a2, k2);
                    break;
                  } else
                    b(a2, k2);
                  k2 = k2.sibling;
                }
                f2.type === ua ? (d3 = Xg(f2.props.children, a2.mode, h2, f2.key), d3.return = a2, a2 = d3) : (h2 = Vg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Qg(a2, d3, f2), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case ta:
              a: {
                for (k2 = f2.key; d3 !== null; ) {
                  if (d3.key === k2)
                    if (d3.tag === 4 && d3.stateNode.containerInfo === f2.containerInfo && d3.stateNode.implementation === f2.implementation) {
                      c(a2, d3.sibling);
                      d3 = e(d3, f2.children || []);
                      d3.return = a2;
                      a2 = d3;
                      break a;
                    } else {
                      c(a2, d3);
                      break;
                    }
                  else
                    b(a2, d3);
                  d3 = d3.sibling;
                }
                d3 = Wg(f2, a2.mode, h2);
                d3.return = a2;
                a2 = d3;
              }
              return g(a2);
          }
        if (typeof f2 === "string" || typeof f2 === "number")
          return f2 = "" + f2, d3 !== null && d3.tag === 6 ? (c(a2, d3.sibling), d3 = e(d3, f2), d3.return = a2, a2 = d3) : (c(a2, d3), d3 = Ug(f2, a2.mode, h2), d3.return = a2, a2 = d3), g(a2);
        if (Pg(f2))
          return x(a2, d3, f2, h2);
        if (La(f2))
          return w(a2, d3, f2, h2);
        l2 && Rg(a2, f2);
        if (typeof f2 === "undefined" && !k2)
          switch (a2.tag) {
            case 1:
            case 22:
            case 0:
            case 11:
            case 15:
              throw Error(y(152, Ra(a2.type) || "Component"));
          }
        return c(a2, d3);
      };
    }
    var Yg = Sg(true);
    var Zg = Sg(false);
    var $g = {};
    var ah = Bf($g);
    var bh = Bf($g);
    var ch = Bf($g);
    function dh(a) {
      if (a === $g)
        throw Error(y(174));
      return a;
    }
    function eh(a, b) {
      I(ch, b);
      I(bh, a);
      I(ah, $g);
      a = b.nodeType;
      switch (a) {
        case 9:
        case 11:
          b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
          break;
        default:
          a = a === 8 ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
      }
      H(ah);
      I(ah, b);
    }
    function fh() {
      H(ah);
      H(bh);
      H(ch);
    }
    function gh(a) {
      dh(ch.current);
      var b = dh(ah.current);
      var c = mb(b, a.type);
      b !== c && (I(bh, a), I(ah, c));
    }
    function hh(a) {
      bh.current === a && (H(ah), H(bh));
    }
    var P = Bf(0);
    function ih(a) {
      for (var b = a; b !== null; ) {
        if (b.tag === 13) {
          var c = b.memoizedState;
          if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!"))
            return b;
        } else if (b.tag === 19 && b.memoizedProps.revealOrder !== void 0) {
          if ((b.flags & 64) !== 0)
            return b;
        } else if (b.child !== null) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a)
          break;
        for (; b.sibling === null; ) {
          if (b.return === null || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    var jh = null;
    var kh = null;
    var lh = false;
    function mh(a, b) {
      var c = nh(5, null, null, 0);
      c.elementType = "DELETED";
      c.type = "DELETED";
      c.stateNode = b;
      c.return = a;
      c.flags = 8;
      a.lastEffect !== null ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
    }
    function oh(a, b) {
      switch (a.tag) {
        case 5:
          var c = a.type;
          b = b.nodeType !== 1 || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
          return b !== null ? (a.stateNode = b, true) : false;
        case 6:
          return b = a.pendingProps === "" || b.nodeType !== 3 ? null : b, b !== null ? (a.stateNode = b, true) : false;
        case 13:
          return false;
        default:
          return false;
      }
    }
    function ph(a) {
      if (lh) {
        var b = kh;
        if (b) {
          var c = b;
          if (!oh(a, b)) {
            b = rf(c.nextSibling);
            if (!b || !oh(a, b)) {
              a.flags = a.flags & -1025 | 2;
              lh = false;
              jh = a;
              return;
            }
            mh(jh, c);
          }
          jh = a;
          kh = rf(b.firstChild);
        } else
          a.flags = a.flags & -1025 | 2, lh = false, jh = a;
      }
    }
    function qh(a) {
      for (a = a.return; a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13; )
        a = a.return;
      jh = a;
    }
    function rh(a) {
      if (a !== jh)
        return false;
      if (!lh)
        return qh(a), lh = true, false;
      var b = a.type;
      if (a.tag !== 5 || b !== "head" && b !== "body" && !nf(b, a.memoizedProps))
        for (b = kh; b; )
          mh(a, b), b = rf(b.nextSibling);
      qh(a);
      if (a.tag === 13) {
        a = a.memoizedState;
        a = a !== null ? a.dehydrated : null;
        if (!a)
          throw Error(y(317));
        a: {
          a = a.nextSibling;
          for (b = 0; a; ) {
            if (a.nodeType === 8) {
              var c = a.data;
              if (c === "/$") {
                if (b === 0) {
                  kh = rf(a.nextSibling);
                  break a;
                }
                b--;
              } else
                c !== "$" && c !== "$!" && c !== "$?" || b++;
            }
            a = a.nextSibling;
          }
          kh = null;
        }
      } else
        kh = jh ? rf(a.stateNode.nextSibling) : null;
      return true;
    }
    function sh() {
      kh = jh = null;
      lh = false;
    }
    var th = [];
    function uh() {
      for (var a = 0; a < th.length; a++)
        th[a]._workInProgressVersionPrimary = null;
      th.length = 0;
    }
    var vh = ra.ReactCurrentDispatcher;
    var wh = ra.ReactCurrentBatchConfig;
    var xh = 0;
    var R = null;
    var S = null;
    var T = null;
    var yh = false;
    var zh = false;
    function Ah() {
      throw Error(y(321));
    }
    function Bh(a, b) {
      if (b === null)
        return false;
      for (var c = 0; c < b.length && c < a.length; c++)
        if (!He(a[c], b[c]))
          return false;
      return true;
    }
    function Ch(a, b, c, d2, e, f) {
      xh = f;
      R = b;
      b.memoizedState = null;
      b.updateQueue = null;
      b.lanes = 0;
      vh.current = a === null || a.memoizedState === null ? Dh : Eh;
      a = c(d2, e);
      if (zh) {
        f = 0;
        do {
          zh = false;
          if (!(25 > f))
            throw Error(y(301));
          f += 1;
          T = S = null;
          b.updateQueue = null;
          vh.current = Fh;
          a = c(d2, e);
        } while (zh);
      }
      vh.current = Gh;
      b = S !== null && S.next !== null;
      xh = 0;
      T = S = R = null;
      yh = false;
      if (b)
        throw Error(y(300));
      return a;
    }
    function Hh() {
      var a = {memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null};
      T === null ? R.memoizedState = T = a : T = T.next = a;
      return T;
    }
    function Ih() {
      if (S === null) {
        var a = R.alternate;
        a = a !== null ? a.memoizedState : null;
      } else
        a = S.next;
      var b = T === null ? R.memoizedState : T.next;
      if (b !== null)
        T = b, S = a;
      else {
        if (a === null)
          throw Error(y(310));
        S = a;
        a = {memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null};
        T === null ? R.memoizedState = T = a : T = T.next = a;
      }
      return T;
    }
    function Jh(a, b) {
      return typeof b === "function" ? b(a) : b;
    }
    function Kh(a) {
      var b = Ih(), c = b.queue;
      if (c === null)
        throw Error(y(311));
      c.lastRenderedReducer = a;
      var d2 = S, e = d2.baseQueue, f = c.pending;
      if (f !== null) {
        if (e !== null) {
          var g = e.next;
          e.next = f.next;
          f.next = g;
        }
        d2.baseQueue = e = f;
        c.pending = null;
      }
      if (e !== null) {
        e = e.next;
        d2 = d2.baseState;
        var h = g = f = null, k = e;
        do {
          var l = k.lane;
          if ((xh & l) === l)
            h !== null && (h = h.next = {lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null}), d2 = k.eagerReducer === a ? k.eagerState : a(d2, k.action);
          else {
            var n = {
              lane: l,
              action: k.action,
              eagerReducer: k.eagerReducer,
              eagerState: k.eagerState,
              next: null
            };
            h === null ? (g = h = n, f = d2) : h = h.next = n;
            R.lanes |= l;
            Dg |= l;
          }
          k = k.next;
        } while (k !== null && k !== e);
        h === null ? f = d2 : h.next = g;
        He(d2, b.memoizedState) || (ug = true);
        b.memoizedState = d2;
        b.baseState = f;
        b.baseQueue = h;
        c.lastRenderedState = d2;
      }
      return [b.memoizedState, c.dispatch];
    }
    function Lh(a) {
      var b = Ih(), c = b.queue;
      if (c === null)
        throw Error(y(311));
      c.lastRenderedReducer = a;
      var d2 = c.dispatch, e = c.pending, f = b.memoizedState;
      if (e !== null) {
        c.pending = null;
        var g = e = e.next;
        do
          f = a(f, g.action), g = g.next;
        while (g !== e);
        He(f, b.memoizedState) || (ug = true);
        b.memoizedState = f;
        b.baseQueue === null && (b.baseState = f);
        c.lastRenderedState = f;
      }
      return [f, d2];
    }
    function Mh(a, b, c) {
      var d2 = b._getVersion;
      d2 = d2(b._source);
      var e = b._workInProgressVersionPrimary;
      if (e !== null)
        a = e === d2;
      else if (a = a.mutableReadLanes, a = (xh & a) === a)
        b._workInProgressVersionPrimary = d2, th.push(b);
      if (a)
        return c(b._source);
      th.push(b);
      throw Error(y(350));
    }
    function Nh(a, b, c, d2) {
      var e = U;
      if (e === null)
        throw Error(y(349));
      var f = b._getVersion, g = f(b._source), h = vh.current, k = h.useState(function() {
        return Mh(e, b, c);
      }), l = k[1], n = k[0];
      k = T;
      var A = a.memoizedState, p = A.refs, C = p.getSnapshot, x = A.source;
      A = A.subscribe;
      var w = R;
      a.memoizedState = {refs: p, source: b, subscribe: d2};
      h.useEffect(function() {
        p.getSnapshot = c;
        p.setSnapshot = l;
        var a2 = f(b._source);
        if (!He(g, a2)) {
          a2 = c(b._source);
          He(n, a2) || (l(a2), a2 = Ig(w), e.mutableReadLanes |= a2 & e.pendingLanes);
          a2 = e.mutableReadLanes;
          e.entangledLanes |= a2;
          for (var d3 = e.entanglements, h2 = a2; 0 < h2; ) {
            var k2 = 31 - Vc(h2), v = 1 << k2;
            d3[k2] |= a2;
            h2 &= ~v;
          }
        }
      }, [c, b, d2]);
      h.useEffect(function() {
        return d2(b._source, function() {
          var a2 = p.getSnapshot, c2 = p.setSnapshot;
          try {
            c2(a2(b._source));
            var d3 = Ig(w);
            e.mutableReadLanes |= d3 & e.pendingLanes;
          } catch (q) {
            c2(function() {
              throw q;
            });
          }
        });
      }, [b, d2]);
      He(C, c) && He(x, b) && He(A, d2) || (a = {pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n}, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);
      return n;
    }
    function Ph(a, b, c) {
      var d2 = Ih();
      return Nh(d2, a, b, c);
    }
    function Qh(a) {
      var b = Hh();
      typeof a === "function" && (a = a());
      b.memoizedState = b.baseState = a;
      a = b.queue = {pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a};
      a = a.dispatch = Oh.bind(null, R, a);
      return [b.memoizedState, a];
    }
    function Rh(a, b, c, d2) {
      a = {tag: a, create: b, destroy: c, deps: d2, next: null};
      b = R.updateQueue;
      b === null ? (b = {lastEffect: null}, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, c === null ? b.lastEffect = a.next = a : (d2 = c.next, c.next = a, a.next = d2, b.lastEffect = a));
      return a;
    }
    function Sh(a) {
      var b = Hh();
      a = {current: a};
      return b.memoizedState = a;
    }
    function Th() {
      return Ih().memoizedState;
    }
    function Uh(a, b, c, d2) {
      var e = Hh();
      R.flags |= a;
      e.memoizedState = Rh(1 | b, c, void 0, d2 === void 0 ? null : d2);
    }
    function Vh(a, b, c, d2) {
      var e = Ih();
      d2 = d2 === void 0 ? null : d2;
      var f = void 0;
      if (S !== null) {
        var g = S.memoizedState;
        f = g.destroy;
        if (d2 !== null && Bh(d2, g.deps)) {
          Rh(b, c, f, d2);
          return;
        }
      }
      R.flags |= a;
      e.memoizedState = Rh(1 | b, c, f, d2);
    }
    function Wh(a, b) {
      return Uh(516, 4, a, b);
    }
    function Xh(a, b) {
      return Vh(516, 4, a, b);
    }
    function Yh(a, b) {
      return Vh(4, 2, a, b);
    }
    function Zh(a, b) {
      if (typeof b === "function")
        return a = a(), b(a), function() {
          b(null);
        };
      if (b !== null && b !== void 0)
        return a = a(), b.current = a, function() {
          b.current = null;
        };
    }
    function $h(a, b, c) {
      c = c !== null && c !== void 0 ? c.concat([a]) : null;
      return Vh(4, 2, Zh.bind(null, b, a), c);
    }
    function ai() {
    }
    function bi(a, b) {
      var c = Ih();
      b = b === void 0 ? null : b;
      var d2 = c.memoizedState;
      if (d2 !== null && b !== null && Bh(b, d2[1]))
        return d2[0];
      c.memoizedState = [a, b];
      return a;
    }
    function ci(a, b) {
      var c = Ih();
      b = b === void 0 ? null : b;
      var d2 = c.memoizedState;
      if (d2 !== null && b !== null && Bh(b, d2[1]))
        return d2[0];
      a = a();
      c.memoizedState = [a, b];
      return a;
    }
    function di(a, b) {
      var c = eg();
      gg(98 > c ? 98 : c, function() {
        a(true);
      });
      gg(97 < c ? 97 : c, function() {
        var c2 = wh.transition;
        wh.transition = 1;
        try {
          a(false), b();
        } finally {
          wh.transition = c2;
        }
      });
    }
    function Oh(a, b, c) {
      var d2 = Hg(), e = Ig(a), f = {lane: e, action: c, eagerReducer: null, eagerState: null, next: null}, g = b.pending;
      g === null ? f.next = f : (f.next = g.next, g.next = f);
      b.pending = f;
      g = a.alternate;
      if (a === R || g !== null && g === R)
        zh = yh = true;
      else {
        if (a.lanes === 0 && (g === null || g.lanes === 0) && (g = b.lastRenderedReducer, g !== null))
          try {
            var h = b.lastRenderedState, k = g(h, c);
            f.eagerReducer = g;
            f.eagerState = k;
            if (He(k, h))
              return;
          } catch (l) {
          } finally {
          }
        Jg(a, e, d2);
      }
    }
    var Gh = {readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: false};
    var Dh = {readContext: vg, useCallback: function(a, b) {
      Hh().memoizedState = [a, b === void 0 ? null : b];
      return a;
    }, useContext: vg, useEffect: Wh, useImperativeHandle: function(a, b, c) {
      c = c !== null && c !== void 0 ? c.concat([a]) : null;
      return Uh(4, 2, Zh.bind(null, b, a), c);
    }, useLayoutEffect: function(a, b) {
      return Uh(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Hh();
      b = b === void 0 ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: function(a, b, c) {
      var d2 = Hh();
      b = c !== void 0 ? c(b) : b;
      d2.memoizedState = d2.baseState = b;
      a = d2.queue = {pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b};
      a = a.dispatch = Oh.bind(null, R, a);
      return [d2.memoizedState, a];
    }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a) {
      var b = Qh(a), c = b[0], d2 = b[1];
      Wh(function() {
        var b2 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b2;
        }
      }, [a]);
      return c;
    }, useTransition: function() {
      var a = Qh(false), b = a[0];
      a = di.bind(null, a[1]);
      Sh(a);
      return [a, b];
    }, useMutableSource: function(a, b, c) {
      var d2 = Hh();
      d2.memoizedState = {refs: {getSnapshot: b, setSnapshot: null}, source: a, subscribe: c};
      return Nh(d2, a, b, c);
    }, useOpaqueIdentifier: function() {
      if (lh) {
        var a = false, b = uf(function() {
          a || (a = true, c("r:" + (tf++).toString(36)));
          throw Error(y(355));
        }), c = Qh(b)[1];
        (R.mode & 2) === 0 && (R.flags |= 516, Rh(5, function() {
          c("r:" + (tf++).toString(36));
        }, void 0, null));
        return b;
      }
      b = "r:" + (tf++).toString(36);
      Qh(b);
      return b;
    }, unstable_isNewReconciler: false};
    var Eh = {readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
      return Kh(Jh);
    }, useDebugValue: ai, useDeferredValue: function(a) {
      var b = Kh(Jh), c = b[0], d2 = b[1];
      Xh(function() {
        var b2 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b2;
        }
      }, [a]);
      return c;
    }, useTransition: function() {
      var a = Kh(Jh)[0];
      return [
        Th().current,
        a
      ];
    }, useMutableSource: Ph, useOpaqueIdentifier: function() {
      return Kh(Jh)[0];
    }, unstable_isNewReconciler: false};
    var Fh = {readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
      return Lh(Jh);
    }, useDebugValue: ai, useDeferredValue: function(a) {
      var b = Lh(Jh), c = b[0], d2 = b[1];
      Xh(function() {
        var b2 = wh.transition;
        wh.transition = 1;
        try {
          d2(a);
        } finally {
          wh.transition = b2;
        }
      }, [a]);
      return c;
    }, useTransition: function() {
      var a = Lh(Jh)[0];
      return [
        Th().current,
        a
      ];
    }, useMutableSource: Ph, useOpaqueIdentifier: function() {
      return Lh(Jh)[0];
    }, unstable_isNewReconciler: false};
    var ei = ra.ReactCurrentOwner;
    var ug = false;
    function fi(a, b, c, d2) {
      b.child = a === null ? Zg(b, null, c, d2) : Yg(b, a.child, c, d2);
    }
    function gi(a, b, c, d2, e) {
      c = c.render;
      var f = b.ref;
      tg(b, e);
      d2 = Ch(a, b, c, d2, f, e);
      if (a !== null && !ug)
        return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
      b.flags |= 1;
      fi(a, b, d2, e);
      return b.child;
    }
    function ii(a, b, c, d2, e, f) {
      if (a === null) {
        var g = c.type;
        if (typeof g === "function" && !ji(g) && g.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0)
          return b.tag = 15, b.type = g, ki(a, b, g, d2, e, f);
        a = Vg(c.type, null, d2, b, b.mode, f);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      g = a.child;
      if ((e & f) === 0 && (e = g.memoizedProps, c = c.compare, c = c !== null ? c : Je, c(e, d2) && a.ref === b.ref))
        return hi(a, b, f);
      b.flags |= 1;
      a = Tg(g, d2);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function ki(a, b, c, d2, e, f) {
      if (a !== null && Je(a.memoizedProps, d2) && a.ref === b.ref)
        if (ug = false, (f & e) !== 0)
          (a.flags & 16384) !== 0 && (ug = true);
        else
          return b.lanes = a.lanes, hi(a, b, f);
      return li(a, b, c, d2, f);
    }
    function mi(a, b, c) {
      var d2 = b.pendingProps, e = d2.children, f = a !== null ? a.memoizedState : null;
      if (d2.mode === "hidden" || d2.mode === "unstable-defer-without-hiding")
        if ((b.mode & 4) === 0)
          b.memoizedState = {baseLanes: 0}, ni(b, c);
        else if ((c & 1073741824) !== 0)
          b.memoizedState = {baseLanes: 0}, ni(b, f !== null ? f.baseLanes : c);
        else
          return a = f !== null ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {baseLanes: a}, ni(b, a), null;
      else
        f !== null ? (d2 = f.baseLanes | c, b.memoizedState = null) : d2 = c, ni(b, d2);
      fi(a, b, e, c);
      return b.child;
    }
    function oi(a, b) {
      var c = b.ref;
      if (a === null && c !== null || a !== null && a.ref !== c)
        b.flags |= 128;
    }
    function li(a, b, c, d2, e) {
      var f = Ff(c) ? Df : M.current;
      f = Ef(b, f);
      tg(b, e);
      c = Ch(a, b, c, d2, f, e);
      if (a !== null && !ug)
        return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
      b.flags |= 1;
      fi(a, b, c, e);
      return b.child;
    }
    function pi(a, b, c, d2, e) {
      if (Ff(c)) {
        var f = true;
        Jf(b);
      } else
        f = false;
      tg(b, e);
      if (b.stateNode === null)
        a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d2), Og(b, c, d2, e), d2 = true;
      else if (a === null) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        typeof l === "object" && l !== null ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
        var n = c.getDerivedStateFromProps, A = typeof n === "function" || typeof g.getSnapshotBeforeUpdate === "function";
        A || typeof g.UNSAFE_componentWillReceiveProps !== "function" && typeof g.componentWillReceiveProps !== "function" || (h !== d2 || k !== l) && Ng(b, g, d2, l);
        wg = false;
        var p = b.memoizedState;
        g.state = p;
        Cg(b, d2, g, e);
        k = b.memoizedState;
        h !== d2 || p !== k || N.current || wg ? (typeof n === "function" && (Gg(b, c, n, d2), k = b.memoizedState), (h = wg || Lg(b, c, h, d2, p, k, l)) ? (A || typeof g.UNSAFE_componentWillMount !== "function" && typeof g.componentWillMount !== "function" || (typeof g.componentWillMount === "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount === "function" && g.UNSAFE_componentWillMount()), typeof g.componentDidMount === "function" && (b.flags |= 4)) : (typeof g.componentDidMount === "function" && (b.flags |= 4), b.memoizedProps = d2, b.memoizedState = k), g.props = d2, g.state = k, g.context = l, d2 = h) : (typeof g.componentDidMount === "function" && (b.flags |= 4), d2 = false);
      } else {
        g = b.stateNode;
        yg(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : lg(b.type, h);
        g.props = l;
        A = b.pendingProps;
        p = g.context;
        k = c.contextType;
        typeof k === "object" && k !== null ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
        var C = c.getDerivedStateFromProps;
        (n = typeof C === "function" || typeof g.getSnapshotBeforeUpdate === "function") || typeof g.UNSAFE_componentWillReceiveProps !== "function" && typeof g.componentWillReceiveProps !== "function" || (h !== A || p !== k) && Ng(b, g, d2, k);
        wg = false;
        p = b.memoizedState;
        g.state = p;
        Cg(b, d2, g, e);
        var x = b.memoizedState;
        h !== A || p !== x || N.current || wg ? (typeof C === "function" && (Gg(b, c, C, d2), x = b.memoizedState), (l = wg || Lg(b, c, l, d2, p, x, k)) ? (n || typeof g.UNSAFE_componentWillUpdate !== "function" && typeof g.componentWillUpdate !== "function" || (typeof g.componentWillUpdate === "function" && g.componentWillUpdate(d2, x, k), typeof g.UNSAFE_componentWillUpdate === "function" && g.UNSAFE_componentWillUpdate(d2, x, k)), typeof g.componentDidUpdate === "function" && (b.flags |= 4), typeof g.getSnapshotBeforeUpdate === "function" && (b.flags |= 256)) : (typeof g.componentDidUpdate !== "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate !== "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d2, b.memoizedState = x), g.props = d2, g.state = x, g.context = k, d2 = l) : (typeof g.componentDidUpdate !== "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate !== "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d2 = false);
      }
      return qi(a, b, c, d2, f, e);
    }
    function qi(a, b, c, d2, e, f) {
      oi(a, b);
      var g = (b.flags & 64) !== 0;
      if (!d2 && !g)
        return e && Kf(b, c, false), hi(a, b, f);
      d2 = b.stateNode;
      ei.current = b;
      var h = g && typeof c.getDerivedStateFromError !== "function" ? null : d2.render();
      b.flags |= 1;
      a !== null && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);
      b.memoizedState = d2.state;
      e && Kf(b, c, true);
      return b.child;
    }
    function ri(a) {
      var b = a.stateNode;
      b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, false);
      eh(a, b.containerInfo);
    }
    var si = {dehydrated: null, retryLane: 0};
    function ti(a, b, c) {
      var d2 = b.pendingProps, e = P.current, f = false, g;
      (g = (b.flags & 64) !== 0) || (g = a !== null && a.memoizedState === null ? false : (e & 2) !== 0);
      g ? (f = true, b.flags &= -65) : a !== null && a.memoizedState === null || d2.fallback === void 0 || d2.unstable_avoidThisFallback === true || (e |= 1);
      I(P, e & 1);
      if (a === null) {
        d2.fallback !== void 0 && ph(b);
        a = d2.children;
        e = d2.fallback;
        if (f)
          return a = ui(b, a, e, c), b.child.memoizedState = {baseLanes: c}, b.memoizedState = si, a;
        if (typeof d2.unstable_expectedLoadTime === "number")
          return a = ui(b, a, e, c), b.child.memoizedState = {baseLanes: c}, b.memoizedState = si, b.lanes = 33554432, a;
        c = vi({mode: "visible", children: a}, b.mode, c, null);
        c.return = b;
        return b.child = c;
      }
      if (a.memoizedState !== null) {
        if (f)
          return d2 = wi(a, b, d2.children, d2.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = e === null ? {baseLanes: c} : {baseLanes: e.baseLanes | c}, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d2;
        c = xi(a, b, d2.children, c);
        b.memoizedState = null;
        return c;
      }
      if (f)
        return d2 = wi(a, b, d2.children, d2.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = e === null ? {baseLanes: c} : {baseLanes: e.baseLanes | c}, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d2;
      c = xi(a, b, d2.children, c);
      b.memoizedState = null;
      return c;
    }
    function ui(a, b, c, d2) {
      var e = a.mode, f = a.child;
      b = {mode: "hidden", children: b};
      (e & 2) === 0 && f !== null ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
      c = Xg(c, e, d2, null);
      f.return = a;
      c.return = a;
      f.sibling = c;
      a.child = f;
      return c;
    }
    function xi(a, b, c, d2) {
      var e = a.child;
      a = e.sibling;
      c = Tg(e, {mode: "visible", children: c});
      (b.mode & 2) === 0 && (c.lanes = d2);
      c.return = b;
      c.sibling = null;
      a !== null && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
      return b.child = c;
    }
    function wi(a, b, c, d2, e) {
      var f = b.mode, g = a.child;
      a = g.sibling;
      var h = {mode: "hidden", children: c};
      (f & 2) === 0 && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, g !== null ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
      a !== null ? d2 = Tg(a, d2) : (d2 = Xg(d2, f, e, null), d2.flags |= 2);
      d2.return = b;
      c.return = b;
      c.sibling = d2;
      b.child = c;
      return d2;
    }
    function yi(a, b) {
      a.lanes |= b;
      var c = a.alternate;
      c !== null && (c.lanes |= b);
      sg(a.return, b);
    }
    function zi(a, b, c, d2, e, f) {
      var g = a.memoizedState;
      g === null ? a.memoizedState = {isBackwards: b, rendering: null, renderingStartTime: 0, last: d2, tail: c, tailMode: e, lastEffect: f} : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d2, g.tail = c, g.tailMode = e, g.lastEffect = f);
    }
    function Ai(a, b, c) {
      var d2 = b.pendingProps, e = d2.revealOrder, f = d2.tail;
      fi(a, b, d2.children, c);
      d2 = P.current;
      if ((d2 & 2) !== 0)
        d2 = d2 & 1 | 2, b.flags |= 64;
      else {
        if (a !== null && (a.flags & 64) !== 0)
          a:
            for (a = b.child; a !== null; ) {
              if (a.tag === 13)
                a.memoizedState !== null && yi(a, c);
              else if (a.tag === 19)
                yi(a, c);
              else if (a.child !== null) {
                a.child.return = a;
                a = a.child;
                continue;
              }
              if (a === b)
                break a;
              for (; a.sibling === null; ) {
                if (a.return === null || a.return === b)
                  break a;
                a = a.return;
              }
              a.sibling.return = a.return;
              a = a.sibling;
            }
        d2 &= 1;
      }
      I(P, d2);
      if ((b.mode & 2) === 0)
        b.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; c !== null; )
              a = c.alternate, a !== null && ih(a) === null && (e = c), c = c.sibling;
            c = e;
            c === null ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            zi(b, false, e, c, f, b.lastEffect);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; e !== null; ) {
              a = e.alternate;
              if (a !== null && ih(a) === null) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            zi(b, true, c, null, f, b.lastEffect);
            break;
          case "together":
            zi(b, false, null, null, void 0, b.lastEffect);
            break;
          default:
            b.memoizedState = null;
        }
      return b.child;
    }
    function hi(a, b, c) {
      a !== null && (b.dependencies = a.dependencies);
      Dg |= b.lanes;
      if ((c & b.childLanes) !== 0) {
        if (a !== null && b.child !== a.child)
          throw Error(y(153));
        if (b.child !== null) {
          a = b.child;
          c = Tg(a, a.pendingProps);
          b.child = c;
          for (c.return = b; a.sibling !== null; )
            a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;
          c.sibling = null;
        }
        return b.child;
      }
      return null;
    }
    var Bi;
    var Ci;
    var Di;
    var Ei;
    Bi = function(a, b) {
      for (var c = b.child; c !== null; ) {
        if (c.tag === 5 || c.tag === 6)
          a.appendChild(c.stateNode);
        else if (c.tag !== 4 && c.child !== null) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b)
          break;
        for (; c.sibling === null; ) {
          if (c.return === null || c.return === b)
            return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    };
    Ci = function() {
    };
    Di = function(a, b, c, d2) {
      var e = a.memoizedProps;
      if (e !== d2) {
        a = b.stateNode;
        dh(ah.current);
        var f = null;
        switch (c) {
          case "input":
            e = Ya(a, e);
            d2 = Ya(a, d2);
            f = [];
            break;
          case "option":
            e = eb(a, e);
            d2 = eb(a, d2);
            f = [];
            break;
          case "select":
            e = m({}, e, {value: void 0});
            d2 = m({}, d2, {value: void 0});
            f = [];
            break;
          case "textarea":
            e = gb(a, e);
            d2 = gb(a, d2);
            f = [];
            break;
          default:
            typeof e.onClick !== "function" && typeof d2.onClick === "function" && (a.onclick = jf);
        }
        vb(c, d2);
        var g;
        c = null;
        for (l in e)
          if (!d2.hasOwnProperty(l) && e.hasOwnProperty(l) && e[l] != null)
            if (l === "style") {
              var h = e[l];
              for (g in h)
                h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
            } else
              l !== "dangerouslySetInnerHTML" && l !== "children" && l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && l !== "autoFocus" && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        for (l in d2) {
          var k = d2[l];
          h = e != null ? e[l] : void 0;
          if (d2.hasOwnProperty(l) && k !== h && (k != null || h != null))
            if (l === "style")
              if (h) {
                for (g in h)
                  !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
                for (g in k)
                  k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
              } else
                c || (f || (f = []), f.push(l, c)), c = k;
            else
              l === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, k != null && h !== k && (f = f || []).push(l, k)) : l === "children" ? typeof k !== "string" && typeof k !== "number" || (f = f || []).push(l, "" + k) : l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && (ca.hasOwnProperty(l) ? (k != null && l === "onScroll" && G("scroll", a), f || h === k || (f = [])) : typeof k === "object" && k !== null && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l)
          b.flags |= 4;
      }
    };
    Ei = function(a, b, c, d2) {
      c !== d2 && (b.flags |= 4);
    };
    function Fi(a, b) {
      if (!lh)
        switch (a.tailMode) {
          case "hidden":
            b = a.tail;
            for (var c = null; b !== null; )
              b.alternate !== null && (c = b), b = b.sibling;
            c === null ? a.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = a.tail;
            for (var d2 = null; c !== null; )
              c.alternate !== null && (d2 = c), c = c.sibling;
            d2 === null ? b || a.tail === null ? a.tail = null : a.tail.sibling = null : d2.sibling = null;
        }
    }
    function Gi(a, b, c) {
      var d2 = b.pendingProps;
      switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return null;
        case 1:
          return Ff(b.type) && Gf(), null;
        case 3:
          fh();
          H(N);
          H(M);
          uh();
          d2 = b.stateNode;
          d2.pendingContext && (d2.context = d2.pendingContext, d2.pendingContext = null);
          if (a === null || a.child === null)
            rh(b) ? b.flags |= 4 : d2.hydrate || (b.flags |= 256);
          Ci(b);
          return null;
        case 5:
          hh(b);
          var e = dh(ch.current);
          c = b.type;
          if (a !== null && b.stateNode != null)
            Di(a, b, c, d2, e), a.ref !== b.ref && (b.flags |= 128);
          else {
            if (!d2) {
              if (b.stateNode === null)
                throw Error(y(166));
              return null;
            }
            a = dh(ah.current);
            if (rh(b)) {
              d2 = b.stateNode;
              c = b.type;
              var f = b.memoizedProps;
              d2[wf] = b;
              d2[xf] = f;
              switch (c) {
                case "dialog":
                  G("cancel", d2);
                  G("close", d2);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  G("load", d2);
                  break;
                case "video":
                case "audio":
                  for (a = 0; a < Xe.length; a++)
                    G(Xe[a], d2);
                  break;
                case "source":
                  G("error", d2);
                  break;
                case "img":
                case "image":
                case "link":
                  G("error", d2);
                  G("load", d2);
                  break;
                case "details":
                  G("toggle", d2);
                  break;
                case "input":
                  Za(d2, f);
                  G("invalid", d2);
                  break;
                case "select":
                  d2._wrapperState = {wasMultiple: !!f.multiple};
                  G("invalid", d2);
                  break;
                case "textarea":
                  hb(d2, f), G("invalid", d2);
              }
              vb(c, f);
              a = null;
              for (var g in f)
                f.hasOwnProperty(g) && (e = f[g], g === "children" ? typeof e === "string" ? d2.textContent !== e && (a = ["children", e]) : typeof e === "number" && d2.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && e != null && g === "onScroll" && G("scroll", d2));
              switch (c) {
                case "input":
                  Va(d2);
                  cb(d2, f, true);
                  break;
                case "textarea":
                  Va(d2);
                  jb(d2);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  typeof f.onClick === "function" && (d2.onclick = jf);
              }
              d2 = a;
              b.updateQueue = d2;
              d2 !== null && (b.flags |= 4);
            } else {
              g = e.nodeType === 9 ? e : e.ownerDocument;
              a === kb.html && (a = lb(c));
              a === kb.html ? c === "script" ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : typeof d2.is === "string" ? a = g.createElement(c, {is: d2.is}) : (a = g.createElement(c), c === "select" && (g = a, d2.multiple ? g.multiple = true : d2.size && (g.size = d2.size))) : a = g.createElementNS(a, c);
              a[wf] = b;
              a[xf] = d2;
              Bi(a, b, false, false);
              b.stateNode = a;
              g = wb(c, d2);
              switch (c) {
                case "dialog":
                  G("cancel", a);
                  G("close", a);
                  e = d2;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  G("load", a);
                  e = d2;
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < Xe.length; e++)
                    G(Xe[e], a);
                  e = d2;
                  break;
                case "source":
                  G("error", a);
                  e = d2;
                  break;
                case "img":
                case "image":
                case "link":
                  G("error", a);
                  G("load", a);
                  e = d2;
                  break;
                case "details":
                  G("toggle", a);
                  e = d2;
                  break;
                case "input":
                  Za(a, d2);
                  e = Ya(a, d2);
                  G("invalid", a);
                  break;
                case "option":
                  e = eb(a, d2);
                  break;
                case "select":
                  a._wrapperState = {wasMultiple: !!d2.multiple};
                  e = m({}, d2, {value: void 0});
                  G("invalid", a);
                  break;
                case "textarea":
                  hb(a, d2);
                  e = gb(a, d2);
                  G("invalid", a);
                  break;
                default:
                  e = d2;
              }
              vb(c, e);
              var h = e;
              for (f in h)
                if (h.hasOwnProperty(f)) {
                  var k = h[f];
                  f === "style" ? tb(a, k) : f === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, k != null && ob(a, k)) : f === "children" ? typeof k === "string" ? (c !== "textarea" || k !== "") && pb(a, k) : typeof k === "number" && pb(a, "" + k) : f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && f !== "autoFocus" && (ca.hasOwnProperty(f) ? k != null && f === "onScroll" && G("scroll", a) : k != null && qa(a, f, k, g));
                }
              switch (c) {
                case "input":
                  Va(a);
                  cb(a, d2, false);
                  break;
                case "textarea":
                  Va(a);
                  jb(a);
                  break;
                case "option":
                  d2.value != null && a.setAttribute("value", "" + Sa(d2.value));
                  break;
                case "select":
                  a.multiple = !!d2.multiple;
                  f = d2.value;
                  f != null ? fb(a, !!d2.multiple, f, false) : d2.defaultValue != null && fb(a, !!d2.multiple, d2.defaultValue, true);
                  break;
                default:
                  typeof e.onClick === "function" && (a.onclick = jf);
              }
              mf(c, d2) && (b.flags |= 4);
            }
            b.ref !== null && (b.flags |= 128);
          }
          return null;
        case 6:
          if (a && b.stateNode != null)
            Ei(a, b, a.memoizedProps, d2);
          else {
            if (typeof d2 !== "string" && b.stateNode === null)
              throw Error(y(166));
            c = dh(ch.current);
            dh(ah.current);
            rh(b) ? (d2 = b.stateNode, c = b.memoizedProps, d2[wf] = b, d2.nodeValue !== c && (b.flags |= 4)) : (d2 = (c.nodeType === 9 ? c : c.ownerDocument).createTextNode(d2), d2[wf] = b, b.stateNode = d2);
          }
          return null;
        case 13:
          H(P);
          d2 = b.memoizedState;
          if ((b.flags & 64) !== 0)
            return b.lanes = c, b;
          d2 = d2 !== null;
          c = false;
          a === null ? b.memoizedProps.fallback !== void 0 && rh(b) : c = a.memoizedState !== null;
          if (d2 && !c && (b.mode & 2) !== 0)
            if (a === null && b.memoizedProps.unstable_avoidThisFallback !== true || (P.current & 1) !== 0)
              V === 0 && (V = 3);
            else {
              if (V === 0 || V === 3)
                V = 4;
              U === null || (Dg & 134217727) === 0 && (Hi & 134217727) === 0 || Ii(U, W);
            }
          if (d2 || c)
            b.flags |= 4;
          return null;
        case 4:
          return fh(), Ci(b), a === null && cf(b.stateNode.containerInfo), null;
        case 10:
          return rg(b), null;
        case 17:
          return Ff(b.type) && Gf(), null;
        case 19:
          H(P);
          d2 = b.memoizedState;
          if (d2 === null)
            return null;
          f = (b.flags & 64) !== 0;
          g = d2.rendering;
          if (g === null)
            if (f)
              Fi(d2, false);
            else {
              if (V !== 0 || a !== null && (a.flags & 64) !== 0)
                for (a = b.child; a !== null; ) {
                  g = ih(a);
                  if (g !== null) {
                    b.flags |= 64;
                    Fi(d2, false);
                    f = g.updateQueue;
                    f !== null && (b.updateQueue = f, b.flags |= 4);
                    d2.lastEffect === null && (b.firstEffect = null);
                    b.lastEffect = d2.lastEffect;
                    d2 = c;
                    for (c = b.child; c !== null; )
                      f = c, a = d2, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, g === null ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = a === null ? null : {lanes: a.lanes, firstContext: a.firstContext}), c = c.sibling;
                    I(P, P.current & 1 | 2);
                    return b.child;
                  }
                  a = a.sibling;
                }
              d2.tail !== null && O() > Ji && (b.flags |= 64, f = true, Fi(d2, false), b.lanes = 33554432);
            }
          else {
            if (!f)
              if (a = ih(g), a !== null) {
                if (b.flags |= 64, f = true, c = a.updateQueue, c !== null && (b.updateQueue = c, b.flags |= 4), Fi(d2, true), d2.tail === null && d2.tailMode === "hidden" && !g.alternate && !lh)
                  return b = b.lastEffect = d2.lastEffect, b !== null && (b.nextEffect = null), null;
              } else
                2 * O() - d2.renderingStartTime > Ji && c !== 1073741824 && (b.flags |= 64, f = true, Fi(d2, false), b.lanes = 33554432);
            d2.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d2.last, c !== null ? c.sibling = g : b.child = g, d2.last = g);
          }
          return d2.tail !== null ? (c = d2.tail, d2.rendering = c, d2.tail = c.sibling, d2.lastEffect = b.lastEffect, d2.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;
        case 23:
        case 24:
          return Ki(), a !== null && a.memoizedState !== null !== (b.memoizedState !== null) && d2.mode !== "unstable-defer-without-hiding" && (b.flags |= 4), null;
      }
      throw Error(y(156, b.tag));
    }
    function Li(a) {
      switch (a.tag) {
        case 1:
          Ff(a.type) && Gf();
          var b = a.flags;
          return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
        case 3:
          fh();
          H(N);
          H(M);
          uh();
          b = a.flags;
          if ((b & 64) !== 0)
            throw Error(y(285));
          a.flags = b & -4097 | 64;
          return a;
        case 5:
          return hh(a), null;
        case 13:
          return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
        case 19:
          return H(P), null;
        case 4:
          return fh(), null;
        case 10:
          return rg(a), null;
        case 23:
        case 24:
          return Ki(), null;
        default:
          return null;
      }
    }
    function Mi(a, b) {
      try {
        var c = "", d2 = b;
        do
          c += Qa(d2), d2 = d2.return;
        while (d2);
        var e = c;
      } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
      }
      return {value: a, source: b, stack: e};
    }
    function Ni(a, b) {
      try {
        console.error(b.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    var Oi = typeof WeakMap === "function" ? WeakMap : Map;
    function Pi(a, b, c) {
      c = zg(-1, c);
      c.tag = 3;
      c.payload = {element: null};
      var d2 = b.value;
      c.callback = function() {
        Qi || (Qi = true, Ri = d2);
        Ni(a, b);
      };
      return c;
    }
    function Si(a, b, c) {
      c = zg(-1, c);
      c.tag = 3;
      var d2 = a.type.getDerivedStateFromError;
      if (typeof d2 === "function") {
        var e = b.value;
        c.payload = function() {
          Ni(a, b);
          return d2(e);
        };
      }
      var f = a.stateNode;
      f !== null && typeof f.componentDidCatch === "function" && (c.callback = function() {
        typeof d2 !== "function" && (Ti === null ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
        var c2 = b.stack;
        this.componentDidCatch(b.value, {componentStack: c2 !== null ? c2 : ""});
      });
      return c;
    }
    var Ui = typeof WeakSet === "function" ? WeakSet : Set;
    function Vi(a) {
      var b = a.ref;
      if (b !== null)
        if (typeof b === "function")
          try {
            b(null);
          } catch (c) {
            Wi(a, c);
          }
        else
          b.current = null;
    }
    function Xi(a, b) {
      switch (b.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          return;
        case 1:
          if (b.flags & 256 && a !== null) {
            var c = a.memoizedProps, d2 = a.memoizedState;
            a = b.stateNode;
            b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d2);
            a.__reactInternalSnapshotBeforeUpdate = b;
          }
          return;
        case 3:
          b.flags & 256 && qf(b.stateNode.containerInfo);
          return;
        case 5:
        case 6:
        case 4:
        case 17:
          return;
      }
      throw Error(y(163));
    }
    function Yi(a, b, c) {
      switch (c.tag) {
        case 0:
        case 11:
        case 15:
        case 22:
          b = c.updateQueue;
          b = b !== null ? b.lastEffect : null;
          if (b !== null) {
            a = b = b.next;
            do {
              if ((a.tag & 3) === 3) {
                var d2 = a.create;
                a.destroy = d2();
              }
              a = a.next;
            } while (a !== b);
          }
          b = c.updateQueue;
          b = b !== null ? b.lastEffect : null;
          if (b !== null) {
            a = b = b.next;
            do {
              var e = a;
              d2 = e.next;
              e = e.tag;
              (e & 4) !== 0 && (e & 1) !== 0 && (Zi(c, a), $i(c, a));
              a = d2;
            } while (a !== b);
          }
          return;
        case 1:
          a = c.stateNode;
          c.flags & 4 && (b === null ? a.componentDidMount() : (d2 = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d2, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
          b = c.updateQueue;
          b !== null && Eg(c, b, a);
          return;
        case 3:
          b = c.updateQueue;
          if (b !== null) {
            a = null;
            if (c.child !== null)
              switch (c.child.tag) {
                case 5:
                  a = c.child.stateNode;
                  break;
                case 1:
                  a = c.child.stateNode;
              }
            Eg(c, b, a);
          }
          return;
        case 5:
          a = c.stateNode;
          b === null && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
          return;
        case 6:
          return;
        case 4:
          return;
        case 12:
          return;
        case 13:
          c.memoizedState === null && (c = c.alternate, c !== null && (c = c.memoizedState, c !== null && (c = c.dehydrated, c !== null && Cc(c))));
          return;
        case 19:
        case 17:
        case 20:
        case 21:
        case 23:
        case 24:
          return;
      }
      throw Error(y(163));
    }
    function aj(a, b) {
      for (var c = a; ; ) {
        if (c.tag === 5) {
          var d2 = c.stateNode;
          if (b)
            d2 = d2.style, typeof d2.setProperty === "function" ? d2.setProperty("display", "none", "important") : d2.display = "none";
          else {
            d2 = c.stateNode;
            var e = c.memoizedProps.style;
            e = e !== void 0 && e !== null && e.hasOwnProperty("display") ? e.display : null;
            d2.style.display = sb("display", e);
          }
        } else if (c.tag === 6)
          c.stateNode.nodeValue = b ? "" : c.memoizedProps;
        else if ((c.tag !== 23 && c.tag !== 24 || c.memoizedState === null || c === a) && c.child !== null) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === a)
          break;
        for (; c.sibling === null; ) {
          if (c.return === null || c.return === a)
            return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    }
    function bj(a, b) {
      if (Mf && typeof Mf.onCommitFiberUnmount === "function")
        try {
          Mf.onCommitFiberUnmount(Lf, b);
        } catch (f) {
        }
      switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          a = b.updateQueue;
          if (a !== null && (a = a.lastEffect, a !== null)) {
            var c = a = a.next;
            do {
              var d2 = c, e = d2.destroy;
              d2 = d2.tag;
              if (e !== void 0)
                if ((d2 & 4) !== 0)
                  Zi(b, c);
                else {
                  d2 = b;
                  try {
                    e();
                  } catch (f) {
                    Wi(d2, f);
                  }
                }
              c = c.next;
            } while (c !== a);
          }
          break;
        case 1:
          Vi(b);
          a = b.stateNode;
          if (typeof a.componentWillUnmount === "function")
            try {
              a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
            } catch (f) {
              Wi(b, f);
            }
          break;
        case 5:
          Vi(b);
          break;
        case 4:
          cj(a, b);
      }
    }
    function dj(a) {
      a.alternate = null;
      a.child = null;
      a.dependencies = null;
      a.firstEffect = null;
      a.lastEffect = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.return = null;
      a.updateQueue = null;
    }
    function ej(a) {
      return a.tag === 5 || a.tag === 3 || a.tag === 4;
    }
    function fj(a) {
      a: {
        for (var b = a.return; b !== null; ) {
          if (ej(b))
            break a;
          b = b.return;
        }
        throw Error(y(160));
      }
      var c = b;
      b = c.stateNode;
      switch (c.tag) {
        case 5:
          var d2 = false;
          break;
        case 3:
          b = b.containerInfo;
          d2 = true;
          break;
        case 4:
          b = b.containerInfo;
          d2 = true;
          break;
        default:
          throw Error(y(161));
      }
      c.flags & 16 && (pb(b, ""), c.flags &= -17);
      a:
        b:
          for (c = a; ; ) {
            for (; c.sibling === null; ) {
              if (c.return === null || ej(c.return)) {
                c = null;
                break a;
              }
              c = c.return;
            }
            c.sibling.return = c.return;
            for (c = c.sibling; c.tag !== 5 && c.tag !== 6 && c.tag !== 18; ) {
              if (c.flags & 2)
                continue b;
              if (c.child === null || c.tag === 4)
                continue b;
              else
                c.child.return = c, c = c.child;
            }
            if (!(c.flags & 2)) {
              c = c.stateNode;
              break a;
            }
          }
      d2 ? gj(a, c, b) : hj(a, c, b);
    }
    function gj(a, b, c) {
      var d2 = a.tag, e = d2 === 5 || d2 === 6;
      if (e)
        a = e ? a.stateNode : a.stateNode.instance, b ? c.nodeType === 8 ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (c.nodeType === 8 ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, c !== null && c !== void 0 || b.onclick !== null || (b.onclick = jf));
      else if (d2 !== 4 && (a = a.child, a !== null))
        for (gj(a, b, c), a = a.sibling; a !== null; )
          gj(a, b, c), a = a.sibling;
    }
    function hj(a, b, c) {
      var d2 = a.tag, e = d2 === 5 || d2 === 6;
      if (e)
        a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);
      else if (d2 !== 4 && (a = a.child, a !== null))
        for (hj(a, b, c), a = a.sibling; a !== null; )
          hj(a, b, c), a = a.sibling;
    }
    function cj(a, b) {
      for (var c = b, d2 = false, e, f; ; ) {
        if (!d2) {
          d2 = c.return;
          a:
            for (; ; ) {
              if (d2 === null)
                throw Error(y(160));
              e = d2.stateNode;
              switch (d2.tag) {
                case 5:
                  f = false;
                  break a;
                case 3:
                  e = e.containerInfo;
                  f = true;
                  break a;
                case 4:
                  e = e.containerInfo;
                  f = true;
                  break a;
              }
              d2 = d2.return;
            }
          d2 = true;
        }
        if (c.tag === 5 || c.tag === 6) {
          a:
            for (var g = a, h = c, k = h; ; )
              if (bj(g, k), k.child !== null && k.tag !== 4)
                k.child.return = k, k = k.child;
              else {
                if (k === h)
                  break a;
                for (; k.sibling === null; ) {
                  if (k.return === null || k.return === h)
                    break a;
                  k = k.return;
                }
                k.sibling.return = k.return;
                k = k.sibling;
              }
          f ? (g = e, h = c.stateNode, g.nodeType === 8 ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
        } else if (c.tag === 4) {
          if (c.child !== null) {
            e = c.stateNode.containerInfo;
            f = true;
            c.child.return = c;
            c = c.child;
            continue;
          }
        } else if (bj(a, c), c.child !== null) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b)
          break;
        for (; c.sibling === null; ) {
          if (c.return === null || c.return === b)
            return;
          c = c.return;
          c.tag === 4 && (d2 = false);
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    }
    function ij(a, b) {
      switch (b.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
        case 22:
          var c = b.updateQueue;
          c = c !== null ? c.lastEffect : null;
          if (c !== null) {
            var d2 = c = c.next;
            do
              (d2.tag & 3) === 3 && (a = d2.destroy, d2.destroy = void 0, a !== void 0 && a()), d2 = d2.next;
            while (d2 !== c);
          }
          return;
        case 1:
          return;
        case 5:
          c = b.stateNode;
          if (c != null) {
            d2 = b.memoizedProps;
            var e = a !== null ? a.memoizedProps : d2;
            a = b.type;
            var f = b.updateQueue;
            b.updateQueue = null;
            if (f !== null) {
              c[xf] = d2;
              a === "input" && d2.type === "radio" && d2.name != null && $a(c, d2);
              wb(a, e);
              b = wb(a, d2);
              for (e = 0; e < f.length; e += 2) {
                var g = f[e], h = f[e + 1];
                g === "style" ? tb(c, h) : g === "dangerouslySetInnerHTML" ? ob(c, h) : g === "children" ? pb(c, h) : qa(c, g, h, b);
              }
              switch (a) {
                case "input":
                  ab(c, d2);
                  break;
                case "textarea":
                  ib(c, d2);
                  break;
                case "select":
                  a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d2.multiple, f = d2.value, f != null ? fb(c, !!d2.multiple, f, false) : a !== !!d2.multiple && (d2.defaultValue != null ? fb(c, !!d2.multiple, d2.defaultValue, true) : fb(c, !!d2.multiple, d2.multiple ? [] : "", false));
              }
            }
          }
          return;
        case 6:
          if (b.stateNode === null)
            throw Error(y(162));
          b.stateNode.nodeValue = b.memoizedProps;
          return;
        case 3:
          c = b.stateNode;
          c.hydrate && (c.hydrate = false, Cc(c.containerInfo));
          return;
        case 12:
          return;
        case 13:
          b.memoizedState !== null && (jj = O(), aj(b.child, true));
          kj(b);
          return;
        case 19:
          kj(b);
          return;
        case 17:
          return;
        case 23:
        case 24:
          aj(b, b.memoizedState !== null);
          return;
      }
      throw Error(y(163));
    }
    function kj(a) {
      var b = a.updateQueue;
      if (b !== null) {
        a.updateQueue = null;
        var c = a.stateNode;
        c === null && (c = a.stateNode = new Ui());
        b.forEach(function(b2) {
          var d2 = lj.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d2, d2));
        });
      }
    }
    function mj(a, b) {
      return a !== null && (a = a.memoizedState, a === null || a.dehydrated !== null) ? (b = b.memoizedState, b !== null && b.dehydrated === null) : false;
    }
    var nj = Math.ceil;
    var oj = ra.ReactCurrentDispatcher;
    var pj = ra.ReactCurrentOwner;
    var X = 0;
    var U = null;
    var Y = null;
    var W = 0;
    var qj = 0;
    var rj = Bf(0);
    var V = 0;
    var sj = null;
    var tj = 0;
    var Dg = 0;
    var Hi = 0;
    var uj = 0;
    var vj = null;
    var jj = 0;
    var Ji = Infinity;
    function wj() {
      Ji = O() + 500;
    }
    var Z = null;
    var Qi = false;
    var Ri = null;
    var Ti = null;
    var xj = false;
    var yj = null;
    var zj = 90;
    var Aj = [];
    var Bj = [];
    var Cj = null;
    var Dj = 0;
    var Ej = null;
    var Fj = -1;
    var Gj = 0;
    var Hj = 0;
    var Ij = null;
    var Jj = false;
    function Hg() {
      return (X & 48) !== 0 ? O() : Fj !== -1 ? Fj : Fj = O();
    }
    function Ig(a) {
      a = a.mode;
      if ((a & 2) === 0)
        return 1;
      if ((a & 4) === 0)
        return eg() === 99 ? 1 : 2;
      Gj === 0 && (Gj = tj);
      if (kg.transition !== 0) {
        Hj !== 0 && (Hj = vj !== null ? vj.pendingLanes : 0);
        a = Gj;
        var b = 4186112 & ~Hj;
        b &= -b;
        b === 0 && (a = 4186112 & ~a, b = a & -a, b === 0 && (b = 8192));
        return b;
      }
      a = eg();
      (X & 4) !== 0 && a === 98 ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
      return a;
    }
    function Jg(a, b, c) {
      if (50 < Dj)
        throw Dj = 0, Ej = null, Error(y(185));
      a = Kj(a, b);
      if (a === null)
        return null;
      $c(a, b, c);
      a === U && (Hi |= b, V === 4 && Ii(a, W));
      var d2 = eg();
      b === 1 ? (X & 8) !== 0 && (X & 48) === 0 ? Lj(a) : (Mj(a, c), X === 0 && (wj(), ig())) : ((X & 4) === 0 || d2 !== 98 && d2 !== 99 || (Cj === null ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));
      vj = a;
    }
    function Kj(a, b) {
      a.lanes |= b;
      var c = a.alternate;
      c !== null && (c.lanes |= b);
      c = a;
      for (a = a.return; a !== null; )
        a.childLanes |= b, c = a.alternate, c !== null && (c.childLanes |= b), c = a, a = a.return;
      return c.tag === 3 ? c.stateNode : null;
    }
    function Mj(a, b) {
      for (var c = a.callbackNode, d2 = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g; ) {
        var h = 31 - Vc(g), k = 1 << h, l = f[h];
        if (l === -1) {
          if ((k & d2) === 0 || (k & e) !== 0) {
            l = b;
            Rc(k);
            var n = F;
            f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5e3 : -1;
          }
        } else
          l <= b && (a.expiredLanes |= k);
        g &= ~k;
      }
      d2 = Uc(a, a === U ? W : 0);
      b = F;
      if (d2 === 0)
        c !== null && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);
      else {
        if (c !== null) {
          if (a.callbackPriority === b)
            return;
          c !== Zf && Pf(c);
        }
        b === 15 ? (c = Lj.bind(null, a), ag === null ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : b === 14 ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
        a.callbackPriority = b;
        a.callbackNode = c;
      }
    }
    function Nj(a) {
      Fj = -1;
      Hj = Gj = 0;
      if ((X & 48) !== 0)
        throw Error(y(327));
      var b = a.callbackNode;
      if (Oj() && a.callbackNode !== b)
        return null;
      var c = Uc(a, a === U ? W : 0);
      if (c === 0)
        return null;
      var d2 = c;
      var e = X;
      X |= 16;
      var f = Pj();
      if (U !== a || W !== d2)
        wj(), Qj(a, d2);
      do
        try {
          Rj();
          break;
        } catch (h) {
          Sj(a, h);
        }
      while (1);
      qg();
      oj.current = f;
      X = e;
      Y !== null ? d2 = 0 : (U = null, W = 0, d2 = V);
      if ((tj & Hi) !== 0)
        Qj(a, 0);
      else if (d2 !== 0) {
        d2 === 2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), c = Wc(a), c !== 0 && (d2 = Tj(a, c)));
        if (d2 === 1)
          throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
        a.finishedWork = a.current.alternate;
        a.finishedLanes = c;
        switch (d2) {
          case 0:
          case 1:
            throw Error(y(345));
          case 2:
            Uj(a);
            break;
          case 3:
            Ii(a, c);
            if ((c & 62914560) === c && (d2 = jj + 500 - O(), 10 < d2)) {
              if (Uc(a, 0) !== 0)
                break;
              e = a.suspendedLanes;
              if ((e & c) !== c) {
                Hg();
                a.pingedLanes |= a.suspendedLanes & e;
                break;
              }
              a.timeoutHandle = of(Uj.bind(null, a), d2);
              break;
            }
            Uj(a);
            break;
          case 4:
            Ii(a, c);
            if ((c & 4186112) === c)
              break;
            d2 = a.eventTimes;
            for (e = -1; 0 < c; ) {
              var g = 31 - Vc(c);
              f = 1 << g;
              g = d2[g];
              g > e && (e = g);
              c &= ~f;
            }
            c = e;
            c = O() - c;
            c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3e3 > c ? 3e3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;
            if (10 < c) {
              a.timeoutHandle = of(Uj.bind(null, a), c);
              break;
            }
            Uj(a);
            break;
          case 5:
            Uj(a);
            break;
          default:
            throw Error(y(329));
        }
      }
      Mj(a, O());
      return a.callbackNode === b ? Nj.bind(null, a) : null;
    }
    function Ii(a, b) {
      b &= ~uj;
      b &= ~Hi;
      a.suspendedLanes |= b;
      a.pingedLanes &= ~b;
      for (a = a.expirationTimes; 0 < b; ) {
        var c = 31 - Vc(b), d2 = 1 << c;
        a[c] = -1;
        b &= ~d2;
      }
    }
    function Lj(a) {
      if ((X & 48) !== 0)
        throw Error(y(327));
      Oj();
      if (a === U && (a.expiredLanes & W) !== 0) {
        var b = W;
        var c = Tj(a, b);
        (tj & Hi) !== 0 && (b = Uc(a, b), c = Tj(a, b));
      } else
        b = Uc(a, 0), c = Tj(a, b);
      a.tag !== 0 && c === 2 && (X |= 64, a.hydrate && (a.hydrate = false, qf(a.containerInfo)), b = Wc(a), b !== 0 && (c = Tj(a, b)));
      if (c === 1)
        throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b;
      Uj(a);
      Mj(a, O());
      return null;
    }
    function Vj() {
      if (Cj !== null) {
        var a = Cj;
        Cj = null;
        a.forEach(function(a2) {
          a2.expiredLanes |= 24 & a2.pendingLanes;
          Mj(a2, O());
        });
      }
      ig();
    }
    function Wj(a, b) {
      var c = X;
      X |= 1;
      try {
        return a(b);
      } finally {
        X = c, X === 0 && (wj(), ig());
      }
    }
    function Xj(a, b) {
      var c = X;
      X &= -2;
      X |= 8;
      try {
        return a(b);
      } finally {
        X = c, X === 0 && (wj(), ig());
      }
    }
    function ni(a, b) {
      I(rj, qj);
      qj |= b;
      tj |= b;
    }
    function Ki() {
      qj = rj.current;
      H(rj);
    }
    function Qj(a, b) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c = a.timeoutHandle;
      c !== -1 && (a.timeoutHandle = -1, pf(c));
      if (Y !== null)
        for (c = Y.return; c !== null; ) {
          var d2 = c;
          switch (d2.tag) {
            case 1:
              d2 = d2.type.childContextTypes;
              d2 !== null && d2 !== void 0 && Gf();
              break;
            case 3:
              fh();
              H(N);
              H(M);
              uh();
              break;
            case 5:
              hh(d2);
              break;
            case 4:
              fh();
              break;
            case 13:
              H(P);
              break;
            case 19:
              H(P);
              break;
            case 10:
              rg(d2);
              break;
            case 23:
            case 24:
              Ki();
          }
          c = c.return;
        }
      U = a;
      Y = Tg(a.current, null);
      W = qj = tj = b;
      V = 0;
      sj = null;
      uj = Hi = Dg = 0;
    }
    function Sj(a, b) {
      do {
        var c = Y;
        try {
          qg();
          vh.current = Gh;
          if (yh) {
            for (var d2 = R.memoizedState; d2 !== null; ) {
              var e = d2.queue;
              e !== null && (e.pending = null);
              d2 = d2.next;
            }
            yh = false;
          }
          xh = 0;
          T = S = R = null;
          zh = false;
          pj.current = null;
          if (c === null || c.return === null) {
            V = 1;
            sj = b;
            Y = null;
            break;
          }
          a: {
            var f = a, g = c.return, h = c, k = b;
            b = W;
            h.flags |= 2048;
            h.firstEffect = h.lastEffect = null;
            if (k !== null && typeof k === "object" && typeof k.then === "function") {
              var l = k;
              if ((h.mode & 2) === 0) {
                var n = h.alternate;
                n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
              }
              var A = (P.current & 1) !== 0, p = g;
              do {
                var C;
                if (C = p.tag === 13) {
                  var x = p.memoizedState;
                  if (x !== null)
                    C = x.dehydrated !== null ? true : false;
                  else {
                    var w = p.memoizedProps;
                    C = w.fallback === void 0 ? false : w.unstable_avoidThisFallback !== true ? true : A ? false : true;
                  }
                }
                if (C) {
                  var z = p.updateQueue;
                  if (z === null) {
                    var u = new Set();
                    u.add(l);
                    p.updateQueue = u;
                  } else
                    z.add(l);
                  if ((p.mode & 2) === 0) {
                    p.flags |= 64;
                    h.flags |= 16384;
                    h.flags &= -2981;
                    if (h.tag === 1)
                      if (h.alternate === null)
                        h.tag = 17;
                      else {
                        var t2 = zg(-1, 1);
                        t2.tag = 2;
                        Ag(h, t2);
                      }
                    h.lanes |= 1;
                    break a;
                  }
                  k = void 0;
                  h = b;
                  var q = f.pingCache;
                  q === null ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), k === void 0 && (k = new Set(), q.set(l, k)));
                  if (!k.has(h)) {
                    k.add(h);
                    var v = Yj.bind(null, f, l, h);
                    l.then(v, v);
                  }
                  p.flags |= 4096;
                  p.lanes = b;
                  break a;
                }
                p = p.return;
              } while (p !== null);
              k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            V !== 5 && (V = 2);
            k = Mi(k, h);
            p = g;
            do {
              switch (p.tag) {
                case 3:
                  f = k;
                  p.flags |= 4096;
                  b &= -b;
                  p.lanes |= b;
                  var J = Pi(p, f, b);
                  Bg(p, J);
                  break a;
                case 1:
                  f = k;
                  var K = p.type, Q = p.stateNode;
                  if ((p.flags & 64) === 0 && (typeof K.getDerivedStateFromError === "function" || Q !== null && typeof Q.componentDidCatch === "function" && (Ti === null || !Ti.has(Q)))) {
                    p.flags |= 4096;
                    b &= -b;
                    p.lanes |= b;
                    var L = Si(p, f, b);
                    Bg(p, L);
                    break a;
                  }
              }
              p = p.return;
            } while (p !== null);
          }
          Zj(c);
        } catch (va) {
          b = va;
          Y === c && c !== null && (Y = c = c.return);
          continue;
        }
        break;
      } while (1);
    }
    function Pj() {
      var a = oj.current;
      oj.current = Gh;
      return a === null ? Gh : a;
    }
    function Tj(a, b) {
      var c = X;
      X |= 16;
      var d2 = Pj();
      U === a && W === b || Qj(a, b);
      do
        try {
          ak();
          break;
        } catch (e) {
          Sj(a, e);
        }
      while (1);
      qg();
      X = c;
      oj.current = d2;
      if (Y !== null)
        throw Error(y(261));
      U = null;
      W = 0;
      return V;
    }
    function ak() {
      for (; Y !== null; )
        bk(Y);
    }
    function Rj() {
      for (; Y !== null && !Qf(); )
        bk(Y);
    }
    function bk(a) {
      var b = ck(a.alternate, a, qj);
      a.memoizedProps = a.pendingProps;
      b === null ? Zj(a) : Y = b;
      pj.current = null;
    }
    function Zj(a) {
      var b = a;
      do {
        var c = b.alternate;
        a = b.return;
        if ((b.flags & 2048) === 0) {
          c = Gi(c, b, qj);
          if (c !== null) {
            Y = c;
            return;
          }
          c = b;
          if (c.tag !== 24 && c.tag !== 23 || c.memoizedState === null || (qj & 1073741824) !== 0 || (c.mode & 4) === 0) {
            for (var d2 = 0, e = c.child; e !== null; )
              d2 |= e.lanes | e.childLanes, e = e.sibling;
            c.childLanes = d2;
          }
          a !== null && (a.flags & 2048) === 0 && (a.firstEffect === null && (a.firstEffect = b.firstEffect), b.lastEffect !== null && (a.lastEffect !== null && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (a.lastEffect !== null ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
        } else {
          c = Li(b);
          if (c !== null) {
            c.flags &= 2047;
            Y = c;
            return;
          }
          a !== null && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
        }
        b = b.sibling;
        if (b !== null) {
          Y = b;
          return;
        }
        Y = b = a;
      } while (b !== null);
      V === 0 && (V = 5);
    }
    function Uj(a) {
      var b = eg();
      gg(99, dk.bind(null, a, b));
      return null;
    }
    function dk(a, b) {
      do
        Oj();
      while (yj !== null);
      if ((X & 48) !== 0)
        throw Error(y(327));
      var c = a.finishedWork;
      if (c === null)
        return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c === a.current)
        throw Error(y(177));
      a.callbackNode = null;
      var d2 = c.lanes | c.childLanes, e = d2, f = a.pendingLanes & ~e;
      a.pendingLanes = e;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= e;
      a.mutableReadLanes &= e;
      a.entangledLanes &= e;
      e = a.entanglements;
      for (var g = a.eventTimes, h = a.expirationTimes; 0 < f; ) {
        var k = 31 - Vc(f), l = 1 << k;
        e[k] = 0;
        g[k] = -1;
        h[k] = -1;
        f &= ~l;
      }
      Cj !== null && (d2 & 24) === 0 && Cj.has(a) && Cj.delete(a);
      a === U && (Y = U = null, W = 0);
      1 < c.flags ? c.lastEffect !== null ? (c.lastEffect.nextEffect = c, d2 = c.firstEffect) : d2 = c : d2 = c.firstEffect;
      if (d2 !== null) {
        e = X;
        X |= 32;
        pj.current = null;
        kf = fd;
        g = Ne();
        if (Oe(g)) {
          if ("selectionStart" in g)
            h = {start: g.selectionStart, end: g.selectionEnd};
          else
            a:
              if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && l.rangeCount !== 0) {
                h = l.anchorNode;
                f = l.anchorOffset;
                k = l.focusNode;
                l = l.focusOffset;
                try {
                  h.nodeType, k.nodeType;
                } catch (va) {
                  h = null;
                  break a;
                }
                var n = 0, A = -1, p = -1, C = 0, x = 0, w = g, z = null;
                b:
                  for (; ; ) {
                    for (var u; ; ) {
                      w !== h || f !== 0 && w.nodeType !== 3 || (A = n + f);
                      w !== k || l !== 0 && w.nodeType !== 3 || (p = n + l);
                      w.nodeType === 3 && (n += w.nodeValue.length);
                      if ((u = w.firstChild) === null)
                        break;
                      z = w;
                      w = u;
                    }
                    for (; ; ) {
                      if (w === g)
                        break b;
                      z === h && ++C === f && (A = n);
                      z === k && ++x === l && (p = n);
                      if ((u = w.nextSibling) !== null)
                        break;
                      w = z;
                      z = w.parentNode;
                    }
                    w = u;
                  }
                h = A === -1 || p === -1 ? null : {start: A, end: p};
              } else
                h = null;
          h = h || {start: 0, end: 0};
        } else
          h = null;
        lf = {focusedElem: g, selectionRange: h};
        fd = false;
        Ij = null;
        Jj = false;
        Z = d2;
        do
          try {
            ek();
          } catch (va) {
            if (Z === null)
              throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (Z !== null);
        Ij = null;
        Z = d2;
        do
          try {
            for (g = a; Z !== null; ) {
              var t2 = Z.flags;
              t2 & 16 && pb(Z.stateNode, "");
              if (t2 & 128) {
                var q = Z.alternate;
                if (q !== null) {
                  var v = q.ref;
                  v !== null && (typeof v === "function" ? v(null) : v.current = null);
                }
              }
              switch (t2 & 1038) {
                case 2:
                  fj(Z);
                  Z.flags &= -3;
                  break;
                case 6:
                  fj(Z);
                  Z.flags &= -3;
                  ij(Z.alternate, Z);
                  break;
                case 1024:
                  Z.flags &= -1025;
                  break;
                case 1028:
                  Z.flags &= -1025;
                  ij(Z.alternate, Z);
                  break;
                case 4:
                  ij(Z.alternate, Z);
                  break;
                case 8:
                  h = Z;
                  cj(g, h);
                  var J = h.alternate;
                  dj(h);
                  J !== null && dj(J);
              }
              Z = Z.nextEffect;
            }
          } catch (va) {
            if (Z === null)
              throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (Z !== null);
        v = lf;
        q = Ne();
        t2 = v.focusedElem;
        g = v.selectionRange;
        if (q !== t2 && t2 && t2.ownerDocument && Me(t2.ownerDocument.documentElement, t2)) {
          g !== null && Oe(t2) && (q = g.start, v = g.end, v === void 0 && (v = q), "selectionStart" in t2 ? (t2.selectionStart = q, t2.selectionEnd = Math.min(v, t2.value.length)) : (v = (q = t2.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t2.textContent.length, J = Math.min(g.start, h), g = g.end === void 0 ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t2, J), f = Le(t2, g), h && f && (v.rangeCount !== 1 || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
          q = [];
          for (v = t2; v = v.parentNode; )
            v.nodeType === 1 && q.push({element: v, left: v.scrollLeft, top: v.scrollTop});
          typeof t2.focus === "function" && t2.focus();
          for (t2 = 0; t2 < q.length; t2++)
            v = q[t2], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
        }
        fd = !!kf;
        lf = kf = null;
        a.current = c;
        Z = d2;
        do
          try {
            for (t2 = a; Z !== null; ) {
              var K = Z.flags;
              K & 36 && Yi(t2, Z.alternate, Z);
              if (K & 128) {
                q = void 0;
                var Q = Z.ref;
                if (Q !== null) {
                  var L = Z.stateNode;
                  switch (Z.tag) {
                    case 5:
                      q = L;
                      break;
                    default:
                      q = L;
                  }
                  typeof Q === "function" ? Q(q) : Q.current = q;
                }
              }
              Z = Z.nextEffect;
            }
          } catch (va) {
            if (Z === null)
              throw Error(y(330));
            Wi(Z, va);
            Z = Z.nextEffect;
          }
        while (Z !== null);
        Z = null;
        $f();
        X = e;
      } else
        a.current = c;
      if (xj)
        xj = false, yj = a, zj = b;
      else
        for (Z = d2; Z !== null; )
          b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
      d2 = a.pendingLanes;
      d2 === 0 && (Ti = null);
      d2 === 1 ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
      c = c.stateNode;
      if (Mf && typeof Mf.onCommitFiberRoot === "function")
        try {
          Mf.onCommitFiberRoot(Lf, c, void 0, (c.current.flags & 64) === 64);
        } catch (va) {
        }
      Mj(a, O());
      if (Qi)
        throw Qi = false, a = Ri, Ri = null, a;
      if ((X & 8) !== 0)
        return null;
      ig();
      return null;
    }
    function ek() {
      for (; Z !== null; ) {
        var a = Z.alternate;
        Jj || Ij === null || ((Z.flags & 8) !== 0 ? dc(Z, Ij) && (Jj = true) : Z.tag === 13 && mj(a, Z) && dc(Z, Ij) && (Jj = true));
        var b = Z.flags;
        (b & 256) !== 0 && Xi(a, Z);
        (b & 512) === 0 || xj || (xj = true, hg(97, function() {
          Oj();
          return null;
        }));
        Z = Z.nextEffect;
      }
    }
    function Oj() {
      if (zj !== 90) {
        var a = 97 < zj ? 97 : zj;
        zj = 90;
        return gg(a, fk);
      }
      return false;
    }
    function $i(a, b) {
      Aj.push(b, a);
      xj || (xj = true, hg(97, function() {
        Oj();
        return null;
      }));
    }
    function Zi(a, b) {
      Bj.push(b, a);
      xj || (xj = true, hg(97, function() {
        Oj();
        return null;
      }));
    }
    function fk() {
      if (yj === null)
        return false;
      var a = yj;
      yj = null;
      if ((X & 48) !== 0)
        throw Error(y(331));
      var b = X;
      X |= 32;
      var c = Bj;
      Bj = [];
      for (var d2 = 0; d2 < c.length; d2 += 2) {
        var e = c[d2], f = c[d2 + 1], g = e.destroy;
        e.destroy = void 0;
        if (typeof g === "function")
          try {
            g();
          } catch (k) {
            if (f === null)
              throw Error(y(330));
            Wi(f, k);
          }
      }
      c = Aj;
      Aj = [];
      for (d2 = 0; d2 < c.length; d2 += 2) {
        e = c[d2];
        f = c[d2 + 1];
        try {
          var h = e.create;
          e.destroy = h();
        } catch (k) {
          if (f === null)
            throw Error(y(330));
          Wi(f, k);
        }
      }
      for (h = a.current.firstEffect; h !== null; )
        a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;
      X = b;
      ig();
      return true;
    }
    function gk(a, b, c) {
      b = Mi(c, b);
      b = Pi(a, b, 1);
      Ag(a, b);
      b = Hg();
      a = Kj(a, 1);
      a !== null && ($c(a, 1, b), Mj(a, b));
    }
    function Wi(a, b) {
      if (a.tag === 3)
        gk(a, a, b);
      else
        for (var c = a.return; c !== null; ) {
          if (c.tag === 3) {
            gk(c, a, b);
            break;
          } else if (c.tag === 1) {
            var d2 = c.stateNode;
            if (typeof c.type.getDerivedStateFromError === "function" || typeof d2.componentDidCatch === "function" && (Ti === null || !Ti.has(d2))) {
              a = Mi(b, a);
              var e = Si(c, a, 1);
              Ag(c, e);
              e = Hg();
              c = Kj(c, 1);
              if (c !== null)
                $c(c, 1, e), Mj(c, e);
              else if (typeof d2.componentDidCatch === "function" && (Ti === null || !Ti.has(d2)))
                try {
                  d2.componentDidCatch(b, a);
                } catch (f) {
                }
              break;
            }
          }
          c = c.return;
        }
    }
    function Yj(a, b, c) {
      var d2 = a.pingCache;
      d2 !== null && d2.delete(b);
      b = Hg();
      a.pingedLanes |= a.suspendedLanes & c;
      U === a && (W & c) === c && (V === 4 || V === 3 && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
      Mj(a, b);
    }
    function lj(a, b) {
      var c = a.stateNode;
      c !== null && c.delete(b);
      b = 0;
      b === 0 && (b = a.mode, (b & 2) === 0 ? b = 1 : (b & 4) === 0 ? b = eg() === 99 ? 1 : 2 : (Gj === 0 && (Gj = tj), b = Yc(62914560 & ~Gj), b === 0 && (b = 4194304)));
      c = Hg();
      a = Kj(a, b);
      a !== null && ($c(a, b, c), Mj(a, c));
    }
    var ck;
    ck = function(a, b, c) {
      var d2 = b.lanes;
      if (a !== null)
        if (a.memoizedProps !== b.pendingProps || N.current)
          ug = true;
        else if ((c & d2) !== 0)
          ug = (a.flags & 16384) !== 0 ? true : false;
        else {
          ug = false;
          switch (b.tag) {
            case 3:
              ri(b);
              sh();
              break;
            case 5:
              gh(b);
              break;
            case 1:
              Ff(b.type) && Jf(b);
              break;
            case 4:
              eh(b, b.stateNode.containerInfo);
              break;
            case 10:
              d2 = b.memoizedProps.value;
              var e = b.type._context;
              I(mg, e._currentValue);
              e._currentValue = d2;
              break;
            case 13:
              if (b.memoizedState !== null) {
                if ((c & b.child.childLanes) !== 0)
                  return ti(a, b, c);
                I(P, P.current & 1);
                b = hi(a, b, c);
                return b !== null ? b.sibling : null;
              }
              I(P, P.current & 1);
              break;
            case 19:
              d2 = (c & b.childLanes) !== 0;
              if ((a.flags & 64) !== 0) {
                if (d2)
                  return Ai(a, b, c);
                b.flags |= 64;
              }
              e = b.memoizedState;
              e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null);
              I(P, P.current);
              if (d2)
                break;
              else
                return null;
            case 23:
            case 24:
              return b.lanes = 0, mi(a, b, c);
          }
          return hi(a, b, c);
        }
      else
        ug = false;
      b.lanes = 0;
      switch (b.tag) {
        case 2:
          d2 = b.type;
          a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2);
          a = b.pendingProps;
          e = Ef(b, M.current);
          tg(b, c);
          e = Ch(null, b, d2, a, e, c);
          b.flags |= 1;
          if (typeof e === "object" && e !== null && typeof e.render === "function" && e.$$typeof === void 0) {
            b.tag = 1;
            b.memoizedState = null;
            b.updateQueue = null;
            if (Ff(d2)) {
              var f = true;
              Jf(b);
            } else
              f = false;
            b.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null;
            xg(b);
            var g = d2.getDerivedStateFromProps;
            typeof g === "function" && Gg(b, d2, g, a);
            e.updater = Kg;
            b.stateNode = e;
            e._reactInternals = b;
            Og(b, d2, a, c);
            b = qi(null, b, d2, true, f, c);
          } else
            b.tag = 0, fi(null, b, e, c), b = b.child;
          return b;
        case 16:
          e = b.elementType;
          a: {
            a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2);
            a = b.pendingProps;
            f = e._init;
            e = f(e._payload);
            b.type = e;
            f = b.tag = hk(e);
            a = lg(e, a);
            switch (f) {
              case 0:
                b = li(null, b, e, a, c);
                break a;
              case 1:
                b = pi(null, b, e, a, c);
                break a;
              case 11:
                b = gi(null, b, e, a, c);
                break a;
              case 14:
                b = ii(null, b, e, lg(e.type, a), d2, c);
                break a;
            }
            throw Error(y(306, e, ""));
          }
          return b;
        case 0:
          return d2 = b.type, e = b.pendingProps, e = b.elementType === d2 ? e : lg(d2, e), li(a, b, d2, e, c);
        case 1:
          return d2 = b.type, e = b.pendingProps, e = b.elementType === d2 ? e : lg(d2, e), pi(a, b, d2, e, c);
        case 3:
          ri(b);
          d2 = b.updateQueue;
          if (a === null || d2 === null)
            throw Error(y(282));
          d2 = b.pendingProps;
          e = b.memoizedState;
          e = e !== null ? e.element : null;
          yg(a, b);
          Cg(b, d2, null, c);
          d2 = b.memoizedState.element;
          if (d2 === e)
            sh(), b = hi(a, b, c);
          else {
            e = b.stateNode;
            if (f = e.hydrate)
              kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = true;
            if (f) {
              a = e.mutableSourceEagerHydrationData;
              if (a != null)
                for (e = 0; e < a.length; e += 2)
                  f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
              c = Zg(b, null, d2, c);
              for (b.child = c; c; )
                c.flags = c.flags & -3 | 1024, c = c.sibling;
            } else
              fi(a, b, d2, c), sh();
            b = b.child;
          }
          return b;
        case 5:
          return gh(b), a === null && ph(b), d2 = b.type, e = b.pendingProps, f = a !== null ? a.memoizedProps : null, g = e.children, nf(d2, e) ? g = null : f !== null && nf(d2, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;
        case 6:
          return a === null && ph(b), null;
        case 13:
          return ti(a, b, c);
        case 4:
          return eh(b, b.stateNode.containerInfo), d2 = b.pendingProps, a === null ? b.child = Yg(b, null, d2, c) : fi(a, b, d2, c), b.child;
        case 11:
          return d2 = b.type, e = b.pendingProps, e = b.elementType === d2 ? e : lg(d2, e), gi(a, b, d2, e, c);
        case 7:
          return fi(a, b, b.pendingProps, c), b.child;
        case 8:
          return fi(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return fi(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d2 = b.type._context;
            e = b.pendingProps;
            g = b.memoizedProps;
            f = e.value;
            var h = b.type._context;
            I(mg, h._currentValue);
            h._currentValue = f;
            if (g !== null)
              if (h = g.value, f = He(h, f) ? 0 : (typeof d2._calculateChangedBits === "function" ? d2._calculateChangedBits(h, f) : 1073741823) | 0, f === 0) {
                if (g.children === e.children && !N.current) {
                  b = hi(a, b, c);
                  break a;
                }
              } else
                for (h = b.child, h !== null && (h.return = b); h !== null; ) {
                  var k = h.dependencies;
                  if (k !== null) {
                    g = h.child;
                    for (var l = k.firstContext; l !== null; ) {
                      if (l.context === d2 && (l.observedBits & f) !== 0) {
                        h.tag === 1 && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
                        h.lanes |= c;
                        l = h.alternate;
                        l !== null && (l.lanes |= c);
                        sg(h.return, c);
                        k.lanes |= c;
                        break;
                      }
                      l = l.next;
                    }
                  } else
                    g = h.tag === 10 ? h.type === b.type ? null : h.child : h.child;
                  if (g !== null)
                    g.return = h;
                  else
                    for (g = h; g !== null; ) {
                      if (g === b) {
                        g = null;
                        break;
                      }
                      h = g.sibling;
                      if (h !== null) {
                        h.return = g.return;
                        g = h;
                        break;
                      }
                      g = g.return;
                    }
                  h = g;
                }
            fi(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, f = b.pendingProps, d2 = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d2 = d2(e), b.flags |= 1, fi(a, b, d2, c), b.child;
        case 14:
          return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d2, c);
        case 15:
          return ki(a, b, b.type, b.pendingProps, d2, c);
        case 17:
          return d2 = b.type, e = b.pendingProps, e = b.elementType === d2 ? e : lg(d2, e), a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d2) ? (a = true, Jf(b)) : a = false, tg(b, c), Mg(b, d2, e), Og(b, d2, e, c), qi(null, b, d2, true, a, c);
        case 19:
          return Ai(a, b, c);
        case 23:
          return mi(a, b, c);
        case 24:
          return mi(a, b, c);
      }
      throw Error(y(156, b.tag));
    };
    function ik(a, b, c, d2) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d2;
      this.flags = 0;
      this.lastEffect = this.firstEffect = this.nextEffect = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function nh(a, b, c, d2) {
      return new ik(a, b, c, d2);
    }
    function ji(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function hk(a) {
      if (typeof a === "function")
        return ji(a) ? 1 : 0;
      if (a !== void 0 && a !== null) {
        a = a.$$typeof;
        if (a === Aa)
          return 11;
        if (a === Da)
          return 14;
      }
      return 2;
    }
    function Tg(a, b) {
      var c = a.alternate;
      c === null ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
      c.childLanes = a.childLanes;
      c.lanes = a.lanes;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = b === null ? null : {lanes: b.lanes, firstContext: b.firstContext};
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function Vg(a, b, c, d2, e, f) {
      var g = 2;
      d2 = a;
      if (typeof a === "function")
        ji(a) && (g = 1);
      else if (typeof a === "string")
        g = 5;
      else
        a:
          switch (a) {
            case ua:
              return Xg(c.children, e, f, b);
            case Ha:
              g = 8;
              e |= 16;
              break;
            case wa:
              g = 8;
              e |= 1;
              break;
            case xa:
              return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;
            case Ba:
              return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;
            case Ca:
              return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;
            case Ia:
              return vi(c, e, f, b);
            case Ja:
              return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;
            default:
              if (typeof a === "object" && a !== null)
                switch (a.$$typeof) {
                  case ya:
                    g = 10;
                    break a;
                  case za:
                    g = 9;
                    break a;
                  case Aa:
                    g = 11;
                    break a;
                  case Da:
                    g = 14;
                    break a;
                  case Ea:
                    g = 16;
                    d2 = null;
                    break a;
                  case Fa:
                    g = 22;
                    break a;
                }
              throw Error(y(130, a == null ? a : typeof a, ""));
          }
      b = nh(g, c, b, e);
      b.elementType = a;
      b.type = d2;
      b.lanes = f;
      return b;
    }
    function Xg(a, b, c, d2) {
      a = nh(7, a, d2, b);
      a.lanes = c;
      return a;
    }
    function vi(a, b, c, d2) {
      a = nh(23, a, d2, b);
      a.elementType = Ia;
      a.lanes = c;
      return a;
    }
    function Ug(a, b, c) {
      a = nh(6, a, null, b);
      a.lanes = c;
      return a;
    }
    function Wg(a, b, c) {
      b = nh(4, a.children !== null ? a.children : [], a.key, b);
      b.lanes = c;
      b.stateNode = {containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation};
      return b;
    }
    function jk(a, b, c) {
      this.tag = b;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.pendingContext = this.context = null;
      this.hydrate = c;
      this.callbackNode = null;
      this.callbackPriority = 0;
      this.eventTimes = Zc(0);
      this.expirationTimes = Zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = Zc(0);
      this.mutableSourceEagerHydrationData = null;
    }
    function kk(a, b, c) {
      var d2 = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return {$$typeof: ta, key: d2 == null ? null : "" + d2, children: a, containerInfo: b, implementation: c};
    }
    function lk(a, b, c, d2) {
      var e = b.current, f = Hg(), g = Ig(e);
      a:
        if (c) {
          c = c._reactInternals;
          b: {
            if (Zb(c) !== c || c.tag !== 1)
              throw Error(y(170));
            var h = c;
            do {
              switch (h.tag) {
                case 3:
                  h = h.stateNode.context;
                  break b;
                case 1:
                  if (Ff(h.type)) {
                    h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                    break b;
                  }
              }
              h = h.return;
            } while (h !== null);
            throw Error(y(171));
          }
          if (c.tag === 1) {
            var k = c.type;
            if (Ff(k)) {
              c = If(c, k, h);
              break a;
            }
          }
          c = h;
        } else
          c = Cf;
      b.context === null ? b.context = c : b.pendingContext = c;
      b = zg(f, g);
      b.payload = {element: a};
      d2 = d2 === void 0 ? null : d2;
      d2 !== null && (b.callback = d2);
      Ag(e, b);
      Jg(e, g, f);
      return g;
    }
    function mk(a) {
      a = a.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function nk(a, b) {
      a = a.memoizedState;
      if (a !== null && a.dehydrated !== null) {
        var c = a.retryLane;
        a.retryLane = c !== 0 && c < b ? c : b;
      }
    }
    function ok(a, b) {
      nk(a, b);
      (a = a.alternate) && nk(a, b);
    }
    function pk() {
      return null;
    }
    function qk(a, b, c) {
      var d2 = c != null && c.hydrationOptions != null && c.hydrationOptions.mutableSources || null;
      c = new jk(a, b, c != null && c.hydrate === true);
      b = nh(3, null, null, b === 2 ? 7 : b === 1 ? 3 : 0);
      c.current = b;
      b.stateNode = c;
      xg(b);
      a[ff] = c.current;
      cf(a.nodeType === 8 ? a.parentNode : a);
      if (d2)
        for (a = 0; a < d2.length; a++) {
          b = d2[a];
          var e = b._getVersion;
          e = e(b._source);
          c.mutableSourceEagerHydrationData == null ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
        }
      this._internalRoot = c;
    }
    qk.prototype.render = function(a) {
      lk(a, this._internalRoot, null, null);
    };
    qk.prototype.unmount = function() {
      var a = this._internalRoot, b = a.containerInfo;
      lk(null, a, null, function() {
        b[ff] = null;
      });
    };
    function rk(a) {
      return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11 && (a.nodeType !== 8 || a.nodeValue !== " react-mount-point-unstable "));
    }
    function sk(a, b) {
      b || (b = a ? a.nodeType === 9 ? a.documentElement : a.firstChild : null, b = !(!b || b.nodeType !== 1 || !b.hasAttribute("data-reactroot")));
      if (!b)
        for (var c; c = a.lastChild; )
          a.removeChild(c);
      return new qk(a, 0, b ? {hydrate: true} : void 0);
    }
    function tk(a, b, c, d2, e) {
      var f = c._reactRootContainer;
      if (f) {
        var g = f._internalRoot;
        if (typeof e === "function") {
          var h = e;
          e = function() {
            var a2 = mk(g);
            h.call(a2);
          };
        }
        lk(b, g, a, e);
      } else {
        f = c._reactRootContainer = sk(c, d2);
        g = f._internalRoot;
        if (typeof e === "function") {
          var k = e;
          e = function() {
            var a2 = mk(g);
            k.call(a2);
          };
        }
        Xj(function() {
          lk(b, g, a, e);
        });
      }
      return mk(g);
    }
    ec = function(a) {
      if (a.tag === 13) {
        var b = Hg();
        Jg(a, 4, b);
        ok(a, 4);
      }
    };
    fc = function(a) {
      if (a.tag === 13) {
        var b = Hg();
        Jg(a, 67108864, b);
        ok(a, 67108864);
      }
    };
    gc = function(a) {
      if (a.tag === 13) {
        var b = Hg(), c = Ig(a);
        Jg(a, c, b);
        ok(a, c);
      }
    };
    hc = function(a, b) {
      return b();
    };
    yb = function(a, b, c) {
      switch (b) {
        case "input":
          ab(a, c);
          b = c.name;
          if (c.type === "radio" && b != null) {
            for (c = a; c.parentNode; )
              c = c.parentNode;
            c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
            for (b = 0; b < c.length; b++) {
              var d2 = c[b];
              if (d2 !== a && d2.form === a.form) {
                var e = Db(d2);
                if (!e)
                  throw Error(y(90));
                Wa(d2);
                ab(d2, e);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c);
          break;
        case "select":
          b = c.value, b != null && fb(a, !!c.multiple, b, false);
      }
    };
    Gb = Wj;
    Hb = function(a, b, c, d2, e) {
      var f = X;
      X |= 4;
      try {
        return gg(98, a.bind(null, b, c, d2, e));
      } finally {
        X = f, X === 0 && (wj(), ig());
      }
    };
    Ib = function() {
      (X & 49) === 0 && (Vj(), Oj());
    };
    Jb = function(a, b) {
      var c = X;
      X |= 2;
      try {
        return a(b);
      } finally {
        X = c, X === 0 && (wj(), ig());
      }
    };
    function uk(a, b) {
      var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
      if (!rk(b))
        throw Error(y(200));
      return kk(a, b, null, c);
    }
    var vk = {Events: [Cb, ue, Db, Eb, Fb, Oj, {current: false}]};
    var wk = {findFiberByHostInstance: wc, bundleType: 0, version: "17.0.1", rendererPackageName: "react-dom"};
    var xk = {bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = cc(a);
      return a === null ? null : a.stateNode;
    }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null};
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
      yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!yk.isDisabled && yk.supportsFiber)
        try {
          Lf = yk.inject(xk), Mf = yk;
        } catch (a) {
        }
    }
    var yk;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
    exports.createPortal = uk;
    exports.findDOMNode = function(a) {
      if (a == null)
        return null;
      if (a.nodeType === 1)
        return a;
      var b = a._reactInternals;
      if (b === void 0) {
        if (typeof a.render === "function")
          throw Error(y(188));
        throw Error(y(268, Object.keys(a)));
      }
      a = cc(b);
      a = a === null ? null : a.stateNode;
      return a;
    };
    exports.flushSync = function(a, b) {
      var c = X;
      if ((c & 48) !== 0)
        return a(b);
      X |= 1;
      try {
        if (a)
          return gg(99, a.bind(null, b));
      } finally {
        X = c, ig();
      }
    };
    exports.hydrate = function(a, b, c) {
      if (!rk(b))
        throw Error(y(200));
      return tk(null, a, b, true, c);
    };
    exports.render = function(a, b, c) {
      if (!rk(b))
        throw Error(y(200));
      return tk(null, a, b, false, c);
    };
    exports.unmountComponentAtNode = function(a) {
      if (!rk(a))
        throw Error(y(40));
      return a._reactRootContainer ? (Xj(function() {
        tk(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[ff] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = Wj;
    exports.unstable_createPortal = function(a, b) {
      return uk(a, b, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null);
    };
    exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d2) {
      if (!rk(c))
        throw Error(y(200));
      if (a == null || a._reactInternals === void 0)
        throw Error(y(38));
      return tk(a, b, c, false, d2);
    };
    exports.version = "17.0.1";
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (false) {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (true) {
      checkDCE();
      module.exports = require_react_dom_production_min();
    } else {
      module.exports = null;
    }
  });

  // src/App.bs.js
  var React2 = __toModule(require_react());

  // src/Player.bs.js
  var React = __toModule(require_react());

  // node_modules/video.js/dist/video.es.js
  var import_window2 = __toModule(require_window());
  var import_document = __toModule(require_document());
  var import_extends2 = __toModule(require_extends());
  var import_assertThisInitialized2 = __toModule(require_assertThisInitialized());
  var import_possibleConstructorReturn = __toModule(require_possibleConstructorReturn());
  var import_getPrototypeOf = __toModule(require_getPrototypeOf());
  var import_inheritsLoose2 = __toModule(require_inheritsLoose());
  var import_tuple = __toModule(require_tuple());
  var import_keycode = __toModule(require_keycode());
  var import_xhr = __toModule(require_xhr());
  var import_videojs_vtt = __toModule(require_browser_index());
  var import_construct = __toModule(require_construct());
  var import_inherits = __toModule(require_inherits());
  var import_resolve_url2 = __toModule(require_resolve_url());

  // node_modules/m3u8-parser/dist/m3u8-parser.es.js
  var import_inheritsLoose = __toModule(require_inheritsLoose());
  var import_stream = __toModule(require_stream());
  var import_extends = __toModule(require_extends());
  var import_assertThisInitialized = __toModule(require_assertThisInitialized());
  var import_decode_b64_to_uint8_array = __toModule(require_decode_b64_to_uint8_array());
  /*! @name m3u8-parser @version 4.5.0 @license Apache-2.0 */
  var LineStream = /* @__PURE__ */ function(_Stream) {
    import_inheritsLoose.default(LineStream2, _Stream);
    function LineStream2() {
      var _this;
      _this = _Stream.call(this) || this;
      _this.buffer = "";
      return _this;
    }
    var _proto = LineStream2.prototype;
    _proto.push = function push(data) {
      var nextNewline;
      this.buffer += data;
      nextNewline = this.buffer.indexOf("\n");
      for (; nextNewline > -1; nextNewline = this.buffer.indexOf("\n")) {
        this.trigger("data", this.buffer.substring(0, nextNewline));
        this.buffer = this.buffer.substring(nextNewline + 1);
      }
    };
    return LineStream2;
  }(import_stream.default);
  var attributeSeparator = function attributeSeparator2() {
    var key = "[^=]*";
    var value = '"[^"]*"|[^,]*';
    var keyvalue = "(?:" + key + ")=(?:" + value + ")";
    return new RegExp("(?:^|,)(" + keyvalue + ")");
  };
  var parseAttributes = function parseAttributes2(attributes) {
    var attrs = attributes.split(attributeSeparator());
    var result = {};
    var i = attrs.length;
    var attr;
    while (i--) {
      if (attrs[i] === "") {
        continue;
      }
      attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1);
      attr[0] = attr[0].replace(/^\s+|\s+$/g, "");
      attr[1] = attr[1].replace(/^\s+|\s+$/g, "");
      attr[1] = attr[1].replace(/^['"](.*)['"]$/g, "$1");
      result[attr[0]] = attr[1];
    }
    return result;
  };
  var ParseStream = /* @__PURE__ */ function(_Stream) {
    import_inheritsLoose.default(ParseStream2, _Stream);
    function ParseStream2() {
      var _this;
      _this = _Stream.call(this) || this;
      _this.customParsers = [];
      _this.tagMappers = [];
      return _this;
    }
    var _proto = ParseStream2.prototype;
    _proto.push = function push(line) {
      var _this2 = this;
      var match;
      var event;
      line = line.trim();
      if (line.length === 0) {
        return;
      }
      if (line[0] !== "#") {
        this.trigger("data", {
          type: "uri",
          uri: line
        });
        return;
      }
      var newLines = this.tagMappers.reduce(function(acc, mapper) {
        var mappedLine = mapper(line);
        if (mappedLine === line) {
          return acc;
        }
        return acc.concat([mappedLine]);
      }, [line]);
      newLines.forEach(function(newLine) {
        for (var i = 0; i < _this2.customParsers.length; i++) {
          if (_this2.customParsers[i].call(_this2, newLine)) {
            return;
          }
        }
        if (newLine.indexOf("#EXT") !== 0) {
          _this2.trigger("data", {
            type: "comment",
            text: newLine.slice(1)
          });
          return;
        }
        newLine = newLine.replace("\r", "");
        match = /^#EXTM3U/.exec(newLine);
        if (match) {
          _this2.trigger("data", {
            type: "tag",
            tagType: "m3u"
          });
          return;
        }
        match = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "inf"
          };
          if (match[1]) {
            event.duration = parseFloat(match[1]);
          }
          if (match[2]) {
            event.title = match[2];
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "targetduration"
          };
          if (match[1]) {
            event.duration = parseInt(match[1], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "totalduration"
          };
          if (match[1]) {
            event.duration = parseInt(match[1], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "version"
          };
          if (match[1]) {
            event.version = parseInt(match[1], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "media-sequence"
          };
          if (match[1]) {
            event.number = parseInt(match[1], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "discontinuity-sequence"
          };
          if (match[1]) {
            event.number = parseInt(match[1], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "playlist-type"
          };
          if (match[1]) {
            event.playlistType = match[1];
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "byterange"
          };
          if (match[1]) {
            event.length = parseInt(match[1], 10);
          }
          if (match[2]) {
            event.offset = parseInt(match[2], 10);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "allow-cache"
          };
          if (match[1]) {
            event.allowed = !/NO/.test(match[1]);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "map"
          };
          if (match[1]) {
            var attributes = parseAttributes(match[1]);
            if (attributes.URI) {
              event.uri = attributes.URI;
            }
            if (attributes.BYTERANGE) {
              var _attributes$BYTERANGE = attributes.BYTERANGE.split("@"), length = _attributes$BYTERANGE[0], offset = _attributes$BYTERANGE[1];
              event.byterange = {};
              if (length) {
                event.byterange.length = parseInt(length, 10);
              }
              if (offset) {
                event.byterange.offset = parseInt(offset, 10);
              }
            }
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "stream-inf"
          };
          if (match[1]) {
            event.attributes = parseAttributes(match[1]);
            if (event.attributes.RESOLUTION) {
              var split = event.attributes.RESOLUTION.split("x");
              var resolution = {};
              if (split[0]) {
                resolution.width = parseInt(split[0], 10);
              }
              if (split[1]) {
                resolution.height = parseInt(split[1], 10);
              }
              event.attributes.RESOLUTION = resolution;
            }
            if (event.attributes.BANDWIDTH) {
              event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);
            }
            if (event.attributes["PROGRAM-ID"]) {
              event.attributes["PROGRAM-ID"] = parseInt(event.attributes["PROGRAM-ID"], 10);
            }
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "media"
          };
          if (match[1]) {
            event.attributes = parseAttributes(match[1]);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-ENDLIST/.exec(newLine);
        if (match) {
          _this2.trigger("data", {
            type: "tag",
            tagType: "endlist"
          });
          return;
        }
        match = /^#EXT-X-DISCONTINUITY/.exec(newLine);
        if (match) {
          _this2.trigger("data", {
            type: "tag",
            tagType: "discontinuity"
          });
          return;
        }
        match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "program-date-time"
          };
          if (match[1]) {
            event.dateTimeString = match[1];
            event.dateTimeObject = new Date(match[1]);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "key"
          };
          if (match[1]) {
            event.attributes = parseAttributes(match[1]);
            if (event.attributes.IV) {
              if (event.attributes.IV.substring(0, 2).toLowerCase() === "0x") {
                event.attributes.IV = event.attributes.IV.substring(2);
              }
              event.attributes.IV = event.attributes.IV.match(/.{8}/g);
              event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);
              event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);
              event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);
              event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);
              event.attributes.IV = new Uint32Array(event.attributes.IV);
            }
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-START:?(.*)$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "start"
          };
          if (match[1]) {
            event.attributes = parseAttributes(match[1]);
            event.attributes["TIME-OFFSET"] = parseFloat(event.attributes["TIME-OFFSET"]);
            event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "cue-out-cont"
          };
          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = "";
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "cue-out"
          };
          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = "";
          }
          _this2.trigger("data", event);
          return;
        }
        match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);
        if (match) {
          event = {
            type: "tag",
            tagType: "cue-in"
          };
          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = "";
          }
          _this2.trigger("data", event);
          return;
        }
        _this2.trigger("data", {
          type: "tag",
          data: newLine.slice(4)
        });
      });
    };
    _proto.addParser = function addParser(_ref) {
      var _this3 = this;
      var expression = _ref.expression, customType = _ref.customType, dataParser = _ref.dataParser, segment = _ref.segment;
      if (typeof dataParser !== "function") {
        dataParser = function dataParser2(line) {
          return line;
        };
      }
      this.customParsers.push(function(line) {
        var match = expression.exec(line);
        if (match) {
          _this3.trigger("data", {
            type: "custom",
            data: dataParser(line),
            customType,
            segment
          });
          return true;
        }
      });
    };
    _proto.addTagMapper = function addTagMapper(_ref2) {
      var expression = _ref2.expression, map = _ref2.map;
      var mapFn = function mapFn2(line) {
        if (expression.test(line)) {
          return map(line);
        }
        return line;
      };
      this.tagMappers.push(mapFn);
    };
    return ParseStream2;
  }(import_stream.default);
  var Parser = /* @__PURE__ */ function(_Stream) {
    import_inheritsLoose.default(Parser2, _Stream);
    function Parser2() {
      var _this;
      _this = _Stream.call(this) || this;
      _this.lineStream = new LineStream();
      _this.parseStream = new ParseStream();
      _this.lineStream.pipe(_this.parseStream);
      var self2 = import_assertThisInitialized.default(_this);
      var uris = [];
      var currentUri = {};
      var currentMap;
      var _key;
      var noop2 = function noop3() {
      };
      var defaultMediaGroups = {
        AUDIO: {},
        VIDEO: {},
        "CLOSED-CAPTIONS": {},
        SUBTITLES: {}
      };
      var widevineUuid = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
      var currentTimeline = 0;
      _this.manifest = {
        allowCache: true,
        discontinuityStarts: [],
        segments: []
      };
      var lastByterangeEnd = 0;
      _this.parseStream.on("data", function(entry) {
        var mediaGroup;
        var rendition;
        ({
          tag: function tag() {
            ({
              "allow-cache": function allowCache() {
                this.manifest.allowCache = entry.allowed;
                if (!("allowed" in entry)) {
                  this.trigger("info", {
                    message: "defaulting allowCache to YES"
                  });
                  this.manifest.allowCache = true;
                }
              },
              byterange: function byterange() {
                var byterange2 = {};
                if ("length" in entry) {
                  currentUri.byterange = byterange2;
                  byterange2.length = entry.length;
                  if (!("offset" in entry)) {
                    entry.offset = lastByterangeEnd;
                  }
                }
                if ("offset" in entry) {
                  currentUri.byterange = byterange2;
                  byterange2.offset = entry.offset;
                }
                lastByterangeEnd = byterange2.offset + byterange2.length;
              },
              endlist: function endlist() {
                this.manifest.endList = true;
              },
              inf: function inf() {
                if (!("mediaSequence" in this.manifest)) {
                  this.manifest.mediaSequence = 0;
                  this.trigger("info", {
                    message: "defaulting media sequence to zero"
                  });
                }
                if (!("discontinuitySequence" in this.manifest)) {
                  this.manifest.discontinuitySequence = 0;
                  this.trigger("info", {
                    message: "defaulting discontinuity sequence to zero"
                  });
                }
                if (entry.duration > 0) {
                  currentUri.duration = entry.duration;
                }
                if (entry.duration === 0) {
                  currentUri.duration = 0.01;
                  this.trigger("info", {
                    message: "updating zero segment duration to a small value"
                  });
                }
                this.manifest.segments = uris;
              },
              key: function key() {
                if (!entry.attributes) {
                  this.trigger("warn", {
                    message: "ignoring key declaration without attribute list"
                  });
                  return;
                }
                if (entry.attributes.METHOD === "NONE") {
                  _key = null;
                  return;
                }
                if (!entry.attributes.URI) {
                  this.trigger("warn", {
                    message: "ignoring key declaration without URI"
                  });
                  return;
                }
                if (entry.attributes.KEYFORMAT === widevineUuid) {
                  var VALID_METHODS = ["SAMPLE-AES", "SAMPLE-AES-CTR", "SAMPLE-AES-CENC"];
                  if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {
                    this.trigger("warn", {
                      message: "invalid key method provided for Widevine"
                    });
                    return;
                  }
                  if (entry.attributes.METHOD === "SAMPLE-AES-CENC") {
                    this.trigger("warn", {
                      message: "SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"
                    });
                  }
                  if (entry.attributes.URI.substring(0, 23) !== "data:text/plain;base64,") {
                    this.trigger("warn", {
                      message: "invalid key URI provided for Widevine"
                    });
                    return;
                  }
                  if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === "0x")) {
                    this.trigger("warn", {
                      message: "invalid key ID provided for Widevine"
                    });
                    return;
                  }
                  this.manifest.contentProtection = {
                    "com.widevine.alpha": {
                      attributes: {
                        schemeIdUri: entry.attributes.KEYFORMAT,
                        keyId: entry.attributes.KEYID.substring(2)
                      },
                      pssh: import_decode_b64_to_uint8_array.default(entry.attributes.URI.split(",")[1])
                    }
                  };
                  return;
                }
                if (!entry.attributes.METHOD) {
                  this.trigger("warn", {
                    message: "defaulting key method to AES-128"
                  });
                }
                _key = {
                  method: entry.attributes.METHOD || "AES-128",
                  uri: entry.attributes.URI
                };
                if (typeof entry.attributes.IV !== "undefined") {
                  _key.iv = entry.attributes.IV;
                }
              },
              "media-sequence": function mediaSequence() {
                if (!isFinite(entry.number)) {
                  this.trigger("warn", {
                    message: "ignoring invalid media sequence: " + entry.number
                  });
                  return;
                }
                this.manifest.mediaSequence = entry.number;
              },
              "discontinuity-sequence": function discontinuitySequence() {
                if (!isFinite(entry.number)) {
                  this.trigger("warn", {
                    message: "ignoring invalid discontinuity sequence: " + entry.number
                  });
                  return;
                }
                this.manifest.discontinuitySequence = entry.number;
                currentTimeline = entry.number;
              },
              "playlist-type": function playlistType() {
                if (!/VOD|EVENT/.test(entry.playlistType)) {
                  this.trigger("warn", {
                    message: "ignoring unknown playlist type: " + entry.playlist
                  });
                  return;
                }
                this.manifest.playlistType = entry.playlistType;
              },
              map: function map() {
                currentMap = {};
                if (entry.uri) {
                  currentMap.uri = entry.uri;
                }
                if (entry.byterange) {
                  currentMap.byterange = entry.byterange;
                }
              },
              "stream-inf": function streamInf() {
                this.manifest.playlists = uris;
                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;
                if (!entry.attributes) {
                  this.trigger("warn", {
                    message: "ignoring empty stream-inf attributes"
                  });
                  return;
                }
                if (!currentUri.attributes) {
                  currentUri.attributes = {};
                }
                import_extends.default(currentUri.attributes, entry.attributes);
              },
              media: function media() {
                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;
                if (!(entry.attributes && entry.attributes.TYPE && entry.attributes["GROUP-ID"] && entry.attributes.NAME)) {
                  this.trigger("warn", {
                    message: "ignoring incomplete or missing media group"
                  });
                  return;
                }
                var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];
                mediaGroupType[entry.attributes["GROUP-ID"]] = mediaGroupType[entry.attributes["GROUP-ID"]] || {};
                mediaGroup = mediaGroupType[entry.attributes["GROUP-ID"]];
                rendition = {
                  default: /yes/i.test(entry.attributes.DEFAULT)
                };
                if (rendition.default) {
                  rendition.autoselect = true;
                } else {
                  rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);
                }
                if (entry.attributes.LANGUAGE) {
                  rendition.language = entry.attributes.LANGUAGE;
                }
                if (entry.attributes.URI) {
                  rendition.uri = entry.attributes.URI;
                }
                if (entry.attributes["INSTREAM-ID"]) {
                  rendition.instreamId = entry.attributes["INSTREAM-ID"];
                }
                if (entry.attributes.CHARACTERISTICS) {
                  rendition.characteristics = entry.attributes.CHARACTERISTICS;
                }
                if (entry.attributes.FORCED) {
                  rendition.forced = /yes/i.test(entry.attributes.FORCED);
                }
                mediaGroup[entry.attributes.NAME] = rendition;
              },
              discontinuity: function discontinuity() {
                currentTimeline += 1;
                currentUri.discontinuity = true;
                this.manifest.discontinuityStarts.push(uris.length);
              },
              "program-date-time": function programDateTime() {
                if (typeof this.manifest.dateTimeString === "undefined") {
                  this.manifest.dateTimeString = entry.dateTimeString;
                  this.manifest.dateTimeObject = entry.dateTimeObject;
                }
                currentUri.dateTimeString = entry.dateTimeString;
                currentUri.dateTimeObject = entry.dateTimeObject;
              },
              targetduration: function targetduration() {
                if (!isFinite(entry.duration) || entry.duration < 0) {
                  this.trigger("warn", {
                    message: "ignoring invalid target duration: " + entry.duration
                  });
                  return;
                }
                this.manifest.targetDuration = entry.duration;
              },
              totalduration: function totalduration() {
                if (!isFinite(entry.duration) || entry.duration < 0) {
                  this.trigger("warn", {
                    message: "ignoring invalid total duration: " + entry.duration
                  });
                  return;
                }
                this.manifest.totalDuration = entry.duration;
              },
              start: function start2() {
                if (!entry.attributes || isNaN(entry.attributes["TIME-OFFSET"])) {
                  this.trigger("warn", {
                    message: "ignoring start declaration without appropriate attribute list"
                  });
                  return;
                }
                this.manifest.start = {
                  timeOffset: entry.attributes["TIME-OFFSET"],
                  precise: entry.attributes.PRECISE
                };
              },
              "cue-out": function cueOut() {
                currentUri.cueOut = entry.data;
              },
              "cue-out-cont": function cueOutCont() {
                currentUri.cueOutCont = entry.data;
              },
              "cue-in": function cueIn() {
                currentUri.cueIn = entry.data;
              }
            }[entry.tagType] || noop2).call(self2);
          },
          uri: function uri() {
            currentUri.uri = entry.uri;
            uris.push(currentUri);
            if (this.manifest.targetDuration && !("duration" in currentUri)) {
              this.trigger("warn", {
                message: "defaulting segment duration to the target duration"
              });
              currentUri.duration = this.manifest.targetDuration;
            }
            if (_key) {
              currentUri.key = _key;
            }
            currentUri.timeline = currentTimeline;
            if (currentMap) {
              currentUri.map = currentMap;
            }
            currentUri = {};
          },
          comment: function comment() {
          },
          custom: function custom() {
            if (entry.segment) {
              currentUri.custom = currentUri.custom || {};
              currentUri.custom[entry.customType] = entry.data;
            } else {
              this.manifest.custom = this.manifest.custom || {};
              this.manifest.custom[entry.customType] = entry.data;
            }
          }
        })[entry.type].call(self2);
      });
      return _this;
    }
    var _proto = Parser2.prototype;
    _proto.push = function push(chunk) {
      this.lineStream.push(chunk);
    };
    _proto.end = function end() {
      this.lineStream.push("\n");
    };
    _proto.addParser = function addParser(options) {
      this.parseStream.addParser(options);
    };
    _proto.addTagMapper = function addTagMapper(options) {
      this.parseStream.addTagMapper(options);
    };
    return Parser2;
  }(import_stream.default);

  // node_modules/video.js/dist/video.es.js
  var import_media_types = __toModule(require_media_types());

  // node_modules/mpd-parser/dist/mpd-parser.es.js
  var import_resolve_url = __toModule(require_resolve_url());
  var import_window = __toModule(require_window2());
  var import_decode_b64_to_uint8_array2 = __toModule(require_decode_b64_to_uint8_array());
  var import_xmldom = __toModule(require_dom_parser());
  /*! @name mpd-parser @version 0.15.0 @license Apache-2.0 */
  var isObject = function isObject2(obj) {
    return !!obj && typeof obj === "object";
  };
  var merge = function merge2() {
    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
      objects[_key] = arguments[_key];
    }
    return objects.reduce(function(result, source) {
      if (typeof source !== "object") {
        return result;
      }
      Object.keys(source).forEach(function(key) {
        if (Array.isArray(result[key]) && Array.isArray(source[key])) {
          result[key] = result[key].concat(source[key]);
        } else if (isObject(result[key]) && isObject(source[key])) {
          result[key] = merge2(result[key], source[key]);
        } else {
          result[key] = source[key];
        }
      });
      return result;
    }, {});
  };
  var values = function values2(o) {
    return Object.keys(o).map(function(k) {
      return o[k];
    });
  };
  var range = function range2(start2, end) {
    var result = [];
    for (var i = start2; i < end; i++) {
      result.push(i);
    }
    return result;
  };
  var flatten = function flatten2(lists) {
    return lists.reduce(function(x, y) {
      return x.concat(y);
    }, []);
  };
  var from = function from2(list) {
    if (!list.length) {
      return [];
    }
    var result = [];
    for (var i = 0; i < list.length; i++) {
      result.push(list[i]);
    }
    return result;
  };
  var findIndexes = function findIndexes2(l, key) {
    return l.reduce(function(a, e, i) {
      if (e[key]) {
        a.push(i);
      }
      return a;
    }, []);
  };
  var errors = {
    INVALID_NUMBER_OF_PERIOD: "INVALID_NUMBER_OF_PERIOD",
    DASH_EMPTY_MANIFEST: "DASH_EMPTY_MANIFEST",
    DASH_INVALID_XML: "DASH_INVALID_XML",
    NO_BASE_URL: "NO_BASE_URL",
    MISSING_SEGMENT_INFORMATION: "MISSING_SEGMENT_INFORMATION",
    SEGMENT_TIME_UNSPECIFIED: "SEGMENT_TIME_UNSPECIFIED",
    UNSUPPORTED_UTC_TIMING_SCHEME: "UNSUPPORTED_UTC_TIMING_SCHEME"
  };
  var urlTypeToSegment = function urlTypeToSegment2(_ref) {
    var _ref$baseUrl = _ref.baseUrl, baseUrl = _ref$baseUrl === void 0 ? "" : _ref$baseUrl, _ref$source = _ref.source, source = _ref$source === void 0 ? "" : _ref$source, _ref$range = _ref.range, range3 = _ref$range === void 0 ? "" : _ref$range, _ref$indexRange = _ref.indexRange, indexRange = _ref$indexRange === void 0 ? "" : _ref$indexRange;
    var segment = {
      uri: source,
      resolvedUri: import_resolve_url.default(baseUrl || "", source)
    };
    if (range3 || indexRange) {
      var rangeStr = range3 ? range3 : indexRange;
      var ranges = rangeStr.split("-");
      var startRange = parseInt(ranges[0], 10);
      var endRange = parseInt(ranges[1], 10);
      segment.byterange = {
        length: endRange - startRange + 1,
        offset: startRange
      };
    }
    return segment;
  };
  var byteRangeToString = function byteRangeToString2(byterange) {
    var endRange = byterange.offset + byterange.length - 1;
    return byterange.offset + "-" + endRange;
  };
  var segmentRange = {
    static: function _static(attributes) {
      var duration5 = attributes.duration, _attributes$timescale = attributes.timescale, timescale2 = _attributes$timescale === void 0 ? 1 : _attributes$timescale, sourceDuration = attributes.sourceDuration;
      return {
        start: 0,
        end: Math.ceil(sourceDuration / (duration5 / timescale2))
      };
    },
    dynamic: function dynamic(attributes) {
      var NOW = attributes.NOW, clientOffset = attributes.clientOffset, availabilityStartTime2 = attributes.availabilityStartTime, _attributes$timescale2 = attributes.timescale, timescale2 = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2, duration5 = attributes.duration, _attributes$start = attributes.start, start2 = _attributes$start === void 0 ? 0 : _attributes$start, _attributes$minimumUp = attributes.minimumUpdatePeriod, minimumUpdatePeriod2 = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp, _attributes$timeShift = attributes.timeShiftBufferDepth, timeShiftBufferDepth2 = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;
      var now = (NOW + clientOffset) / 1e3;
      var periodStartWC = availabilityStartTime2 + start2;
      var periodEndWC = now + minimumUpdatePeriod2;
      var periodDuration = periodEndWC - periodStartWC;
      var segmentCount = Math.ceil(periodDuration * timescale2 / duration5);
      var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth2) * timescale2 / duration5);
      var availableEnd = Math.floor((now - periodStartWC) * timescale2 / duration5);
      return {
        start: Math.max(0, availableStart),
        end: Math.min(segmentCount, availableEnd)
      };
    }
  };
  var toSegments = function toSegments2(attributes) {
    return function(number, index) {
      var duration5 = attributes.duration, _attributes$timescale3 = attributes.timescale, timescale2 = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3, periodIndex = attributes.periodIndex, _attributes$startNumb = attributes.startNumber, startNumber2 = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;
      return {
        number: startNumber2 + number,
        duration: duration5 / timescale2,
        timeline: periodIndex,
        time: index * duration5
      };
    };
  };
  var parseByDuration = function parseByDuration2(attributes) {
    var _attributes$type = attributes.type, type3 = _attributes$type === void 0 ? "static" : _attributes$type, duration5 = attributes.duration, _attributes$timescale4 = attributes.timescale, timescale2 = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4, sourceDuration = attributes.sourceDuration;
    var _segmentRange$type = segmentRange[type3](attributes), start2 = _segmentRange$type.start, end = _segmentRange$type.end;
    var segments = range(start2, end).map(toSegments(attributes));
    if (type3 === "static") {
      var index = segments.length - 1;
      segments[index].duration = sourceDuration - duration5 / timescale2 * index;
    }
    return segments;
  };
  var segmentsFromBase = function segmentsFromBase2(attributes) {
    var baseUrl = attributes.baseUrl, _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ, sourceDuration = attributes.sourceDuration, _attributes$indexRang = attributes.indexRange, indexRange = _attributes$indexRang === void 0 ? "" : _attributes$indexRang, duration5 = attributes.duration;
    if (!baseUrl) {
      throw new Error(errors.NO_BASE_URL);
    }
    var initSegment = urlTypeToSegment({
      baseUrl,
      source: initialization.sourceURL,
      range: initialization.range
    });
    var segment = urlTypeToSegment({
      baseUrl,
      source: baseUrl,
      indexRange
    });
    segment.map = initSegment;
    if (duration5) {
      var segmentTimeInfo = parseByDuration(attributes);
      if (segmentTimeInfo.length) {
        segment.duration = segmentTimeInfo[0].duration;
        segment.timeline = segmentTimeInfo[0].timeline;
      }
    } else if (sourceDuration) {
      segment.duration = sourceDuration;
      segment.timeline = 0;
    }
    segment.number = 0;
    return [segment];
  };
  var addSegmentsToPlaylist = function addSegmentsToPlaylist2(playlist, sidx, baseUrl) {
    var initSegment = playlist.sidx.map ? playlist.sidx.map : null;
    var sourceDuration = playlist.sidx.duration;
    var timeline = playlist.timeline || 0;
    var sidxByteRange = playlist.sidx.byterange;
    var sidxEnd = sidxByteRange.offset + sidxByteRange.length;
    var timescale2 = sidx.timescale;
    var mediaReferences = sidx.references.filter(function(r2) {
      return r2.referenceType !== 1;
    });
    var segments = [];
    var startIndex = sidxEnd + sidx.firstOffset;
    for (var i = 0; i < mediaReferences.length; i++) {
      var reference = sidx.references[i];
      var size = reference.referencedSize;
      var duration5 = reference.subsegmentDuration;
      var endIndex = startIndex + size - 1;
      var indexRange = startIndex + "-" + endIndex;
      var attributes = {
        baseUrl,
        timescale: timescale2,
        timeline,
        periodIndex: timeline,
        duration: duration5,
        sourceDuration,
        indexRange
      };
      var segment = segmentsFromBase(attributes)[0];
      if (initSegment) {
        segment.map = initSegment;
      }
      segments.push(segment);
      startIndex += size;
    }
    playlist.segments = segments;
    return playlist;
  };
  var mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists2(playlists) {
    var mergedPlaylists = values(playlists.reduce(function(acc, playlist) {
      var name = playlist.attributes.id + (playlist.attributes.lang || "");
      if (acc[name]) {
        var _acc$name$segments;
        if (playlist.segments[0]) {
          playlist.segments[0].discontinuity = true;
        }
        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments);
        if (playlist.attributes.contentProtection) {
          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;
        }
      } else {
        acc[name] = playlist;
      }
      return acc;
    }, {}));
    return mergedPlaylists.map(function(playlist) {
      playlist.discontinuityStarts = findIndexes(playlist.segments, "discontinuity");
      return playlist;
    });
  };
  var addSegmentInfoFromSidx = function addSegmentInfoFromSidx2(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }
    if (!Object.keys(sidxMapping).length) {
      return playlists;
    }
    for (var i in playlists) {
      var playlist = playlists[i];
      if (!playlist.sidx) {
        continue;
      }
      var sidxKey = playlist.sidx.uri + "-" + byteRangeToString(playlist.sidx.byterange);
      var sidxMatch = sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;
      if (playlist.sidx && sidxMatch) {
        addSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);
      }
    }
    return playlists;
  };
  var formatAudioPlaylist = function formatAudioPlaylist2(_ref) {
    var _attributes;
    var attributes = _ref.attributes, segments = _ref.segments, sidx = _ref.sidx;
    var playlist = {
      attributes: (_attributes = {
        NAME: attributes.id,
        BANDWIDTH: attributes.bandwidth,
        CODECS: attributes.codecs
      }, _attributes["PROGRAM-ID"] = 1, _attributes),
      uri: "",
      endList: (attributes.type || "static") === "static",
      timeline: attributes.periodIndex,
      resolvedUri: "",
      targetDuration: attributes.duration,
      segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };
    if (attributes.contentProtection) {
      playlist.contentProtection = attributes.contentProtection;
    }
    if (sidx) {
      playlist.sidx = sidx;
    }
    return playlist;
  };
  var formatVttPlaylist = function formatVttPlaylist2(_ref2) {
    var _m3u8Attributes;
    var attributes = _ref2.attributes, segments = _ref2.segments;
    if (typeof segments === "undefined") {
      segments = [{
        uri: attributes.baseUrl,
        timeline: attributes.periodIndex,
        resolvedUri: attributes.baseUrl || "",
        duration: attributes.sourceDuration,
        number: 0
      }];
      attributes.duration = attributes.sourceDuration;
    }
    var m3u8Attributes = (_m3u8Attributes = {
      NAME: attributes.id,
      BANDWIDTH: attributes.bandwidth
    }, _m3u8Attributes["PROGRAM-ID"] = 1, _m3u8Attributes);
    if (attributes.codecs) {
      m3u8Attributes.CODECS = attributes.codecs;
    }
    return {
      attributes: m3u8Attributes,
      uri: "",
      endList: (attributes.type || "static") === "static",
      timeline: attributes.periodIndex,
      resolvedUri: attributes.baseUrl || "",
      targetDuration: attributes.duration,
      segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };
  };
  var organizeAudioPlaylists = function organizeAudioPlaylists2(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }
    var mainPlaylist;
    var formattedPlaylists = playlists.reduce(function(a, playlist) {
      var role = playlist.attributes.role && playlist.attributes.role.value || "";
      var language = playlist.attributes.lang || "";
      var label = "main";
      if (language) {
        var roleLabel = role ? " (" + role + ")" : "";
        label = "" + playlist.attributes.lang + roleLabel;
      }
      if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {
        return a;
      }
      a[label] = {
        language,
        autoselect: true,
        default: role === "main",
        playlists: addSegmentInfoFromSidx([formatAudioPlaylist(playlist)], sidxMapping),
        uri: ""
      };
      if (typeof mainPlaylist === "undefined" && role === "main") {
        mainPlaylist = playlist;
        mainPlaylist.default = true;
      }
      return a;
    }, {});
    if (!mainPlaylist) {
      var firstLabel = Object.keys(formattedPlaylists)[0];
      formattedPlaylists[firstLabel].default = true;
    }
    return formattedPlaylists;
  };
  var organizeVttPlaylists = function organizeVttPlaylists2(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }
    return playlists.reduce(function(a, playlist) {
      var label = playlist.attributes.lang || "text";
      if (a[label]) {
        return a;
      }
      a[label] = {
        language: label,
        default: false,
        autoselect: false,
        playlists: addSegmentInfoFromSidx([formatVttPlaylist(playlist)], sidxMapping),
        uri: ""
      };
      return a;
    }, {});
  };
  var formatVideoPlaylist = function formatVideoPlaylist2(_ref3) {
    var _attributes2;
    var attributes = _ref3.attributes, segments = _ref3.segments, sidx = _ref3.sidx;
    var playlist = {
      attributes: (_attributes2 = {
        NAME: attributes.id,
        AUDIO: "audio",
        SUBTITLES: "subs",
        RESOLUTION: {
          width: attributes.width,
          height: attributes.height
        },
        CODECS: attributes.codecs,
        BANDWIDTH: attributes.bandwidth
      }, _attributes2["PROGRAM-ID"] = 1, _attributes2),
      uri: "",
      endList: (attributes.type || "static") === "static",
      timeline: attributes.periodIndex,
      resolvedUri: "",
      targetDuration: attributes.duration,
      segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };
    if (attributes.contentProtection) {
      playlist.contentProtection = attributes.contentProtection;
    }
    if (sidx) {
      playlist.sidx = sidx;
    }
    return playlist;
  };
  var toM3u8 = function toM3u82(dashPlaylists, locations, sidxMapping) {
    var _mediaGroups;
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }
    if (!dashPlaylists.length) {
      return {};
    }
    var _dashPlaylists$0$attr = dashPlaylists[0].attributes, duration5 = _dashPlaylists$0$attr.sourceDuration, _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.type, type3 = _dashPlaylists$0$attr2 === void 0 ? "static" : _dashPlaylists$0$attr2, suggestedPresentationDelay2 = _dashPlaylists$0$attr.suggestedPresentationDelay, minimumUpdatePeriod2 = _dashPlaylists$0$attr.minimumUpdatePeriod;
    var videoOnly = function videoOnly2(_ref4) {
      var attributes = _ref4.attributes;
      return attributes.mimeType === "video/mp4" || attributes.mimeType === "video/webm" || attributes.contentType === "video";
    };
    var audioOnly = function audioOnly2(_ref5) {
      var attributes = _ref5.attributes;
      return attributes.mimeType === "audio/mp4" || attributes.mimeType === "audio/webm" || attributes.contentType === "audio";
    };
    var vttOnly = function vttOnly2(_ref6) {
      var attributes = _ref6.attributes;
      return attributes.mimeType === "text/vtt" || attributes.contentType === "text";
    };
    var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);
    var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));
    var vttPlaylists = dashPlaylists.filter(vttOnly);
    var master = {
      allowCache: true,
      discontinuityStarts: [],
      segments: [],
      endList: true,
      mediaGroups: (_mediaGroups = {
        AUDIO: {},
        VIDEO: {}
      }, _mediaGroups["CLOSED-CAPTIONS"] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),
      uri: "",
      duration: duration5,
      playlists: addSegmentInfoFromSidx(videoPlaylists, sidxMapping)
    };
    if (minimumUpdatePeriod2 >= 0) {
      master.minimumUpdatePeriod = minimumUpdatePeriod2 * 1e3;
    }
    if (locations) {
      master.locations = locations;
    }
    if (type3 === "dynamic") {
      master.suggestedPresentationDelay = suggestedPresentationDelay2;
    }
    if (audioPlaylists.length) {
      master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping);
    }
    if (vttPlaylists.length) {
      master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);
    }
    return master;
  };
  var getLiveRValue = function getLiveRValue2(attributes, time, duration5) {
    var NOW = attributes.NOW, clientOffset = attributes.clientOffset, availabilityStartTime2 = attributes.availabilityStartTime, _attributes$timescale = attributes.timescale, timescale2 = _attributes$timescale === void 0 ? 1 : _attributes$timescale, _attributes$start = attributes.start, start2 = _attributes$start === void 0 ? 0 : _attributes$start, _attributes$minimumUp = attributes.minimumUpdatePeriod, minimumUpdatePeriod2 = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;
    var now = (NOW + clientOffset) / 1e3;
    var periodStartWC = availabilityStartTime2 + start2;
    var periodEndWC = now + minimumUpdatePeriod2;
    var periodDuration = periodEndWC - periodStartWC;
    return Math.ceil((periodDuration * timescale2 - time) / duration5);
  };
  var parseByTimeline = function parseByTimeline2(attributes, segmentTimeline) {
    var _attributes$type = attributes.type, type3 = _attributes$type === void 0 ? "static" : _attributes$type, _attributes$minimumUp2 = attributes.minimumUpdatePeriod, minimumUpdatePeriod2 = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2, _attributes$media = attributes.media, media = _attributes$media === void 0 ? "" : _attributes$media, sourceDuration = attributes.sourceDuration, _attributes$timescale2 = attributes.timescale, timescale2 = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2, _attributes$startNumb = attributes.startNumber, startNumber2 = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb, timeline = attributes.periodIndex;
    var segments = [];
    var time = -1;
    for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {
      var S = segmentTimeline[sIndex];
      var duration5 = S.d;
      var repeat = S.r || 0;
      var segmentTime = S.t || 0;
      if (time < 0) {
        time = segmentTime;
      }
      if (segmentTime && segmentTime > time) {
        time = segmentTime;
      }
      var count = void 0;
      if (repeat < 0) {
        var nextS = sIndex + 1;
        if (nextS === segmentTimeline.length) {
          if (type3 === "dynamic" && minimumUpdatePeriod2 > 0 && media.indexOf("$Number$") > 0) {
            count = getLiveRValue(attributes, time, duration5);
          } else {
            count = (sourceDuration * timescale2 - time) / duration5;
          }
        } else {
          count = (segmentTimeline[nextS].t - time) / duration5;
        }
      } else {
        count = repeat + 1;
      }
      var end = startNumber2 + segments.length + count;
      var number = startNumber2 + segments.length;
      while (number < end) {
        segments.push({
          number,
          duration: duration5 / timescale2,
          time,
          timeline
        });
        time += duration5;
        number++;
      }
    }
    return segments;
  };
  var identifierPattern = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
  var identifierReplacement = function identifierReplacement2(values3) {
    return function(match, identifier, format, width2) {
      if (match === "$$") {
        return "$";
      }
      if (typeof values3[identifier] === "undefined") {
        return match;
      }
      var value = "" + values3[identifier];
      if (identifier === "RepresentationID") {
        return value;
      }
      if (!format) {
        width2 = 1;
      } else {
        width2 = parseInt(width2, 10);
      }
      if (value.length >= width2) {
        return value;
      }
      return "" + new Array(width2 - value.length + 1).join("0") + value;
    };
  };
  var constructTemplateUrl = function constructTemplateUrl2(url, values3) {
    return url.replace(identifierPattern, identifierReplacement(values3));
  };
  var parseTemplateInfo = function parseTemplateInfo2(attributes, segmentTimeline) {
    if (!attributes.duration && !segmentTimeline) {
      return [{
        number: attributes.startNumber || 1,
        duration: attributes.sourceDuration,
        time: 0,
        timeline: attributes.periodIndex
      }];
    }
    if (attributes.duration) {
      return parseByDuration(attributes);
    }
    return parseByTimeline(attributes, segmentTimeline);
  };
  var segmentsFromTemplate = function segmentsFromTemplate2(attributes, segmentTimeline) {
    var templateValues = {
      RepresentationID: attributes.id,
      Bandwidth: attributes.bandwidth || 0
    };
    var _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {
      sourceURL: "",
      range: ""
    } : _attributes$initializ;
    var mapSegment = urlTypeToSegment({
      baseUrl: attributes.baseUrl,
      source: constructTemplateUrl(initialization.sourceURL, templateValues),
      range: initialization.range
    });
    var segments = parseTemplateInfo(attributes, segmentTimeline);
    return segments.map(function(segment) {
      templateValues.Number = segment.number;
      templateValues.Time = segment.time;
      var uri = constructTemplateUrl(attributes.media || "", templateValues);
      return {
        uri,
        timeline: segment.timeline,
        duration: segment.duration,
        resolvedUri: import_resolve_url.default(attributes.baseUrl || "", uri),
        map: mapSegment,
        number: segment.number
      };
    });
  };
  var SegmentURLToSegmentObject = function SegmentURLToSegmentObject2(attributes, segmentUrl) {
    var baseUrl = attributes.baseUrl, _attributes$initializ = attributes.initialization, initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;
    var initSegment = urlTypeToSegment({
      baseUrl,
      source: initialization.sourceURL,
      range: initialization.range
    });
    var segment = urlTypeToSegment({
      baseUrl,
      source: segmentUrl.media,
      range: segmentUrl.mediaRange
    });
    segment.map = initSegment;
    return segment;
  };
  var segmentsFromList = function segmentsFromList2(attributes, segmentTimeline) {
    var duration5 = attributes.duration, _attributes$segmentUr = attributes.segmentUrls, segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr;
    if (!duration5 && !segmentTimeline || duration5 && segmentTimeline) {
      throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);
    }
    var segmentUrlMap = segmentUrls.map(function(segmentUrlObject) {
      return SegmentURLToSegmentObject(attributes, segmentUrlObject);
    });
    var segmentTimeInfo;
    if (duration5) {
      segmentTimeInfo = parseByDuration(attributes);
    }
    if (segmentTimeline) {
      segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);
    }
    var segments = segmentTimeInfo.map(function(segmentTime, index) {
      if (segmentUrlMap[index]) {
        var segment = segmentUrlMap[index];
        segment.timeline = segmentTime.timeline;
        segment.duration = segmentTime.duration;
        segment.number = segmentTime.number;
        return segment;
      }
    }).filter(function(segment) {
      return segment;
    });
    return segments;
  };
  var generateSegments = function generateSegments2(_ref) {
    var attributes = _ref.attributes, segmentInfo = _ref.segmentInfo;
    var segmentAttributes;
    var segmentsFn;
    if (segmentInfo.template) {
      segmentsFn = segmentsFromTemplate;
      segmentAttributes = merge(attributes, segmentInfo.template);
    } else if (segmentInfo.base) {
      segmentsFn = segmentsFromBase;
      segmentAttributes = merge(attributes, segmentInfo.base);
    } else if (segmentInfo.list) {
      segmentsFn = segmentsFromList;
      segmentAttributes = merge(attributes, segmentInfo.list);
    }
    var segmentsInfo = {
      attributes
    };
    if (!segmentsFn) {
      return segmentsInfo;
    }
    var segments = segmentsFn(segmentAttributes, segmentInfo.timeline);
    if (segmentAttributes.duration) {
      var _segmentAttributes = segmentAttributes, duration5 = _segmentAttributes.duration, _segmentAttributes$ti = _segmentAttributes.timescale, timescale2 = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;
      segmentAttributes.duration = duration5 / timescale2;
    } else if (segments.length) {
      segmentAttributes.duration = segments.reduce(function(max, segment) {
        return Math.max(max, Math.ceil(segment.duration));
      }, 0);
    } else {
      segmentAttributes.duration = 0;
    }
    segmentsInfo.attributes = segmentAttributes;
    segmentsInfo.segments = segments;
    if (segmentInfo.base && segmentAttributes.indexRange) {
      segmentsInfo.sidx = segments[0];
      segmentsInfo.segments = [];
    }
    return segmentsInfo;
  };
  var toPlaylists = function toPlaylists2(representations) {
    return representations.map(generateSegments);
  };
  var findChildren = function findChildren2(element, name) {
    return from(element.childNodes).filter(function(_ref) {
      var tagName = _ref.tagName;
      return tagName === name;
    });
  };
  var getContent = function getContent2(element) {
    return element.textContent.trim();
  };
  var parseDuration = function parseDuration2(str) {
    var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;
    var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;
    var SECONDS_IN_DAY = 24 * 60 * 60;
    var SECONDS_IN_HOUR = 60 * 60;
    var SECONDS_IN_MIN = 60;
    var durationRegex = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
    var match = durationRegex.exec(str);
    if (!match) {
      return 0;
    }
    var _match$slice = match.slice(1), year = _match$slice[0], month = _match$slice[1], day = _match$slice[2], hour = _match$slice[3], minute = _match$slice[4], second = _match$slice[5];
    return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);
  };
  var parseDate = function parseDate2(str) {
    var dateRegex = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/;
    if (dateRegex.test(str)) {
      str += "Z";
    }
    return Date.parse(str);
  };
  var parsers = {
    mediaPresentationDuration: function mediaPresentationDuration(value) {
      return parseDuration(value);
    },
    availabilityStartTime: function availabilityStartTime(value) {
      return parseDate(value) / 1e3;
    },
    minimumUpdatePeriod: function minimumUpdatePeriod(value) {
      return parseDuration(value);
    },
    suggestedPresentationDelay: function suggestedPresentationDelay(value) {
      return parseDuration(value);
    },
    type: function type2(value) {
      return value;
    },
    timeShiftBufferDepth: function timeShiftBufferDepth(value) {
      return parseDuration(value);
    },
    start: function start(value) {
      return parseDuration(value);
    },
    width: function width(value) {
      return parseInt(value, 10);
    },
    height: function height(value) {
      return parseInt(value, 10);
    },
    bandwidth: function bandwidth(value) {
      return parseInt(value, 10);
    },
    startNumber: function startNumber(value) {
      return parseInt(value, 10);
    },
    timescale: function timescale(value) {
      return parseInt(value, 10);
    },
    duration: function duration(value) {
      var parsedValue = parseInt(value, 10);
      if (isNaN(parsedValue)) {
        return parseDuration(value);
      }
      return parsedValue;
    },
    d: function d(value) {
      return parseInt(value, 10);
    },
    t: function t(value) {
      return parseInt(value, 10);
    },
    r: function r(value) {
      return parseInt(value, 10);
    },
    DEFAULT: function DEFAULT(value) {
      return value;
    }
  };
  var parseAttributes3 = function parseAttributes4(el) {
    if (!(el && el.attributes)) {
      return {};
    }
    return from(el.attributes).reduce(function(a, e) {
      var parseFn = parsers[e.name] || parsers.DEFAULT;
      a[e.name] = parseFn(e.value);
      return a;
    }, {});
  };
  var keySystemsMap = {
    "urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b": "org.w3.clearkey",
    "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed": "com.widevine.alpha",
    "urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95": "com.microsoft.playready",
    "urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb": "com.adobe.primetime"
  };
  var buildBaseUrls = function buildBaseUrls2(referenceUrls, baseUrlElements) {
    if (!baseUrlElements.length) {
      return referenceUrls;
    }
    return flatten(referenceUrls.map(function(reference) {
      return baseUrlElements.map(function(baseUrlElement) {
        return import_resolve_url.default(reference, getContent(baseUrlElement));
      });
    }));
  };
  var getSegmentInformation = function getSegmentInformation2(adaptationSet) {
    var segmentTemplate = findChildren(adaptationSet, "SegmentTemplate")[0];
    var segmentList = findChildren(adaptationSet, "SegmentList")[0];
    var segmentUrls = segmentList && findChildren(segmentList, "SegmentURL").map(function(s) {
      return merge({
        tag: "SegmentURL"
      }, parseAttributes3(s));
    });
    var segmentBase = findChildren(adaptationSet, "SegmentBase")[0];
    var segmentTimelineParentNode = segmentList || segmentTemplate;
    var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, "SegmentTimeline")[0];
    var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;
    var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, "Initialization")[0];
    var template = segmentTemplate && parseAttributes3(segmentTemplate);
    if (template && segmentInitialization) {
      template.initialization = segmentInitialization && parseAttributes3(segmentInitialization);
    } else if (template && template.initialization) {
      template.initialization = {
        sourceURL: template.initialization
      };
    }
    var segmentInfo = {
      template,
      timeline: segmentTimeline && findChildren(segmentTimeline, "S").map(function(s) {
        return parseAttributes3(s);
      }),
      list: segmentList && merge(parseAttributes3(segmentList), {
        segmentUrls,
        initialization: parseAttributes3(segmentInitialization)
      }),
      base: segmentBase && merge(parseAttributes3(segmentBase), {
        initialization: parseAttributes3(segmentInitialization)
      })
    };
    Object.keys(segmentInfo).forEach(function(key) {
      if (!segmentInfo[key]) {
        delete segmentInfo[key];
      }
    });
    return segmentInfo;
  };
  var inheritBaseUrls = function inheritBaseUrls2(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {
    return function(representation) {
      var repBaseUrlElements = findChildren(representation, "BaseURL");
      var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);
      var attributes = merge(adaptationSetAttributes, parseAttributes3(representation));
      var representationSegmentInfo = getSegmentInformation(representation);
      return repBaseUrls.map(function(baseUrl) {
        return {
          segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),
          attributes: merge(attributes, {
            baseUrl
          })
        };
      });
    };
  };
  var generateKeySystemInformation = function generateKeySystemInformation2(contentProtectionNodes) {
    return contentProtectionNodes.reduce(function(acc, node) {
      var attributes = parseAttributes3(node);
      var keySystem = keySystemsMap[attributes.schemeIdUri];
      if (keySystem) {
        acc[keySystem] = {
          attributes
        };
        var psshNode = findChildren(node, "cenc:pssh")[0];
        if (psshNode) {
          var pssh = getContent(psshNode);
          var psshBuffer = pssh && import_decode_b64_to_uint8_array2.default(pssh);
          acc[keySystem].pssh = psshBuffer;
        }
      }
      return acc;
    }, {});
  };
  var toRepresentations = function toRepresentations2(periodAttributes, periodBaseUrls, periodSegmentInfo) {
    return function(adaptationSet) {
      var adaptationSetAttributes = parseAttributes3(adaptationSet);
      var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, "BaseURL"));
      var role = findChildren(adaptationSet, "Role")[0];
      var roleAttributes = {
        role: parseAttributes3(role)
      };
      var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);
      var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, "ContentProtection"));
      if (Object.keys(contentProtection).length) {
        attrs = merge(attrs, {
          contentProtection
        });
      }
      var segmentInfo = getSegmentInformation(adaptationSet);
      var representations = findChildren(adaptationSet, "Representation");
      var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);
      return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));
    };
  };
  var toAdaptationSets = function toAdaptationSets2(mpdAttributes, mpdBaseUrls) {
    return function(period, index) {
      var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, "BaseURL"));
      var periodAtt = parseAttributes3(period);
      var parsedPeriodId = parseInt(periodAtt.id, 10);
      var periodIndex = import_window.default.isNaN(parsedPeriodId) ? index : parsedPeriodId;
      var periodAttributes = merge(mpdAttributes, {
        periodIndex
      });
      var adaptationSets = findChildren(period, "AdaptationSet");
      var periodSegmentInfo = getSegmentInformation(period);
      return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));
    };
  };
  var inheritAttributes = function inheritAttributes2(mpd, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$manifestUri = _options.manifestUri, manifestUri = _options$manifestUri === void 0 ? "" : _options$manifestUri, _options$NOW = _options.NOW, NOW = _options$NOW === void 0 ? Date.now() : _options$NOW, _options$clientOffset = _options.clientOffset, clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;
    var periods = findChildren(mpd, "Period");
    if (!periods.length) {
      throw new Error(errors.INVALID_NUMBER_OF_PERIOD);
    }
    var locations = findChildren(mpd, "Location");
    var mpdAttributes = parseAttributes3(mpd);
    var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, "BaseURL"));
    mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;
    mpdAttributes.NOW = NOW;
    mpdAttributes.clientOffset = clientOffset;
    if (locations.length) {
      mpdAttributes.locations = locations.map(getContent);
    }
    return {
      locations: mpdAttributes.locations,
      representationInfo: flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)))
    };
  };
  var stringToMpdXml = function stringToMpdXml2(manifestString) {
    if (manifestString === "") {
      throw new Error(errors.DASH_EMPTY_MANIFEST);
    }
    var parser2 = new import_xmldom.DOMParser();
    var xml;
    var mpd;
    try {
      xml = parser2.parseFromString(manifestString, "application/xml");
      mpd = xml && xml.documentElement.tagName === "MPD" ? xml.documentElement : null;
    } catch (e) {
    }
    if (!mpd || mpd && mpd.getElementsByTagName("parsererror").length > 0) {
      throw new Error(errors.DASH_INVALID_XML);
    }
    return mpd;
  };
  var parseUTCTimingScheme = function parseUTCTimingScheme2(mpd) {
    var UTCTimingNode = findChildren(mpd, "UTCTiming")[0];
    if (!UTCTimingNode) {
      return null;
    }
    var attributes = parseAttributes3(UTCTimingNode);
    switch (attributes.schemeIdUri) {
      case "urn:mpeg:dash:utc:http-head:2014":
      case "urn:mpeg:dash:utc:http-head:2012":
        attributes.method = "HEAD";
        break;
      case "urn:mpeg:dash:utc:http-xsdate:2014":
      case "urn:mpeg:dash:utc:http-iso:2014":
      case "urn:mpeg:dash:utc:http-xsdate:2012":
      case "urn:mpeg:dash:utc:http-iso:2012":
        attributes.method = "GET";
        break;
      case "urn:mpeg:dash:utc:direct:2014":
      case "urn:mpeg:dash:utc:direct:2012":
        attributes.method = "DIRECT";
        attributes.value = Date.parse(attributes.value);
        break;
      case "urn:mpeg:dash:utc:http-ntp:2014":
      case "urn:mpeg:dash:utc:ntp:2014":
      case "urn:mpeg:dash:utc:sntp:2014":
      default:
        throw new Error(errors.UNSUPPORTED_UTC_TIMING_SCHEME);
    }
    return attributes;
  };
  var parse = function parse2(manifestString, options) {
    if (options === void 0) {
      options = {};
    }
    var parsedManifestInfo = inheritAttributes(stringToMpdXml(manifestString), options);
    var playlists = toPlaylists(parsedManifestInfo.representationInfo);
    return toM3u8(playlists, parsedManifestInfo.locations, options.sidxMapping);
  };
  var parseUTCTiming = function parseUTCTiming2(manifestString) {
    return parseUTCTimingScheme(stringToMpdXml(manifestString));
  };
  var addSidxSegmentsToPlaylist = addSegmentsToPlaylist;

  // node_modules/video.js/dist/video.es.js
  var import_parse_sidx = __toModule(require_parse_sidx());
  var import_containers = __toModule(require_containers());
  var import_byte_helpers = __toModule(require_byte_helpers());
  var import_ts_inspector = __toModule(require_ts_inspector());
  var import_clock = __toModule(require_clock());
  var import_probe = __toModule(require_probe2());
  var import_codecs = __toModule(require_codecs());
  /**
   * @license
   * Video.js 7.11.4 <http://videojs.com/>
   * Copyright Brightcove, Inc. <https://www.brightcove.com/>
   * Available under Apache License Version 2.0
   * <https://github.com/videojs/video.js/blob/main/LICENSE>
   *
   * Includes vtt.js <https://github.com/mozilla/vtt.js>
   * Available under Apache License Version 2.0
   * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
   */
  var version = "7.11.4";
  var history = [];
  var LogByTypeFactory = function LogByTypeFactory2(name, log2) {
    return function(type3, level, args) {
      var lvl = log2.levels[level];
      var lvlRegExp = new RegExp("^(" + lvl + ")$");
      if (type3 !== "log") {
        args.unshift(type3.toUpperCase() + ":");
      }
      args.unshift(name + ":");
      if (history) {
        history.push([].concat(args));
        var splice = history.length - 1e3;
        history.splice(0, splice > 0 ? splice : 0);
      }
      if (!import_window2.default.console) {
        return;
      }
      var fn = import_window2.default.console[type3];
      if (!fn && type3 === "debug") {
        fn = import_window2.default.console.info || import_window2.default.console.log;
      }
      if (!fn || !lvl || !lvlRegExp.test(type3)) {
        return;
      }
      fn[Array.isArray(args) ? "apply" : "call"](import_window2.default.console, args);
    };
  };
  function createLogger(name) {
    var level = "info";
    var logByType;
    var log2 = function log3() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      logByType("log", level, args);
    };
    logByType = LogByTypeFactory(name, log2);
    log2.createLogger = function(subname) {
      return createLogger(name + ": " + subname);
    };
    log2.levels = {
      all: "debug|log|warn|error",
      off: "",
      debug: "debug|log|warn|error",
      info: "log|warn|error",
      warn: "warn|error",
      error: "error",
      DEFAULT: level
    };
    log2.level = function(lvl) {
      if (typeof lvl === "string") {
        if (!log2.levels.hasOwnProperty(lvl)) {
          throw new Error('"' + lvl + '" in not a valid log level');
        }
        level = lvl;
      }
      return level;
    };
    log2.history = function() {
      return history ? [].concat(history) : [];
    };
    log2.history.filter = function(fname) {
      return (history || []).filter(function(historyItem) {
        return new RegExp(".*" + fname + ".*").test(historyItem[0]);
      });
    };
    log2.history.clear = function() {
      if (history) {
        history.length = 0;
      }
    };
    log2.history.disable = function() {
      if (history !== null) {
        history.length = 0;
        history = null;
      }
    };
    log2.history.enable = function() {
      if (history === null) {
        history = [];
      }
    };
    log2.error = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return logByType("error", level, args);
    };
    log2.warn = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return logByType("warn", level, args);
    };
    log2.debug = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return logByType("debug", level, args);
    };
    return log2;
  }
  var log = createLogger("VIDEOJS");
  var createLogger$1 = log.createLogger;
  var toString = Object.prototype.toString;
  var keys = function keys2(object) {
    return isObject3(object) ? Object.keys(object) : [];
  };
  function each(object, fn) {
    keys(object).forEach(function(key) {
      return fn(object[key], key);
    });
  }
  function reduce(object, fn, initial) {
    if (initial === void 0) {
      initial = 0;
    }
    return keys(object).reduce(function(accum, key) {
      return fn(accum, object[key], key);
    }, initial);
  }
  function assign(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }
    if (Object.assign) {
      return import_extends2.default.apply(void 0, [target].concat(sources));
    }
    sources.forEach(function(source) {
      if (!source) {
        return;
      }
      each(source, function(value, key) {
        target[key] = value;
      });
    });
    return target;
  }
  function isObject3(value) {
    return !!value && typeof value === "object";
  }
  function isPlain(value) {
    return isObject3(value) && toString.call(value) === "[object Object]" && value.constructor === Object;
  }
  function computedStyle(el, prop) {
    if (!el || !prop) {
      return "";
    }
    if (typeof import_window2.default.getComputedStyle === "function") {
      var computedStyleValue = import_window2.default.getComputedStyle(el);
      return computedStyleValue ? computedStyleValue.getPropertyValue(prop) || computedStyleValue[prop] : "";
    }
    return "";
  }
  function isNonBlankString(str) {
    return typeof str === "string" && Boolean(str.trim());
  }
  function throwIfWhitespace(str) {
    if (str.indexOf(" ") >= 0) {
      throw new Error("class has illegal whitespace characters");
    }
  }
  function classRegExp(className) {
    return new RegExp("(^|\\s)" + className + "($|\\s)");
  }
  function isReal() {
    return import_document.default === import_window2.default.document;
  }
  function isEl(value) {
    return isObject3(value) && value.nodeType === 1;
  }
  function isInFrame() {
    try {
      return import_window2.default.parent !== import_window2.default.self;
    } catch (x) {
      return true;
    }
  }
  function createQuerier(method) {
    return function(selector, context) {
      if (!isNonBlankString(selector)) {
        return import_document.default[method](null);
      }
      if (isNonBlankString(context)) {
        context = import_document.default.querySelector(context);
      }
      var ctx = isEl(context) ? context : import_document.default;
      return ctx[method] && ctx[method](selector);
    };
  }
  function createEl(tagName, properties, attributes, content) {
    if (tagName === void 0) {
      tagName = "div";
    }
    if (properties === void 0) {
      properties = {};
    }
    if (attributes === void 0) {
      attributes = {};
    }
    var el = import_document.default.createElement(tagName);
    Object.getOwnPropertyNames(properties).forEach(function(propName) {
      var val = properties[propName];
      if (propName.indexOf("aria-") !== -1 || propName === "role" || propName === "type") {
        log.warn("Setting attributes in the second argument of createEl()\nhas been deprecated. Use the third argument instead.\n" + ("createEl(type, properties, attributes). Attempting to set " + propName + " to " + val + "."));
        el.setAttribute(propName, val);
      } else if (propName === "textContent") {
        textContent(el, val);
      } else if (el[propName] !== val || propName === "tabIndex") {
        el[propName] = val;
      }
    });
    Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
      el.setAttribute(attrName, attributes[attrName]);
    });
    if (content) {
      appendContent(el, content);
    }
    return el;
  }
  function textContent(el, text) {
    if (typeof el.textContent === "undefined") {
      el.innerText = text;
    } else {
      el.textContent = text;
    }
    return el;
  }
  function prependTo(child, parent) {
    if (parent.firstChild) {
      parent.insertBefore(child, parent.firstChild);
    } else {
      parent.appendChild(child);
    }
  }
  function hasClass(element, classToCheck) {
    throwIfWhitespace(classToCheck);
    if (element.classList) {
      return element.classList.contains(classToCheck);
    }
    return classRegExp(classToCheck).test(element.className);
  }
  function addClass(element, classToAdd) {
    if (element.classList) {
      element.classList.add(classToAdd);
    } else if (!hasClass(element, classToAdd)) {
      element.className = (element.className + " " + classToAdd).trim();
    }
    return element;
  }
  function removeClass(element, classToRemove) {
    if (element.classList) {
      element.classList.remove(classToRemove);
    } else {
      throwIfWhitespace(classToRemove);
      element.className = element.className.split(/\s+/).filter(function(c) {
        return c !== classToRemove;
      }).join(" ");
    }
    return element;
  }
  function toggleClass(element, classToToggle, predicate) {
    var has = hasClass(element, classToToggle);
    if (typeof predicate === "function") {
      predicate = predicate(element, classToToggle);
    }
    if (typeof predicate !== "boolean") {
      predicate = !has;
    }
    if (predicate === has) {
      return;
    }
    if (predicate) {
      addClass(element, classToToggle);
    } else {
      removeClass(element, classToToggle);
    }
    return element;
  }
  function setAttributes(el, attributes) {
    Object.getOwnPropertyNames(attributes).forEach(function(attrName) {
      var attrValue = attributes[attrName];
      if (attrValue === null || typeof attrValue === "undefined" || attrValue === false) {
        el.removeAttribute(attrName);
      } else {
        el.setAttribute(attrName, attrValue === true ? "" : attrValue);
      }
    });
  }
  function getAttributes(tag) {
    var obj = {};
    var knownBooleans = ",autoplay,controls,playsinline,loop,muted,default,defaultMuted,";
    if (tag && tag.attributes && tag.attributes.length > 0) {
      var attrs = tag.attributes;
      for (var i = attrs.length - 1; i >= 0; i--) {
        var attrName = attrs[i].name;
        var attrVal = attrs[i].value;
        if (typeof tag[attrName] === "boolean" || knownBooleans.indexOf("," + attrName + ",") !== -1) {
          attrVal = attrVal !== null ? true : false;
        }
        obj[attrName] = attrVal;
      }
    }
    return obj;
  }
  function getAttribute(el, attribute) {
    return el.getAttribute(attribute);
  }
  function setAttribute(el, attribute, value) {
    el.setAttribute(attribute, value);
  }
  function removeAttribute(el, attribute) {
    el.removeAttribute(attribute);
  }
  function blockTextSelection() {
    import_document.default.body.focus();
    import_document.default.onselectstart = function() {
      return false;
    };
  }
  function unblockTextSelection() {
    import_document.default.onselectstart = function() {
      return true;
    };
  }
  function getBoundingClientRect(el) {
    if (el && el.getBoundingClientRect && el.parentNode) {
      var rect = el.getBoundingClientRect();
      var result = {};
      ["bottom", "height", "left", "right", "top", "width"].forEach(function(k) {
        if (rect[k] !== void 0) {
          result[k] = rect[k];
        }
      });
      if (!result.height) {
        result.height = parseFloat(computedStyle(el, "height"));
      }
      if (!result.width) {
        result.width = parseFloat(computedStyle(el, "width"));
      }
      return result;
    }
  }
  function findPosition(el) {
    if (!el || el && !el.offsetParent) {
      return {
        left: 0,
        top: 0,
        width: 0,
        height: 0
      };
    }
    var width2 = el.offsetWidth;
    var height2 = el.offsetHeight;
    var left = 0;
    var top = 0;
    do {
      left += el.offsetLeft;
      top += el.offsetTop;
      el = el.offsetParent;
    } while (el);
    return {
      left,
      top,
      width: width2,
      height: height2
    };
  }
  function getPointerPosition(el, event) {
    var position = {};
    var boxTarget = findPosition(event.target);
    var box = findPosition(el);
    var boxW = box.width;
    var boxH = box.height;
    var offsetY = event.offsetY - (box.top - boxTarget.top);
    var offsetX = event.offsetX - (box.left - boxTarget.left);
    if (event.changedTouches) {
      offsetX = event.changedTouches[0].pageX - box.left;
      offsetY = event.changedTouches[0].pageY + box.top;
    }
    position.y = 1 - Math.max(0, Math.min(1, offsetY / boxH));
    position.x = Math.max(0, Math.min(1, offsetX / boxW));
    return position;
  }
  function isTextNode(value) {
    return isObject3(value) && value.nodeType === 3;
  }
  function emptyEl(el) {
    while (el.firstChild) {
      el.removeChild(el.firstChild);
    }
    return el;
  }
  function normalizeContent(content) {
    if (typeof content === "function") {
      content = content();
    }
    return (Array.isArray(content) ? content : [content]).map(function(value) {
      if (typeof value === "function") {
        value = value();
      }
      if (isEl(value) || isTextNode(value)) {
        return value;
      }
      if (typeof value === "string" && /\S/.test(value)) {
        return import_document.default.createTextNode(value);
      }
    }).filter(function(value) {
      return value;
    });
  }
  function appendContent(el, content) {
    normalizeContent(content).forEach(function(node) {
      return el.appendChild(node);
    });
    return el;
  }
  function insertContent(el, content) {
    return appendContent(emptyEl(el), content);
  }
  function isSingleLeftClick(event) {
    if (event.button === void 0 && event.buttons === void 0) {
      return true;
    }
    if (event.button === 0 && event.buttons === void 0) {
      return true;
    }
    if (event.type === "mouseup" && event.button === 0 && event.buttons === 0) {
      return true;
    }
    if (event.button !== 0 || event.buttons !== 1) {
      return false;
    }
    return true;
  }
  var $ = createQuerier("querySelector");
  var $$ = createQuerier("querySelectorAll");
  var Dom = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    isReal,
    isEl,
    isInFrame,
    createEl,
    textContent,
    prependTo,
    hasClass,
    addClass,
    removeClass,
    toggleClass,
    setAttributes,
    getAttributes,
    getAttribute,
    setAttribute,
    removeAttribute,
    blockTextSelection,
    unblockTextSelection,
    getBoundingClientRect,
    findPosition,
    getPointerPosition,
    isTextNode,
    emptyEl,
    normalizeContent,
    appendContent,
    insertContent,
    isSingleLeftClick,
    $,
    $$
  });
  var _windowLoaded = false;
  var videojs;
  var autoSetup = function autoSetup2() {
    if (!isReal() || videojs.options.autoSetup === false) {
      return;
    }
    var vids = Array.prototype.slice.call(import_document.default.getElementsByTagName("video"));
    var audios = Array.prototype.slice.call(import_document.default.getElementsByTagName("audio"));
    var divs = Array.prototype.slice.call(import_document.default.getElementsByTagName("video-js"));
    var mediaEls = vids.concat(audios, divs);
    if (mediaEls && mediaEls.length > 0) {
      for (var i = 0, e = mediaEls.length; i < e; i++) {
        var mediaEl = mediaEls[i];
        if (mediaEl && mediaEl.getAttribute) {
          if (mediaEl.player === void 0) {
            var options = mediaEl.getAttribute("data-setup");
            if (options !== null) {
              videojs(mediaEl);
            }
          }
        } else {
          autoSetupTimeout(1);
          break;
        }
      }
    } else if (!_windowLoaded) {
      autoSetupTimeout(1);
    }
  };
  function autoSetupTimeout(wait, vjs) {
    if (vjs) {
      videojs = vjs;
    }
    import_window2.default.setTimeout(autoSetup, wait);
  }
  function setWindowLoaded() {
    _windowLoaded = true;
    import_window2.default.removeEventListener("load", setWindowLoaded);
  }
  if (isReal()) {
    if (import_document.default.readyState === "complete") {
      setWindowLoaded();
    } else {
      import_window2.default.addEventListener("load", setWindowLoaded);
    }
  }
  var createStyleElement = function createStyleElement2(className) {
    var style = import_document.default.createElement("style");
    style.className = className;
    return style;
  };
  var setTextContent = function setTextContent2(el, content) {
    if (el.styleSheet) {
      el.styleSheet.cssText = content;
    } else {
      el.textContent = content;
    }
  };
  var _initialGuid = 3;
  var _guid = _initialGuid;
  function newGUID() {
    return _guid++;
  }
  var FakeWeakMap;
  if (!import_window2.default.WeakMap) {
    FakeWeakMap = /* @__PURE__ */ function() {
      function FakeWeakMap2() {
        this.vdata = "vdata" + Math.floor(import_window2.default.performance && import_window2.default.performance.now() || Date.now());
        this.data = {};
      }
      var _proto = FakeWeakMap2.prototype;
      _proto.set = function set4(key, value) {
        var access = key[this.vdata] || newGUID();
        if (!key[this.vdata]) {
          key[this.vdata] = access;
        }
        this.data[access] = value;
        return this;
      };
      _proto.get = function get7(key) {
        var access = key[this.vdata];
        if (access) {
          return this.data[access];
        }
        log("We have no data for this element", key);
        return void 0;
      };
      _proto.has = function has(key) {
        var access = key[this.vdata];
        return access in this.data;
      };
      _proto["delete"] = function _delete(key) {
        var access = key[this.vdata];
        if (access) {
          delete this.data[access];
          delete key[this.vdata];
        }
      };
      return FakeWeakMap2;
    }();
  }
  var DomData = import_window2.default.WeakMap ? new WeakMap() : new FakeWeakMap();
  function _cleanUpEvents(elem, type3) {
    if (!DomData.has(elem)) {
      return;
    }
    var data = DomData.get(elem);
    if (data.handlers[type3].length === 0) {
      delete data.handlers[type3];
      if (elem.removeEventListener) {
        elem.removeEventListener(type3, data.dispatcher, false);
      } else if (elem.detachEvent) {
        elem.detachEvent("on" + type3, data.dispatcher);
      }
    }
    if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
      delete data.handlers;
      delete data.dispatcher;
      delete data.disabled;
    }
    if (Object.getOwnPropertyNames(data).length === 0) {
      DomData["delete"](elem);
    }
  }
  function _handleMultipleEvents(fn, elem, types, callback2) {
    types.forEach(function(type3) {
      fn(elem, type3, callback2);
    });
  }
  function fixEvent(event) {
    if (event.fixed_) {
      return event;
    }
    function returnTrue() {
      return true;
    }
    function returnFalse() {
      return false;
    }
    if (!event || !event.isPropagationStopped) {
      var old = event || import_window2.default.event;
      event = {};
      for (var key in old) {
        if (key !== "layerX" && key !== "layerY" && key !== "keyLocation" && key !== "webkitMovementX" && key !== "webkitMovementY") {
          if (!(key === "returnValue" && old.preventDefault)) {
            event[key] = old[key];
          }
        }
      }
      if (!event.target) {
        event.target = event.srcElement || import_document.default;
      }
      if (!event.relatedTarget) {
        event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
      }
      event.preventDefault = function() {
        if (old.preventDefault) {
          old.preventDefault();
        }
        event.returnValue = false;
        old.returnValue = false;
        event.defaultPrevented = true;
      };
      event.defaultPrevented = false;
      event.stopPropagation = function() {
        if (old.stopPropagation) {
          old.stopPropagation();
        }
        event.cancelBubble = true;
        old.cancelBubble = true;
        event.isPropagationStopped = returnTrue;
      };
      event.isPropagationStopped = returnFalse;
      event.stopImmediatePropagation = function() {
        if (old.stopImmediatePropagation) {
          old.stopImmediatePropagation();
        }
        event.isImmediatePropagationStopped = returnTrue;
        event.stopPropagation();
      };
      event.isImmediatePropagationStopped = returnFalse;
      if (event.clientX !== null && event.clientX !== void 0) {
        var doc = import_document.default.documentElement;
        var body = import_document.default.body;
        event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
        event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
      }
      event.which = event.charCode || event.keyCode;
      if (event.button !== null && event.button !== void 0) {
        event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
      }
    }
    event.fixed_ = true;
    return event;
  }
  var _supportsPassive;
  var supportsPassive = function supportsPassive2() {
    if (typeof _supportsPassive !== "boolean") {
      _supportsPassive = false;
      try {
        var opts = Object.defineProperty({}, "passive", {
          get: function get7() {
            _supportsPassive = true;
          }
        });
        import_window2.default.addEventListener("test", null, opts);
        import_window2.default.removeEventListener("test", null, opts);
      } catch (e) {
      }
    }
    return _supportsPassive;
  };
  var passiveEvents = ["touchstart", "touchmove"];
  function on(elem, type3, fn) {
    if (Array.isArray(type3)) {
      return _handleMultipleEvents(on, elem, type3, fn);
    }
    if (!DomData.has(elem)) {
      DomData.set(elem, {});
    }
    var data = DomData.get(elem);
    if (!data.handlers) {
      data.handlers = {};
    }
    if (!data.handlers[type3]) {
      data.handlers[type3] = [];
    }
    if (!fn.guid) {
      fn.guid = newGUID();
    }
    data.handlers[type3].push(fn);
    if (!data.dispatcher) {
      data.disabled = false;
      data.dispatcher = function(event, hash) {
        if (data.disabled) {
          return;
        }
        event = fixEvent(event);
        var handlers = data.handlers[event.type];
        if (handlers) {
          var handlersCopy = handlers.slice(0);
          for (var m = 0, n = handlersCopy.length; m < n; m++) {
            if (event.isImmediatePropagationStopped()) {
              break;
            } else {
              try {
                handlersCopy[m].call(elem, event, hash);
              } catch (e) {
                log.error(e);
              }
            }
          }
        }
      };
    }
    if (data.handlers[type3].length === 1) {
      if (elem.addEventListener) {
        var options = false;
        if (supportsPassive() && passiveEvents.indexOf(type3) > -1) {
          options = {
            passive: true
          };
        }
        elem.addEventListener(type3, data.dispatcher, options);
      } else if (elem.attachEvent) {
        elem.attachEvent("on" + type3, data.dispatcher);
      }
    }
  }
  function off(elem, type3, fn) {
    if (!DomData.has(elem)) {
      return;
    }
    var data = DomData.get(elem);
    if (!data.handlers) {
      return;
    }
    if (Array.isArray(type3)) {
      return _handleMultipleEvents(off, elem, type3, fn);
    }
    var removeType = function removeType2(el, t3) {
      data.handlers[t3] = [];
      _cleanUpEvents(el, t3);
    };
    if (type3 === void 0) {
      for (var t2 in data.handlers) {
        if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t2)) {
          removeType(elem, t2);
        }
      }
      return;
    }
    var handlers = data.handlers[type3];
    if (!handlers) {
      return;
    }
    if (!fn) {
      removeType(elem, type3);
      return;
    }
    if (fn.guid) {
      for (var n = 0; n < handlers.length; n++) {
        if (handlers[n].guid === fn.guid) {
          handlers.splice(n--, 1);
        }
      }
    }
    _cleanUpEvents(elem, type3);
  }
  function trigger(elem, event, hash) {
    var elemData = DomData.has(elem) ? DomData.get(elem) : {};
    var parent = elem.parentNode || elem.ownerDocument;
    if (typeof event === "string") {
      event = {
        type: event,
        target: elem
      };
    } else if (!event.target) {
      event.target = elem;
    }
    event = fixEvent(event);
    if (elemData.dispatcher) {
      elemData.dispatcher.call(elem, event, hash);
    }
    if (parent && !event.isPropagationStopped() && event.bubbles === true) {
      trigger.call(null, parent, event, hash);
    } else if (!parent && !event.defaultPrevented && event.target && event.target[event.type]) {
      if (!DomData.has(event.target)) {
        DomData.set(event.target, {});
      }
      var targetData = DomData.get(event.target);
      if (event.target[event.type]) {
        targetData.disabled = true;
        if (typeof event.target[event.type] === "function") {
          event.target[event.type]();
        }
        targetData.disabled = false;
      }
    }
    return !event.defaultPrevented;
  }
  function one(elem, type3, fn) {
    if (Array.isArray(type3)) {
      return _handleMultipleEvents(one, elem, type3, fn);
    }
    var func = function func2() {
      off(elem, type3, func2);
      fn.apply(this, arguments);
    };
    func.guid = fn.guid = fn.guid || newGUID();
    on(elem, type3, func);
  }
  function any(elem, type3, fn) {
    var func = function func2() {
      off(elem, type3, func2);
      fn.apply(this, arguments);
    };
    func.guid = fn.guid = fn.guid || newGUID();
    on(elem, type3, func);
  }
  var Events = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    fixEvent,
    on,
    off,
    trigger,
    one,
    any
  });
  var UPDATE_REFRESH_INTERVAL = 30;
  var bind = function bind2(context, fn, uid) {
    if (!fn.guid) {
      fn.guid = newGUID();
    }
    var bound = fn.bind(context);
    bound.guid = uid ? uid + "_" + fn.guid : fn.guid;
    return bound;
  };
  var throttle = function throttle2(fn, wait) {
    var last = import_window2.default.performance.now();
    var throttled = function throttled2() {
      var now = import_window2.default.performance.now();
      if (now - last >= wait) {
        fn.apply(void 0, arguments);
        last = now;
      }
    };
    return throttled;
  };
  var debounce = function debounce2(func, wait, immediate, context) {
    if (context === void 0) {
      context = import_window2.default;
    }
    var timeout;
    var cancel = function cancel2() {
      context.clearTimeout(timeout);
      timeout = null;
    };
    var debounced = function debounced2() {
      var self2 = this;
      var args = arguments;
      var _later = function later() {
        timeout = null;
        _later = null;
        if (!immediate) {
          func.apply(self2, args);
        }
      };
      if (!timeout && immediate) {
        func.apply(self2, args);
      }
      context.clearTimeout(timeout);
      timeout = context.setTimeout(_later, wait);
    };
    debounced.cancel = cancel;
    return debounced;
  };
  var EventTarget = function EventTarget2() {
  };
  EventTarget.prototype.allowedEvents_ = {};
  EventTarget.prototype.on = function(type3, fn) {
    var ael = this.addEventListener;
    this.addEventListener = function() {
    };
    on(this, type3, fn);
    this.addEventListener = ael;
  };
  EventTarget.prototype.addEventListener = EventTarget.prototype.on;
  EventTarget.prototype.off = function(type3, fn) {
    off(this, type3, fn);
  };
  EventTarget.prototype.removeEventListener = EventTarget.prototype.off;
  EventTarget.prototype.one = function(type3, fn) {
    var ael = this.addEventListener;
    this.addEventListener = function() {
    };
    one(this, type3, fn);
    this.addEventListener = ael;
  };
  EventTarget.prototype.any = function(type3, fn) {
    var ael = this.addEventListener;
    this.addEventListener = function() {
    };
    any(this, type3, fn);
    this.addEventListener = ael;
  };
  EventTarget.prototype.trigger = function(event) {
    var type3 = event.type || event;
    if (typeof event === "string") {
      event = {
        type: type3
      };
    }
    event = fixEvent(event);
    if (this.allowedEvents_[type3] && this["on" + type3]) {
      this["on" + type3](event);
    }
    trigger(this, event);
  };
  EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;
  var EVENT_MAP;
  EventTarget.prototype.queueTrigger = function(event) {
    var _this = this;
    if (!EVENT_MAP) {
      EVENT_MAP = new Map();
    }
    var type3 = event.type || event;
    var map = EVENT_MAP.get(this);
    if (!map) {
      map = new Map();
      EVENT_MAP.set(this, map);
    }
    var oldTimeout = map.get(type3);
    map["delete"](type3);
    import_window2.default.clearTimeout(oldTimeout);
    var timeout = import_window2.default.setTimeout(function() {
      if (map.size === 0) {
        map = null;
        EVENT_MAP["delete"](_this);
      }
      _this.trigger(event);
    }, 0);
    map.set(type3, timeout);
  };
  var objName = function objName2(obj) {
    if (typeof obj.name === "function") {
      return obj.name();
    }
    if (typeof obj.name === "string") {
      return obj.name;
    }
    if (obj.name_) {
      return obj.name_;
    }
    if (obj.constructor && obj.constructor.name) {
      return obj.constructor.name;
    }
    return typeof obj;
  };
  var isEvented = function isEvented2(object) {
    return object instanceof EventTarget || !!object.eventBusEl_ && ["on", "one", "off", "trigger"].every(function(k) {
      return typeof object[k] === "function";
    });
  };
  var addEventedCallback = function addEventedCallback2(target, callback2) {
    if (isEvented(target)) {
      callback2();
    } else {
      if (!target.eventedCallbacks) {
        target.eventedCallbacks = [];
      }
      target.eventedCallbacks.push(callback2);
    }
  };
  var isValidEventType = function isValidEventType2(type3) {
    return typeof type3 === "string" && /\S/.test(type3) || Array.isArray(type3) && !!type3.length;
  };
  var validateTarget = function validateTarget2(target, obj, fnName) {
    if (!target || !target.nodeName && !isEvented(target)) {
      throw new Error("Invalid target for " + objName(obj) + "#" + fnName + "; must be a DOM node or evented object.");
    }
  };
  var validateEventType = function validateEventType2(type3, obj, fnName) {
    if (!isValidEventType(type3)) {
      throw new Error("Invalid event type for " + objName(obj) + "#" + fnName + "; must be a non-empty string or array.");
    }
  };
  var validateListener = function validateListener2(listener, obj, fnName) {
    if (typeof listener !== "function") {
      throw new Error("Invalid listener for " + objName(obj) + "#" + fnName + "; must be a function.");
    }
  };
  var normalizeListenArgs = function normalizeListenArgs2(self2, args, fnName) {
    var isTargetingSelf = args.length < 3 || args[0] === self2 || args[0] === self2.eventBusEl_;
    var target;
    var type3;
    var listener;
    if (isTargetingSelf) {
      target = self2.eventBusEl_;
      if (args.length >= 3) {
        args.shift();
      }
      type3 = args[0];
      listener = args[1];
    } else {
      target = args[0];
      type3 = args[1];
      listener = args[2];
    }
    validateTarget(target, self2, fnName);
    validateEventType(type3, self2, fnName);
    validateListener(listener, self2, fnName);
    listener = bind(self2, listener);
    return {
      isTargetingSelf,
      target,
      type: type3,
      listener
    };
  };
  var listen = function listen2(target, method, type3, listener) {
    validateTarget(target, target, method);
    if (target.nodeName) {
      Events[method](target, type3, listener);
    } else {
      target[method](type3, listener);
    }
  };
  var EventedMixin = {
    on: function on2() {
      var _this = this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var _normalizeListenArgs = normalizeListenArgs(this, args, "on"), isTargetingSelf = _normalizeListenArgs.isTargetingSelf, target = _normalizeListenArgs.target, type3 = _normalizeListenArgs.type, listener = _normalizeListenArgs.listener;
      listen(target, "on", type3, listener);
      if (!isTargetingSelf) {
        var removeListenerOnDispose = function removeListenerOnDispose2() {
          return _this.off(target, type3, listener);
        };
        removeListenerOnDispose.guid = listener.guid;
        var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose2() {
          return _this.off("dispose", removeListenerOnDispose);
        };
        removeRemoverOnTargetDispose.guid = listener.guid;
        listen(this, "on", "dispose", removeListenerOnDispose);
        listen(target, "on", "dispose", removeRemoverOnTargetDispose);
      }
    },
    one: function one2() {
      var _this2 = this;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var _normalizeListenArgs2 = normalizeListenArgs(this, args, "one"), isTargetingSelf = _normalizeListenArgs2.isTargetingSelf, target = _normalizeListenArgs2.target, type3 = _normalizeListenArgs2.type, listener = _normalizeListenArgs2.listener;
      if (isTargetingSelf) {
        listen(target, "one", type3, listener);
      } else {
        var wrapper = function wrapper2() {
          _this2.off(target, type3, wrapper2);
          for (var _len3 = arguments.length, largs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            largs[_key3] = arguments[_key3];
          }
          listener.apply(null, largs);
        };
        wrapper.guid = listener.guid;
        listen(target, "one", type3, wrapper);
      }
    },
    any: function any2() {
      var _this3 = this;
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      var _normalizeListenArgs3 = normalizeListenArgs(this, args, "any"), isTargetingSelf = _normalizeListenArgs3.isTargetingSelf, target = _normalizeListenArgs3.target, type3 = _normalizeListenArgs3.type, listener = _normalizeListenArgs3.listener;
      if (isTargetingSelf) {
        listen(target, "any", type3, listener);
      } else {
        var wrapper = function wrapper2() {
          _this3.off(target, type3, wrapper2);
          for (var _len5 = arguments.length, largs = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            largs[_key5] = arguments[_key5];
          }
          listener.apply(null, largs);
        };
        wrapper.guid = listener.guid;
        listen(target, "any", type3, wrapper);
      }
    },
    off: function off$1(targetOrType, typeOrListener, listener) {
      if (!targetOrType || isValidEventType(targetOrType)) {
        off(this.eventBusEl_, targetOrType, typeOrListener);
      } else {
        var target = targetOrType;
        var type3 = typeOrListener;
        validateTarget(target, this, "off");
        validateEventType(type3, this, "off");
        validateListener(listener, this, "off");
        listener = bind(this, listener);
        this.off("dispose", listener);
        if (target.nodeName) {
          off(target, type3, listener);
          off(target, "dispose", listener);
        } else if (isEvented(target)) {
          target.off(type3, listener);
          target.off("dispose", listener);
        }
      }
    },
    trigger: function trigger$1(event, hash) {
      validateTarget(this.eventBusEl_, this, "trigger");
      var type3 = event && typeof event !== "string" ? event.type : event;
      if (!isValidEventType(type3)) {
        var error = "Invalid event type for " + objName(this) + "#trigger; must be a non-empty string or object with a type key that has a non-empty value.";
        if (event) {
          (this.log || log).error(error);
        } else {
          throw new Error(error);
        }
      }
      return trigger(this.eventBusEl_, event, hash);
    }
  };
  function evented(target, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, eventBusKey = _options.eventBusKey;
    if (eventBusKey) {
      if (!target[eventBusKey].nodeName) {
        throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
      }
      target.eventBusEl_ = target[eventBusKey];
    } else {
      target.eventBusEl_ = createEl("span", {
        className: "vjs-event-bus"
      });
    }
    assign(target, EventedMixin);
    if (target.eventedCallbacks) {
      target.eventedCallbacks.forEach(function(callback2) {
        callback2();
      });
    }
    target.on("dispose", function() {
      target.off();
      import_window2.default.setTimeout(function() {
        target.eventBusEl_ = null;
      }, 0);
    });
    return target;
  }
  var StatefulMixin = {
    state: {},
    setState: function setState(stateUpdates) {
      var _this = this;
      if (typeof stateUpdates === "function") {
        stateUpdates = stateUpdates();
      }
      var changes;
      each(stateUpdates, function(value, key) {
        if (_this.state[key] !== value) {
          changes = changes || {};
          changes[key] = {
            from: _this.state[key],
            to: value
          };
        }
        _this.state[key] = value;
      });
      if (changes && isEvented(this)) {
        this.trigger({
          changes,
          type: "statechanged"
        });
      }
      return changes;
    }
  };
  function stateful(target, defaultState) {
    assign(target, StatefulMixin);
    target.state = assign({}, target.state, defaultState);
    if (typeof target.handleStateChanged === "function" && isEvented(target)) {
      target.on("statechanged", target.handleStateChanged);
    }
    return target;
  }
  var toLowerCase = function toLowerCase2(string) {
    if (typeof string !== "string") {
      return string;
    }
    return string.replace(/./, function(w) {
      return w.toLowerCase();
    });
  };
  var toTitleCase = function toTitleCase2(string) {
    if (typeof string !== "string") {
      return string;
    }
    return string.replace(/./, function(w) {
      return w.toUpperCase();
    });
  };
  var titleCaseEquals = function titleCaseEquals2(str1, str2) {
    return toTitleCase(str1) === toTitleCase(str2);
  };
  function mergeOptions() {
    var result = {};
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    sources.forEach(function(source) {
      if (!source) {
        return;
      }
      each(source, function(value, key) {
        if (!isPlain(value)) {
          result[key] = value;
          return;
        }
        if (!isPlain(result[key])) {
          result[key] = {};
        }
        result[key] = mergeOptions(result[key], value);
      });
    });
    return result;
  }
  var MapSham = /* @__PURE__ */ function() {
    function MapSham2() {
      this.map_ = {};
    }
    var _proto = MapSham2.prototype;
    _proto.has = function has(key) {
      return key in this.map_;
    };
    _proto["delete"] = function _delete(key) {
      var has = this.has(key);
      delete this.map_[key];
      return has;
    };
    _proto.set = function set4(key, value) {
      this.map_[key] = value;
      return this;
    };
    _proto.forEach = function forEach(callback2, thisArg) {
      for (var key in this.map_) {
        callback2.call(thisArg, this.map_[key], key, this);
      }
    };
    return MapSham2;
  }();
  var Map$1 = import_window2.default.Map ? import_window2.default.Map : MapSham;
  var SetSham = /* @__PURE__ */ function() {
    function SetSham2() {
      this.set_ = {};
    }
    var _proto = SetSham2.prototype;
    _proto.has = function has(key) {
      return key in this.set_;
    };
    _proto["delete"] = function _delete(key) {
      var has = this.has(key);
      delete this.set_[key];
      return has;
    };
    _proto.add = function add(key) {
      this.set_[key] = 1;
      return this;
    };
    _proto.forEach = function forEach(callback2, thisArg) {
      for (var key in this.set_) {
        callback2.call(thisArg, key, key, this);
      }
    };
    return SetSham2;
  }();
  var Set2 = import_window2.default.Set ? import_window2.default.Set : SetSham;
  var Component = /* @__PURE__ */ function() {
    function Component2(player, options, ready) {
      if (!player && this.play) {
        this.player_ = player = this;
      } else {
        this.player_ = player;
      }
      this.isDisposed_ = false;
      this.parentComponent_ = null;
      this.options_ = mergeOptions({}, this.options_);
      options = this.options_ = mergeOptions(this.options_, options);
      this.id_ = options.id || options.el && options.el.id;
      if (!this.id_) {
        var id = player && player.id && player.id() || "no_player";
        this.id_ = id + "_component_" + newGUID();
      }
      this.name_ = options.name || null;
      if (options.el) {
        this.el_ = options.el;
      } else if (options.createEl !== false) {
        this.el_ = this.createEl();
      }
      if (options.evented !== false) {
        evented(this, {
          eventBusKey: this.el_ ? "el_" : null
        });
        this.handleLanguagechange = this.handleLanguagechange.bind(this);
        this.on(this.player_, "languagechange", this.handleLanguagechange);
      }
      stateful(this, this.constructor.defaultState);
      this.children_ = [];
      this.childIndex_ = {};
      this.childNameIndex_ = {};
      this.setTimeoutIds_ = new Set2();
      this.setIntervalIds_ = new Set2();
      this.rafIds_ = new Set2();
      this.namedRafs_ = new Map$1();
      this.clearingTimersOnDispose_ = false;
      if (options.initChildren !== false) {
        this.initChildren();
      }
      this.ready(ready);
      if (options.reportTouchActivity !== false) {
        this.enableTouchActivity();
      }
    }
    var _proto = Component2.prototype;
    _proto.dispose = function dispose3() {
      if (this.isDisposed_) {
        return;
      }
      if (this.readyQueue_) {
        this.readyQueue_.length = 0;
      }
      this.trigger({
        type: "dispose",
        bubbles: false
      });
      this.isDisposed_ = true;
      if (this.children_) {
        for (var i = this.children_.length - 1; i >= 0; i--) {
          if (this.children_[i].dispose) {
            this.children_[i].dispose();
          }
        }
      }
      this.children_ = null;
      this.childIndex_ = null;
      this.childNameIndex_ = null;
      this.parentComponent_ = null;
      if (this.el_) {
        if (this.el_.parentNode) {
          this.el_.parentNode.removeChild(this.el_);
        }
        if (DomData.has(this.el_)) {
          DomData["delete"](this.el_);
        }
        this.el_ = null;
      }
      this.player_ = null;
    };
    _proto.isDisposed = function isDisposed() {
      return Boolean(this.isDisposed_);
    };
    _proto.player = function player() {
      return this.player_;
    };
    _proto.options = function options(obj) {
      if (!obj) {
        return this.options_;
      }
      this.options_ = mergeOptions(this.options_, obj);
      return this.options_;
    };
    _proto.el = function el() {
      return this.el_;
    };
    _proto.createEl = function createEl$1(tagName, properties, attributes) {
      return createEl(tagName, properties, attributes);
    };
    _proto.localize = function localize(string, tokens, defaultValue) {
      if (defaultValue === void 0) {
        defaultValue = string;
      }
      var code = this.player_.language && this.player_.language();
      var languages = this.player_.languages && this.player_.languages();
      var language = languages && languages[code];
      var primaryCode = code && code.split("-")[0];
      var primaryLang = languages && languages[primaryCode];
      var localizedString = defaultValue;
      if (language && language[string]) {
        localizedString = language[string];
      } else if (primaryLang && primaryLang[string]) {
        localizedString = primaryLang[string];
      }
      if (tokens) {
        localizedString = localizedString.replace(/\{(\d+)\}/g, function(match, index) {
          var value = tokens[index - 1];
          var ret = value;
          if (typeof value === "undefined") {
            ret = match;
          }
          return ret;
        });
      }
      return localizedString;
    };
    _proto.handleLanguagechange = function handleLanguagechange() {
    };
    _proto.contentEl = function contentEl() {
      return this.contentEl_ || this.el_;
    };
    _proto.id = function id() {
      return this.id_;
    };
    _proto.name = function name() {
      return this.name_;
    };
    _proto.children = function children() {
      return this.children_;
    };
    _proto.getChildById = function getChildById(id) {
      return this.childIndex_[id];
    };
    _proto.getChild = function getChild(name) {
      if (!name) {
        return;
      }
      return this.childNameIndex_[name];
    };
    _proto.getDescendant = function getDescendant() {
      for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
        names[_key] = arguments[_key];
      }
      names = names.reduce(function(acc, n) {
        return acc.concat(n);
      }, []);
      var currentChild = this;
      for (var i = 0; i < names.length; i++) {
        currentChild = currentChild.getChild(names[i]);
        if (!currentChild || !currentChild.getChild) {
          return;
        }
      }
      return currentChild;
    };
    _proto.addChild = function addChild(child, options, index) {
      if (options === void 0) {
        options = {};
      }
      if (index === void 0) {
        index = this.children_.length;
      }
      var component;
      var componentName;
      if (typeof child === "string") {
        componentName = toTitleCase(child);
        var componentClassName = options.componentClass || componentName;
        options.name = componentName;
        var ComponentClass = Component2.getComponent(componentClassName);
        if (!ComponentClass) {
          throw new Error("Component " + componentClassName + " does not exist");
        }
        if (typeof ComponentClass !== "function") {
          return null;
        }
        component = new ComponentClass(this.player_ || this, options);
      } else {
        component = child;
      }
      if (component.parentComponent_) {
        component.parentComponent_.removeChild(component);
      }
      this.children_.splice(index, 0, component);
      component.parentComponent_ = this;
      if (typeof component.id === "function") {
        this.childIndex_[component.id()] = component;
      }
      componentName = componentName || component.name && toTitleCase(component.name());
      if (componentName) {
        this.childNameIndex_[componentName] = component;
        this.childNameIndex_[toLowerCase(componentName)] = component;
      }
      if (typeof component.el === "function" && component.el()) {
        var refNode = null;
        if (this.children_[index + 1]) {
          if (this.children_[index + 1].el_) {
            refNode = this.children_[index + 1].el_;
          } else if (isEl(this.children_[index + 1])) {
            refNode = this.children_[index + 1];
          }
        }
        this.contentEl().insertBefore(component.el(), refNode);
      }
      return component;
    };
    _proto.removeChild = function removeChild(component) {
      if (typeof component === "string") {
        component = this.getChild(component);
      }
      if (!component || !this.children_) {
        return;
      }
      var childFound = false;
      for (var i = this.children_.length - 1; i >= 0; i--) {
        if (this.children_[i] === component) {
          childFound = true;
          this.children_.splice(i, 1);
          break;
        }
      }
      if (!childFound) {
        return;
      }
      component.parentComponent_ = null;
      this.childIndex_[component.id()] = null;
      this.childNameIndex_[toTitleCase(component.name())] = null;
      this.childNameIndex_[toLowerCase(component.name())] = null;
      var compEl = component.el();
      if (compEl && compEl.parentNode === this.contentEl()) {
        this.contentEl().removeChild(component.el());
      }
    };
    _proto.initChildren = function initChildren() {
      var _this = this;
      var children = this.options_.children;
      if (children) {
        var parentOptions = this.options_;
        var handleAdd = function handleAdd2(child) {
          var name = child.name;
          var opts = child.opts;
          if (parentOptions[name] !== void 0) {
            opts = parentOptions[name];
          }
          if (opts === false) {
            return;
          }
          if (opts === true) {
            opts = {};
          }
          opts.playerOptions = _this.options_.playerOptions;
          var newChild = _this.addChild(name, opts);
          if (newChild) {
            _this[name] = newChild;
          }
        };
        var workingChildren;
        var Tech2 = Component2.getComponent("Tech");
        if (Array.isArray(children)) {
          workingChildren = children;
        } else {
          workingChildren = Object.keys(children);
        }
        workingChildren.concat(Object.keys(this.options_).filter(function(child) {
          return !workingChildren.some(function(wchild) {
            if (typeof wchild === "string") {
              return child === wchild;
            }
            return child === wchild.name;
          });
        })).map(function(child) {
          var name;
          var opts;
          if (typeof child === "string") {
            name = child;
            opts = children[name] || _this.options_[name] || {};
          } else {
            name = child.name;
            opts = child;
          }
          return {
            name,
            opts
          };
        }).filter(function(child) {
          var c = Component2.getComponent(child.opts.componentClass || toTitleCase(child.name));
          return c && !Tech2.isTech(c);
        }).forEach(handleAdd);
      }
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return "";
    };
    _proto.ready = function ready(fn, sync) {
      if (sync === void 0) {
        sync = false;
      }
      if (!fn) {
        return;
      }
      if (!this.isReady_) {
        this.readyQueue_ = this.readyQueue_ || [];
        this.readyQueue_.push(fn);
        return;
      }
      if (sync) {
        fn.call(this);
      } else {
        this.setTimeout(fn, 1);
      }
    };
    _proto.triggerReady = function triggerReady() {
      this.isReady_ = true;
      this.setTimeout(function() {
        var readyQueue = this.readyQueue_;
        this.readyQueue_ = [];
        if (readyQueue && readyQueue.length > 0) {
          readyQueue.forEach(function(fn) {
            fn.call(this);
          }, this);
        }
        this.trigger("ready");
      }, 1);
    };
    _proto.$ = function $$1(selector, context) {
      return $(selector, context || this.contentEl());
    };
    _proto.$$ = function $$$1(selector, context) {
      return $$(selector, context || this.contentEl());
    };
    _proto.hasClass = function hasClass$1(classToCheck) {
      return hasClass(this.el_, classToCheck);
    };
    _proto.addClass = function addClass$1(classToAdd) {
      addClass(this.el_, classToAdd);
    };
    _proto.removeClass = function removeClass$1(classToRemove) {
      removeClass(this.el_, classToRemove);
    };
    _proto.toggleClass = function toggleClass$1(classToToggle, predicate) {
      toggleClass(this.el_, classToToggle, predicate);
    };
    _proto.show = function show() {
      this.removeClass("vjs-hidden");
    };
    _proto.hide = function hide() {
      this.addClass("vjs-hidden");
    };
    _proto.lockShowing = function lockShowing() {
      this.addClass("vjs-lock-showing");
    };
    _proto.unlockShowing = function unlockShowing() {
      this.removeClass("vjs-lock-showing");
    };
    _proto.getAttribute = function getAttribute$1(attribute) {
      return getAttribute(this.el_, attribute);
    };
    _proto.setAttribute = function setAttribute$1(attribute, value) {
      setAttribute(this.el_, attribute, value);
    };
    _proto.removeAttribute = function removeAttribute$1(attribute) {
      removeAttribute(this.el_, attribute);
    };
    _proto.width = function width2(num, skipListeners) {
      return this.dimension("width", num, skipListeners);
    };
    _proto.height = function height2(num, skipListeners) {
      return this.dimension("height", num, skipListeners);
    };
    _proto.dimensions = function dimensions(width2, height2) {
      this.width(width2, true);
      this.height(height2);
    };
    _proto.dimension = function dimension(widthOrHeight, num, skipListeners) {
      if (num !== void 0) {
        if (num === null || num !== num) {
          num = 0;
        }
        if (("" + num).indexOf("%") !== -1 || ("" + num).indexOf("px") !== -1) {
          this.el_.style[widthOrHeight] = num;
        } else if (num === "auto") {
          this.el_.style[widthOrHeight] = "";
        } else {
          this.el_.style[widthOrHeight] = num + "px";
        }
        if (!skipListeners) {
          this.trigger("componentresize");
        }
        return;
      }
      if (!this.el_) {
        return 0;
      }
      var val = this.el_.style[widthOrHeight];
      var pxIndex = val.indexOf("px");
      if (pxIndex !== -1) {
        return parseInt(val.slice(0, pxIndex), 10);
      }
      return parseInt(this.el_["offset" + toTitleCase(widthOrHeight)], 10);
    };
    _proto.currentDimension = function currentDimension(widthOrHeight) {
      var computedWidthOrHeight = 0;
      if (widthOrHeight !== "width" && widthOrHeight !== "height") {
        throw new Error("currentDimension only accepts width or height value");
      }
      computedWidthOrHeight = computedStyle(this.el_, widthOrHeight);
      computedWidthOrHeight = parseFloat(computedWidthOrHeight);
      if (computedWidthOrHeight === 0 || isNaN(computedWidthOrHeight)) {
        var rule = "offset" + toTitleCase(widthOrHeight);
        computedWidthOrHeight = this.el_[rule];
      }
      return computedWidthOrHeight;
    };
    _proto.currentDimensions = function currentDimensions() {
      return {
        width: this.currentDimension("width"),
        height: this.currentDimension("height")
      };
    };
    _proto.currentWidth = function currentWidth() {
      return this.currentDimension("width");
    };
    _proto.currentHeight = function currentHeight() {
      return this.currentDimension("height");
    };
    _proto.focus = function focus() {
      this.el_.focus();
    };
    _proto.blur = function blur() {
      this.el_.blur();
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (this.player_) {
        event.stopPropagation();
        this.player_.handleKeyDown(event);
      }
    };
    _proto.handleKeyPress = function handleKeyPress(event) {
      this.handleKeyDown(event);
    };
    _proto.emitTapEvents = function emitTapEvents() {
      var touchStart = 0;
      var firstTouch = null;
      var tapMovementThreshold = 10;
      var touchTimeThreshold = 200;
      var couldBeTap;
      this.on("touchstart", function(event) {
        if (event.touches.length === 1) {
          firstTouch = {
            pageX: event.touches[0].pageX,
            pageY: event.touches[0].pageY
          };
          touchStart = import_window2.default.performance.now();
          couldBeTap = true;
        }
      });
      this.on("touchmove", function(event) {
        if (event.touches.length > 1) {
          couldBeTap = false;
        } else if (firstTouch) {
          var xdiff = event.touches[0].pageX - firstTouch.pageX;
          var ydiff = event.touches[0].pageY - firstTouch.pageY;
          var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
          if (touchDistance > tapMovementThreshold) {
            couldBeTap = false;
          }
        }
      });
      var noTap = function noTap2() {
        couldBeTap = false;
      };
      this.on("touchleave", noTap);
      this.on("touchcancel", noTap);
      this.on("touchend", function(event) {
        firstTouch = null;
        if (couldBeTap === true) {
          var touchTime = import_window2.default.performance.now() - touchStart;
          if (touchTime < touchTimeThreshold) {
            event.preventDefault();
            this.trigger("tap");
          }
        }
      });
    };
    _proto.enableTouchActivity = function enableTouchActivity() {
      if (!this.player() || !this.player().reportUserActivity) {
        return;
      }
      var report = bind(this.player(), this.player().reportUserActivity);
      var touchHolding;
      this.on("touchstart", function() {
        report();
        this.clearInterval(touchHolding);
        touchHolding = this.setInterval(report, 250);
      });
      var touchEnd = function touchEnd2(event) {
        report();
        this.clearInterval(touchHolding);
      };
      this.on("touchmove", report);
      this.on("touchend", touchEnd);
      this.on("touchcancel", touchEnd);
    };
    _proto.setTimeout = function setTimeout2(fn, timeout) {
      var _this2 = this;
      var timeoutId;
      fn = bind(this, fn);
      this.clearTimersOnDispose_();
      timeoutId = import_window2.default.setTimeout(function() {
        if (_this2.setTimeoutIds_.has(timeoutId)) {
          _this2.setTimeoutIds_["delete"](timeoutId);
        }
        fn();
      }, timeout);
      this.setTimeoutIds_.add(timeoutId);
      return timeoutId;
    };
    _proto.clearTimeout = function clearTimeout2(timeoutId) {
      if (this.setTimeoutIds_.has(timeoutId)) {
        this.setTimeoutIds_["delete"](timeoutId);
        import_window2.default.clearTimeout(timeoutId);
      }
      return timeoutId;
    };
    _proto.setInterval = function setInterval(fn, interval) {
      fn = bind(this, fn);
      this.clearTimersOnDispose_();
      var intervalId = import_window2.default.setInterval(fn, interval);
      this.setIntervalIds_.add(intervalId);
      return intervalId;
    };
    _proto.clearInterval = function clearInterval(intervalId) {
      if (this.setIntervalIds_.has(intervalId)) {
        this.setIntervalIds_["delete"](intervalId);
        import_window2.default.clearInterval(intervalId);
      }
      return intervalId;
    };
    _proto.requestAnimationFrame = function requestAnimationFrame(fn) {
      var _this3 = this;
      if (!this.supportsRaf_) {
        return this.setTimeout(fn, 1e3 / 60);
      }
      this.clearTimersOnDispose_();
      var id;
      fn = bind(this, fn);
      id = import_window2.default.requestAnimationFrame(function() {
        if (_this3.rafIds_.has(id)) {
          _this3.rafIds_["delete"](id);
        }
        fn();
      });
      this.rafIds_.add(id);
      return id;
    };
    _proto.requestNamedAnimationFrame = function requestNamedAnimationFrame(name, fn) {
      var _this4 = this;
      if (this.namedRafs_.has(name)) {
        return;
      }
      this.clearTimersOnDispose_();
      fn = bind(this, fn);
      var id = this.requestAnimationFrame(function() {
        fn();
        if (_this4.namedRafs_.has(name)) {
          _this4.namedRafs_["delete"](name);
        }
      });
      this.namedRafs_.set(name, id);
      return name;
    };
    _proto.cancelNamedAnimationFrame = function cancelNamedAnimationFrame(name) {
      if (!this.namedRafs_.has(name)) {
        return;
      }
      this.cancelAnimationFrame(this.namedRafs_.get(name));
      this.namedRafs_["delete"](name);
    };
    _proto.cancelAnimationFrame = function cancelAnimationFrame(id) {
      if (!this.supportsRaf_) {
        return this.clearTimeout(id);
      }
      if (this.rafIds_.has(id)) {
        this.rafIds_["delete"](id);
        import_window2.default.cancelAnimationFrame(id);
      }
      return id;
    };
    _proto.clearTimersOnDispose_ = function clearTimersOnDispose_() {
      var _this5 = this;
      if (this.clearingTimersOnDispose_) {
        return;
      }
      this.clearingTimersOnDispose_ = true;
      this.one("dispose", function() {
        [["namedRafs_", "cancelNamedAnimationFrame"], ["rafIds_", "cancelAnimationFrame"], ["setTimeoutIds_", "clearTimeout"], ["setIntervalIds_", "clearInterval"]].forEach(function(_ref) {
          var idName = _ref[0], cancelName = _ref[1];
          _this5[idName].forEach(function(val, key) {
            return _this5[cancelName](key);
          });
        });
        _this5.clearingTimersOnDispose_ = false;
      });
    };
    Component2.registerComponent = function registerComponent(name, ComponentToRegister) {
      if (typeof name !== "string" || !name) {
        throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
      }
      var Tech2 = Component2.getComponent("Tech");
      var isTech = Tech2 && Tech2.isTech(ComponentToRegister);
      var isComp = Component2 === ComponentToRegister || Component2.prototype.isPrototypeOf(ComponentToRegister.prototype);
      if (isTech || !isComp) {
        var reason;
        if (isTech) {
          reason = "techs must be registered using Tech.registerTech()";
        } else {
          reason = "must be a Component subclass";
        }
        throw new Error('Illegal component, "' + name + '"; ' + reason + ".");
      }
      name = toTitleCase(name);
      if (!Component2.components_) {
        Component2.components_ = {};
      }
      var Player4 = Component2.getComponent("Player");
      if (name === "Player" && Player4 && Player4.players) {
        var players = Player4.players;
        var playerNames = Object.keys(players);
        if (players && playerNames.length > 0 && playerNames.map(function(pname) {
          return players[pname];
        }).every(Boolean)) {
          throw new Error("Can not register Player component after player has been created.");
        }
      }
      Component2.components_[name] = ComponentToRegister;
      Component2.components_[toLowerCase(name)] = ComponentToRegister;
      return ComponentToRegister;
    };
    Component2.getComponent = function getComponent(name) {
      if (!name || !Component2.components_) {
        return;
      }
      return Component2.components_[name];
    };
    return Component2;
  }();
  Component.prototype.supportsRaf_ = typeof import_window2.default.requestAnimationFrame === "function" && typeof import_window2.default.cancelAnimationFrame === "function";
  Component.registerComponent("Component", Component);
  var USER_AGENT = import_window2.default.navigator && import_window2.default.navigator.userAgent || "";
  var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
  var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;
  var IS_IPOD = /iPod/i.test(USER_AGENT);
  var IOS_VERSION = function() {
    var match = USER_AGENT.match(/OS (\d+)_/i);
    if (match && match[1]) {
      return match[1];
    }
    return null;
  }();
  var IS_ANDROID = /Android/i.test(USER_AGENT);
  var ANDROID_VERSION = function() {
    var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
    if (!match) {
      return null;
    }
    var major = match[1] && parseFloat(match[1]);
    var minor = match[2] && parseFloat(match[2]);
    if (major && minor) {
      return parseFloat(match[1] + "." + match[2]);
    } else if (major) {
      return major;
    }
    return null;
  }();
  var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;
  var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
  var IS_EDGE = /Edg/i.test(USER_AGENT);
  var IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));
  var CHROME_VERSION = function() {
    var match = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);
    if (match && match[2]) {
      return parseFloat(match[2]);
    }
    return null;
  }();
  var IE_VERSION = function() {
    var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
    var version2 = result && parseFloat(result[1]);
    if (!version2 && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
      version2 = 11;
    }
    return version2;
  }();
  var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
  var IS_WINDOWS = /Windows/i.test(USER_AGENT);
  var TOUCH_ENABLED = Boolean(isReal() && ("ontouchstart" in import_window2.default || import_window2.default.navigator.maxTouchPoints || import_window2.default.DocumentTouch && import_window2.default.document instanceof import_window2.default.DocumentTouch));
  var IS_IPAD = /iPad/i.test(USER_AGENT) || IS_SAFARI && TOUCH_ENABLED && !/iPhone/i.test(USER_AGENT);
  var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
  var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;
  var IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;
  var browser = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    IS_IPOD,
    IOS_VERSION,
    IS_ANDROID,
    ANDROID_VERSION,
    IS_NATIVE_ANDROID,
    IS_FIREFOX,
    IS_EDGE,
    IS_CHROME,
    CHROME_VERSION,
    IE_VERSION,
    IS_SAFARI,
    IS_WINDOWS,
    TOUCH_ENABLED,
    IS_IPAD,
    IS_IPHONE,
    IS_IOS,
    IS_ANY_SAFARI
  });
  function rangeCheck(fnName, index, maxIndex) {
    if (typeof index !== "number" || index < 0 || index > maxIndex) {
      throw new Error("Failed to execute '" + fnName + "' on 'TimeRanges': The index provided (" + index + ") is non-numeric or out of bounds (0-" + maxIndex + ").");
    }
  }
  function getRange(fnName, valueIndex, ranges, rangeIndex) {
    rangeCheck(fnName, rangeIndex, ranges.length - 1);
    return ranges[rangeIndex][valueIndex];
  }
  function createTimeRangesObj(ranges) {
    if (ranges === void 0 || ranges.length === 0) {
      return {
        length: 0,
        start: function start2() {
          throw new Error("This TimeRanges object is empty");
        },
        end: function end() {
          throw new Error("This TimeRanges object is empty");
        }
      };
    }
    return {
      length: ranges.length,
      start: getRange.bind(null, "start", 0, ranges),
      end: getRange.bind(null, "end", 1, ranges)
    };
  }
  function createTimeRanges(start2, end) {
    if (Array.isArray(start2)) {
      return createTimeRangesObj(start2);
    } else if (start2 === void 0 || end === void 0) {
      return createTimeRangesObj();
    }
    return createTimeRangesObj([[start2, end]]);
  }
  function bufferedPercent(buffered, duration5) {
    var bufferedDuration = 0;
    var start2;
    var end;
    if (!duration5) {
      return 0;
    }
    if (!buffered || !buffered.length) {
      buffered = createTimeRanges(0, 0);
    }
    for (var i = 0; i < buffered.length; i++) {
      start2 = buffered.start(i);
      end = buffered.end(i);
      if (end > duration5) {
        end = duration5;
      }
      bufferedDuration += end - start2;
    }
    return bufferedDuration / duration5;
  }
  var FullscreenApi = {
    prefixed: true
  };
  var apiMap = [
    ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenEnabled", "fullscreenchange", "fullscreenerror", "fullscreen"],
    ["webkitRequestFullscreen", "webkitExitFullscreen", "webkitFullscreenElement", "webkitFullscreenEnabled", "webkitfullscreenchange", "webkitfullscreenerror", "-webkit-full-screen"],
    ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozFullScreenEnabled", "mozfullscreenchange", "mozfullscreenerror", "-moz-full-screen"],
    ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "msFullscreenEnabled", "MSFullscreenChange", "MSFullscreenError", "-ms-fullscreen"]
  ];
  var specApi = apiMap[0];
  var browserApi;
  for (var i = 0; i < apiMap.length; i++) {
    if (apiMap[i][1] in import_document.default) {
      browserApi = apiMap[i];
      break;
    }
  }
  if (browserApi) {
    for (var _i = 0; _i < browserApi.length; _i++) {
      FullscreenApi[specApi[_i]] = browserApi[_i];
    }
    FullscreenApi.prefixed = browserApi[0] !== specApi[0];
  }
  function MediaError(value) {
    if (value instanceof MediaError) {
      return value;
    }
    if (typeof value === "number") {
      this.code = value;
    } else if (typeof value === "string") {
      this.message = value;
    } else if (isObject3(value)) {
      if (typeof value.code === "number") {
        this.code = value.code;
      }
      assign(this, value);
    }
    if (!this.message) {
      this.message = MediaError.defaultMessages[this.code] || "";
    }
  }
  MediaError.prototype.code = 0;
  MediaError.prototype.message = "";
  MediaError.prototype.status = null;
  MediaError.errorTypes = ["MEDIA_ERR_CUSTOM", "MEDIA_ERR_ABORTED", "MEDIA_ERR_NETWORK", "MEDIA_ERR_DECODE", "MEDIA_ERR_SRC_NOT_SUPPORTED", "MEDIA_ERR_ENCRYPTED"];
  MediaError.defaultMessages = {
    1: "You aborted the media playback",
    2: "A network error caused the media download to fail part-way.",
    3: "The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",
    4: "The media could not be loaded, either because the server or network failed or because the format is not supported.",
    5: "The media is encrypted and we do not have the keys to decrypt it."
  };
  for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
    MediaError[MediaError.errorTypes[errNum]] = errNum;
    MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
  }
  function isPromise(value) {
    return value !== void 0 && value !== null && typeof value.then === "function";
  }
  function silencePromise(value) {
    if (isPromise(value)) {
      value.then(null, function(e) {
      });
    }
  }
  var trackToJson_ = function trackToJson_2(track) {
    var ret = ["kind", "label", "language", "id", "inBandMetadataTrackDispatchType", "mode", "src"].reduce(function(acc, prop, i) {
      if (track[prop]) {
        acc[prop] = track[prop];
      }
      return acc;
    }, {
      cues: track.cues && Array.prototype.map.call(track.cues, function(cue) {
        return {
          startTime: cue.startTime,
          endTime: cue.endTime,
          text: cue.text,
          id: cue.id
        };
      })
    });
    return ret;
  };
  var textTracksToJson = function textTracksToJson2(tech) {
    var trackEls = tech.$$("track");
    var trackObjs = Array.prototype.map.call(trackEls, function(t2) {
      return t2.track;
    });
    var tracks = Array.prototype.map.call(trackEls, function(trackEl) {
      var json = trackToJson_(trackEl.track);
      if (trackEl.src) {
        json.src = trackEl.src;
      }
      return json;
    });
    return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function(track) {
      return trackObjs.indexOf(track) === -1;
    }).map(trackToJson_));
  };
  var jsonToTextTracks = function jsonToTextTracks2(json, tech) {
    json.forEach(function(track) {
      var addedTrack = tech.addRemoteTextTrack(track).track;
      if (!track.src && track.cues) {
        track.cues.forEach(function(cue) {
          return addedTrack.addCue(cue);
        });
      }
    });
    return tech.textTracks();
  };
  var textTrackConverter = {
    textTracksToJson,
    jsonToTextTracks,
    trackToJson_
  };
  var MODAL_CLASS_NAME = "vjs-modal-dialog";
  var ModalDialog = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(ModalDialog2, _Component);
    function ModalDialog2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;
      _this.closeable(!_this.options_.uncloseable);
      _this.content(_this.options_.content);
      _this.contentEl_ = createEl("div", {
        className: MODAL_CLASS_NAME + "-content"
      }, {
        role: "document"
      });
      _this.descEl_ = createEl("p", {
        className: MODAL_CLASS_NAME + "-description vjs-control-text",
        id: _this.el().getAttribute("aria-describedby")
      });
      textContent(_this.descEl_, _this.description());
      _this.el_.appendChild(_this.descEl_);
      _this.el_.appendChild(_this.contentEl_);
      return _this;
    }
    var _proto = ModalDialog2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: this.buildCSSClass(),
        tabIndex: -1
      }, {
        "aria-describedby": this.id() + "_description",
        "aria-hidden": "true",
        "aria-label": this.label(),
        role: "dialog"
      });
    };
    _proto.dispose = function dispose3() {
      this.contentEl_ = null;
      this.descEl_ = null;
      this.previouslyActiveEl_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return MODAL_CLASS_NAME + " vjs-hidden " + _Component.prototype.buildCSSClass.call(this);
    };
    _proto.label = function label() {
      return this.localize(this.options_.label || "Modal Window");
    };
    _proto.description = function description() {
      var desc = this.options_.description || this.localize("This is a modal window.");
      if (this.closeable()) {
        desc += " " + this.localize("This modal can be closed by pressing the Escape key or activating the close button.");
      }
      return desc;
    };
    _proto.open = function open() {
      if (!this.opened_) {
        var player = this.player();
        this.trigger("beforemodalopen");
        this.opened_ = true;
        if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
          this.fill();
        }
        this.wasPlaying_ = !player.paused();
        if (this.options_.pauseOnOpen && this.wasPlaying_) {
          player.pause();
        }
        this.on("keydown", this.handleKeyDown);
        this.hadControls_ = player.controls();
        player.controls(false);
        this.show();
        this.conditionalFocus_();
        this.el().setAttribute("aria-hidden", "false");
        this.trigger("modalopen");
        this.hasBeenOpened_ = true;
      }
    };
    _proto.opened = function opened(value) {
      if (typeof value === "boolean") {
        this[value ? "open" : "close"]();
      }
      return this.opened_;
    };
    _proto.close = function close() {
      if (!this.opened_) {
        return;
      }
      var player = this.player();
      this.trigger("beforemodalclose");
      this.opened_ = false;
      if (this.wasPlaying_ && this.options_.pauseOnOpen) {
        player.play();
      }
      this.off("keydown", this.handleKeyDown);
      if (this.hadControls_) {
        player.controls(true);
      }
      this.hide();
      this.el().setAttribute("aria-hidden", "true");
      this.trigger("modalclose");
      this.conditionalBlur_();
      if (this.options_.temporary) {
        this.dispose();
      }
    };
    _proto.closeable = function closeable(value) {
      if (typeof value === "boolean") {
        var closeable2 = this.closeable_ = !!value;
        var close = this.getChild("closeButton");
        if (closeable2 && !close) {
          var temp = this.contentEl_;
          this.contentEl_ = this.el_;
          close = this.addChild("closeButton", {
            controlText: "Close Modal Dialog"
          });
          this.contentEl_ = temp;
          this.on(close, "close", this.close);
        }
        if (!closeable2 && close) {
          this.off(close, "close", this.close);
          this.removeChild(close);
          close.dispose();
        }
      }
      return this.closeable_;
    };
    _proto.fill = function fill() {
      this.fillWith(this.content());
    };
    _proto.fillWith = function fillWith(content) {
      var contentEl = this.contentEl();
      var parentEl = contentEl.parentNode;
      var nextSiblingEl = contentEl.nextSibling;
      this.trigger("beforemodalfill");
      this.hasBeenFilled_ = true;
      parentEl.removeChild(contentEl);
      this.empty();
      insertContent(contentEl, content);
      this.trigger("modalfill");
      if (nextSiblingEl) {
        parentEl.insertBefore(contentEl, nextSiblingEl);
      } else {
        parentEl.appendChild(contentEl);
      }
      var closeButton = this.getChild("closeButton");
      if (closeButton) {
        parentEl.appendChild(closeButton.el_);
      }
    };
    _proto.empty = function empty() {
      this.trigger("beforemodalempty");
      emptyEl(this.contentEl());
      this.trigger("modalempty");
    };
    _proto.content = function content(value) {
      if (typeof value !== "undefined") {
        this.content_ = value;
      }
      return this.content_;
    };
    _proto.conditionalFocus_ = function conditionalFocus_() {
      var activeEl = import_document.default.activeElement;
      var playerEl = this.player_.el_;
      this.previouslyActiveEl_ = null;
      if (playerEl.contains(activeEl) || playerEl === activeEl) {
        this.previouslyActiveEl_ = activeEl;
        this.focus();
      }
    };
    _proto.conditionalBlur_ = function conditionalBlur_() {
      if (this.previouslyActiveEl_) {
        this.previouslyActiveEl_.focus();
        this.previouslyActiveEl_ = null;
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      event.stopPropagation();
      if (import_keycode.default.isEventKey(event, "Escape") && this.closeable()) {
        event.preventDefault();
        this.close();
        return;
      }
      if (!import_keycode.default.isEventKey(event, "Tab")) {
        return;
      }
      var focusableEls = this.focusableEls_();
      var activeEl = this.el_.querySelector(":focus");
      var focusIndex;
      for (var i = 0; i < focusableEls.length; i++) {
        if (activeEl === focusableEls[i]) {
          focusIndex = i;
          break;
        }
      }
      if (import_document.default.activeElement === this.el_) {
        focusIndex = 0;
      }
      if (event.shiftKey && focusIndex === 0) {
        focusableEls[focusableEls.length - 1].focus();
        event.preventDefault();
      } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
        focusableEls[0].focus();
        event.preventDefault();
      }
    };
    _proto.focusableEls_ = function focusableEls_() {
      var allChildren = this.el_.querySelectorAll("*");
      return Array.prototype.filter.call(allChildren, function(child) {
        return (child instanceof import_window2.default.HTMLAnchorElement || child instanceof import_window2.default.HTMLAreaElement) && child.hasAttribute("href") || (child instanceof import_window2.default.HTMLInputElement || child instanceof import_window2.default.HTMLSelectElement || child instanceof import_window2.default.HTMLTextAreaElement || child instanceof import_window2.default.HTMLButtonElement) && !child.hasAttribute("disabled") || child instanceof import_window2.default.HTMLIFrameElement || child instanceof import_window2.default.HTMLObjectElement || child instanceof import_window2.default.HTMLEmbedElement || child.hasAttribute("tabindex") && child.getAttribute("tabindex") !== -1 || child.hasAttribute("contenteditable");
      });
    };
    return ModalDialog2;
  }(Component);
  ModalDialog.prototype.options_ = {
    pauseOnOpen: true,
    temporary: true
  };
  Component.registerComponent("ModalDialog", ModalDialog);
  var TrackList = /* @__PURE__ */ function(_EventTarget) {
    import_inheritsLoose2.default(TrackList2, _EventTarget);
    function TrackList2(tracks) {
      var _this;
      if (tracks === void 0) {
        tracks = [];
      }
      _this = _EventTarget.call(this) || this;
      _this.tracks_ = [];
      Object.defineProperty(import_assertThisInitialized2.default(_this), "length", {
        get: function get7() {
          return this.tracks_.length;
        }
      });
      for (var i = 0; i < tracks.length; i++) {
        _this.addTrack(tracks[i]);
      }
      return _this;
    }
    var _proto = TrackList2.prototype;
    _proto.addTrack = function addTrack(track) {
      var _this2 = this;
      var index = this.tracks_.length;
      if (!("" + index in this)) {
        Object.defineProperty(this, index, {
          get: function get7() {
            return this.tracks_[index];
          }
        });
      }
      if (this.tracks_.indexOf(track) === -1) {
        this.tracks_.push(track);
        this.trigger({
          track,
          type: "addtrack",
          target: this
        });
      }
      track.labelchange_ = function() {
        _this2.trigger({
          track,
          type: "labelchange",
          target: _this2
        });
      };
      if (isEvented(track)) {
        track.addEventListener("labelchange", track.labelchange_);
      }
    };
    _proto.removeTrack = function removeTrack(rtrack) {
      var track;
      for (var i = 0, l = this.length; i < l; i++) {
        if (this[i] === rtrack) {
          track = this[i];
          if (track.off) {
            track.off();
          }
          this.tracks_.splice(i, 1);
          break;
        }
      }
      if (!track) {
        return;
      }
      this.trigger({
        track,
        type: "removetrack",
        target: this
      });
    };
    _proto.getTrackById = function getTrackById(id) {
      var result = null;
      for (var i = 0, l = this.length; i < l; i++) {
        var track = this[i];
        if (track.id === id) {
          result = track;
          break;
        }
      }
      return result;
    };
    return TrackList2;
  }(EventTarget);
  TrackList.prototype.allowedEvents_ = {
    change: "change",
    addtrack: "addtrack",
    removetrack: "removetrack",
    labelchange: "labelchange"
  };
  for (var event in TrackList.prototype.allowedEvents_) {
    TrackList.prototype["on" + event] = null;
  }
  var disableOthers = function disableOthers2(list, track) {
    for (var i = 0; i < list.length; i++) {
      if (!Object.keys(list[i]).length || track.id === list[i].id) {
        continue;
      }
      list[i].enabled = false;
    }
  };
  var AudioTrackList = /* @__PURE__ */ function(_TrackList) {
    import_inheritsLoose2.default(AudioTrackList2, _TrackList);
    function AudioTrackList2(tracks) {
      var _this;
      if (tracks === void 0) {
        tracks = [];
      }
      for (var i = tracks.length - 1; i >= 0; i--) {
        if (tracks[i].enabled) {
          disableOthers(tracks, tracks[i]);
          break;
        }
      }
      _this = _TrackList.call(this, tracks) || this;
      _this.changing_ = false;
      return _this;
    }
    var _proto = AudioTrackList2.prototype;
    _proto.addTrack = function addTrack(track) {
      var _this2 = this;
      if (track.enabled) {
        disableOthers(this, track);
      }
      _TrackList.prototype.addTrack.call(this, track);
      if (!track.addEventListener) {
        return;
      }
      track.enabledChange_ = function() {
        if (_this2.changing_) {
          return;
        }
        _this2.changing_ = true;
        disableOthers(_this2, track);
        _this2.changing_ = false;
        _this2.trigger("change");
      };
      track.addEventListener("enabledchange", track.enabledChange_);
    };
    _proto.removeTrack = function removeTrack(rtrack) {
      _TrackList.prototype.removeTrack.call(this, rtrack);
      if (rtrack.removeEventListener && rtrack.enabledChange_) {
        rtrack.removeEventListener("enabledchange", rtrack.enabledChange_);
        rtrack.enabledChange_ = null;
      }
    };
    return AudioTrackList2;
  }(TrackList);
  var disableOthers$1 = function disableOthers3(list, track) {
    for (var i = 0; i < list.length; i++) {
      if (!Object.keys(list[i]).length || track.id === list[i].id) {
        continue;
      }
      list[i].selected = false;
    }
  };
  var VideoTrackList = /* @__PURE__ */ function(_TrackList) {
    import_inheritsLoose2.default(VideoTrackList2, _TrackList);
    function VideoTrackList2(tracks) {
      var _this;
      if (tracks === void 0) {
        tracks = [];
      }
      for (var i = tracks.length - 1; i >= 0; i--) {
        if (tracks[i].selected) {
          disableOthers$1(tracks, tracks[i]);
          break;
        }
      }
      _this = _TrackList.call(this, tracks) || this;
      _this.changing_ = false;
      Object.defineProperty(import_assertThisInitialized2.default(_this), "selectedIndex", {
        get: function get7() {
          for (var _i = 0; _i < this.length; _i++) {
            if (this[_i].selected) {
              return _i;
            }
          }
          return -1;
        },
        set: function set4() {
        }
      });
      return _this;
    }
    var _proto = VideoTrackList2.prototype;
    _proto.addTrack = function addTrack(track) {
      var _this2 = this;
      if (track.selected) {
        disableOthers$1(this, track);
      }
      _TrackList.prototype.addTrack.call(this, track);
      if (!track.addEventListener) {
        return;
      }
      track.selectedChange_ = function() {
        if (_this2.changing_) {
          return;
        }
        _this2.changing_ = true;
        disableOthers$1(_this2, track);
        _this2.changing_ = false;
        _this2.trigger("change");
      };
      track.addEventListener("selectedchange", track.selectedChange_);
    };
    _proto.removeTrack = function removeTrack(rtrack) {
      _TrackList.prototype.removeTrack.call(this, rtrack);
      if (rtrack.removeEventListener && rtrack.selectedChange_) {
        rtrack.removeEventListener("selectedchange", rtrack.selectedChange_);
        rtrack.selectedChange_ = null;
      }
    };
    return VideoTrackList2;
  }(TrackList);
  var TextTrackList = /* @__PURE__ */ function(_TrackList) {
    import_inheritsLoose2.default(TextTrackList2, _TrackList);
    function TextTrackList2() {
      return _TrackList.apply(this, arguments) || this;
    }
    var _proto = TextTrackList2.prototype;
    _proto.addTrack = function addTrack(track) {
      var _this = this;
      _TrackList.prototype.addTrack.call(this, track);
      if (!this.queueChange_) {
        this.queueChange_ = function() {
          return _this.queueTrigger("change");
        };
      }
      if (!this.triggerSelectedlanguagechange) {
        this.triggerSelectedlanguagechange_ = function() {
          return _this.trigger("selectedlanguagechange");
        };
      }
      track.addEventListener("modechange", this.queueChange_);
      var nonLanguageTextTrackKind = ["metadata", "chapters"];
      if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
        track.addEventListener("modechange", this.triggerSelectedlanguagechange_);
      }
    };
    _proto.removeTrack = function removeTrack(rtrack) {
      _TrackList.prototype.removeTrack.call(this, rtrack);
      if (rtrack.removeEventListener) {
        if (this.queueChange_) {
          rtrack.removeEventListener("modechange", this.queueChange_);
        }
        if (this.selectedlanguagechange_) {
          rtrack.removeEventListener("modechange", this.triggerSelectedlanguagechange_);
        }
      }
    };
    return TextTrackList2;
  }(TrackList);
  var HtmlTrackElementList = /* @__PURE__ */ function() {
    function HtmlTrackElementList2(trackElements) {
      if (trackElements === void 0) {
        trackElements = [];
      }
      this.trackElements_ = [];
      Object.defineProperty(this, "length", {
        get: function get7() {
          return this.trackElements_.length;
        }
      });
      for (var i = 0, length = trackElements.length; i < length; i++) {
        this.addTrackElement_(trackElements[i]);
      }
    }
    var _proto = HtmlTrackElementList2.prototype;
    _proto.addTrackElement_ = function addTrackElement_(trackElement) {
      var index = this.trackElements_.length;
      if (!("" + index in this)) {
        Object.defineProperty(this, index, {
          get: function get7() {
            return this.trackElements_[index];
          }
        });
      }
      if (this.trackElements_.indexOf(trackElement) === -1) {
        this.trackElements_.push(trackElement);
      }
    };
    _proto.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
      var trackElement_;
      for (var i = 0, length = this.trackElements_.length; i < length; i++) {
        if (track === this.trackElements_[i].track) {
          trackElement_ = this.trackElements_[i];
          break;
        }
      }
      return trackElement_;
    };
    _proto.removeTrackElement_ = function removeTrackElement_(trackElement) {
      for (var i = 0, length = this.trackElements_.length; i < length; i++) {
        if (trackElement === this.trackElements_[i]) {
          if (this.trackElements_[i].track && typeof this.trackElements_[i].track.off === "function") {
            this.trackElements_[i].track.off();
          }
          if (typeof this.trackElements_[i].off === "function") {
            this.trackElements_[i].off();
          }
          this.trackElements_.splice(i, 1);
          break;
        }
      }
    };
    return HtmlTrackElementList2;
  }();
  var TextTrackCueList = /* @__PURE__ */ function() {
    function TextTrackCueList2(cues) {
      TextTrackCueList2.prototype.setCues_.call(this, cues);
      Object.defineProperty(this, "length", {
        get: function get7() {
          return this.length_;
        }
      });
    }
    var _proto = TextTrackCueList2.prototype;
    _proto.setCues_ = function setCues_(cues) {
      var oldLength = this.length || 0;
      var i = 0;
      var l = cues.length;
      this.cues_ = cues;
      this.length_ = cues.length;
      var defineProp = function defineProp2(index) {
        if (!("" + index in this)) {
          Object.defineProperty(this, "" + index, {
            get: function get7() {
              return this.cues_[index];
            }
          });
        }
      };
      if (oldLength < l) {
        i = oldLength;
        for (; i < l; i++) {
          defineProp.call(this, i);
        }
      }
    };
    _proto.getCueById = function getCueById(id) {
      var result = null;
      for (var i = 0, l = this.length; i < l; i++) {
        var cue = this[i];
        if (cue.id === id) {
          result = cue;
          break;
        }
      }
      return result;
    };
    return TextTrackCueList2;
  }();
  var VideoTrackKind = {
    alternative: "alternative",
    captions: "captions",
    main: "main",
    sign: "sign",
    subtitles: "subtitles",
    commentary: "commentary"
  };
  var AudioTrackKind = {
    alternative: "alternative",
    descriptions: "descriptions",
    main: "main",
    "main-desc": "main-desc",
    translation: "translation",
    commentary: "commentary"
  };
  var TextTrackKind = {
    subtitles: "subtitles",
    captions: "captions",
    descriptions: "descriptions",
    chapters: "chapters",
    metadata: "metadata"
  };
  var TextTrackMode = {
    disabled: "disabled",
    hidden: "hidden",
    showing: "showing"
  };
  var Track = /* @__PURE__ */ function(_EventTarget) {
    import_inheritsLoose2.default(Track2, _EventTarget);
    function Track2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _EventTarget.call(this) || this;
      var trackProps = {
        id: options.id || "vjs_track_" + newGUID(),
        kind: options.kind || "",
        language: options.language || ""
      };
      var label = options.label || "";
      var _loop = function _loop2(key2) {
        Object.defineProperty(import_assertThisInitialized2.default(_this), key2, {
          get: function get7() {
            return trackProps[key2];
          },
          set: function set4() {
          }
        });
      };
      for (var key in trackProps) {
        _loop(key);
      }
      Object.defineProperty(import_assertThisInitialized2.default(_this), "label", {
        get: function get7() {
          return label;
        },
        set: function set4(newLabel) {
          if (newLabel !== label) {
            label = newLabel;
            this.trigger("labelchange");
          }
        }
      });
      return _this;
    }
    return Track2;
  }(EventTarget);
  var parseUrl = function parseUrl2(url) {
    var props = ["protocol", "hostname", "port", "pathname", "search", "hash", "host"];
    var a = import_document.default.createElement("a");
    a.href = url;
    var addToBody = a.host === "" && a.protocol !== "file:";
    var div;
    if (addToBody) {
      div = import_document.default.createElement("div");
      div.innerHTML = '<a href="' + url + '"></a>';
      a = div.firstChild;
      div.setAttribute("style", "display:none; position:absolute;");
      import_document.default.body.appendChild(div);
    }
    var details = {};
    for (var i = 0; i < props.length; i++) {
      details[props[i]] = a[props[i]];
    }
    if (details.protocol === "http:") {
      details.host = details.host.replace(/:80$/, "");
    }
    if (details.protocol === "https:") {
      details.host = details.host.replace(/:443$/, "");
    }
    if (!details.protocol) {
      details.protocol = import_window2.default.location.protocol;
    }
    if (addToBody) {
      import_document.default.body.removeChild(div);
    }
    return details;
  };
  var getAbsoluteURL = function getAbsoluteURL2(url) {
    if (!url.match(/^https?:\/\//)) {
      var div = import_document.default.createElement("div");
      div.innerHTML = '<a href="' + url + '">x</a>';
      url = div.firstChild.href;
    }
    return url;
  };
  var getFileExtension = function getFileExtension2(path) {
    if (typeof path === "string") {
      var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/;
      var pathParts = splitPathRe.exec(path);
      if (pathParts) {
        return pathParts.pop().toLowerCase();
      }
    }
    return "";
  };
  var isCrossOrigin = function isCrossOrigin2(url, winLoc) {
    if (winLoc === void 0) {
      winLoc = import_window2.default.location;
    }
    var urlInfo = parseUrl(url);
    var srcProtocol = urlInfo.protocol === ":" ? winLoc.protocol : urlInfo.protocol;
    var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
    return crossOrigin;
  };
  var Url = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    parseUrl,
    getAbsoluteURL,
    getFileExtension,
    isCrossOrigin
  });
  var parseCues = function parseCues2(srcContent, track) {
    var parser2 = new import_window2.default.WebVTT.Parser(import_window2.default, import_window2.default.vttjs, import_window2.default.WebVTT.StringDecoder());
    var errors2 = [];
    parser2.oncue = function(cue) {
      track.addCue(cue);
    };
    parser2.onparsingerror = function(error) {
      errors2.push(error);
    };
    parser2.onflush = function() {
      track.trigger({
        type: "loadeddata",
        target: track
      });
    };
    parser2.parse(srcContent);
    if (errors2.length > 0) {
      if (import_window2.default.console && import_window2.default.console.groupCollapsed) {
        import_window2.default.console.groupCollapsed("Text Track parsing errors for " + track.src);
      }
      errors2.forEach(function(error) {
        return log.error(error);
      });
      if (import_window2.default.console && import_window2.default.console.groupEnd) {
        import_window2.default.console.groupEnd();
      }
    }
    parser2.flush();
  };
  var loadTrack = function loadTrack2(src, track) {
    var opts = {
      uri: src
    };
    var crossOrigin = isCrossOrigin(src);
    if (crossOrigin) {
      opts.cors = crossOrigin;
    }
    var withCredentials = track.tech_.crossOrigin() === "use-credentials";
    if (withCredentials) {
      opts.withCredentials = withCredentials;
    }
    import_xhr.default(opts, bind(this, function(err, response, responseBody) {
      if (err) {
        return log.error(err, response);
      }
      track.loaded_ = true;
      if (typeof import_window2.default.WebVTT !== "function") {
        if (track.tech_) {
          track.tech_.any(["vttjsloaded", "vttjserror"], function(event) {
            if (event.type === "vttjserror") {
              log.error("vttjs failed to load, stopping trying to process " + track.src);
              return;
            }
            return parseCues(responseBody, track);
          });
        }
      } else {
        parseCues(responseBody, track);
      }
    }));
  };
  var TextTrack = /* @__PURE__ */ function(_Track) {
    import_inheritsLoose2.default(TextTrack2, _Track);
    function TextTrack2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      if (!options.tech) {
        throw new Error("A tech was not provided.");
      }
      var settings = mergeOptions(options, {
        kind: TextTrackKind[options.kind] || "subtitles",
        language: options.language || options.srclang || ""
      });
      var mode = TextTrackMode[settings.mode] || "disabled";
      var default_ = settings["default"];
      if (settings.kind === "metadata" || settings.kind === "chapters") {
        mode = "hidden";
      }
      _this = _Track.call(this, settings) || this;
      _this.tech_ = settings.tech;
      _this.cues_ = [];
      _this.activeCues_ = [];
      _this.preload_ = _this.tech_.preloadTextTracks !== false;
      var cues = new TextTrackCueList(_this.cues_);
      var activeCues = new TextTrackCueList(_this.activeCues_);
      var changed = false;
      var timeupdateHandler = bind(import_assertThisInitialized2.default(_this), function() {
        if (!this.tech_.isReady_ || this.tech_.isDisposed()) {
          return;
        }
        this.activeCues = this.activeCues;
        if (changed) {
          this.trigger("cuechange");
          changed = false;
        }
      });
      var disposeHandler = function disposeHandler2() {
        _this.tech_.off("timeupdate", timeupdateHandler);
      };
      _this.tech_.one("dispose", disposeHandler);
      if (mode !== "disabled") {
        _this.tech_.on("timeupdate", timeupdateHandler);
      }
      Object.defineProperties(import_assertThisInitialized2.default(_this), {
        default: {
          get: function get7() {
            return default_;
          },
          set: function set4() {
          }
        },
        mode: {
          get: function get7() {
            return mode;
          },
          set: function set4(newMode) {
            if (!TextTrackMode[newMode]) {
              return;
            }
            if (mode === newMode) {
              return;
            }
            mode = newMode;
            if (!this.preload_ && mode !== "disabled" && this.cues.length === 0) {
              loadTrack(this.src, this);
            }
            this.tech_.off("timeupdate", timeupdateHandler);
            if (mode !== "disabled") {
              this.tech_.on("timeupdate", timeupdateHandler);
            }
            this.trigger("modechange");
          }
        },
        cues: {
          get: function get7() {
            if (!this.loaded_) {
              return null;
            }
            return cues;
          },
          set: function set4() {
          }
        },
        activeCues: {
          get: function get7() {
            if (!this.loaded_) {
              return null;
            }
            if (this.cues.length === 0) {
              return activeCues;
            }
            var ct = this.tech_.currentTime();
            var active = [];
            for (var i = 0, l = this.cues.length; i < l; i++) {
              var cue = this.cues[i];
              if (cue.startTime <= ct && cue.endTime >= ct) {
                active.push(cue);
              } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
                active.push(cue);
              }
            }
            changed = false;
            if (active.length !== this.activeCues_.length) {
              changed = true;
            } else {
              for (var _i = 0; _i < active.length; _i++) {
                if (this.activeCues_.indexOf(active[_i]) === -1) {
                  changed = true;
                }
              }
            }
            this.activeCues_ = active;
            activeCues.setCues_(this.activeCues_);
            return activeCues;
          },
          set: function set4() {
          }
        }
      });
      if (settings.src) {
        _this.src = settings.src;
        if (!_this.preload_) {
          _this.loaded_ = true;
        }
        if (_this.preload_ || default_ || settings.kind !== "subtitles" && settings.kind !== "captions") {
          loadTrack(_this.src, import_assertThisInitialized2.default(_this));
        }
      } else {
        _this.loaded_ = true;
      }
      return _this;
    }
    var _proto = TextTrack2.prototype;
    _proto.addCue = function addCue(originalCue) {
      var cue = originalCue;
      if (import_window2.default.vttjs && !(originalCue instanceof import_window2.default.vttjs.VTTCue)) {
        cue = new import_window2.default.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);
        for (var prop in originalCue) {
          if (!(prop in cue)) {
            cue[prop] = originalCue[prop];
          }
        }
        cue.id = originalCue.id;
        cue.originalCue_ = originalCue;
      }
      var tracks = this.tech_.textTracks();
      for (var i = 0; i < tracks.length; i++) {
        if (tracks[i] !== this) {
          tracks[i].removeCue(cue);
        }
      }
      this.cues_.push(cue);
      this.cues.setCues_(this.cues_);
    };
    _proto.removeCue = function removeCue(_removeCue) {
      var i = this.cues_.length;
      while (i--) {
        var cue = this.cues_[i];
        if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
          this.cues_.splice(i, 1);
          this.cues.setCues_(this.cues_);
          break;
        }
      }
    };
    return TextTrack2;
  }(Track);
  TextTrack.prototype.allowedEvents_ = {
    cuechange: "cuechange"
  };
  var AudioTrack = /* @__PURE__ */ function(_Track) {
    import_inheritsLoose2.default(AudioTrack2, _Track);
    function AudioTrack2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      var settings = mergeOptions(options, {
        kind: AudioTrackKind[options.kind] || ""
      });
      _this = _Track.call(this, settings) || this;
      var enabled = false;
      Object.defineProperty(import_assertThisInitialized2.default(_this), "enabled", {
        get: function get7() {
          return enabled;
        },
        set: function set4(newEnabled) {
          if (typeof newEnabled !== "boolean" || newEnabled === enabled) {
            return;
          }
          enabled = newEnabled;
          this.trigger("enabledchange");
        }
      });
      if (settings.enabled) {
        _this.enabled = settings.enabled;
      }
      _this.loaded_ = true;
      return _this;
    }
    return AudioTrack2;
  }(Track);
  var VideoTrack = /* @__PURE__ */ function(_Track) {
    import_inheritsLoose2.default(VideoTrack2, _Track);
    function VideoTrack2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      var settings = mergeOptions(options, {
        kind: VideoTrackKind[options.kind] || ""
      });
      _this = _Track.call(this, settings) || this;
      var selected = false;
      Object.defineProperty(import_assertThisInitialized2.default(_this), "selected", {
        get: function get7() {
          return selected;
        },
        set: function set4(newSelected) {
          if (typeof newSelected !== "boolean" || newSelected === selected) {
            return;
          }
          selected = newSelected;
          this.trigger("selectedchange");
        }
      });
      if (settings.selected) {
        _this.selected = settings.selected;
      }
      return _this;
    }
    return VideoTrack2;
  }(Track);
  var NONE = 0;
  var LOADING = 1;
  var LOADED = 2;
  var ERROR = 3;
  var HTMLTrackElement = /* @__PURE__ */ function(_EventTarget) {
    import_inheritsLoose2.default(HTMLTrackElement2, _EventTarget);
    function HTMLTrackElement2(options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _EventTarget.call(this) || this;
      var readyState;
      var track = new TextTrack(options);
      _this.kind = track.kind;
      _this.src = track.src;
      _this.srclang = track.language;
      _this.label = track.label;
      _this["default"] = track["default"];
      Object.defineProperties(import_assertThisInitialized2.default(_this), {
        readyState: {
          get: function get7() {
            return readyState;
          }
        },
        track: {
          get: function get7() {
            return track;
          }
        }
      });
      readyState = NONE;
      track.addEventListener("loadeddata", function() {
        readyState = LOADED;
        _this.trigger({
          type: "load",
          target: import_assertThisInitialized2.default(_this)
        });
      });
      return _this;
    }
    return HTMLTrackElement2;
  }(EventTarget);
  HTMLTrackElement.prototype.allowedEvents_ = {
    load: "load"
  };
  HTMLTrackElement.NONE = NONE;
  HTMLTrackElement.LOADING = LOADING;
  HTMLTrackElement.LOADED = LOADED;
  HTMLTrackElement.ERROR = ERROR;
  var NORMAL = {
    audio: {
      ListClass: AudioTrackList,
      TrackClass: AudioTrack,
      capitalName: "Audio"
    },
    video: {
      ListClass: VideoTrackList,
      TrackClass: VideoTrack,
      capitalName: "Video"
    },
    text: {
      ListClass: TextTrackList,
      TrackClass: TextTrack,
      capitalName: "Text"
    }
  };
  Object.keys(NORMAL).forEach(function(type3) {
    NORMAL[type3].getterName = type3 + "Tracks";
    NORMAL[type3].privateName = type3 + "Tracks_";
  });
  var REMOTE = {
    remoteText: {
      ListClass: TextTrackList,
      TrackClass: TextTrack,
      capitalName: "RemoteText",
      getterName: "remoteTextTracks",
      privateName: "remoteTextTracks_"
    },
    remoteTextEl: {
      ListClass: HtmlTrackElementList,
      TrackClass: HTMLTrackElement,
      capitalName: "RemoteTextTrackEls",
      getterName: "remoteTextTrackEls",
      privateName: "remoteTextTrackEls_"
    }
  };
  var ALL = import_extends2.default({}, NORMAL, REMOTE);
  REMOTE.names = Object.keys(REMOTE);
  NORMAL.names = Object.keys(NORMAL);
  ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);
  function createTrackHelper(self2, kind, label, language, options) {
    if (options === void 0) {
      options = {};
    }
    var tracks = self2.textTracks();
    options.kind = kind;
    if (label) {
      options.label = label;
    }
    if (language) {
      options.language = language;
    }
    options.tech = self2;
    var track = new ALL.text.TrackClass(options);
    tracks.addTrack(track);
    return track;
  }
  var Tech = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(Tech2, _Component);
    function Tech2(options, ready) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      if (ready === void 0) {
        ready = function ready2() {
        };
      }
      options.reportTouchActivity = false;
      _this = _Component.call(this, null, options, ready) || this;
      _this.hasStarted_ = false;
      _this.on("playing", function() {
        this.hasStarted_ = true;
      });
      _this.on("loadstart", function() {
        this.hasStarted_ = false;
      });
      ALL.names.forEach(function(name) {
        var props = ALL[name];
        if (options && options[props.getterName]) {
          _this[props.privateName] = options[props.getterName];
        }
      });
      if (!_this.featuresProgressEvents) {
        _this.manualProgressOn();
      }
      if (!_this.featuresTimeupdateEvents) {
        _this.manualTimeUpdatesOn();
      }
      ["Text", "Audio", "Video"].forEach(function(track) {
        if (options["native" + track + "Tracks"] === false) {
          _this["featuresNative" + track + "Tracks"] = false;
        }
      });
      if (options.nativeCaptions === false || options.nativeTextTracks === false) {
        _this.featuresNativeTextTracks = false;
      } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
        _this.featuresNativeTextTracks = true;
      }
      if (!_this.featuresNativeTextTracks) {
        _this.emulateTextTracks();
      }
      _this.preloadTextTracks = options.preloadTextTracks !== false;
      _this.autoRemoteTextTracks_ = new ALL.text.ListClass();
      _this.initTrackListeners();
      if (!options.nativeControlsForTouch) {
        _this.emitTapEvents();
      }
      if (_this.constructor) {
        _this.name_ = _this.constructor.name || "Unknown Tech";
      }
      return _this;
    }
    var _proto = Tech2.prototype;
    _proto.triggerSourceset = function triggerSourceset(src) {
      var _this2 = this;
      if (!this.isReady_) {
        this.one("ready", function() {
          return _this2.setTimeout(function() {
            return _this2.triggerSourceset(src);
          }, 1);
        });
      }
      this.trigger({
        src,
        type: "sourceset"
      });
    };
    _proto.manualProgressOn = function manualProgressOn() {
      this.on("durationchange", this.onDurationChange);
      this.manualProgress = true;
      this.one("ready", this.trackProgress);
    };
    _proto.manualProgressOff = function manualProgressOff() {
      this.manualProgress = false;
      this.stopTrackingProgress();
      this.off("durationchange", this.onDurationChange);
    };
    _proto.trackProgress = function trackProgress(event) {
      this.stopTrackingProgress();
      this.progressInterval = this.setInterval(bind(this, function() {
        var numBufferedPercent = this.bufferedPercent();
        if (this.bufferedPercent_ !== numBufferedPercent) {
          this.trigger("progress");
        }
        this.bufferedPercent_ = numBufferedPercent;
        if (numBufferedPercent === 1) {
          this.stopTrackingProgress();
        }
      }), 500);
    };
    _proto.onDurationChange = function onDurationChange(event) {
      this.duration_ = this.duration();
    };
    _proto.buffered = function buffered() {
      return createTimeRanges(0, 0);
    };
    _proto.bufferedPercent = function bufferedPercent$1() {
      return bufferedPercent(this.buffered(), this.duration_);
    };
    _proto.stopTrackingProgress = function stopTrackingProgress() {
      this.clearInterval(this.progressInterval);
    };
    _proto.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
      this.manualTimeUpdates = true;
      this.on("play", this.trackCurrentTime);
      this.on("pause", this.stopTrackingCurrentTime);
    };
    _proto.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
      this.manualTimeUpdates = false;
      this.stopTrackingCurrentTime();
      this.off("play", this.trackCurrentTime);
      this.off("pause", this.stopTrackingCurrentTime);
    };
    _proto.trackCurrentTime = function trackCurrentTime() {
      if (this.currentTimeInterval) {
        this.stopTrackingCurrentTime();
      }
      this.currentTimeInterval = this.setInterval(function() {
        this.trigger({
          type: "timeupdate",
          target: this,
          manuallyTriggered: true
        });
      }, 250);
    };
    _proto.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
      this.clearInterval(this.currentTimeInterval);
      this.trigger({
        type: "timeupdate",
        target: this,
        manuallyTriggered: true
      });
    };
    _proto.dispose = function dispose3() {
      this.clearTracks(NORMAL.names);
      if (this.manualProgress) {
        this.manualProgressOff();
      }
      if (this.manualTimeUpdates) {
        this.manualTimeUpdatesOff();
      }
      _Component.prototype.dispose.call(this);
    };
    _proto.clearTracks = function clearTracks(types) {
      var _this3 = this;
      types = [].concat(types);
      types.forEach(function(type3) {
        var list = _this3[type3 + "Tracks"]() || [];
        var i = list.length;
        while (i--) {
          var track = list[i];
          if (type3 === "text") {
            _this3.removeRemoteTextTrack(track);
          }
          list.removeTrack(track);
        }
      });
    };
    _proto.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
      var list = this.autoRemoteTextTracks_ || [];
      var i = list.length;
      while (i--) {
        var track = list[i];
        this.removeRemoteTextTrack(track);
      }
    };
    _proto.reset = function reset3() {
    };
    _proto.crossOrigin = function crossOrigin() {
    };
    _proto.setCrossOrigin = function setCrossOrigin() {
    };
    _proto.error = function error(err) {
      if (err !== void 0) {
        this.error_ = new MediaError(err);
        this.trigger("error");
      }
      return this.error_;
    };
    _proto.played = function played() {
      if (this.hasStarted_) {
        return createTimeRanges(0, 0);
      }
      return createTimeRanges();
    };
    _proto.play = function play() {
    };
    _proto.setScrubbing = function setScrubbing() {
    };
    _proto.scrubbing = function scrubbing() {
    };
    _proto.setCurrentTime = function setCurrentTime() {
      if (this.manualTimeUpdates) {
        this.trigger({
          type: "timeupdate",
          target: this,
          manuallyTriggered: true
        });
      }
    };
    _proto.initTrackListeners = function initTrackListeners() {
      var _this4 = this;
      NORMAL.names.forEach(function(name) {
        var props = NORMAL[name];
        var trackListChanges = function trackListChanges2() {
          _this4.trigger(name + "trackchange");
        };
        var tracks = _this4[props.getterName]();
        tracks.addEventListener("removetrack", trackListChanges);
        tracks.addEventListener("addtrack", trackListChanges);
        _this4.on("dispose", function() {
          tracks.removeEventListener("removetrack", trackListChanges);
          tracks.removeEventListener("addtrack", trackListChanges);
        });
      });
    };
    _proto.addWebVttScript_ = function addWebVttScript_() {
      var _this5 = this;
      if (import_window2.default.WebVTT) {
        return;
      }
      if (import_document.default.body.contains(this.el())) {
        if (!this.options_["vtt.js"] && isPlain(import_videojs_vtt.default) && Object.keys(import_videojs_vtt.default).length > 0) {
          this.trigger("vttjsloaded");
          return;
        }
        var script = import_document.default.createElement("script");
        script.src = this.options_["vtt.js"] || "https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js";
        script.onload = function() {
          _this5.trigger("vttjsloaded");
        };
        script.onerror = function() {
          _this5.trigger("vttjserror");
        };
        this.on("dispose", function() {
          script.onload = null;
          script.onerror = null;
        });
        import_window2.default.WebVTT = true;
        this.el().parentNode.appendChild(script);
      } else {
        this.ready(this.addWebVttScript_);
      }
    };
    _proto.emulateTextTracks = function emulateTextTracks() {
      var _this6 = this;
      var tracks = this.textTracks();
      var remoteTracks = this.remoteTextTracks();
      var handleAddTrack = function handleAddTrack2(e) {
        return tracks.addTrack(e.track);
      };
      var handleRemoveTrack = function handleRemoveTrack2(e) {
        return tracks.removeTrack(e.track);
      };
      remoteTracks.on("addtrack", handleAddTrack);
      remoteTracks.on("removetrack", handleRemoveTrack);
      this.addWebVttScript_();
      var updateDisplay = function updateDisplay2() {
        return _this6.trigger("texttrackchange");
      };
      var textTracksChanges = function textTracksChanges2() {
        updateDisplay();
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
          track.removeEventListener("cuechange", updateDisplay);
          if (track.mode === "showing") {
            track.addEventListener("cuechange", updateDisplay);
          }
        }
      };
      textTracksChanges();
      tracks.addEventListener("change", textTracksChanges);
      tracks.addEventListener("addtrack", textTracksChanges);
      tracks.addEventListener("removetrack", textTracksChanges);
      this.on("dispose", function() {
        remoteTracks.off("addtrack", handleAddTrack);
        remoteTracks.off("removetrack", handleRemoveTrack);
        tracks.removeEventListener("change", textTracksChanges);
        tracks.removeEventListener("addtrack", textTracksChanges);
        tracks.removeEventListener("removetrack", textTracksChanges);
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
          track.removeEventListener("cuechange", updateDisplay);
        }
      });
    };
    _proto.addTextTrack = function addTextTrack(kind, label, language) {
      if (!kind) {
        throw new Error("TextTrack kind is required but was not provided");
      }
      return createTrackHelper(this, kind, label, language);
    };
    _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {
      var track = mergeOptions(options, {
        tech: this
      });
      return new REMOTE.remoteTextEl.TrackClass(track);
    };
    _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
      var _this7 = this;
      if (options === void 0) {
        options = {};
      }
      var htmlTrackElement = this.createRemoteTextTrack(options);
      if (manualCleanup !== true && manualCleanup !== false) {
        log.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
        manualCleanup = true;
      }
      this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
      this.remoteTextTracks().addTrack(htmlTrackElement.track);
      if (manualCleanup !== true) {
        this.ready(function() {
          return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
        });
      }
      return htmlTrackElement;
    };
    _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
      var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
      this.remoteTextTrackEls().removeTrackElement_(trackElement);
      this.remoteTextTracks().removeTrack(track);
      this.autoRemoteTextTracks_.removeTrack(track);
    };
    _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
      return {};
    };
    _proto.requestPictureInPicture = function requestPictureInPicture() {
      var PromiseClass = this.options_.Promise || import_window2.default.Promise;
      if (PromiseClass) {
        return PromiseClass.reject();
      }
    };
    _proto.disablePictureInPicture = function disablePictureInPicture() {
      return true;
    };
    _proto.setDisablePictureInPicture = function setDisablePictureInPicture() {
    };
    _proto.setPoster = function setPoster() {
    };
    _proto.playsinline = function playsinline() {
    };
    _proto.setPlaysinline = function setPlaysinline() {
    };
    _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks() {
    };
    _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks() {
    };
    _proto.canPlayType = function canPlayType3() {
      return "";
    };
    Tech2.canPlayType = function canPlayType3() {
      return "";
    };
    Tech2.canPlaySource = function canPlaySource(srcObj, options) {
      return Tech2.canPlayType(srcObj.type);
    };
    Tech2.isTech = function isTech(component) {
      return component.prototype instanceof Tech2 || component instanceof Tech2 || component === Tech2;
    };
    Tech2.registerTech = function registerTech(name, tech) {
      if (!Tech2.techs_) {
        Tech2.techs_ = {};
      }
      if (!Tech2.isTech(tech)) {
        throw new Error("Tech " + name + " must be a Tech");
      }
      if (!Tech2.canPlayType) {
        throw new Error("Techs must have a static canPlayType method on them");
      }
      if (!Tech2.canPlaySource) {
        throw new Error("Techs must have a static canPlaySource method on them");
      }
      name = toTitleCase(name);
      Tech2.techs_[name] = tech;
      Tech2.techs_[toLowerCase(name)] = tech;
      if (name !== "Tech") {
        Tech2.defaultTechOrder_.push(name);
      }
      return tech;
    };
    Tech2.getTech = function getTech(name) {
      if (!name) {
        return;
      }
      if (Tech2.techs_ && Tech2.techs_[name]) {
        return Tech2.techs_[name];
      }
      name = toTitleCase(name);
      if (import_window2.default && import_window2.default.videojs && import_window2.default.videojs[name]) {
        log.warn("The " + name + " tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)");
        return import_window2.default.videojs[name];
      }
    };
    return Tech2;
  }(Component);
  ALL.names.forEach(function(name) {
    var props = ALL[name];
    Tech.prototype[props.getterName] = function() {
      this[props.privateName] = this[props.privateName] || new props.ListClass();
      return this[props.privateName];
    };
  });
  Tech.prototype.featuresVolumeControl = true;
  Tech.prototype.featuresMuteControl = true;
  Tech.prototype.featuresFullscreenResize = false;
  Tech.prototype.featuresPlaybackRate = false;
  Tech.prototype.featuresProgressEvents = false;
  Tech.prototype.featuresSourceset = false;
  Tech.prototype.featuresTimeupdateEvents = false;
  Tech.prototype.featuresNativeTextTracks = false;
  Tech.withSourceHandlers = function(_Tech) {
    _Tech.registerSourceHandler = function(handler, index) {
      var handlers = _Tech.sourceHandlers;
      if (!handlers) {
        handlers = _Tech.sourceHandlers = [];
      }
      if (index === void 0) {
        index = handlers.length;
      }
      handlers.splice(index, 0, handler);
    };
    _Tech.canPlayType = function(type3) {
      var handlers = _Tech.sourceHandlers || [];
      var can;
      for (var i = 0; i < handlers.length; i++) {
        can = handlers[i].canPlayType(type3);
        if (can) {
          return can;
        }
      }
      return "";
    };
    _Tech.selectSourceHandler = function(source, options) {
      var handlers = _Tech.sourceHandlers || [];
      var can;
      for (var i = 0; i < handlers.length; i++) {
        can = handlers[i].canHandleSource(source, options);
        if (can) {
          return handlers[i];
        }
      }
      return null;
    };
    _Tech.canPlaySource = function(srcObj, options) {
      var sh = _Tech.selectSourceHandler(srcObj, options);
      if (sh) {
        return sh.canHandleSource(srcObj, options);
      }
      return "";
    };
    var deferrable = ["seekable", "seeking", "duration"];
    deferrable.forEach(function(fnName) {
      var originalFn = this[fnName];
      if (typeof originalFn !== "function") {
        return;
      }
      this[fnName] = function() {
        if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
          return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
        }
        return originalFn.apply(this, arguments);
      };
    }, _Tech.prototype);
    _Tech.prototype.setSource = function(source) {
      var sh = _Tech.selectSourceHandler(source, this.options_);
      if (!sh) {
        if (_Tech.nativeSourceHandler) {
          sh = _Tech.nativeSourceHandler;
        } else {
          log.error("No source handler found for the current source.");
        }
      }
      this.disposeSourceHandler();
      this.off("dispose", this.disposeSourceHandler);
      if (sh !== _Tech.nativeSourceHandler) {
        this.currentSource_ = source;
      }
      this.sourceHandler_ = sh.handleSource(source, this, this.options_);
      this.one("dispose", this.disposeSourceHandler);
    };
    _Tech.prototype.disposeSourceHandler = function() {
      if (this.currentSource_) {
        this.clearTracks(["audio", "video"]);
        this.currentSource_ = null;
      }
      this.cleanupAutoTextTracks();
      if (this.sourceHandler_) {
        if (this.sourceHandler_.dispose) {
          this.sourceHandler_.dispose();
        }
        this.sourceHandler_ = null;
      }
    };
  };
  Component.registerComponent("Tech", Tech);
  Tech.registerTech("Tech", Tech);
  Tech.defaultTechOrder_ = [];
  var middlewares = {};
  var middlewareInstances = {};
  var TERMINATOR = {};
  function use(type3, middleware) {
    middlewares[type3] = middlewares[type3] || [];
    middlewares[type3].push(middleware);
  }
  function setSource(player, src, next) {
    player.setTimeout(function() {
      return setSourceHelper(src, middlewares[src.type], next, player);
    }, 1);
  }
  function setTech(middleware, tech) {
    middleware.forEach(function(mw) {
      return mw.setTech && mw.setTech(tech);
    });
  }
  function get(middleware, tech, method) {
    return middleware.reduceRight(middlewareIterator(method), tech[method]());
  }
  function set(middleware, tech, method, arg) {
    return tech[method](middleware.reduce(middlewareIterator(method), arg));
  }
  function mediate(middleware, tech, method, arg) {
    if (arg === void 0) {
      arg = null;
    }
    var callMethod = "call" + toTitleCase(method);
    var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);
    var terminated = middlewareValue === TERMINATOR;
    var returnValue = terminated ? null : tech[method](middlewareValue);
    executeRight(middleware, method, returnValue, terminated);
    return returnValue;
  }
  var allowedGetters = {
    buffered: 1,
    currentTime: 1,
    duration: 1,
    muted: 1,
    played: 1,
    paused: 1,
    seekable: 1,
    volume: 1
  };
  var allowedSetters = {
    setCurrentTime: 1,
    setMuted: 1,
    setVolume: 1
  };
  var allowedMediators = {
    play: 1,
    pause: 1
  };
  function middlewareIterator(method) {
    return function(value, mw) {
      if (value === TERMINATOR) {
        return TERMINATOR;
      }
      if (mw[method]) {
        return mw[method](value);
      }
      return value;
    };
  }
  function executeRight(mws, method, value, terminated) {
    for (var i = mws.length - 1; i >= 0; i--) {
      var mw = mws[i];
      if (mw[method]) {
        mw[method](terminated, value);
      }
    }
  }
  function clearCacheForPlayer(player) {
    middlewareInstances[player.id()] = null;
  }
  function getOrCreateFactory(player, mwFactory) {
    var mws = middlewareInstances[player.id()];
    var mw = null;
    if (mws === void 0 || mws === null) {
      mw = mwFactory(player);
      middlewareInstances[player.id()] = [[mwFactory, mw]];
      return mw;
    }
    for (var i = 0; i < mws.length; i++) {
      var _mws$i = mws[i], mwf = _mws$i[0], mwi = _mws$i[1];
      if (mwf !== mwFactory) {
        continue;
      }
      mw = mwi;
    }
    if (mw === null) {
      mw = mwFactory(player);
      mws.push([mwFactory, mw]);
    }
    return mw;
  }
  function setSourceHelper(src, middleware, next, player, acc, lastRun) {
    if (src === void 0) {
      src = {};
    }
    if (middleware === void 0) {
      middleware = [];
    }
    if (acc === void 0) {
      acc = [];
    }
    if (lastRun === void 0) {
      lastRun = false;
    }
    var _middleware = middleware, mwFactory = _middleware[0], mwrest = _middleware.slice(1);
    if (typeof mwFactory === "string") {
      setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);
    } else if (mwFactory) {
      var mw = getOrCreateFactory(player, mwFactory);
      if (!mw.setSource) {
        acc.push(mw);
        return setSourceHelper(src, mwrest, next, player, acc, lastRun);
      }
      mw.setSource(assign({}, src), function(err, _src) {
        if (err) {
          return setSourceHelper(src, mwrest, next, player, acc, lastRun);
        }
        acc.push(mw);
        setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
      });
    } else if (mwrest.length) {
      setSourceHelper(src, mwrest, next, player, acc, lastRun);
    } else if (lastRun) {
      next(src, acc);
    } else {
      setSourceHelper(src, middlewares["*"], next, player, acc, true);
    }
  }
  var MimetypesKind = {
    opus: "video/ogg",
    ogv: "video/ogg",
    mp4: "video/mp4",
    mov: "video/mp4",
    m4v: "video/mp4",
    mkv: "video/x-matroska",
    m4a: "audio/mp4",
    mp3: "audio/mpeg",
    aac: "audio/aac",
    caf: "audio/x-caf",
    flac: "audio/flac",
    oga: "audio/ogg",
    wav: "audio/wav",
    m3u8: "application/x-mpegURL",
    jpg: "image/jpeg",
    jpeg: "image/jpeg",
    gif: "image/gif",
    png: "image/png",
    svg: "image/svg+xml",
    webp: "image/webp"
  };
  var getMimetype = function getMimetype2(src) {
    if (src === void 0) {
      src = "";
    }
    var ext = getFileExtension(src);
    var mimetype = MimetypesKind[ext.toLowerCase()];
    return mimetype || "";
  };
  var findMimetype = function findMimetype2(player, src) {
    if (!src) {
      return "";
    }
    if (player.cache_.source.src === src && player.cache_.source.type) {
      return player.cache_.source.type;
    }
    var matchingSources = player.cache_.sources.filter(function(s2) {
      return s2.src === src;
    });
    if (matchingSources.length) {
      return matchingSources[0].type;
    }
    var sources = player.$$("source");
    for (var i = 0; i < sources.length; i++) {
      var s = sources[i];
      if (s.type && s.src && s.src === src) {
        return s.type;
      }
    }
    return getMimetype(src);
  };
  var filterSource = function filterSource2(src) {
    if (Array.isArray(src)) {
      var newsrc = [];
      src.forEach(function(srcobj) {
        srcobj = filterSource2(srcobj);
        if (Array.isArray(srcobj)) {
          newsrc = newsrc.concat(srcobj);
        } else if (isObject3(srcobj)) {
          newsrc.push(srcobj);
        }
      });
      src = newsrc;
    } else if (typeof src === "string" && src.trim()) {
      src = [fixSource({
        src
      })];
    } else if (isObject3(src) && typeof src.src === "string" && src.src && src.src.trim()) {
      src = [fixSource(src)];
    } else {
      src = [];
    }
    return src;
  };
  function fixSource(src) {
    if (!src.type) {
      var mimetype = getMimetype(src.src);
      if (mimetype) {
        src.type = mimetype;
      }
    }
    return src;
  }
  var MediaLoader = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(MediaLoader2, _Component);
    function MediaLoader2(player, options, ready) {
      var _this;
      var options_ = mergeOptions({
        createEl: false
      }, options);
      _this = _Component.call(this, player, options_, ready) || this;
      if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
        for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
          var techName = toTitleCase(j[i]);
          var tech = Tech.getTech(techName);
          if (!techName) {
            tech = Component.getComponent(techName);
          }
          if (tech && tech.isSupported()) {
            player.loadTech_(techName);
            break;
          }
        }
      } else {
        player.src(options.playerOptions.sources);
      }
      return _this;
    }
    return MediaLoader2;
  }(Component);
  Component.registerComponent("MediaLoader", MediaLoader);
  var ClickableComponent = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(ClickableComponent2, _Component);
    function ClickableComponent2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.emitTapEvents();
      _this.enable();
      return _this;
    }
    var _proto = ClickableComponent2.prototype;
    _proto.createEl = function createEl2(tag, props, attributes) {
      if (tag === void 0) {
        tag = "div";
      }
      if (props === void 0) {
        props = {};
      }
      if (attributes === void 0) {
        attributes = {};
      }
      props = assign({
        innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
        className: this.buildCSSClass(),
        tabIndex: 0
      }, props);
      if (tag === "button") {
        log.error("Creating a ClickableComponent with an HTML element of " + tag + " is not supported; use a Button instead.");
      }
      attributes = assign({
        role: "button"
      }, attributes);
      this.tabIndex_ = props.tabIndex;
      var el = _Component.prototype.createEl.call(this, tag, props, attributes);
      this.createControlTextEl(el);
      return el;
    };
    _proto.dispose = function dispose3() {
      this.controlTextEl_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.createControlTextEl = function createControlTextEl(el) {
      this.controlTextEl_ = createEl("span", {
        className: "vjs-control-text"
      }, {
        "aria-live": "polite"
      });
      if (el) {
        el.appendChild(this.controlTextEl_);
      }
      this.controlText(this.controlText_, el);
      return this.controlTextEl_;
    };
    _proto.controlText = function controlText(text, el) {
      if (el === void 0) {
        el = this.el();
      }
      if (text === void 0) {
        return this.controlText_ || "Need Text";
      }
      var localizedText = this.localize(text);
      this.controlText_ = text;
      textContent(this.controlTextEl_, localizedText);
      if (!this.nonIconControl) {
        el.setAttribute("title", localizedText);
      }
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-control vjs-button " + _Component.prototype.buildCSSClass.call(this);
    };
    _proto.enable = function enable() {
      if (!this.enabled_) {
        this.enabled_ = true;
        this.removeClass("vjs-disabled");
        this.el_.setAttribute("aria-disabled", "false");
        if (typeof this.tabIndex_ !== "undefined") {
          this.el_.setAttribute("tabIndex", this.tabIndex_);
        }
        this.on(["tap", "click"], this.handleClick);
        this.on("keydown", this.handleKeyDown);
      }
    };
    _proto.disable = function disable() {
      this.enabled_ = false;
      this.addClass("vjs-disabled");
      this.el_.setAttribute("aria-disabled", "true");
      if (typeof this.tabIndex_ !== "undefined") {
        this.el_.removeAttribute("tabIndex");
      }
      this.off("mouseover", this.handleMouseOver);
      this.off("mouseout", this.handleMouseOut);
      this.off(["tap", "click"], this.handleClick);
      this.off("keydown", this.handleKeyDown);
    };
    _proto.handleLanguagechange = function handleLanguagechange() {
      this.controlText(this.controlText_);
    };
    _proto.handleClick = function handleClick(event) {
      if (this.options_.clickHandler) {
        this.options_.clickHandler.call(this, arguments);
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Space") || import_keycode.default.isEventKey(event, "Enter")) {
        event.preventDefault();
        event.stopPropagation();
        this.trigger("click");
      } else {
        _Component.prototype.handleKeyDown.call(this, event);
      }
    };
    return ClickableComponent2;
  }(Component);
  Component.registerComponent("ClickableComponent", ClickableComponent);
  var PosterImage = /* @__PURE__ */ function(_ClickableComponent) {
    import_inheritsLoose2.default(PosterImage2, _ClickableComponent);
    function PosterImage2(player, options) {
      var _this;
      _this = _ClickableComponent.call(this, player, options) || this;
      _this.update();
      player.on("posterchange", bind(import_assertThisInitialized2.default(_this), _this.update));
      return _this;
    }
    var _proto = PosterImage2.prototype;
    _proto.dispose = function dispose3() {
      this.player().off("posterchange", this.update);
      _ClickableComponent.prototype.dispose.call(this);
    };
    _proto.createEl = function createEl$1() {
      var el = createEl("div", {
        className: "vjs-poster",
        tabIndex: -1
      });
      return el;
    };
    _proto.update = function update(event) {
      var url = this.player().poster();
      this.setSrc(url);
      if (url) {
        this.show();
      } else {
        this.hide();
      }
    };
    _proto.setSrc = function setSrc(url) {
      var backgroundImage = "";
      if (url) {
        backgroundImage = 'url("' + url + '")';
      }
      this.el_.style.backgroundImage = backgroundImage;
    };
    _proto.handleClick = function handleClick(event) {
      if (!this.player_.controls()) {
        return;
      }
      var sourceIsEncrypted = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
      if (this.player_.tech(true) && !((IE_VERSION || IS_EDGE) && sourceIsEncrypted)) {
        this.player_.tech(true).focus();
      }
      if (this.player_.paused()) {
        silencePromise(this.player_.play());
      } else {
        this.player_.pause();
      }
    };
    return PosterImage2;
  }(ClickableComponent);
  Component.registerComponent("PosterImage", PosterImage);
  var darkGray = "#222";
  var lightGray = "#ccc";
  var fontMap = {
    monospace: "monospace",
    sansSerif: "sans-serif",
    serif: "serif",
    monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
    monospaceSerif: '"Courier New", monospace',
    proportionalSansSerif: "sans-serif",
    proportionalSerif: "serif",
    casual: '"Comic Sans MS", Impact, fantasy',
    script: '"Monotype Corsiva", cursive',
    smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
  };
  function constructColor(color, opacity) {
    var hex;
    if (color.length === 4) {
      hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
    } else if (color.length === 7) {
      hex = color.slice(1);
    } else {
      throw new Error("Invalid color code provided, " + color + "; must be formatted as e.g. #f0e or #f604e2.");
    }
    return "rgba(" + parseInt(hex.slice(0, 2), 16) + "," + parseInt(hex.slice(2, 4), 16) + "," + parseInt(hex.slice(4, 6), 16) + "," + opacity + ")";
  }
  function tryUpdateStyle(el, style, rule) {
    try {
      el.style[style] = rule;
    } catch (e) {
      return;
    }
  }
  var TextTrackDisplay = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(TextTrackDisplay2, _Component);
    function TextTrackDisplay2(player, options, ready) {
      var _this;
      _this = _Component.call(this, player, options, ready) || this;
      var updateDisplayHandler = bind(import_assertThisInitialized2.default(_this), _this.updateDisplay);
      player.on("loadstart", bind(import_assertThisInitialized2.default(_this), _this.toggleDisplay));
      player.on("texttrackchange", updateDisplayHandler);
      player.on("loadedmetadata", bind(import_assertThisInitialized2.default(_this), _this.preselectTrack));
      player.ready(bind(import_assertThisInitialized2.default(_this), function() {
        if (player.tech_ && player.tech_.featuresNativeTextTracks) {
          this.hide();
          return;
        }
        player.on("fullscreenchange", updateDisplayHandler);
        player.on("playerresize", updateDisplayHandler);
        import_window2.default.addEventListener("orientationchange", updateDisplayHandler);
        player.on("dispose", function() {
          return import_window2.default.removeEventListener("orientationchange", updateDisplayHandler);
        });
        var tracks = this.options_.playerOptions.tracks || [];
        for (var i = 0; i < tracks.length; i++) {
          this.player_.addRemoteTextTrack(tracks[i], true);
        }
        this.preselectTrack();
      }));
      return _this;
    }
    var _proto = TextTrackDisplay2.prototype;
    _proto.preselectTrack = function preselectTrack() {
      var modes = {
        captions: 1,
        subtitles: 1
      };
      var trackList = this.player_.textTracks();
      var userPref = this.player_.cache_.selectedLanguage;
      var firstDesc;
      var firstCaptions;
      var preferredTrack;
      for (var i = 0; i < trackList.length; i++) {
        var track = trackList[i];
        if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {
          if (track.kind === userPref.kind) {
            preferredTrack = track;
          } else if (!preferredTrack) {
            preferredTrack = track;
          }
        } else if (userPref && !userPref.enabled) {
          preferredTrack = null;
          firstDesc = null;
          firstCaptions = null;
        } else if (track["default"]) {
          if (track.kind === "descriptions" && !firstDesc) {
            firstDesc = track;
          } else if (track.kind in modes && !firstCaptions) {
            firstCaptions = track;
          }
        }
      }
      if (preferredTrack) {
        preferredTrack.mode = "showing";
      } else if (firstCaptions) {
        firstCaptions.mode = "showing";
      } else if (firstDesc) {
        firstDesc.mode = "showing";
      }
    };
    _proto.toggleDisplay = function toggleDisplay() {
      if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
        this.hide();
      } else {
        this.show();
      }
    };
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-text-track-display"
      }, {
        "aria-live": "off",
        "aria-atomic": "true"
      });
    };
    _proto.clearDisplay = function clearDisplay() {
      if (typeof import_window2.default.WebVTT === "function") {
        import_window2.default.WebVTT.processCues(import_window2.default, [], this.el_);
      }
    };
    _proto.updateDisplay = function updateDisplay() {
      var tracks = this.player_.textTracks();
      var allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;
      this.clearDisplay();
      if (allowMultipleShowingTracks) {
        var showingTracks = [];
        for (var _i = 0; _i < tracks.length; ++_i) {
          var track = tracks[_i];
          if (track.mode !== "showing") {
            continue;
          }
          showingTracks.push(track);
        }
        this.updateForTrack(showingTracks);
        return;
      }
      var descriptionsTrack = null;
      var captionsSubtitlesTrack = null;
      var i = tracks.length;
      while (i--) {
        var _track = tracks[i];
        if (_track.mode === "showing") {
          if (_track.kind === "descriptions") {
            descriptionsTrack = _track;
          } else {
            captionsSubtitlesTrack = _track;
          }
        }
      }
      if (captionsSubtitlesTrack) {
        if (this.getAttribute("aria-live") !== "off") {
          this.setAttribute("aria-live", "off");
        }
        this.updateForTrack(captionsSubtitlesTrack);
      } else if (descriptionsTrack) {
        if (this.getAttribute("aria-live") !== "assertive") {
          this.setAttribute("aria-live", "assertive");
        }
        this.updateForTrack(descriptionsTrack);
      }
    };
    _proto.updateDisplayState = function updateDisplayState(track) {
      var overrides = this.player_.textTrackSettings.getValues();
      var cues = track.activeCues;
      var i = cues.length;
      while (i--) {
        var cue = cues[i];
        if (!cue) {
          continue;
        }
        var cueDiv = cue.displayState;
        if (overrides.color) {
          cueDiv.firstChild.style.color = overrides.color;
        }
        if (overrides.textOpacity) {
          tryUpdateStyle(cueDiv.firstChild, "color", constructColor(overrides.color || "#fff", overrides.textOpacity));
        }
        if (overrides.backgroundColor) {
          cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
        }
        if (overrides.backgroundOpacity) {
          tryUpdateStyle(cueDiv.firstChild, "backgroundColor", constructColor(overrides.backgroundColor || "#000", overrides.backgroundOpacity));
        }
        if (overrides.windowColor) {
          if (overrides.windowOpacity) {
            tryUpdateStyle(cueDiv, "backgroundColor", constructColor(overrides.windowColor, overrides.windowOpacity));
          } else {
            cueDiv.style.backgroundColor = overrides.windowColor;
          }
        }
        if (overrides.edgeStyle) {
          if (overrides.edgeStyle === "dropshadow") {
            cueDiv.firstChild.style.textShadow = "2px 2px 3px " + darkGray + ", 2px 2px 4px " + darkGray + ", 2px 2px 5px " + darkGray;
          } else if (overrides.edgeStyle === "raised") {
            cueDiv.firstChild.style.textShadow = "1px 1px " + darkGray + ", 2px 2px " + darkGray + ", 3px 3px " + darkGray;
          } else if (overrides.edgeStyle === "depressed") {
            cueDiv.firstChild.style.textShadow = "1px 1px " + lightGray + ", 0 1px " + lightGray + ", -1px -1px " + darkGray + ", 0 -1px " + darkGray;
          } else if (overrides.edgeStyle === "uniform") {
            cueDiv.firstChild.style.textShadow = "0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray + ", 0 0 4px " + darkGray;
          }
        }
        if (overrides.fontPercent && overrides.fontPercent !== 1) {
          var fontSize = import_window2.default.parseFloat(cueDiv.style.fontSize);
          cueDiv.style.fontSize = fontSize * overrides.fontPercent + "px";
          cueDiv.style.height = "auto";
          cueDiv.style.top = "auto";
        }
        if (overrides.fontFamily && overrides.fontFamily !== "default") {
          if (overrides.fontFamily === "small-caps") {
            cueDiv.firstChild.style.fontVariant = "small-caps";
          } else {
            cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
          }
        }
      }
    };
    _proto.updateForTrack = function updateForTrack(tracks) {
      if (!Array.isArray(tracks)) {
        tracks = [tracks];
      }
      if (typeof import_window2.default.WebVTT !== "function" || tracks.every(function(track2) {
        return !track2.activeCues;
      })) {
        return;
      }
      var cues = [];
      for (var i = 0; i < tracks.length; ++i) {
        var track = tracks[i];
        for (var j = 0; j < track.activeCues.length; ++j) {
          cues.push(track.activeCues[j]);
        }
      }
      import_window2.default.WebVTT.processCues(import_window2.default, cues, this.el_);
      for (var _i2 = 0; _i2 < tracks.length; ++_i2) {
        var _track2 = tracks[_i2];
        for (var _j = 0; _j < _track2.activeCues.length; ++_j) {
          var cueEl = _track2.activeCues[_j].displayState;
          addClass(cueEl, "vjs-text-track-cue");
          addClass(cueEl, "vjs-text-track-cue-" + (_track2.language ? _track2.language : _i2));
        }
        if (this.player_.textTrackSettings) {
          this.updateDisplayState(_track2);
        }
      }
    };
    return TextTrackDisplay2;
  }(Component);
  Component.registerComponent("TextTrackDisplay", TextTrackDisplay);
  var LoadingSpinner = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(LoadingSpinner2, _Component);
    function LoadingSpinner2() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = LoadingSpinner2.prototype;
    _proto.createEl = function createEl$1() {
      var isAudio = this.player_.isAudio();
      var playerType = this.localize(isAudio ? "Audio Player" : "Video Player");
      var controlText = createEl("span", {
        className: "vjs-control-text",
        innerHTML: this.localize("{1} is loading.", [playerType])
      });
      var el = _Component.prototype.createEl.call(this, "div", {
        className: "vjs-loading-spinner",
        dir: "ltr"
      });
      el.appendChild(controlText);
      return el;
    };
    return LoadingSpinner2;
  }(Component);
  Component.registerComponent("LoadingSpinner", LoadingSpinner);
  var Button = /* @__PURE__ */ function(_ClickableComponent) {
    import_inheritsLoose2.default(Button2, _ClickableComponent);
    function Button2() {
      return _ClickableComponent.apply(this, arguments) || this;
    }
    var _proto = Button2.prototype;
    _proto.createEl = function createEl2(tag, props, attributes) {
      if (props === void 0) {
        props = {};
      }
      if (attributes === void 0) {
        attributes = {};
      }
      tag = "button";
      props = assign({
        innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
        className: this.buildCSSClass()
      }, props);
      attributes = assign({
        type: "button"
      }, attributes);
      var el = Component.prototype.createEl.call(this, tag, props, attributes);
      this.createControlTextEl(el);
      return el;
    };
    _proto.addChild = function addChild(child, options) {
      if (options === void 0) {
        options = {};
      }
      var className = this.constructor.name;
      log.warn("Adding an actionable (user controllable) child to a Button (" + className + ") is not supported; use a ClickableComponent instead.");
      return Component.prototype.addChild.call(this, child, options);
    };
    _proto.enable = function enable() {
      _ClickableComponent.prototype.enable.call(this);
      this.el_.removeAttribute("disabled");
    };
    _proto.disable = function disable() {
      _ClickableComponent.prototype.disable.call(this);
      this.el_.setAttribute("disabled", "disabled");
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Space") || import_keycode.default.isEventKey(event, "Enter")) {
        event.stopPropagation();
        return;
      }
      _ClickableComponent.prototype.handleKeyDown.call(this, event);
    };
    return Button2;
  }(ClickableComponent);
  Component.registerComponent("Button", Button);
  var BigPlayButton = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(BigPlayButton2, _Button);
    function BigPlayButton2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      _this.mouseused_ = false;
      _this.on("mousedown", _this.handleMouseDown);
      return _this;
    }
    var _proto = BigPlayButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-big-play-button";
    };
    _proto.handleClick = function handleClick(event) {
      var playPromise = this.player_.play();
      if (this.mouseused_ && event.clientX && event.clientY) {
        var sourceIsEncrypted = this.player_.usingPlugin("eme") && this.player_.eme.sessions && this.player_.eme.sessions.length > 0;
        silencePromise(playPromise);
        if (this.player_.tech(true) && !((IE_VERSION || IS_EDGE) && sourceIsEncrypted)) {
          this.player_.tech(true).focus();
        }
        return;
      }
      var cb = this.player_.getChild("controlBar");
      var playToggle = cb && cb.getChild("playToggle");
      if (!playToggle) {
        this.player_.tech(true).focus();
        return;
      }
      var playFocus = function playFocus2() {
        return playToggle.focus();
      };
      if (isPromise(playPromise)) {
        playPromise.then(playFocus, function() {
        });
      } else {
        this.setTimeout(playFocus, 1);
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      this.mouseused_ = false;
      _Button.prototype.handleKeyDown.call(this, event);
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      this.mouseused_ = true;
    };
    return BigPlayButton2;
  }(Button);
  BigPlayButton.prototype.controlText_ = "Play Video";
  Component.registerComponent("BigPlayButton", BigPlayButton);
  var CloseButton = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(CloseButton2, _Button);
    function CloseButton2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      _this.controlText(options && options.controlText || _this.localize("Close"));
      return _this;
    }
    var _proto = CloseButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-close-button " + _Button.prototype.buildCSSClass.call(this);
    };
    _proto.handleClick = function handleClick(event) {
      this.trigger({
        type: "close",
        bubbles: false
      });
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Esc")) {
        event.preventDefault();
        event.stopPropagation();
        this.trigger("click");
      } else {
        _Button.prototype.handleKeyDown.call(this, event);
      }
    };
    return CloseButton2;
  }(Button);
  Component.registerComponent("CloseButton", CloseButton);
  var PlayToggle = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(PlayToggle2, _Button);
    function PlayToggle2(player, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _Button.call(this, player, options) || this;
      options.replay = options.replay === void 0 || options.replay;
      _this.on(player, "play", _this.handlePlay);
      _this.on(player, "pause", _this.handlePause);
      if (options.replay) {
        _this.on(player, "ended", _this.handleEnded);
      }
      return _this;
    }
    var _proto = PlayToggle2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-play-control " + _Button.prototype.buildCSSClass.call(this);
    };
    _proto.handleClick = function handleClick(event) {
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    };
    _proto.handleSeeked = function handleSeeked(event) {
      this.removeClass("vjs-ended");
      if (this.player_.paused()) {
        this.handlePause(event);
      } else {
        this.handlePlay(event);
      }
    };
    _proto.handlePlay = function handlePlay(event) {
      this.removeClass("vjs-ended");
      this.removeClass("vjs-paused");
      this.addClass("vjs-playing");
      this.controlText("Pause");
    };
    _proto.handlePause = function handlePause(event) {
      this.removeClass("vjs-playing");
      this.addClass("vjs-paused");
      this.controlText("Play");
    };
    _proto.handleEnded = function handleEnded(event) {
      this.removeClass("vjs-playing");
      this.addClass("vjs-ended");
      this.controlText("Replay");
      this.one(this.player_, "seeked", this.handleSeeked);
    };
    return PlayToggle2;
  }(Button);
  PlayToggle.prototype.controlText_ = "Play";
  Component.registerComponent("PlayToggle", PlayToggle);
  var defaultImplementation = function defaultImplementation2(seconds, guide) {
    seconds = seconds < 0 ? 0 : seconds;
    var s = Math.floor(seconds % 60);
    var m = Math.floor(seconds / 60 % 60);
    var h = Math.floor(seconds / 3600);
    var gm = Math.floor(guide / 60 % 60);
    var gh = Math.floor(guide / 3600);
    if (isNaN(seconds) || seconds === Infinity) {
      h = m = s = "-";
    }
    h = h > 0 || gh > 0 ? h + ":" : "";
    m = ((h || gm >= 10) && m < 10 ? "0" + m : m) + ":";
    s = s < 10 ? "0" + s : s;
    return h + m + s;
  };
  var implementation = defaultImplementation;
  function setFormatTime(customImplementation) {
    implementation = customImplementation;
  }
  function resetFormatTime() {
    implementation = defaultImplementation;
  }
  function formatTime(seconds, guide) {
    if (guide === void 0) {
      guide = seconds;
    }
    return implementation(seconds, guide);
  }
  var TimeDisplay = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(TimeDisplay2, _Component);
    function TimeDisplay2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.on(player, ["timeupdate", "ended"], _this.updateContent);
      _this.updateTextNode_();
      return _this;
    }
    var _proto = TimeDisplay2.prototype;
    _proto.createEl = function createEl$1() {
      var className = this.buildCSSClass();
      var el = _Component.prototype.createEl.call(this, "div", {
        className: className + " vjs-time-control vjs-control",
        innerHTML: '<span class="vjs-control-text" role="presentation">' + this.localize(this.labelText_) + "\xA0</span>"
      });
      this.contentEl_ = createEl("span", {
        className: className + "-display"
      }, {
        "aria-live": "off",
        role: "presentation"
      });
      el.appendChild(this.contentEl_);
      return el;
    };
    _proto.dispose = function dispose3() {
      this.contentEl_ = null;
      this.textNode_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.updateTextNode_ = function updateTextNode_(time) {
      var _this2 = this;
      if (time === void 0) {
        time = 0;
      }
      time = formatTime(time);
      if (this.formattedTime_ === time) {
        return;
      }
      this.formattedTime_ = time;
      this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_", function() {
        if (!_this2.contentEl_) {
          return;
        }
        var oldNode = _this2.textNode_;
        if (oldNode && _this2.contentEl_.firstChild !== oldNode) {
          oldNode = null;
          log.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.");
        }
        _this2.textNode_ = import_document.default.createTextNode(_this2.formattedTime_);
        if (!_this2.textNode_) {
          return;
        }
        if (oldNode) {
          _this2.contentEl_.replaceChild(_this2.textNode_, oldNode);
        } else {
          _this2.contentEl_.appendChild(_this2.textNode_);
        }
      });
    };
    _proto.updateContent = function updateContent(event) {
    };
    return TimeDisplay2;
  }(Component);
  TimeDisplay.prototype.labelText_ = "Time";
  TimeDisplay.prototype.controlText_ = "Time";
  Component.registerComponent("TimeDisplay", TimeDisplay);
  var CurrentTimeDisplay = /* @__PURE__ */ function(_TimeDisplay) {
    import_inheritsLoose2.default(CurrentTimeDisplay2, _TimeDisplay);
    function CurrentTimeDisplay2() {
      return _TimeDisplay.apply(this, arguments) || this;
    }
    var _proto = CurrentTimeDisplay2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-current-time";
    };
    _proto.updateContent = function updateContent(event) {
      var time;
      if (this.player_.ended()) {
        time = this.player_.duration();
      } else {
        time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      }
      this.updateTextNode_(time);
    };
    return CurrentTimeDisplay2;
  }(TimeDisplay);
  CurrentTimeDisplay.prototype.labelText_ = "Current Time";
  CurrentTimeDisplay.prototype.controlText_ = "Current Time";
  Component.registerComponent("CurrentTimeDisplay", CurrentTimeDisplay);
  var DurationDisplay = /* @__PURE__ */ function(_TimeDisplay) {
    import_inheritsLoose2.default(DurationDisplay2, _TimeDisplay);
    function DurationDisplay2(player, options) {
      var _this;
      _this = _TimeDisplay.call(this, player, options) || this;
      _this.on(player, "durationchange", _this.updateContent);
      _this.on(player, "loadstart", _this.updateContent);
      _this.on(player, "loadedmetadata", _this.updateContent);
      return _this;
    }
    var _proto = DurationDisplay2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-duration";
    };
    _proto.updateContent = function updateContent(event) {
      var duration5 = this.player_.duration();
      this.updateTextNode_(duration5);
    };
    return DurationDisplay2;
  }(TimeDisplay);
  DurationDisplay.prototype.labelText_ = "Duration";
  DurationDisplay.prototype.controlText_ = "Duration";
  Component.registerComponent("DurationDisplay", DurationDisplay);
  var TimeDivider = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(TimeDivider2, _Component);
    function TimeDivider2() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = TimeDivider2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-time-control vjs-time-divider",
        innerHTML: "<div><span>/</span></div>"
      }, {
        "aria-hidden": true
      });
    };
    return TimeDivider2;
  }(Component);
  Component.registerComponent("TimeDivider", TimeDivider);
  var RemainingTimeDisplay = /* @__PURE__ */ function(_TimeDisplay) {
    import_inheritsLoose2.default(RemainingTimeDisplay2, _TimeDisplay);
    function RemainingTimeDisplay2(player, options) {
      var _this;
      _this = _TimeDisplay.call(this, player, options) || this;
      _this.on(player, "durationchange", _this.updateContent);
      return _this;
    }
    var _proto = RemainingTimeDisplay2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-remaining-time";
    };
    _proto.createEl = function createEl$1() {
      var el = _TimeDisplay.prototype.createEl.call(this);
      el.insertBefore(createEl("span", {}, {
        "aria-hidden": true
      }, "-"), this.contentEl_);
      return el;
    };
    _proto.updateContent = function updateContent(event) {
      if (typeof this.player_.duration() !== "number") {
        return;
      }
      var time;
      if (this.player_.ended()) {
        time = 0;
      } else if (this.player_.remainingTimeDisplay) {
        time = this.player_.remainingTimeDisplay();
      } else {
        time = this.player_.remainingTime();
      }
      this.updateTextNode_(time);
    };
    return RemainingTimeDisplay2;
  }(TimeDisplay);
  RemainingTimeDisplay.prototype.labelText_ = "Remaining Time";
  RemainingTimeDisplay.prototype.controlText_ = "Remaining Time";
  Component.registerComponent("RemainingTimeDisplay", RemainingTimeDisplay);
  var LiveDisplay = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(LiveDisplay2, _Component);
    function LiveDisplay2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.updateShowing();
      _this.on(_this.player(), "durationchange", _this.updateShowing);
      return _this;
    }
    var _proto = LiveDisplay2.prototype;
    _proto.createEl = function createEl$1() {
      var el = _Component.prototype.createEl.call(this, "div", {
        className: "vjs-live-control vjs-control"
      });
      this.contentEl_ = createEl("div", {
        className: "vjs-live-display",
        innerHTML: '<span class="vjs-control-text">' + this.localize("Stream Type") + "\xA0</span>" + this.localize("LIVE")
      }, {
        "aria-live": "off"
      });
      el.appendChild(this.contentEl_);
      return el;
    };
    _proto.dispose = function dispose3() {
      this.contentEl_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.updateShowing = function updateShowing(event) {
      if (this.player().duration() === Infinity) {
        this.show();
      } else {
        this.hide();
      }
    };
    return LiveDisplay2;
  }(Component);
  Component.registerComponent("LiveDisplay", LiveDisplay);
  var SeekToLive = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(SeekToLive2, _Button);
    function SeekToLive2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      _this.updateLiveEdgeStatus();
      if (_this.player_.liveTracker) {
        _this.on(_this.player_.liveTracker, "liveedgechange", _this.updateLiveEdgeStatus);
      }
      return _this;
    }
    var _proto = SeekToLive2.prototype;
    _proto.createEl = function createEl$1() {
      var el = _Button.prototype.createEl.call(this, "button", {
        className: "vjs-seek-to-live-control vjs-control"
      });
      this.textEl_ = createEl("span", {
        className: "vjs-seek-to-live-text",
        innerHTML: this.localize("LIVE")
      }, {
        "aria-hidden": "true"
      });
      el.appendChild(this.textEl_);
      return el;
    };
    _proto.updateLiveEdgeStatus = function updateLiveEdgeStatus() {
      if (!this.player_.liveTracker || this.player_.liveTracker.atLiveEdge()) {
        this.setAttribute("aria-disabled", true);
        this.addClass("vjs-at-live-edge");
        this.controlText("Seek to live, currently playing live");
      } else {
        this.setAttribute("aria-disabled", false);
        this.removeClass("vjs-at-live-edge");
        this.controlText("Seek to live, currently behind live");
      }
    };
    _proto.handleClick = function handleClick() {
      this.player_.liveTracker.seekToLiveEdge();
    };
    _proto.dispose = function dispose3() {
      if (this.player_.liveTracker) {
        this.off(this.player_.liveTracker, "liveedgechange", this.updateLiveEdgeStatus);
      }
      this.textEl_ = null;
      _Button.prototype.dispose.call(this);
    };
    return SeekToLive2;
  }(Button);
  SeekToLive.prototype.controlText_ = "Seek to live, currently playing live";
  Component.registerComponent("SeekToLive", SeekToLive);
  var clamp = function clamp2(number, min, max) {
    number = Number(number);
    return Math.min(max, Math.max(min, isNaN(number) ? min : number));
  };
  var Slider = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(Slider2, _Component);
    function Slider2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.bar = _this.getChild(_this.options_.barName);
      _this.vertical(!!_this.options_.vertical);
      _this.enable();
      return _this;
    }
    var _proto = Slider2.prototype;
    _proto.enabled = function enabled() {
      return this.enabled_;
    };
    _proto.enable = function enable() {
      if (this.enabled()) {
        return;
      }
      this.on("mousedown", this.handleMouseDown);
      this.on("touchstart", this.handleMouseDown);
      this.on("keydown", this.handleKeyDown);
      this.on("click", this.handleClick);
      this.on(this.player_, "controlsvisible", this.update);
      if (this.playerEvent) {
        this.on(this.player_, this.playerEvent, this.update);
      }
      this.removeClass("disabled");
      this.setAttribute("tabindex", 0);
      this.enabled_ = true;
    };
    _proto.disable = function disable() {
      if (!this.enabled()) {
        return;
      }
      var doc = this.bar.el_.ownerDocument;
      this.off("mousedown", this.handleMouseDown);
      this.off("touchstart", this.handleMouseDown);
      this.off("keydown", this.handleKeyDown);
      this.off("click", this.handleClick);
      this.off(this.player_, "controlsvisible", this.update);
      this.off(doc, "mousemove", this.handleMouseMove);
      this.off(doc, "mouseup", this.handleMouseUp);
      this.off(doc, "touchmove", this.handleMouseMove);
      this.off(doc, "touchend", this.handleMouseUp);
      this.removeAttribute("tabindex");
      this.addClass("disabled");
      if (this.playerEvent) {
        this.off(this.player_, this.playerEvent, this.update);
      }
      this.enabled_ = false;
    };
    _proto.createEl = function createEl2(type3, props, attributes) {
      if (props === void 0) {
        props = {};
      }
      if (attributes === void 0) {
        attributes = {};
      }
      props.className = props.className + " vjs-slider";
      props = assign({
        tabIndex: 0
      }, props);
      attributes = assign({
        role: "slider",
        "aria-valuenow": 0,
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        tabIndex: 0
      }, attributes);
      return _Component.prototype.createEl.call(this, type3, props, attributes);
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      var doc = this.bar.el_.ownerDocument;
      if (event.type === "mousedown") {
        event.preventDefault();
      }
      if (event.type === "touchstart" && !IS_CHROME) {
        event.preventDefault();
      }
      blockTextSelection();
      this.addClass("vjs-sliding");
      this.trigger("slideractive");
      this.on(doc, "mousemove", this.handleMouseMove);
      this.on(doc, "mouseup", this.handleMouseUp);
      this.on(doc, "touchmove", this.handleMouseMove);
      this.on(doc, "touchend", this.handleMouseUp);
      this.handleMouseMove(event);
    };
    _proto.handleMouseMove = function handleMouseMove(event) {
    };
    _proto.handleMouseUp = function handleMouseUp() {
      var doc = this.bar.el_.ownerDocument;
      unblockTextSelection();
      this.removeClass("vjs-sliding");
      this.trigger("sliderinactive");
      this.off(doc, "mousemove", this.handleMouseMove);
      this.off(doc, "mouseup", this.handleMouseUp);
      this.off(doc, "touchmove", this.handleMouseMove);
      this.off(doc, "touchend", this.handleMouseUp);
      this.update();
    };
    _proto.update = function update() {
      var _this2 = this;
      if (!this.el_ || !this.bar) {
        return;
      }
      var progress = this.getProgress();
      if (progress === this.progress_) {
        return progress;
      }
      this.progress_ = progress;
      this.requestNamedAnimationFrame("Slider#update", function() {
        var sizeKey = _this2.vertical() ? "height" : "width";
        _this2.bar.el().style[sizeKey] = (progress * 100).toFixed(2) + "%";
      });
      return progress;
    };
    _proto.getProgress = function getProgress() {
      return Number(clamp(this.getPercent(), 0, 1).toFixed(4));
    };
    _proto.calculateDistance = function calculateDistance(event) {
      var position = getPointerPosition(this.el_, event);
      if (this.vertical()) {
        return position.y;
      }
      return position.x;
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Left") || import_keycode.default.isEventKey(event, "Down")) {
        event.preventDefault();
        event.stopPropagation();
        this.stepBack();
      } else if (import_keycode.default.isEventKey(event, "Right") || import_keycode.default.isEventKey(event, "Up")) {
        event.preventDefault();
        event.stopPropagation();
        this.stepForward();
      } else {
        _Component.prototype.handleKeyDown.call(this, event);
      }
    };
    _proto.handleClick = function handleClick(event) {
      event.stopPropagation();
      event.preventDefault();
    };
    _proto.vertical = function vertical(bool) {
      if (bool === void 0) {
        return this.vertical_ || false;
      }
      this.vertical_ = !!bool;
      if (this.vertical_) {
        this.addClass("vjs-slider-vertical");
      } else {
        this.addClass("vjs-slider-horizontal");
      }
    };
    return Slider2;
  }(Component);
  Component.registerComponent("Slider", Slider);
  var percentify = function percentify2(time, end) {
    return clamp(time / end * 100, 0, 100).toFixed(2) + "%";
  };
  var LoadProgressBar = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(LoadProgressBar2, _Component);
    function LoadProgressBar2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.partEls_ = [];
      _this.on(player, "progress", _this.update);
      return _this;
    }
    var _proto = LoadProgressBar2.prototype;
    _proto.createEl = function createEl$1() {
      var el = _Component.prototype.createEl.call(this, "div", {
        className: "vjs-load-progress"
      });
      var wrapper = createEl("span", {
        className: "vjs-control-text"
      });
      var loadedText = createEl("span", {
        textContent: this.localize("Loaded")
      });
      var separator = import_document.default.createTextNode(": ");
      this.percentageEl_ = createEl("span", {
        className: "vjs-control-text-loaded-percentage",
        textContent: "0%"
      });
      el.appendChild(wrapper);
      wrapper.appendChild(loadedText);
      wrapper.appendChild(separator);
      wrapper.appendChild(this.percentageEl_);
      return el;
    };
    _proto.dispose = function dispose3() {
      this.partEls_ = null;
      this.percentageEl_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.update = function update(event) {
      var _this2 = this;
      this.requestNamedAnimationFrame("LoadProgressBar#update", function() {
        var liveTracker = _this2.player_.liveTracker;
        var buffered = _this2.player_.buffered();
        var duration5 = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : _this2.player_.duration();
        var bufferedEnd = _this2.player_.bufferedEnd();
        var children = _this2.partEls_;
        var percent = percentify(bufferedEnd, duration5);
        if (_this2.percent_ !== percent) {
          _this2.el_.style.width = percent;
          textContent(_this2.percentageEl_, percent);
          _this2.percent_ = percent;
        }
        for (var i = 0; i < buffered.length; i++) {
          var start2 = buffered.start(i);
          var end = buffered.end(i);
          var part = children[i];
          if (!part) {
            part = _this2.el_.appendChild(createEl());
            children[i] = part;
          }
          if (part.dataset.start === start2 && part.dataset.end === end) {
            continue;
          }
          part.dataset.start = start2;
          part.dataset.end = end;
          part.style.left = percentify(start2, bufferedEnd);
          part.style.width = percentify(end - start2, bufferedEnd);
        }
        for (var _i = children.length; _i > buffered.length; _i--) {
          _this2.el_.removeChild(children[_i - 1]);
        }
        children.length = buffered.length;
      });
    };
    return LoadProgressBar2;
  }(Component);
  Component.registerComponent("LoadProgressBar", LoadProgressBar);
  var TimeTooltip = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(TimeTooltip2, _Component);
    function TimeTooltip2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.update = throttle(bind(import_assertThisInitialized2.default(_this), _this.update), UPDATE_REFRESH_INTERVAL);
      return _this;
    }
    var _proto = TimeTooltip2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-time-tooltip"
      }, {
        "aria-hidden": "true"
      });
    };
    _proto.update = function update(seekBarRect, seekBarPoint, content) {
      var tooltipRect = findPosition(this.el_);
      var playerRect = getBoundingClientRect(this.player_.el());
      var seekBarPointPx = seekBarRect.width * seekBarPoint;
      if (!playerRect || !tooltipRect) {
        return;
      }
      var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;
      var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);
      var pullTooltipBy = tooltipRect.width / 2;
      if (spaceLeftOfPoint < pullTooltipBy) {
        pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
      } else if (spaceRightOfPoint < pullTooltipBy) {
        pullTooltipBy = spaceRightOfPoint;
      }
      if (pullTooltipBy < 0) {
        pullTooltipBy = 0;
      } else if (pullTooltipBy > tooltipRect.width) {
        pullTooltipBy = tooltipRect.width;
      }
      pullTooltipBy = Math.round(pullTooltipBy);
      this.el_.style.right = "-" + pullTooltipBy + "px";
      this.write(content);
    };
    _proto.write = function write(content) {
      textContent(this.el_, content);
    };
    _proto.updateTime = function updateTime(seekBarRect, seekBarPoint, time, cb) {
      var _this2 = this;
      this.requestNamedAnimationFrame("TimeTooltip#updateTime", function() {
        var content;
        var duration5 = _this2.player_.duration();
        if (_this2.player_.liveTracker && _this2.player_.liveTracker.isLive()) {
          var liveWindow = _this2.player_.liveTracker.liveWindow();
          var secondsBehind = liveWindow - seekBarPoint * liveWindow;
          content = (secondsBehind < 1 ? "" : "-") + formatTime(secondsBehind, liveWindow);
        } else {
          content = formatTime(time, duration5);
        }
        _this2.update(seekBarRect, seekBarPoint, content);
        if (cb) {
          cb();
        }
      });
    };
    return TimeTooltip2;
  }(Component);
  Component.registerComponent("TimeTooltip", TimeTooltip);
  var PlayProgressBar = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(PlayProgressBar2, _Component);
    function PlayProgressBar2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.update = throttle(bind(import_assertThisInitialized2.default(_this), _this.update), UPDATE_REFRESH_INTERVAL);
      return _this;
    }
    var _proto = PlayProgressBar2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-play-progress vjs-slider-bar"
      }, {
        "aria-hidden": "true"
      });
    };
    _proto.update = function update(seekBarRect, seekBarPoint) {
      var timeTooltip = this.getChild("timeTooltip");
      if (!timeTooltip) {
        return;
      }
      var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
      timeTooltip.updateTime(seekBarRect, seekBarPoint, time);
    };
    return PlayProgressBar2;
  }(Component);
  PlayProgressBar.prototype.options_ = {
    children: []
  };
  if (!IS_IOS && !IS_ANDROID) {
    PlayProgressBar.prototype.options_.children.push("timeTooltip");
  }
  Component.registerComponent("PlayProgressBar", PlayProgressBar);
  var MouseTimeDisplay = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(MouseTimeDisplay2, _Component);
    function MouseTimeDisplay2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.update = throttle(bind(import_assertThisInitialized2.default(_this), _this.update), UPDATE_REFRESH_INTERVAL);
      return _this;
    }
    var _proto = MouseTimeDisplay2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-mouse-display"
      });
    };
    _proto.update = function update(seekBarRect, seekBarPoint) {
      var _this2 = this;
      var time = seekBarPoint * this.player_.duration();
      this.getChild("timeTooltip").updateTime(seekBarRect, seekBarPoint, time, function() {
        _this2.el_.style.left = seekBarRect.width * seekBarPoint + "px";
      });
    };
    return MouseTimeDisplay2;
  }(Component);
  MouseTimeDisplay.prototype.options_ = {
    children: ["timeTooltip"]
  };
  Component.registerComponent("MouseTimeDisplay", MouseTimeDisplay);
  var STEP_SECONDS = 5;
  var PAGE_KEY_MULTIPLIER = 12;
  var SeekBar = /* @__PURE__ */ function(_Slider) {
    import_inheritsLoose2.default(SeekBar2, _Slider);
    function SeekBar2(player, options) {
      var _this;
      _this = _Slider.call(this, player, options) || this;
      _this.setEventHandlers_();
      return _this;
    }
    var _proto = SeekBar2.prototype;
    _proto.setEventHandlers_ = function setEventHandlers_() {
      this.update_ = bind(this, this.update);
      this.update = throttle(this.update_, UPDATE_REFRESH_INTERVAL);
      this.on(this.player_, ["ended", "durationchange", "timeupdate"], this.update);
      if (this.player_.liveTracker) {
        this.on(this.player_.liveTracker, "liveedgechange", this.update);
      }
      this.updateInterval = null;
      this.on(this.player_, ["playing"], this.enableInterval_);
      this.on(this.player_, ["ended", "pause", "waiting"], this.disableInterval_);
      if ("hidden" in import_document.default && "visibilityState" in import_document.default) {
        this.on(import_document.default, "visibilitychange", this.toggleVisibility_);
      }
    };
    _proto.toggleVisibility_ = function toggleVisibility_(e) {
      if (import_document.default.hidden) {
        this.disableInterval_(e);
      } else {
        this.enableInterval_();
        this.update();
      }
    };
    _proto.enableInterval_ = function enableInterval_() {
      if (this.updateInterval) {
        return;
      }
      this.updateInterval = this.setInterval(this.update, UPDATE_REFRESH_INTERVAL);
    };
    _proto.disableInterval_ = function disableInterval_(e) {
      if (this.player_.liveTracker && this.player_.liveTracker.isLive() && e && e.type !== "ended") {
        return;
      }
      if (!this.updateInterval) {
        return;
      }
      this.clearInterval(this.updateInterval);
      this.updateInterval = null;
    };
    _proto.createEl = function createEl2() {
      return _Slider.prototype.createEl.call(this, "div", {
        className: "vjs-progress-holder"
      }, {
        "aria-label": this.localize("Progress Bar")
      });
    };
    _proto.update = function update(event) {
      var _this2 = this;
      var percent = _Slider.prototype.update.call(this);
      this.requestNamedAnimationFrame("SeekBar#update", function() {
        var currentTime = _this2.player_.ended() ? _this2.player_.duration() : _this2.getCurrentTime_();
        var liveTracker = _this2.player_.liveTracker;
        var duration5 = _this2.player_.duration();
        if (liveTracker && liveTracker.isLive()) {
          duration5 = _this2.player_.liveTracker.liveCurrentTime();
        }
        if (_this2.percent_ !== percent) {
          _this2.el_.setAttribute("aria-valuenow", (percent * 100).toFixed(2));
          _this2.percent_ = percent;
        }
        if (_this2.currentTime_ !== currentTime || _this2.duration_ !== duration5) {
          _this2.el_.setAttribute("aria-valuetext", _this2.localize("progress bar timing: currentTime={1} duration={2}", [formatTime(currentTime, duration5), formatTime(duration5, duration5)], "{1} of {2}"));
          _this2.currentTime_ = currentTime;
          _this2.duration_ = duration5;
        }
        if (_this2.bar) {
          _this2.bar.update(getBoundingClientRect(_this2.el()), _this2.getProgress());
        }
      });
      return percent;
    };
    _proto.getCurrentTime_ = function getCurrentTime_() {
      return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    };
    _proto.getPercent = function getPercent() {
      var currentTime = this.getCurrentTime_();
      var percent;
      var liveTracker = this.player_.liveTracker;
      if (liveTracker && liveTracker.isLive()) {
        percent = (currentTime - liveTracker.seekableStart()) / liveTracker.liveWindow();
        if (liveTracker.atLiveEdge()) {
          percent = 1;
        }
      } else {
        percent = currentTime / this.player_.duration();
      }
      return percent;
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      event.stopPropagation();
      this.player_.scrubbing(true);
      this.videoWasPlaying = !this.player_.paused();
      this.player_.pause();
      _Slider.prototype.handleMouseDown.call(this, event);
    };
    _proto.handleMouseMove = function handleMouseMove(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      var newTime;
      var distance = this.calculateDistance(event);
      var liveTracker = this.player_.liveTracker;
      if (!liveTracker || !liveTracker.isLive()) {
        newTime = distance * this.player_.duration();
        if (newTime === this.player_.duration()) {
          newTime = newTime - 0.1;
        }
      } else {
        if (distance >= 0.99) {
          liveTracker.seekToLiveEdge();
          return;
        }
        var seekableStart = liveTracker.seekableStart();
        var seekableEnd = liveTracker.liveCurrentTime();
        newTime = seekableStart + distance * liveTracker.liveWindow();
        if (newTime >= seekableEnd) {
          newTime = seekableEnd;
        }
        if (newTime <= seekableStart) {
          newTime = seekableStart + 0.1;
        }
        if (newTime === Infinity) {
          return;
        }
      }
      this.player_.currentTime(newTime);
    };
    _proto.enable = function enable() {
      _Slider.prototype.enable.call(this);
      var mouseTimeDisplay = this.getChild("mouseTimeDisplay");
      if (!mouseTimeDisplay) {
        return;
      }
      mouseTimeDisplay.show();
    };
    _proto.disable = function disable() {
      _Slider.prototype.disable.call(this);
      var mouseTimeDisplay = this.getChild("mouseTimeDisplay");
      if (!mouseTimeDisplay) {
        return;
      }
      mouseTimeDisplay.hide();
    };
    _proto.handleMouseUp = function handleMouseUp(event) {
      _Slider.prototype.handleMouseUp.call(this, event);
      if (event) {
        event.stopPropagation();
      }
      this.player_.scrubbing(false);
      this.player_.trigger({
        type: "timeupdate",
        target: this,
        manuallyTriggered: true
      });
      if (this.videoWasPlaying) {
        silencePromise(this.player_.play());
      } else {
        this.update_();
      }
    };
    _proto.stepForward = function stepForward() {
      this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
    };
    _proto.stepBack = function stepBack() {
      this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
    };
    _proto.handleAction = function handleAction(event) {
      if (this.player_.paused()) {
        this.player_.play();
      } else {
        this.player_.pause();
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Space") || import_keycode.default.isEventKey(event, "Enter")) {
        event.preventDefault();
        event.stopPropagation();
        this.handleAction(event);
      } else if (import_keycode.default.isEventKey(event, "Home")) {
        event.preventDefault();
        event.stopPropagation();
        this.player_.currentTime(0);
      } else if (import_keycode.default.isEventKey(event, "End")) {
        event.preventDefault();
        event.stopPropagation();
        this.player_.currentTime(this.player_.duration());
      } else if (/^[0-9]$/.test(import_keycode.default(event))) {
        event.preventDefault();
        event.stopPropagation();
        var gotoFraction = (import_keycode.default.codes[import_keycode.default(event)] - import_keycode.default.codes["0"]) * 10 / 100;
        this.player_.currentTime(this.player_.duration() * gotoFraction);
      } else if (import_keycode.default.isEventKey(event, "PgDn")) {
        event.preventDefault();
        event.stopPropagation();
        this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS * PAGE_KEY_MULTIPLIER);
      } else if (import_keycode.default.isEventKey(event, "PgUp")) {
        event.preventDefault();
        event.stopPropagation();
        this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS * PAGE_KEY_MULTIPLIER);
      } else {
        _Slider.prototype.handleKeyDown.call(this, event);
      }
    };
    _proto.dispose = function dispose3() {
      this.disableInterval_();
      this.off(this.player_, ["ended", "durationchange", "timeupdate"], this.update);
      if (this.player_.liveTracker) {
        this.on(this.player_.liveTracker, "liveedgechange", this.update);
      }
      this.off(this.player_, ["playing"], this.enableInterval_);
      this.off(this.player_, ["ended", "pause", "waiting"], this.disableInterval_);
      if ("hidden" in import_document.default && "visibilityState" in import_document.default) {
        this.off(import_document.default, "visibilitychange", this.toggleVisibility_);
      }
      _Slider.prototype.dispose.call(this);
    };
    return SeekBar2;
  }(Slider);
  SeekBar.prototype.options_ = {
    children: ["loadProgressBar", "playProgressBar"],
    barName: "playProgressBar"
  };
  if (!IS_IOS && !IS_ANDROID) {
    SeekBar.prototype.options_.children.splice(1, 0, "mouseTimeDisplay");
  }
  Component.registerComponent("SeekBar", SeekBar);
  var ProgressControl = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(ProgressControl2, _Component);
    function ProgressControl2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      _this.handleMouseMove = throttle(bind(import_assertThisInitialized2.default(_this), _this.handleMouseMove), UPDATE_REFRESH_INTERVAL);
      _this.throttledHandleMouseSeek = throttle(bind(import_assertThisInitialized2.default(_this), _this.handleMouseSeek), UPDATE_REFRESH_INTERVAL);
      _this.enable();
      return _this;
    }
    var _proto = ProgressControl2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-progress-control vjs-control"
      });
    };
    _proto.handleMouseMove = function handleMouseMove(event) {
      var seekBar = this.getChild("seekBar");
      if (!seekBar) {
        return;
      }
      var playProgressBar = seekBar.getChild("playProgressBar");
      var mouseTimeDisplay = seekBar.getChild("mouseTimeDisplay");
      if (!playProgressBar && !mouseTimeDisplay) {
        return;
      }
      var seekBarEl = seekBar.el();
      var seekBarRect = findPosition(seekBarEl);
      var seekBarPoint = getPointerPosition(seekBarEl, event).x;
      seekBarPoint = clamp(seekBarPoint, 0, 1);
      if (mouseTimeDisplay) {
        mouseTimeDisplay.update(seekBarRect, seekBarPoint);
      }
      if (playProgressBar) {
        playProgressBar.update(seekBarRect, seekBar.getProgress());
      }
    };
    _proto.handleMouseSeek = function handleMouseSeek(event) {
      var seekBar = this.getChild("seekBar");
      if (seekBar) {
        seekBar.handleMouseMove(event);
      }
    };
    _proto.enabled = function enabled() {
      return this.enabled_;
    };
    _proto.disable = function disable() {
      this.children().forEach(function(child) {
        return child.disable && child.disable();
      });
      if (!this.enabled()) {
        return;
      }
      this.off(["mousedown", "touchstart"], this.handleMouseDown);
      this.off(this.el_, "mousemove", this.handleMouseMove);
      this.handleMouseUp();
      this.addClass("disabled");
      this.enabled_ = false;
    };
    _proto.enable = function enable() {
      this.children().forEach(function(child) {
        return child.enable && child.enable();
      });
      if (this.enabled()) {
        return;
      }
      this.on(["mousedown", "touchstart"], this.handleMouseDown);
      this.on(this.el_, "mousemove", this.handleMouseMove);
      this.removeClass("disabled");
      this.enabled_ = true;
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      var doc = this.el_.ownerDocument;
      var seekBar = this.getChild("seekBar");
      if (seekBar) {
        seekBar.handleMouseDown(event);
      }
      this.on(doc, "mousemove", this.throttledHandleMouseSeek);
      this.on(doc, "touchmove", this.throttledHandleMouseSeek);
      this.on(doc, "mouseup", this.handleMouseUp);
      this.on(doc, "touchend", this.handleMouseUp);
    };
    _proto.handleMouseUp = function handleMouseUp(event) {
      var doc = this.el_.ownerDocument;
      var seekBar = this.getChild("seekBar");
      if (seekBar) {
        seekBar.handleMouseUp(event);
      }
      this.off(doc, "mousemove", this.throttledHandleMouseSeek);
      this.off(doc, "touchmove", this.throttledHandleMouseSeek);
      this.off(doc, "mouseup", this.handleMouseUp);
      this.off(doc, "touchend", this.handleMouseUp);
    };
    return ProgressControl2;
  }(Component);
  ProgressControl.prototype.options_ = {
    children: ["seekBar"]
  };
  Component.registerComponent("ProgressControl", ProgressControl);
  var PictureInPictureToggle = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(PictureInPictureToggle2, _Button);
    function PictureInPictureToggle2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      _this.on(player, ["enterpictureinpicture", "leavepictureinpicture"], _this.handlePictureInPictureChange);
      _this.on(player, ["disablepictureinpicturechanged", "loadedmetadata"], _this.handlePictureInPictureEnabledChange);
      _this.disable();
      return _this;
    }
    var _proto = PictureInPictureToggle2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-picture-in-picture-control " + _Button.prototype.buildCSSClass.call(this);
    };
    _proto.handlePictureInPictureEnabledChange = function handlePictureInPictureEnabledChange() {
      if (import_document.default.pictureInPictureEnabled && this.player_.disablePictureInPicture() === false) {
        this.enable();
      } else {
        this.disable();
      }
    };
    _proto.handlePictureInPictureChange = function handlePictureInPictureChange(event) {
      if (this.player_.isInPictureInPicture()) {
        this.controlText("Exit Picture-in-Picture");
      } else {
        this.controlText("Picture-in-Picture");
      }
      this.handlePictureInPictureEnabledChange();
    };
    _proto.handleClick = function handleClick(event) {
      if (!this.player_.isInPictureInPicture()) {
        this.player_.requestPictureInPicture();
      } else {
        this.player_.exitPictureInPicture();
      }
    };
    return PictureInPictureToggle2;
  }(Button);
  PictureInPictureToggle.prototype.controlText_ = "Picture-in-Picture";
  Component.registerComponent("PictureInPictureToggle", PictureInPictureToggle);
  var FullscreenToggle = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(FullscreenToggle2, _Button);
    function FullscreenToggle2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      _this.on(player, "fullscreenchange", _this.handleFullscreenChange);
      if (import_document.default[player.fsApi_.fullscreenEnabled] === false) {
        _this.disable();
      }
      return _this;
    }
    var _proto = FullscreenToggle2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-fullscreen-control " + _Button.prototype.buildCSSClass.call(this);
    };
    _proto.handleFullscreenChange = function handleFullscreenChange(event) {
      if (this.player_.isFullscreen()) {
        this.controlText("Non-Fullscreen");
      } else {
        this.controlText("Fullscreen");
      }
    };
    _proto.handleClick = function handleClick(event) {
      if (!this.player_.isFullscreen()) {
        this.player_.requestFullscreen();
      } else {
        this.player_.exitFullscreen();
      }
    };
    return FullscreenToggle2;
  }(Button);
  FullscreenToggle.prototype.controlText_ = "Fullscreen";
  Component.registerComponent("FullscreenToggle", FullscreenToggle);
  var checkVolumeSupport = function checkVolumeSupport2(self2, player) {
    if (player.tech_ && !player.tech_.featuresVolumeControl) {
      self2.addClass("vjs-hidden");
    }
    self2.on(player, "loadstart", function() {
      if (!player.tech_.featuresVolumeControl) {
        self2.addClass("vjs-hidden");
      } else {
        self2.removeClass("vjs-hidden");
      }
    });
  };
  var VolumeLevel = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(VolumeLevel2, _Component);
    function VolumeLevel2() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = VolumeLevel2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-volume-level",
        innerHTML: '<span class="vjs-control-text"></span>'
      });
    };
    return VolumeLevel2;
  }(Component);
  Component.registerComponent("VolumeLevel", VolumeLevel);
  var VolumeBar = /* @__PURE__ */ function(_Slider) {
    import_inheritsLoose2.default(VolumeBar2, _Slider);
    function VolumeBar2(player, options) {
      var _this;
      _this = _Slider.call(this, player, options) || this;
      _this.on("slideractive", _this.updateLastVolume_);
      _this.on(player, "volumechange", _this.updateARIAAttributes);
      player.ready(function() {
        return _this.updateARIAAttributes();
      });
      return _this;
    }
    var _proto = VolumeBar2.prototype;
    _proto.createEl = function createEl2() {
      return _Slider.prototype.createEl.call(this, "div", {
        className: "vjs-volume-bar vjs-slider-bar"
      }, {
        "aria-label": this.localize("Volume Level"),
        "aria-live": "polite"
      });
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      _Slider.prototype.handleMouseDown.call(this, event);
    };
    _proto.handleMouseMove = function handleMouseMove(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      this.checkMuted();
      this.player_.volume(this.calculateDistance(event));
    };
    _proto.checkMuted = function checkMuted() {
      if (this.player_.muted()) {
        this.player_.muted(false);
      }
    };
    _proto.getPercent = function getPercent() {
      if (this.player_.muted()) {
        return 0;
      }
      return this.player_.volume();
    };
    _proto.stepForward = function stepForward() {
      this.checkMuted();
      this.player_.volume(this.player_.volume() + 0.1);
    };
    _proto.stepBack = function stepBack() {
      this.checkMuted();
      this.player_.volume(this.player_.volume() - 0.1);
    };
    _proto.updateARIAAttributes = function updateARIAAttributes(event) {
      var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();
      this.el_.setAttribute("aria-valuenow", ariaValue);
      this.el_.setAttribute("aria-valuetext", ariaValue + "%");
    };
    _proto.volumeAsPercentage_ = function volumeAsPercentage_() {
      return Math.round(this.player_.volume() * 100);
    };
    _proto.updateLastVolume_ = function updateLastVolume_() {
      var _this2 = this;
      var volumeBeforeDrag = this.player_.volume();
      this.one("sliderinactive", function() {
        if (_this2.player_.volume() === 0) {
          _this2.player_.lastVolume_(volumeBeforeDrag);
        }
      });
    };
    return VolumeBar2;
  }(Slider);
  VolumeBar.prototype.options_ = {
    children: ["volumeLevel"],
    barName: "volumeLevel"
  };
  VolumeBar.prototype.playerEvent = "volumechange";
  Component.registerComponent("VolumeBar", VolumeBar);
  var VolumeControl = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(VolumeControl2, _Component);
    function VolumeControl2(player, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      options.vertical = options.vertical || false;
      if (typeof options.volumeBar === "undefined" || isPlain(options.volumeBar)) {
        options.volumeBar = options.volumeBar || {};
        options.volumeBar.vertical = options.vertical;
      }
      _this = _Component.call(this, player, options) || this;
      checkVolumeSupport(import_assertThisInitialized2.default(_this), player);
      _this.throttledHandleMouseMove = throttle(bind(import_assertThisInitialized2.default(_this), _this.handleMouseMove), UPDATE_REFRESH_INTERVAL);
      _this.on("mousedown", _this.handleMouseDown);
      _this.on("touchstart", _this.handleMouseDown);
      _this.on(_this.volumeBar, ["focus", "slideractive"], function() {
        _this.volumeBar.addClass("vjs-slider-active");
        _this.addClass("vjs-slider-active");
        _this.trigger("slideractive");
      });
      _this.on(_this.volumeBar, ["blur", "sliderinactive"], function() {
        _this.volumeBar.removeClass("vjs-slider-active");
        _this.removeClass("vjs-slider-active");
        _this.trigger("sliderinactive");
      });
      return _this;
    }
    var _proto = VolumeControl2.prototype;
    _proto.createEl = function createEl2() {
      var orientationClass = "vjs-volume-horizontal";
      if (this.options_.vertical) {
        orientationClass = "vjs-volume-vertical";
      }
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-volume-control vjs-control " + orientationClass
      });
    };
    _proto.handleMouseDown = function handleMouseDown(event) {
      var doc = this.el_.ownerDocument;
      this.on(doc, "mousemove", this.throttledHandleMouseMove);
      this.on(doc, "touchmove", this.throttledHandleMouseMove);
      this.on(doc, "mouseup", this.handleMouseUp);
      this.on(doc, "touchend", this.handleMouseUp);
    };
    _proto.handleMouseUp = function handleMouseUp(event) {
      var doc = this.el_.ownerDocument;
      this.off(doc, "mousemove", this.throttledHandleMouseMove);
      this.off(doc, "touchmove", this.throttledHandleMouseMove);
      this.off(doc, "mouseup", this.handleMouseUp);
      this.off(doc, "touchend", this.handleMouseUp);
    };
    _proto.handleMouseMove = function handleMouseMove(event) {
      this.volumeBar.handleMouseMove(event);
    };
    return VolumeControl2;
  }(Component);
  VolumeControl.prototype.options_ = {
    children: ["volumeBar"]
  };
  Component.registerComponent("VolumeControl", VolumeControl);
  var checkMuteSupport = function checkMuteSupport2(self2, player) {
    if (player.tech_ && !player.tech_.featuresMuteControl) {
      self2.addClass("vjs-hidden");
    }
    self2.on(player, "loadstart", function() {
      if (!player.tech_.featuresMuteControl) {
        self2.addClass("vjs-hidden");
      } else {
        self2.removeClass("vjs-hidden");
      }
    });
  };
  var MuteToggle = /* @__PURE__ */ function(_Button) {
    import_inheritsLoose2.default(MuteToggle2, _Button);
    function MuteToggle2(player, options) {
      var _this;
      _this = _Button.call(this, player, options) || this;
      checkMuteSupport(import_assertThisInitialized2.default(_this), player);
      _this.on(player, ["loadstart", "volumechange"], _this.update);
      return _this;
    }
    var _proto = MuteToggle2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-mute-control " + _Button.prototype.buildCSSClass.call(this);
    };
    _proto.handleClick = function handleClick(event) {
      var vol = this.player_.volume();
      var lastVolume = this.player_.lastVolume_();
      if (vol === 0) {
        var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;
        this.player_.volume(volumeToSet);
        this.player_.muted(false);
      } else {
        this.player_.muted(this.player_.muted() ? false : true);
      }
    };
    _proto.update = function update(event) {
      this.updateIcon_();
      this.updateControlText_();
    };
    _proto.updateIcon_ = function updateIcon_() {
      var vol = this.player_.volume();
      var level = 3;
      if (IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {
        this.player_.muted(this.player_.tech_.el_.muted);
      }
      if (vol === 0 || this.player_.muted()) {
        level = 0;
      } else if (vol < 0.33) {
        level = 1;
      } else if (vol < 0.67) {
        level = 2;
      }
      for (var i = 0; i < 4; i++) {
        removeClass(this.el_, "vjs-vol-" + i);
      }
      addClass(this.el_, "vjs-vol-" + level);
    };
    _proto.updateControlText_ = function updateControlText_() {
      var soundOff = this.player_.muted() || this.player_.volume() === 0;
      var text = soundOff ? "Unmute" : "Mute";
      if (this.controlText() !== text) {
        this.controlText(text);
      }
    };
    return MuteToggle2;
  }(Button);
  MuteToggle.prototype.controlText_ = "Mute";
  Component.registerComponent("MuteToggle", MuteToggle);
  var VolumePanel = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(VolumePanel2, _Component);
    function VolumePanel2(player, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      if (typeof options.inline !== "undefined") {
        options.inline = options.inline;
      } else {
        options.inline = true;
      }
      if (typeof options.volumeControl === "undefined" || isPlain(options.volumeControl)) {
        options.volumeControl = options.volumeControl || {};
        options.volumeControl.vertical = !options.inline;
      }
      _this = _Component.call(this, player, options) || this;
      _this.on(player, ["loadstart"], _this.volumePanelState_);
      _this.on(_this.muteToggle, "keyup", _this.handleKeyPress);
      _this.on(_this.volumeControl, "keyup", _this.handleVolumeControlKeyUp);
      _this.on("keydown", _this.handleKeyPress);
      _this.on("mouseover", _this.handleMouseOver);
      _this.on("mouseout", _this.handleMouseOut);
      _this.on(_this.volumeControl, ["slideractive"], _this.sliderActive_);
      _this.on(_this.volumeControl, ["sliderinactive"], _this.sliderInactive_);
      return _this;
    }
    var _proto = VolumePanel2.prototype;
    _proto.sliderActive_ = function sliderActive_() {
      this.addClass("vjs-slider-active");
    };
    _proto.sliderInactive_ = function sliderInactive_() {
      this.removeClass("vjs-slider-active");
    };
    _proto.volumePanelState_ = function volumePanelState_() {
      if (this.volumeControl.hasClass("vjs-hidden") && this.muteToggle.hasClass("vjs-hidden")) {
        this.addClass("vjs-hidden");
      }
      if (this.volumeControl.hasClass("vjs-hidden") && !this.muteToggle.hasClass("vjs-hidden")) {
        this.addClass("vjs-mute-toggle-only");
      }
    };
    _proto.createEl = function createEl2() {
      var orientationClass = "vjs-volume-panel-horizontal";
      if (!this.options_.inline) {
        orientationClass = "vjs-volume-panel-vertical";
      }
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-volume-panel vjs-control " + orientationClass
      });
    };
    _proto.dispose = function dispose3() {
      this.handleMouseOut();
      _Component.prototype.dispose.call(this);
    };
    _proto.handleVolumeControlKeyUp = function handleVolumeControlKeyUp(event) {
      if (import_keycode.default.isEventKey(event, "Esc")) {
        this.muteToggle.focus();
      }
    };
    _proto.handleMouseOver = function handleMouseOver(event) {
      this.addClass("vjs-hover");
      on(import_document.default, "keyup", bind(this, this.handleKeyPress));
    };
    _proto.handleMouseOut = function handleMouseOut(event) {
      this.removeClass("vjs-hover");
      off(import_document.default, "keyup", bind(this, this.handleKeyPress));
    };
    _proto.handleKeyPress = function handleKeyPress(event) {
      if (import_keycode.default.isEventKey(event, "Esc")) {
        this.handleMouseOut();
      }
    };
    return VolumePanel2;
  }(Component);
  VolumePanel.prototype.options_ = {
    children: ["muteToggle", "volumeControl"]
  };
  Component.registerComponent("VolumePanel", VolumePanel);
  var Menu = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(Menu2, _Component);
    function Menu2(player, options) {
      var _this;
      _this = _Component.call(this, player, options) || this;
      if (options) {
        _this.menuButton_ = options.menuButton;
      }
      _this.focusedChild_ = -1;
      _this.on("keydown", _this.handleKeyDown);
      _this.boundHandleBlur_ = bind(import_assertThisInitialized2.default(_this), _this.handleBlur);
      _this.boundHandleTapClick_ = bind(import_assertThisInitialized2.default(_this), _this.handleTapClick);
      return _this;
    }
    var _proto = Menu2.prototype;
    _proto.addEventListenerForItem = function addEventListenerForItem(component) {
      if (!(component instanceof Component)) {
        return;
      }
      this.on(component, "blur", this.boundHandleBlur_);
      this.on(component, ["tap", "click"], this.boundHandleTapClick_);
    };
    _proto.removeEventListenerForItem = function removeEventListenerForItem(component) {
      if (!(component instanceof Component)) {
        return;
      }
      this.off(component, "blur", this.boundHandleBlur_);
      this.off(component, ["tap", "click"], this.boundHandleTapClick_);
    };
    _proto.removeChild = function removeChild(component) {
      if (typeof component === "string") {
        component = this.getChild(component);
      }
      this.removeEventListenerForItem(component);
      _Component.prototype.removeChild.call(this, component);
    };
    _proto.addItem = function addItem(component) {
      var childComponent = this.addChild(component);
      if (childComponent) {
        this.addEventListenerForItem(childComponent);
      }
    };
    _proto.createEl = function createEl$1() {
      var contentElType = this.options_.contentElType || "ul";
      this.contentEl_ = createEl(contentElType, {
        className: "vjs-menu-content"
      });
      this.contentEl_.setAttribute("role", "menu");
      var el = _Component.prototype.createEl.call(this, "div", {
        append: this.contentEl_,
        className: "vjs-menu"
      });
      el.appendChild(this.contentEl_);
      on(el, "click", function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
      });
      return el;
    };
    _proto.dispose = function dispose3() {
      this.contentEl_ = null;
      this.boundHandleBlur_ = null;
      this.boundHandleTapClick_ = null;
      _Component.prototype.dispose.call(this);
    };
    _proto.handleBlur = function handleBlur(event) {
      var relatedTarget = event.relatedTarget || import_document.default.activeElement;
      if (!this.children().some(function(element) {
        return element.el() === relatedTarget;
      })) {
        var btn = this.menuButton_;
        if (btn && btn.buttonPressed_ && relatedTarget !== btn.el().firstChild) {
          btn.unpressButton();
        }
      }
    };
    _proto.handleTapClick = function handleTapClick(event) {
      if (this.menuButton_) {
        this.menuButton_.unpressButton();
        var childComponents = this.children();
        if (!Array.isArray(childComponents)) {
          return;
        }
        var foundComponent = childComponents.filter(function(component) {
          return component.el() === event.target;
        })[0];
        if (!foundComponent) {
          return;
        }
        if (foundComponent.name() !== "CaptionSettingsMenuItem") {
          this.menuButton_.focus();
        }
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Left") || import_keycode.default.isEventKey(event, "Down")) {
        event.preventDefault();
        event.stopPropagation();
        this.stepForward();
      } else if (import_keycode.default.isEventKey(event, "Right") || import_keycode.default.isEventKey(event, "Up")) {
        event.preventDefault();
        event.stopPropagation();
        this.stepBack();
      }
    };
    _proto.stepForward = function stepForward() {
      var stepChild = 0;
      if (this.focusedChild_ !== void 0) {
        stepChild = this.focusedChild_ + 1;
      }
      this.focus(stepChild);
    };
    _proto.stepBack = function stepBack() {
      var stepChild = 0;
      if (this.focusedChild_ !== void 0) {
        stepChild = this.focusedChild_ - 1;
      }
      this.focus(stepChild);
    };
    _proto.focus = function focus(item) {
      if (item === void 0) {
        item = 0;
      }
      var children = this.children().slice();
      var haveTitle = children.length && children[0].hasClass("vjs-menu-title");
      if (haveTitle) {
        children.shift();
      }
      if (children.length > 0) {
        if (item < 0) {
          item = 0;
        } else if (item >= children.length) {
          item = children.length - 1;
        }
        this.focusedChild_ = item;
        children[item].el_.focus();
      }
    };
    return Menu2;
  }(Component);
  Component.registerComponent("Menu", Menu);
  var MenuButton = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(MenuButton2, _Component);
    function MenuButton2(player, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _Component.call(this, player, options) || this;
      _this.menuButton_ = new Button(player, options);
      _this.menuButton_.controlText(_this.controlText_);
      _this.menuButton_.el_.setAttribute("aria-haspopup", "true");
      var buttonClass = Button.prototype.buildCSSClass();
      _this.menuButton_.el_.className = _this.buildCSSClass() + " " + buttonClass;
      _this.menuButton_.removeClass("vjs-control");
      _this.addChild(_this.menuButton_);
      _this.update();
      _this.enabled_ = true;
      _this.on(_this.menuButton_, "tap", _this.handleClick);
      _this.on(_this.menuButton_, "click", _this.handleClick);
      _this.on(_this.menuButton_, "keydown", _this.handleKeyDown);
      _this.on(_this.menuButton_, "mouseenter", function() {
        _this.addClass("vjs-hover");
        _this.menu.show();
        on(import_document.default, "keyup", bind(import_assertThisInitialized2.default(_this), _this.handleMenuKeyUp));
      });
      _this.on("mouseleave", _this.handleMouseLeave);
      _this.on("keydown", _this.handleSubmenuKeyDown);
      return _this;
    }
    var _proto = MenuButton2.prototype;
    _proto.update = function update() {
      var menu = this.createMenu();
      if (this.menu) {
        this.menu.dispose();
        this.removeChild(this.menu);
      }
      this.menu = menu;
      this.addChild(menu);
      this.buttonPressed_ = false;
      this.menuButton_.el_.setAttribute("aria-expanded", "false");
      if (this.items && this.items.length <= this.hideThreshold_) {
        this.hide();
      } else {
        this.show();
      }
    };
    _proto.createMenu = function createMenu() {
      var menu = new Menu(this.player_, {
        menuButton: this
      });
      this.hideThreshold_ = 0;
      if (this.options_.title) {
        var titleEl = createEl("li", {
          className: "vjs-menu-title",
          innerHTML: toTitleCase(this.options_.title),
          tabIndex: -1
        });
        this.hideThreshold_ += 1;
        var titleComponent = new Component(this.player_, {
          el: titleEl
        });
        menu.addItem(titleComponent);
      }
      this.items = this.createItems();
      if (this.items) {
        for (var i = 0; i < this.items.length; i++) {
          menu.addItem(this.items[i]);
        }
      }
      return menu;
    };
    _proto.createItems = function createItems() {
    };
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: this.buildWrapperCSSClass()
      }, {});
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      var menuButtonClass = "vjs-menu-button";
      if (this.options_.inline === true) {
        menuButtonClass += "-inline";
      } else {
        menuButtonClass += "-popup";
      }
      var buttonClass = Button.prototype.buildCSSClass();
      return "vjs-menu-button " + menuButtonClass + " " + buttonClass + " " + _Component.prototype.buildCSSClass.call(this);
    };
    _proto.buildCSSClass = function buildCSSClass() {
      var menuButtonClass = "vjs-menu-button";
      if (this.options_.inline === true) {
        menuButtonClass += "-inline";
      } else {
        menuButtonClass += "-popup";
      }
      return "vjs-menu-button " + menuButtonClass + " " + _Component.prototype.buildCSSClass.call(this);
    };
    _proto.controlText = function controlText(text, el) {
      if (el === void 0) {
        el = this.menuButton_.el();
      }
      return this.menuButton_.controlText(text, el);
    };
    _proto.dispose = function dispose3() {
      this.handleMouseLeave();
      _Component.prototype.dispose.call(this);
    };
    _proto.handleClick = function handleClick(event) {
      if (this.buttonPressed_) {
        this.unpressButton();
      } else {
        this.pressButton();
      }
    };
    _proto.handleMouseLeave = function handleMouseLeave(event) {
      this.removeClass("vjs-hover");
      off(import_document.default, "keyup", bind(this, this.handleMenuKeyUp));
    };
    _proto.focus = function focus() {
      this.menuButton_.focus();
    };
    _proto.blur = function blur() {
      this.menuButton_.blur();
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Esc") || import_keycode.default.isEventKey(event, "Tab")) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }
        if (!import_keycode.default.isEventKey(event, "Tab")) {
          event.preventDefault();
          this.menuButton_.focus();
        }
      } else if (import_keycode.default.isEventKey(event, "Up") || import_keycode.default.isEventKey(event, "Down")) {
        if (!this.buttonPressed_) {
          event.preventDefault();
          this.pressButton();
        }
      }
    };
    _proto.handleMenuKeyUp = function handleMenuKeyUp(event) {
      if (import_keycode.default.isEventKey(event, "Esc") || import_keycode.default.isEventKey(event, "Tab")) {
        this.removeClass("vjs-hover");
      }
    };
    _proto.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {
      this.handleSubmenuKeyDown(event);
    };
    _proto.handleSubmenuKeyDown = function handleSubmenuKeyDown(event) {
      if (import_keycode.default.isEventKey(event, "Esc") || import_keycode.default.isEventKey(event, "Tab")) {
        if (this.buttonPressed_) {
          this.unpressButton();
        }
        if (!import_keycode.default.isEventKey(event, "Tab")) {
          event.preventDefault();
          this.menuButton_.focus();
        }
      }
    };
    _proto.pressButton = function pressButton() {
      if (this.enabled_) {
        this.buttonPressed_ = true;
        this.menu.show();
        this.menu.lockShowing();
        this.menuButton_.el_.setAttribute("aria-expanded", "true");
        if (IS_IOS && isInFrame()) {
          return;
        }
        this.menu.focus();
      }
    };
    _proto.unpressButton = function unpressButton() {
      if (this.enabled_) {
        this.buttonPressed_ = false;
        this.menu.unlockShowing();
        this.menu.hide();
        this.menuButton_.el_.setAttribute("aria-expanded", "false");
      }
    };
    _proto.disable = function disable() {
      this.unpressButton();
      this.enabled_ = false;
      this.addClass("vjs-disabled");
      this.menuButton_.disable();
    };
    _proto.enable = function enable() {
      this.enabled_ = true;
      this.removeClass("vjs-disabled");
      this.menuButton_.enable();
    };
    return MenuButton2;
  }(Component);
  Component.registerComponent("MenuButton", MenuButton);
  var TrackButton = /* @__PURE__ */ function(_MenuButton) {
    import_inheritsLoose2.default(TrackButton2, _MenuButton);
    function TrackButton2(player, options) {
      var _this;
      var tracks = options.tracks;
      _this = _MenuButton.call(this, player, options) || this;
      if (_this.items.length <= 1) {
        _this.hide();
      }
      if (!tracks) {
        return import_assertThisInitialized2.default(_this);
      }
      var updateHandler = bind(import_assertThisInitialized2.default(_this), _this.update);
      tracks.addEventListener("removetrack", updateHandler);
      tracks.addEventListener("addtrack", updateHandler);
      tracks.addEventListener("labelchange", updateHandler);
      _this.player_.on("ready", updateHandler);
      _this.player_.on("dispose", function() {
        tracks.removeEventListener("removetrack", updateHandler);
        tracks.removeEventListener("addtrack", updateHandler);
        tracks.removeEventListener("labelchange", updateHandler);
      });
      return _this;
    }
    return TrackButton2;
  }(MenuButton);
  Component.registerComponent("TrackButton", TrackButton);
  var MenuKeys = ["Tab", "Esc", "Up", "Down", "Right", "Left"];
  var MenuItem = /* @__PURE__ */ function(_ClickableComponent) {
    import_inheritsLoose2.default(MenuItem2, _ClickableComponent);
    function MenuItem2(player, options) {
      var _this;
      _this = _ClickableComponent.call(this, player, options) || this;
      _this.selectable = options.selectable;
      _this.isSelected_ = options.selected || false;
      _this.multiSelectable = options.multiSelectable;
      _this.selected(_this.isSelected_);
      if (_this.selectable) {
        if (_this.multiSelectable) {
          _this.el_.setAttribute("role", "menuitemcheckbox");
        } else {
          _this.el_.setAttribute("role", "menuitemradio");
        }
      } else {
        _this.el_.setAttribute("role", "menuitem");
      }
      return _this;
    }
    var _proto = MenuItem2.prototype;
    _proto.createEl = function createEl2(type3, props, attrs) {
      this.nonIconControl = true;
      return _ClickableComponent.prototype.createEl.call(this, "li", assign({
        className: "vjs-menu-item",
        innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + "</span>",
        tabIndex: -1
      }, props), attrs);
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      if (!MenuKeys.some(function(key) {
        return import_keycode.default.isEventKey(event, key);
      })) {
        _ClickableComponent.prototype.handleKeyDown.call(this, event);
      }
    };
    _proto.handleClick = function handleClick(event) {
      this.selected(true);
    };
    _proto.selected = function selected(_selected) {
      if (this.selectable) {
        if (_selected) {
          this.addClass("vjs-selected");
          this.el_.setAttribute("aria-checked", "true");
          this.controlText(", selected");
          this.isSelected_ = true;
        } else {
          this.removeClass("vjs-selected");
          this.el_.setAttribute("aria-checked", "false");
          this.controlText("");
          this.isSelected_ = false;
        }
      }
    };
    return MenuItem2;
  }(ClickableComponent);
  Component.registerComponent("MenuItem", MenuItem);
  var TextTrackMenuItem = /* @__PURE__ */ function(_MenuItem) {
    import_inheritsLoose2.default(TextTrackMenuItem2, _MenuItem);
    function TextTrackMenuItem2(player, options) {
      var _this;
      var track = options.track;
      var tracks = player.textTracks();
      options.label = track.label || track.language || "Unknown";
      options.selected = track.mode === "showing";
      _this = _MenuItem.call(this, player, options) || this;
      _this.track = track;
      _this.kinds = (options.kinds || [options.kind || _this.track.kind]).filter(Boolean);
      var changeHandler = function changeHandler2() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this.handleTracksChange.apply(import_assertThisInitialized2.default(_this), args);
      };
      var selectedLanguageChangeHandler = function selectedLanguageChangeHandler2() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this.handleSelectedLanguageChange.apply(import_assertThisInitialized2.default(_this), args);
      };
      player.on(["loadstart", "texttrackchange"], changeHandler);
      tracks.addEventListener("change", changeHandler);
      tracks.addEventListener("selectedlanguagechange", selectedLanguageChangeHandler);
      _this.on("dispose", function() {
        player.off(["loadstart", "texttrackchange"], changeHandler);
        tracks.removeEventListener("change", changeHandler);
        tracks.removeEventListener("selectedlanguagechange", selectedLanguageChangeHandler);
      });
      if (tracks.onchange === void 0) {
        var event;
        _this.on(["tap", "click"], function() {
          if (typeof import_window2.default.Event !== "object") {
            try {
              event = new import_window2.default.Event("change");
            } catch (err) {
            }
          }
          if (!event) {
            event = import_document.default.createEvent("Event");
            event.initEvent("change", true, true);
          }
          tracks.dispatchEvent(event);
        });
      }
      _this.handleTracksChange();
      return _this;
    }
    var _proto = TextTrackMenuItem2.prototype;
    _proto.handleClick = function handleClick(event) {
      var referenceTrack = this.track;
      var tracks = this.player_.textTracks();
      _MenuItem.prototype.handleClick.call(this, event);
      if (!tracks) {
        return;
      }
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (this.kinds.indexOf(track.kind) === -1) {
          continue;
        }
        if (track === referenceTrack) {
          if (track.mode !== "showing") {
            track.mode = "showing";
          }
        } else if (track.mode !== "disabled") {
          track.mode = "disabled";
        }
      }
    };
    _proto.handleTracksChange = function handleTracksChange(event) {
      var shouldBeSelected = this.track.mode === "showing";
      if (shouldBeSelected !== this.isSelected_) {
        this.selected(shouldBeSelected);
      }
    };
    _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
      if (this.track.mode === "showing") {
        var selectedLanguage = this.player_.cache_.selectedLanguage;
        if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
          return;
        }
        this.player_.cache_.selectedLanguage = {
          enabled: true,
          language: this.track.language,
          kind: this.track.kind
        };
      }
    };
    _proto.dispose = function dispose3() {
      this.track = null;
      _MenuItem.prototype.dispose.call(this);
    };
    return TextTrackMenuItem2;
  }(MenuItem);
  Component.registerComponent("TextTrackMenuItem", TextTrackMenuItem);
  var OffTextTrackMenuItem = /* @__PURE__ */ function(_TextTrackMenuItem) {
    import_inheritsLoose2.default(OffTextTrackMenuItem2, _TextTrackMenuItem);
    function OffTextTrackMenuItem2(player, options) {
      options.track = {
        player,
        kind: options.kind,
        kinds: options.kinds,
        default: false,
        mode: "disabled"
      };
      if (!options.kinds) {
        options.kinds = [options.kind];
      }
      if (options.label) {
        options.track.label = options.label;
      } else {
        options.track.label = options.kinds.join(" and ") + " off";
      }
      options.selectable = true;
      options.multiSelectable = false;
      return _TextTrackMenuItem.call(this, player, options) || this;
    }
    var _proto = OffTextTrackMenuItem2.prototype;
    _proto.handleTracksChange = function handleTracksChange(event) {
      var tracks = this.player().textTracks();
      var shouldBeSelected = true;
      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === "showing") {
          shouldBeSelected = false;
          break;
        }
      }
      if (shouldBeSelected !== this.isSelected_) {
        this.selected(shouldBeSelected);
      }
    };
    _proto.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
      var tracks = this.player().textTracks();
      var allHidden = true;
      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (["captions", "descriptions", "subtitles"].indexOf(track.kind) > -1 && track.mode === "showing") {
          allHidden = false;
          break;
        }
      }
      if (allHidden) {
        this.player_.cache_.selectedLanguage = {
          enabled: false
        };
      }
    };
    return OffTextTrackMenuItem2;
  }(TextTrackMenuItem);
  Component.registerComponent("OffTextTrackMenuItem", OffTextTrackMenuItem);
  var TextTrackButton = /* @__PURE__ */ function(_TrackButton) {
    import_inheritsLoose2.default(TextTrackButton2, _TrackButton);
    function TextTrackButton2(player, options) {
      if (options === void 0) {
        options = {};
      }
      options.tracks = player.textTracks();
      return _TrackButton.call(this, player, options) || this;
    }
    var _proto = TextTrackButton2.prototype;
    _proto.createItems = function createItems(items, TrackMenuItem) {
      if (items === void 0) {
        items = [];
      }
      if (TrackMenuItem === void 0) {
        TrackMenuItem = TextTrackMenuItem;
      }
      var label;
      if (this.label_) {
        label = this.label_ + " off";
      }
      items.push(new OffTextTrackMenuItem(this.player_, {
        kinds: this.kinds_,
        kind: this.kind_,
        label
      }));
      this.hideThreshold_ += 1;
      var tracks = this.player_.textTracks();
      if (!Array.isArray(this.kinds_)) {
        this.kinds_ = [this.kind_];
      }
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        if (this.kinds_.indexOf(track.kind) > -1) {
          var item = new TrackMenuItem(this.player_, {
            track,
            kinds: this.kinds_,
            kind: this.kind_,
            selectable: true,
            multiSelectable: false
          });
          item.addClass("vjs-" + track.kind + "-menu-item");
          items.push(item);
        }
      }
      return items;
    };
    return TextTrackButton2;
  }(TrackButton);
  Component.registerComponent("TextTrackButton", TextTrackButton);
  var ChaptersTrackMenuItem = /* @__PURE__ */ function(_MenuItem) {
    import_inheritsLoose2.default(ChaptersTrackMenuItem2, _MenuItem);
    function ChaptersTrackMenuItem2(player, options) {
      var _this;
      var track = options.track;
      var cue = options.cue;
      var currentTime = player.currentTime();
      options.selectable = true;
      options.multiSelectable = false;
      options.label = cue.text;
      options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
      _this = _MenuItem.call(this, player, options) || this;
      _this.track = track;
      _this.cue = cue;
      track.addEventListener("cuechange", bind(import_assertThisInitialized2.default(_this), _this.update));
      return _this;
    }
    var _proto = ChaptersTrackMenuItem2.prototype;
    _proto.handleClick = function handleClick(event) {
      _MenuItem.prototype.handleClick.call(this);
      this.player_.currentTime(this.cue.startTime);
      this.update(this.cue.startTime);
    };
    _proto.update = function update(event) {
      var cue = this.cue;
      var currentTime = this.player_.currentTime();
      this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
    };
    return ChaptersTrackMenuItem2;
  }(MenuItem);
  Component.registerComponent("ChaptersTrackMenuItem", ChaptersTrackMenuItem);
  var ChaptersButton = /* @__PURE__ */ function(_TextTrackButton) {
    import_inheritsLoose2.default(ChaptersButton2, _TextTrackButton);
    function ChaptersButton2(player, options, ready) {
      return _TextTrackButton.call(this, player, options, ready) || this;
    }
    var _proto = ChaptersButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-chapters-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-chapters-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    _proto.update = function update(event) {
      if (!this.track_ || event && (event.type === "addtrack" || event.type === "removetrack")) {
        this.setTrack(this.findChaptersTrack());
      }
      _TextTrackButton.prototype.update.call(this);
    };
    _proto.setTrack = function setTrack(track) {
      if (this.track_ === track) {
        return;
      }
      if (!this.updateHandler_) {
        this.updateHandler_ = this.update.bind(this);
      }
      if (this.track_) {
        var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        if (remoteTextTrackEl) {
          remoteTextTrackEl.removeEventListener("load", this.updateHandler_);
        }
        this.track_ = null;
      }
      this.track_ = track;
      if (this.track_) {
        this.track_.mode = "hidden";
        var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
        if (_remoteTextTrackEl) {
          _remoteTextTrackEl.addEventListener("load", this.updateHandler_);
        }
      }
    };
    _proto.findChaptersTrack = function findChaptersTrack() {
      var tracks = this.player_.textTracks() || [];
      for (var i = tracks.length - 1; i >= 0; i--) {
        var track = tracks[i];
        if (track.kind === this.kind_) {
          return track;
        }
      }
    };
    _proto.getMenuCaption = function getMenuCaption() {
      if (this.track_ && this.track_.label) {
        return this.track_.label;
      }
      return this.localize(toTitleCase(this.kind_));
    };
    _proto.createMenu = function createMenu() {
      this.options_.title = this.getMenuCaption();
      return _TextTrackButton.prototype.createMenu.call(this);
    };
    _proto.createItems = function createItems() {
      var items = [];
      if (!this.track_) {
        return items;
      }
      var cues = this.track_.cues;
      if (!cues) {
        return items;
      }
      for (var i = 0, l = cues.length; i < l; i++) {
        var cue = cues[i];
        var mi = new ChaptersTrackMenuItem(this.player_, {
          track: this.track_,
          cue
        });
        items.push(mi);
      }
      return items;
    };
    return ChaptersButton2;
  }(TextTrackButton);
  ChaptersButton.prototype.kind_ = "chapters";
  ChaptersButton.prototype.controlText_ = "Chapters";
  Component.registerComponent("ChaptersButton", ChaptersButton);
  var DescriptionsButton = /* @__PURE__ */ function(_TextTrackButton) {
    import_inheritsLoose2.default(DescriptionsButton2, _TextTrackButton);
    function DescriptionsButton2(player, options, ready) {
      var _this;
      _this = _TextTrackButton.call(this, player, options, ready) || this;
      var tracks = player.textTracks();
      var changeHandler = bind(import_assertThisInitialized2.default(_this), _this.handleTracksChange);
      tracks.addEventListener("change", changeHandler);
      _this.on("dispose", function() {
        tracks.removeEventListener("change", changeHandler);
      });
      return _this;
    }
    var _proto = DescriptionsButton2.prototype;
    _proto.handleTracksChange = function handleTracksChange(event) {
      var tracks = this.player().textTracks();
      var disabled = false;
      for (var i = 0, l = tracks.length; i < l; i++) {
        var track = tracks[i];
        if (track.kind !== this.kind_ && track.mode === "showing") {
          disabled = true;
          break;
        }
      }
      if (disabled) {
        this.disable();
      } else {
        this.enable();
      }
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-descriptions-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-descriptions-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    return DescriptionsButton2;
  }(TextTrackButton);
  DescriptionsButton.prototype.kind_ = "descriptions";
  DescriptionsButton.prototype.controlText_ = "Descriptions";
  Component.registerComponent("DescriptionsButton", DescriptionsButton);
  var SubtitlesButton = /* @__PURE__ */ function(_TextTrackButton) {
    import_inheritsLoose2.default(SubtitlesButton2, _TextTrackButton);
    function SubtitlesButton2(player, options, ready) {
      return _TextTrackButton.call(this, player, options, ready) || this;
    }
    var _proto = SubtitlesButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-subtitles-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-subtitles-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    return SubtitlesButton2;
  }(TextTrackButton);
  SubtitlesButton.prototype.kind_ = "subtitles";
  SubtitlesButton.prototype.controlText_ = "Subtitles";
  Component.registerComponent("SubtitlesButton", SubtitlesButton);
  var CaptionSettingsMenuItem = /* @__PURE__ */ function(_TextTrackMenuItem) {
    import_inheritsLoose2.default(CaptionSettingsMenuItem2, _TextTrackMenuItem);
    function CaptionSettingsMenuItem2(player, options) {
      var _this;
      options.track = {
        player,
        kind: options.kind,
        label: options.kind + " settings",
        selectable: false,
        default: false,
        mode: "disabled"
      };
      options.selectable = false;
      options.name = "CaptionSettingsMenuItem";
      _this = _TextTrackMenuItem.call(this, player, options) || this;
      _this.addClass("vjs-texttrack-settings");
      _this.controlText(", opens " + options.kind + " settings dialog");
      return _this;
    }
    var _proto = CaptionSettingsMenuItem2.prototype;
    _proto.handleClick = function handleClick(event) {
      this.player().getChild("textTrackSettings").open();
    };
    return CaptionSettingsMenuItem2;
  }(TextTrackMenuItem);
  Component.registerComponent("CaptionSettingsMenuItem", CaptionSettingsMenuItem);
  var CaptionsButton = /* @__PURE__ */ function(_TextTrackButton) {
    import_inheritsLoose2.default(CaptionsButton2, _TextTrackButton);
    function CaptionsButton2(player, options, ready) {
      return _TextTrackButton.call(this, player, options, ready) || this;
    }
    var _proto = CaptionsButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-captions-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-captions-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    _proto.createItems = function createItems() {
      var items = [];
      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
        items.push(new CaptionSettingsMenuItem(this.player_, {
          kind: this.kind_
        }));
        this.hideThreshold_ += 1;
      }
      return _TextTrackButton.prototype.createItems.call(this, items);
    };
    return CaptionsButton2;
  }(TextTrackButton);
  CaptionsButton.prototype.kind_ = "captions";
  CaptionsButton.prototype.controlText_ = "Captions";
  Component.registerComponent("CaptionsButton", CaptionsButton);
  var SubsCapsMenuItem = /* @__PURE__ */ function(_TextTrackMenuItem) {
    import_inheritsLoose2.default(SubsCapsMenuItem2, _TextTrackMenuItem);
    function SubsCapsMenuItem2() {
      return _TextTrackMenuItem.apply(this, arguments) || this;
    }
    var _proto = SubsCapsMenuItem2.prototype;
    _proto.createEl = function createEl2(type3, props, attrs) {
      var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);
      if (this.options_.track.kind === "captions") {
        innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Captions") + "</span>\n      ";
      }
      innerHTML += "</span>";
      var el = _TextTrackMenuItem.prototype.createEl.call(this, type3, assign({
        innerHTML
      }, props), attrs);
      return el;
    };
    return SubsCapsMenuItem2;
  }(TextTrackMenuItem);
  Component.registerComponent("SubsCapsMenuItem", SubsCapsMenuItem);
  var SubsCapsButton = /* @__PURE__ */ function(_TextTrackButton) {
    import_inheritsLoose2.default(SubsCapsButton2, _TextTrackButton);
    function SubsCapsButton2(player, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _TextTrackButton.call(this, player, options) || this;
      _this.label_ = "subtitles";
      if (["en", "en-us", "en-ca", "fr-ca"].indexOf(_this.player_.language_) > -1) {
        _this.label_ = "captions";
      }
      _this.menuButton_.controlText(toTitleCase(_this.label_));
      return _this;
    }
    var _proto = SubsCapsButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-subs-caps-button " + _TextTrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-subs-caps-button " + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    _proto.createItems = function createItems() {
      var items = [];
      if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild("textTrackSettings")) {
        items.push(new CaptionSettingsMenuItem(this.player_, {
          kind: this.label_
        }));
        this.hideThreshold_ += 1;
      }
      items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
      return items;
    };
    return SubsCapsButton2;
  }(TextTrackButton);
  SubsCapsButton.prototype.kinds_ = ["captions", "subtitles"];
  SubsCapsButton.prototype.controlText_ = "Subtitles";
  Component.registerComponent("SubsCapsButton", SubsCapsButton);
  var AudioTrackMenuItem = /* @__PURE__ */ function(_MenuItem) {
    import_inheritsLoose2.default(AudioTrackMenuItem2, _MenuItem);
    function AudioTrackMenuItem2(player, options) {
      var _this;
      var track = options.track;
      var tracks = player.audioTracks();
      options.label = track.label || track.language || "Unknown";
      options.selected = track.enabled;
      _this = _MenuItem.call(this, player, options) || this;
      _this.track = track;
      _this.addClass("vjs-" + track.kind + "-menu-item");
      var changeHandler = function changeHandler2() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this.handleTracksChange.apply(import_assertThisInitialized2.default(_this), args);
      };
      tracks.addEventListener("change", changeHandler);
      _this.on("dispose", function() {
        tracks.removeEventListener("change", changeHandler);
      });
      return _this;
    }
    var _proto = AudioTrackMenuItem2.prototype;
    _proto.createEl = function createEl2(type3, props, attrs) {
      var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);
      if (this.options_.track.kind === "main-desc") {
        innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize("Descriptions") + "</span>\n      ";
      }
      innerHTML += "</span>";
      var el = _MenuItem.prototype.createEl.call(this, type3, assign({
        innerHTML
      }, props), attrs);
      return el;
    };
    _proto.handleClick = function handleClick(event) {
      var tracks = this.player_.audioTracks();
      _MenuItem.prototype.handleClick.call(this, event);
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        track.enabled = track === this.track;
      }
    };
    _proto.handleTracksChange = function handleTracksChange(event) {
      this.selected(this.track.enabled);
    };
    return AudioTrackMenuItem2;
  }(MenuItem);
  Component.registerComponent("AudioTrackMenuItem", AudioTrackMenuItem);
  var AudioTrackButton = /* @__PURE__ */ function(_TrackButton) {
    import_inheritsLoose2.default(AudioTrackButton2, _TrackButton);
    function AudioTrackButton2(player, options) {
      if (options === void 0) {
        options = {};
      }
      options.tracks = player.audioTracks();
      return _TrackButton.call(this, player, options) || this;
    }
    var _proto = AudioTrackButton2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-audio-button " + _TrackButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-audio-button " + _TrackButton.prototype.buildWrapperCSSClass.call(this);
    };
    _proto.createItems = function createItems(items) {
      if (items === void 0) {
        items = [];
      }
      this.hideThreshold_ = 1;
      var tracks = this.player_.audioTracks();
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        items.push(new AudioTrackMenuItem(this.player_, {
          track,
          selectable: true,
          multiSelectable: false
        }));
      }
      return items;
    };
    return AudioTrackButton2;
  }(TrackButton);
  AudioTrackButton.prototype.controlText_ = "Audio Track";
  Component.registerComponent("AudioTrackButton", AudioTrackButton);
  var PlaybackRateMenuItem = /* @__PURE__ */ function(_MenuItem) {
    import_inheritsLoose2.default(PlaybackRateMenuItem2, _MenuItem);
    function PlaybackRateMenuItem2(player, options) {
      var _this;
      var label = options.rate;
      var rate = parseFloat(label, 10);
      options.label = label;
      options.selected = rate === 1;
      options.selectable = true;
      options.multiSelectable = false;
      _this = _MenuItem.call(this, player, options) || this;
      _this.label = label;
      _this.rate = rate;
      _this.on(player, "ratechange", _this.update);
      return _this;
    }
    var _proto = PlaybackRateMenuItem2.prototype;
    _proto.handleClick = function handleClick(event) {
      _MenuItem.prototype.handleClick.call(this);
      this.player().playbackRate(this.rate);
    };
    _proto.update = function update(event) {
      this.selected(this.player().playbackRate() === this.rate);
    };
    return PlaybackRateMenuItem2;
  }(MenuItem);
  PlaybackRateMenuItem.prototype.contentElType = "button";
  Component.registerComponent("PlaybackRateMenuItem", PlaybackRateMenuItem);
  var PlaybackRateMenuButton = /* @__PURE__ */ function(_MenuButton) {
    import_inheritsLoose2.default(PlaybackRateMenuButton2, _MenuButton);
    function PlaybackRateMenuButton2(player, options) {
      var _this;
      _this = _MenuButton.call(this, player, options) || this;
      _this.updateVisibility();
      _this.updateLabel();
      _this.on(player, "loadstart", _this.updateVisibility);
      _this.on(player, "ratechange", _this.updateLabel);
      return _this;
    }
    var _proto = PlaybackRateMenuButton2.prototype;
    _proto.createEl = function createEl$1() {
      var el = _MenuButton.prototype.createEl.call(this);
      this.labelEl_ = createEl("div", {
        className: "vjs-playback-rate-value",
        innerHTML: "1x"
      });
      el.appendChild(this.labelEl_);
      return el;
    };
    _proto.dispose = function dispose3() {
      this.labelEl_ = null;
      _MenuButton.prototype.dispose.call(this);
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-playback-rate " + _MenuButton.prototype.buildCSSClass.call(this);
    };
    _proto.buildWrapperCSSClass = function buildWrapperCSSClass() {
      return "vjs-playback-rate " + _MenuButton.prototype.buildWrapperCSSClass.call(this);
    };
    _proto.createMenu = function createMenu() {
      var menu = new Menu(this.player());
      var rates = this.playbackRates();
      if (rates) {
        for (var i = rates.length - 1; i >= 0; i--) {
          menu.addChild(new PlaybackRateMenuItem(this.player(), {
            rate: rates[i] + "x"
          }));
        }
      }
      return menu;
    };
    _proto.updateARIAAttributes = function updateARIAAttributes() {
      this.el().setAttribute("aria-valuenow", this.player().playbackRate());
    };
    _proto.handleClick = function handleClick(event) {
      var currentRate = this.player().playbackRate();
      var rates = this.playbackRates();
      var newRate = rates[0];
      for (var i = 0; i < rates.length; i++) {
        if (rates[i] > currentRate) {
          newRate = rates[i];
          break;
        }
      }
      this.player().playbackRate(newRate);
    };
    _proto.playbackRates = function playbackRates() {
      return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
    };
    _proto.playbackRateSupported = function playbackRateSupported() {
      return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
    };
    _proto.updateVisibility = function updateVisibility(event) {
      if (this.playbackRateSupported()) {
        this.removeClass("vjs-hidden");
      } else {
        this.addClass("vjs-hidden");
      }
    };
    _proto.updateLabel = function updateLabel(event) {
      if (this.playbackRateSupported()) {
        this.labelEl_.innerHTML = this.player().playbackRate() + "x";
      }
    };
    return PlaybackRateMenuButton2;
  }(MenuButton);
  PlaybackRateMenuButton.prototype.controlText_ = "Playback Rate";
  Component.registerComponent("PlaybackRateMenuButton", PlaybackRateMenuButton);
  var Spacer = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(Spacer2, _Component);
    function Spacer2() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = Spacer2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-spacer " + _Component.prototype.buildCSSClass.call(this);
    };
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: this.buildCSSClass()
      });
    };
    return Spacer2;
  }(Component);
  Component.registerComponent("Spacer", Spacer);
  var CustomControlSpacer = /* @__PURE__ */ function(_Spacer) {
    import_inheritsLoose2.default(CustomControlSpacer2, _Spacer);
    function CustomControlSpacer2() {
      return _Spacer.apply(this, arguments) || this;
    }
    var _proto = CustomControlSpacer2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-custom-control-spacer " + _Spacer.prototype.buildCSSClass.call(this);
    };
    _proto.createEl = function createEl2() {
      var el = _Spacer.prototype.createEl.call(this, {
        className: this.buildCSSClass()
      });
      el.innerHTML = "\xA0";
      return el;
    };
    return CustomControlSpacer2;
  }(Spacer);
  Component.registerComponent("CustomControlSpacer", CustomControlSpacer);
  var ControlBar = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(ControlBar2, _Component);
    function ControlBar2() {
      return _Component.apply(this, arguments) || this;
    }
    var _proto = ControlBar2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "div", {
        className: "vjs-control-bar",
        dir: "ltr"
      });
    };
    return ControlBar2;
  }(Component);
  ControlBar.prototype.options_ = {
    children: ["playToggle", "volumePanel", "currentTimeDisplay", "timeDivider", "durationDisplay", "progressControl", "liveDisplay", "seekToLive", "remainingTimeDisplay", "customControlSpacer", "playbackRateMenuButton", "chaptersButton", "descriptionsButton", "subsCapsButton", "audioTrackButton", "fullscreenToggle"]
  };
  if ("exitPictureInPicture" in import_document.default) {
    ControlBar.prototype.options_.children.splice(ControlBar.prototype.options_.children.length - 1, 0, "pictureInPictureToggle");
  }
  Component.registerComponent("ControlBar", ControlBar);
  var ErrorDisplay = /* @__PURE__ */ function(_ModalDialog) {
    import_inheritsLoose2.default(ErrorDisplay2, _ModalDialog);
    function ErrorDisplay2(player, options) {
      var _this;
      _this = _ModalDialog.call(this, player, options) || this;
      _this.on(player, "error", _this.open);
      return _this;
    }
    var _proto = ErrorDisplay2.prototype;
    _proto.buildCSSClass = function buildCSSClass() {
      return "vjs-error-display " + _ModalDialog.prototype.buildCSSClass.call(this);
    };
    _proto.content = function content() {
      var error = this.player().error();
      return error ? this.localize(error.message) : "";
    };
    return ErrorDisplay2;
  }(ModalDialog);
  ErrorDisplay.prototype.options_ = import_extends2.default({}, ModalDialog.prototype.options_, {
    pauseOnOpen: false,
    fillAlways: true,
    temporary: false,
    uncloseable: true
  });
  Component.registerComponent("ErrorDisplay", ErrorDisplay);
  var LOCAL_STORAGE_KEY = "vjs-text-track-settings";
  var COLOR_BLACK = ["#000", "Black"];
  var COLOR_BLUE = ["#00F", "Blue"];
  var COLOR_CYAN = ["#0FF", "Cyan"];
  var COLOR_GREEN = ["#0F0", "Green"];
  var COLOR_MAGENTA = ["#F0F", "Magenta"];
  var COLOR_RED = ["#F00", "Red"];
  var COLOR_WHITE = ["#FFF", "White"];
  var COLOR_YELLOW = ["#FF0", "Yellow"];
  var OPACITY_OPAQUE = ["1", "Opaque"];
  var OPACITY_SEMI = ["0.5", "Semi-Transparent"];
  var OPACITY_TRANS = ["0", "Transparent"];
  var selectConfigs = {
    backgroundColor: {
      selector: ".vjs-bg-color > select",
      id: "captions-background-color-%s",
      label: "Color",
      options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },
    backgroundOpacity: {
      selector: ".vjs-bg-opacity > select",
      id: "captions-background-opacity-%s",
      label: "Transparency",
      options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
    },
    color: {
      selector: ".vjs-fg-color > select",
      id: "captions-foreground-color-%s",
      label: "Color",
      options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
    },
    edgeStyle: {
      selector: ".vjs-edge-style > select",
      id: "%s",
      label: "Text Edge Style",
      options: [["none", "None"], ["raised", "Raised"], ["depressed", "Depressed"], ["uniform", "Uniform"], ["dropshadow", "Dropshadow"]]
    },
    fontFamily: {
      selector: ".vjs-font-family > select",
      id: "captions-font-family-%s",
      label: "Font Family",
      options: [["proportionalSansSerif", "Proportional Sans-Serif"], ["monospaceSansSerif", "Monospace Sans-Serif"], ["proportionalSerif", "Proportional Serif"], ["monospaceSerif", "Monospace Serif"], ["casual", "Casual"], ["script", "Script"], ["small-caps", "Small Caps"]]
    },
    fontPercent: {
      selector: ".vjs-font-percent > select",
      id: "captions-font-size-%s",
      label: "Font Size",
      options: [["0.50", "50%"], ["0.75", "75%"], ["1.00", "100%"], ["1.25", "125%"], ["1.50", "150%"], ["1.75", "175%"], ["2.00", "200%"], ["3.00", "300%"], ["4.00", "400%"]],
      default: 2,
      parser: function parser(v) {
        return v === "1.00" ? null : Number(v);
      }
    },
    textOpacity: {
      selector: ".vjs-text-opacity > select",
      id: "captions-foreground-opacity-%s",
      label: "Transparency",
      options: [OPACITY_OPAQUE, OPACITY_SEMI]
    },
    windowColor: {
      selector: ".vjs-window-color > select",
      id: "captions-window-color-%s",
      label: "Color"
    },
    windowOpacity: {
      selector: ".vjs-window-opacity > select",
      id: "captions-window-opacity-%s",
      label: "Transparency",
      options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
    }
  };
  selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;
  function parseOptionValue(value, parser2) {
    if (parser2) {
      value = parser2(value);
    }
    if (value && value !== "none") {
      return value;
    }
  }
  function getSelectedOptionValue(el, parser2) {
    var value = el.options[el.options.selectedIndex].value;
    return parseOptionValue(value, parser2);
  }
  function setSelectedOption(el, value, parser2) {
    if (!value) {
      return;
    }
    for (var i = 0; i < el.options.length; i++) {
      if (parseOptionValue(el.options[i].value, parser2) === value) {
        el.selectedIndex = i;
        break;
      }
    }
  }
  var TextTrackSettings = /* @__PURE__ */ function(_ModalDialog) {
    import_inheritsLoose2.default(TextTrackSettings2, _ModalDialog);
    function TextTrackSettings2(player, options) {
      var _this;
      options.temporary = false;
      _this = _ModalDialog.call(this, player, options) || this;
      _this.updateDisplay = bind(import_assertThisInitialized2.default(_this), _this.updateDisplay);
      _this.fill();
      _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;
      _this.endDialog = createEl("p", {
        className: "vjs-control-text",
        textContent: _this.localize("End of dialog window.")
      });
      _this.el().appendChild(_this.endDialog);
      _this.setDefaults();
      if (options.persistTextTrackSettings === void 0) {
        _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
      }
      _this.on(_this.$(".vjs-done-button"), "click", function() {
        _this.saveSettings();
        _this.close();
      });
      _this.on(_this.$(".vjs-default-button"), "click", function() {
        _this.setDefaults();
        _this.updateDisplay();
      });
      each(selectConfigs, function(config) {
        _this.on(_this.$(config.selector), "change", _this.updateDisplay);
      });
      if (_this.options_.persistTextTrackSettings) {
        _this.restoreSettings();
      }
      return _this;
    }
    var _proto = TextTrackSettings2.prototype;
    _proto.dispose = function dispose3() {
      this.endDialog = null;
      _ModalDialog.prototype.dispose.call(this);
    };
    _proto.createElSelect_ = function createElSelect_(key, legendId, type3) {
      var _this2 = this;
      if (legendId === void 0) {
        legendId = "";
      }
      if (type3 === void 0) {
        type3 = "label";
      }
      var config = selectConfigs[key];
      var id = config.id.replace("%s", this.id_);
      var selectLabelledbyIds = [legendId, id].join(" ").trim();
      return ["<" + type3 + ' id="' + id + '" class="' + (type3 === "label" ? "vjs-label" : "") + '">', this.localize(config.label), "</" + type3 + ">", '<select aria-labelledby="' + selectLabelledbyIds + '">'].concat(config.options.map(function(o) {
        var optionId = id + "-" + o[1].replace(/\W+/g, "");
        return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + selectLabelledbyIds + " " + optionId + '">', _this2.localize(o[1]), "</option>"].join("");
      })).concat("</select>").join("");
    };
    _proto.createElFgColor_ = function createElFgColor_() {
      var legendId = "captions-text-legend-" + this.id_;
      return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize("Text"), "</legend>", this.createElSelect_("color", legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_("textOpacity", legendId), "</span>", "</fieldset>"].join("");
    };
    _proto.createElBgColor_ = function createElBgColor_() {
      var legendId = "captions-background-" + this.id_;
      return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize("Background"), "</legend>", this.createElSelect_("backgroundColor", legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_("backgroundOpacity", legendId), "</span>", "</fieldset>"].join("");
    };
    _proto.createElWinColor_ = function createElWinColor_() {
      var legendId = "captions-window-" + this.id_;
      return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize("Window"), "</legend>", this.createElSelect_("windowColor", legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_("windowOpacity", legendId), "</span>", "</fieldset>"].join("");
    };
    _proto.createElColors_ = function createElColors_() {
      return createEl("div", {
        className: "vjs-track-settings-colors",
        innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join("")
      });
    };
    _proto.createElFont_ = function createElFont_() {
      return createEl("div", {
        className: "vjs-track-settings-font",
        innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_("fontPercent", "", "legend"), "</fieldset>", '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_("edgeStyle", "", "legend"), "</fieldset>", '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_("fontFamily", "", "legend"), "</fieldset>"].join("")
      });
    };
    _proto.createElControls_ = function createElControls_() {
      var defaultsDescription = this.localize("restore all settings to the default values");
      return createEl("div", {
        className: "vjs-track-settings-controls",
        innerHTML: ['<button type="button" class="vjs-default-button" title="' + defaultsDescription + '">', this.localize("Reset"), '<span class="vjs-control-text"> ' + defaultsDescription + "</span>", "</button>", '<button type="button" class="vjs-done-button">' + this.localize("Done") + "</button>"].join("")
      });
    };
    _proto.content = function content() {
      return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
    };
    _proto.label = function label() {
      return this.localize("Caption Settings Dialog");
    };
    _proto.description = function description() {
      return this.localize("Beginning of dialog window. Escape will cancel and close the window.");
    };
    _proto.buildCSSClass = function buildCSSClass() {
      return _ModalDialog.prototype.buildCSSClass.call(this) + " vjs-text-track-settings";
    };
    _proto.getValues = function getValues() {
      var _this3 = this;
      return reduce(selectConfigs, function(accum, config, key) {
        var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);
        if (value !== void 0) {
          accum[key] = value;
        }
        return accum;
      }, {});
    };
    _proto.setValues = function setValues(values3) {
      var _this4 = this;
      each(selectConfigs, function(config, key) {
        setSelectedOption(_this4.$(config.selector), values3[key], config.parser);
      });
    };
    _proto.setDefaults = function setDefaults() {
      var _this5 = this;
      each(selectConfigs, function(config) {
        var index = config.hasOwnProperty("default") ? config["default"] : 0;
        _this5.$(config.selector).selectedIndex = index;
      });
    };
    _proto.restoreSettings = function restoreSettings() {
      var values3;
      try {
        values3 = JSON.parse(import_window2.default.localStorage.getItem(LOCAL_STORAGE_KEY));
      } catch (err) {
        log.warn(err);
      }
      if (values3) {
        this.setValues(values3);
      }
    };
    _proto.saveSettings = function saveSettings() {
      if (!this.options_.persistTextTrackSettings) {
        return;
      }
      var values3 = this.getValues();
      try {
        if (Object.keys(values3).length) {
          import_window2.default.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values3));
        } else {
          import_window2.default.localStorage.removeItem(LOCAL_STORAGE_KEY);
        }
      } catch (err) {
        log.warn(err);
      }
    };
    _proto.updateDisplay = function updateDisplay() {
      var ttDisplay = this.player_.getChild("textTrackDisplay");
      if (ttDisplay) {
        ttDisplay.updateDisplay();
      }
    };
    _proto.conditionalBlur_ = function conditionalBlur_() {
      this.previouslyActiveEl_ = null;
      var cb = this.player_.controlBar;
      var subsCapsBtn = cb && cb.subsCapsButton;
      var ccBtn = cb && cb.captionsButton;
      if (subsCapsBtn) {
        subsCapsBtn.focus();
      } else if (ccBtn) {
        ccBtn.focus();
      }
    };
    return TextTrackSettings2;
  }(ModalDialog);
  Component.registerComponent("TextTrackSettings", TextTrackSettings);
  var ResizeManager = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(ResizeManager2, _Component);
    function ResizeManager2(player, options) {
      var _this;
      var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || import_window2.default.ResizeObserver;
      if (options.ResizeObserver === null) {
        RESIZE_OBSERVER_AVAILABLE = false;
      }
      var options_ = mergeOptions({
        createEl: !RESIZE_OBSERVER_AVAILABLE,
        reportTouchActivity: false
      }, options);
      _this = _Component.call(this, player, options_) || this;
      _this.ResizeObserver = options.ResizeObserver || import_window2.default.ResizeObserver;
      _this.loadListener_ = null;
      _this.resizeObserver_ = null;
      _this.debouncedHandler_ = debounce(function() {
        _this.resizeHandler();
      }, 100, false, import_assertThisInitialized2.default(_this));
      if (RESIZE_OBSERVER_AVAILABLE) {
        _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);
        _this.resizeObserver_.observe(player.el());
      } else {
        _this.loadListener_ = function() {
          if (!_this.el_ || !_this.el_.contentWindow) {
            return;
          }
          var debouncedHandler_ = _this.debouncedHandler_;
          var unloadListener_ = _this.unloadListener_ = function() {
            off(this, "resize", debouncedHandler_);
            off(this, "unload", unloadListener_);
            unloadListener_ = null;
          };
          on(_this.el_.contentWindow, "unload", unloadListener_);
          on(_this.el_.contentWindow, "resize", debouncedHandler_);
        };
        _this.one("load", _this.loadListener_);
      }
      return _this;
    }
    var _proto = ResizeManager2.prototype;
    _proto.createEl = function createEl2() {
      return _Component.prototype.createEl.call(this, "iframe", {
        className: "vjs-resize-manager",
        tabIndex: -1
      }, {
        "aria-hidden": "true"
      });
    };
    _proto.resizeHandler = function resizeHandler() {
      if (!this.player_ || !this.player_.trigger) {
        return;
      }
      this.player_.trigger("playerresize");
    };
    _proto.dispose = function dispose3() {
      if (this.debouncedHandler_) {
        this.debouncedHandler_.cancel();
      }
      if (this.resizeObserver_) {
        if (this.player_.el()) {
          this.resizeObserver_.unobserve(this.player_.el());
        }
        this.resizeObserver_.disconnect();
      }
      if (this.loadListener_) {
        this.off("load", this.loadListener_);
      }
      if (this.el_ && this.el_.contentWindow && this.unloadListener_) {
        this.unloadListener_.call(this.el_.contentWindow);
      }
      this.ResizeObserver = null;
      this.resizeObserver = null;
      this.debouncedHandler_ = null;
      this.loadListener_ = null;
      _Component.prototype.dispose.call(this);
    };
    return ResizeManager2;
  }(Component);
  Component.registerComponent("ResizeManager", ResizeManager);
  var defaults = {
    trackingThreshold: 30,
    liveTolerance: 15
  };
  var LiveTracker = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(LiveTracker2, _Component);
    function LiveTracker2(player, options) {
      var _this;
      var options_ = mergeOptions(defaults, options, {
        createEl: false
      });
      _this = _Component.call(this, player, options_) || this;
      _this.reset_();
      _this.on(_this.player_, "durationchange", _this.handleDurationchange);
      if (IE_VERSION && "hidden" in import_document.default && "visibilityState" in import_document.default) {
        _this.on(import_document.default, "visibilitychange", _this.handleVisibilityChange);
      }
      return _this;
    }
    var _proto = LiveTracker2.prototype;
    _proto.handleVisibilityChange = function handleVisibilityChange() {
      if (this.player_.duration() !== Infinity) {
        return;
      }
      if (import_document.default.hidden) {
        this.stopTracking();
      } else {
        this.startTracking();
      }
    };
    _proto.trackLive_ = function trackLive_() {
      var seekable3 = this.player_.seekable();
      if (!seekable3 || !seekable3.length) {
        return;
      }
      var newTime = Number(import_window2.default.performance.now().toFixed(4));
      var deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1e3;
      this.lastTime_ = newTime;
      this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;
      var liveCurrentTime = this.liveCurrentTime();
      var currentTime = this.player_.currentTime();
      var isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;
      if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {
        isBehind = false;
      }
      if (isBehind !== this.behindLiveEdge_) {
        this.behindLiveEdge_ = isBehind;
        this.trigger("liveedgechange");
      }
    };
    _proto.handleDurationchange = function handleDurationchange() {
      if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {
        if (this.player_.options_.liveui) {
          this.player_.addClass("vjs-liveui");
        }
        this.startTracking();
      } else {
        this.player_.removeClass("vjs-liveui");
        this.stopTracking();
      }
    };
    _proto.startTracking = function startTracking() {
      if (this.isTracking()) {
        return;
      }
      if (!this.timeupdateSeen_) {
        this.timeupdateSeen_ = this.player_.hasStarted();
      }
      this.trackingInterval_ = this.setInterval(this.trackLive_, UPDATE_REFRESH_INTERVAL);
      this.trackLive_();
      this.on(this.player_, ["play", "pause"], this.trackLive_);
      if (!this.timeupdateSeen_) {
        this.one(this.player_, "play", this.handlePlay);
        this.one(this.player_, "timeupdate", this.handleFirstTimeupdate);
      } else {
        this.on(this.player_, "seeked", this.handleSeeked);
      }
    };
    _proto.handleFirstTimeupdate = function handleFirstTimeupdate() {
      this.timeupdateSeen_ = true;
      this.on(this.player_, "seeked", this.handleSeeked);
    };
    _proto.handleSeeked = function handleSeeked() {
      var timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());
      this.seekedBehindLive_ = this.skipNextSeeked_ ? false : timeDiff > 2;
      this.skipNextSeeked_ = false;
      this.trackLive_();
    };
    _proto.handlePlay = function handlePlay() {
      this.one(this.player_, "timeupdate", this.seekToLiveEdge);
    };
    _proto.reset_ = function reset_() {
      this.lastTime_ = -1;
      this.pastSeekEnd_ = 0;
      this.lastSeekEnd_ = -1;
      this.behindLiveEdge_ = true;
      this.timeupdateSeen_ = false;
      this.seekedBehindLive_ = false;
      this.skipNextSeeked_ = false;
      this.clearInterval(this.trackingInterval_);
      this.trackingInterval_ = null;
      this.off(this.player_, ["play", "pause"], this.trackLive_);
      this.off(this.player_, "seeked", this.handleSeeked);
      this.off(this.player_, "play", this.handlePlay);
      this.off(this.player_, "timeupdate", this.handleFirstTimeupdate);
      this.off(this.player_, "timeupdate", this.seekToLiveEdge);
    };
    _proto.stopTracking = function stopTracking() {
      if (!this.isTracking()) {
        return;
      }
      this.reset_();
      this.trigger("liveedgechange");
    };
    _proto.seekableEnd = function seekableEnd() {
      var seekable3 = this.player_.seekable();
      var seekableEnds = [];
      var i = seekable3 ? seekable3.length : 0;
      while (i--) {
        seekableEnds.push(seekable3.end(i));
      }
      return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;
    };
    _proto.seekableStart = function seekableStart() {
      var seekable3 = this.player_.seekable();
      var seekableStarts = [];
      var i = seekable3 ? seekable3.length : 0;
      while (i--) {
        seekableStarts.push(seekable3.start(i));
      }
      return seekableStarts.length ? seekableStarts.sort()[0] : 0;
    };
    _proto.liveWindow = function liveWindow() {
      var liveCurrentTime = this.liveCurrentTime();
      if (liveCurrentTime === Infinity) {
        return 0;
      }
      return liveCurrentTime - this.seekableStart();
    };
    _proto.isLive = function isLive() {
      return this.isTracking();
    };
    _proto.atLiveEdge = function atLiveEdge() {
      return !this.behindLiveEdge();
    };
    _proto.liveCurrentTime = function liveCurrentTime() {
      return this.pastSeekEnd() + this.seekableEnd();
    };
    _proto.pastSeekEnd = function pastSeekEnd() {
      var seekableEnd = this.seekableEnd();
      if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {
        this.pastSeekEnd_ = 0;
      }
      this.lastSeekEnd_ = seekableEnd;
      return this.pastSeekEnd_;
    };
    _proto.behindLiveEdge = function behindLiveEdge() {
      return this.behindLiveEdge_;
    };
    _proto.isTracking = function isTracking() {
      return typeof this.trackingInterval_ === "number";
    };
    _proto.seekToLiveEdge = function seekToLiveEdge() {
      this.seekedBehindLive_ = false;
      if (this.atLiveEdge()) {
        return;
      }
      this.skipNextSeeked_ = true;
      this.player_.currentTime(this.liveCurrentTime());
    };
    _proto.dispose = function dispose3() {
      this.off(import_document.default, "visibilitychange", this.handleVisibilityChange);
      this.stopTracking();
      _Component.prototype.dispose.call(this);
    };
    return LiveTracker2;
  }(Component);
  Component.registerComponent("LiveTracker", LiveTracker);
  var sourcesetLoad = function sourcesetLoad2(tech) {
    var el = tech.el();
    if (el.hasAttribute("src")) {
      tech.triggerSourceset(el.src);
      return true;
    }
    var sources = tech.$$("source");
    var srcUrls = [];
    var src = "";
    if (!sources.length) {
      return false;
    }
    for (var i = 0; i < sources.length; i++) {
      var url = sources[i].src;
      if (url && srcUrls.indexOf(url) === -1) {
        srcUrls.push(url);
      }
    }
    if (!srcUrls.length) {
      return false;
    }
    if (srcUrls.length === 1) {
      src = srcUrls[0];
    }
    tech.triggerSourceset(src);
    return true;
  };
  var innerHTMLDescriptorPolyfill = Object.defineProperty({}, "innerHTML", {
    get: function get2() {
      return this.cloneNode(true).innerHTML;
    },
    set: function set2(v) {
      var dummy = import_document.default.createElement(this.nodeName.toLowerCase());
      dummy.innerHTML = v;
      var docFrag = import_document.default.createDocumentFragment();
      while (dummy.childNodes.length) {
        docFrag.appendChild(dummy.childNodes[0]);
      }
      this.innerText = "";
      import_window2.default.Element.prototype.appendChild.call(this, docFrag);
      return this.innerHTML;
    }
  });
  var getDescriptor = function getDescriptor2(priority, prop) {
    var descriptor = {};
    for (var i = 0; i < priority.length; i++) {
      descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);
      if (descriptor && descriptor.set && descriptor.get) {
        break;
      }
    }
    descriptor.enumerable = true;
    descriptor.configurable = true;
    return descriptor;
  };
  var getInnerHTMLDescriptor = function getInnerHTMLDescriptor2(tech) {
    return getDescriptor([tech.el(), import_window2.default.HTMLMediaElement.prototype, import_window2.default.Element.prototype, innerHTMLDescriptorPolyfill], "innerHTML");
  };
  var firstSourceWatch = function firstSourceWatch2(tech) {
    var el = tech.el();
    if (el.resetSourceWatch_) {
      return;
    }
    var old = {};
    var innerDescriptor = getInnerHTMLDescriptor(tech);
    var appendWrapper = function appendWrapper2(appendFn) {
      return function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var retval = appendFn.apply(el, args);
        sourcesetLoad(tech);
        return retval;
      };
    };
    ["append", "appendChild", "insertAdjacentHTML"].forEach(function(k) {
      if (!el[k]) {
        return;
      }
      old[k] = el[k];
      el[k] = appendWrapper(old[k]);
    });
    Object.defineProperty(el, "innerHTML", mergeOptions(innerDescriptor, {
      set: appendWrapper(innerDescriptor.set)
    }));
    el.resetSourceWatch_ = function() {
      el.resetSourceWatch_ = null;
      Object.keys(old).forEach(function(k) {
        el[k] = old[k];
      });
      Object.defineProperty(el, "innerHTML", innerDescriptor);
    };
    tech.one("sourceset", el.resetSourceWatch_);
  };
  var srcDescriptorPolyfill = Object.defineProperty({}, "src", {
    get: function get3() {
      if (this.hasAttribute("src")) {
        return getAbsoluteURL(import_window2.default.Element.prototype.getAttribute.call(this, "src"));
      }
      return "";
    },
    set: function set3(v) {
      import_window2.default.Element.prototype.setAttribute.call(this, "src", v);
      return v;
    }
  });
  var getSrcDescriptor = function getSrcDescriptor2(tech) {
    return getDescriptor([tech.el(), import_window2.default.HTMLMediaElement.prototype, srcDescriptorPolyfill], "src");
  };
  var setupSourceset = function setupSourceset2(tech) {
    if (!tech.featuresSourceset) {
      return;
    }
    var el = tech.el();
    if (el.resetSourceset_) {
      return;
    }
    var srcDescriptor = getSrcDescriptor(tech);
    var oldSetAttribute = el.setAttribute;
    var oldLoad = el.load;
    Object.defineProperty(el, "src", mergeOptions(srcDescriptor, {
      set: function set4(v) {
        var retval = srcDescriptor.set.call(el, v);
        tech.triggerSourceset(el.src);
        return retval;
      }
    }));
    el.setAttribute = function(n, v) {
      var retval = oldSetAttribute.call(el, n, v);
      if (/src/i.test(n)) {
        tech.triggerSourceset(el.src);
      }
      return retval;
    };
    el.load = function() {
      var retval = oldLoad.call(el);
      if (!sourcesetLoad(tech)) {
        tech.triggerSourceset("");
        firstSourceWatch(tech);
      }
      return retval;
    };
    if (el.currentSrc) {
      tech.triggerSourceset(el.currentSrc);
    } else if (!sourcesetLoad(tech)) {
      firstSourceWatch(tech);
    }
    el.resetSourceset_ = function() {
      el.resetSourceset_ = null;
      el.load = oldLoad;
      el.setAttribute = oldSetAttribute;
      Object.defineProperty(el, "src", srcDescriptor);
      if (el.resetSourceWatch_) {
        el.resetSourceWatch_();
      }
    };
  };
  var defineLazyProperty = function defineLazyProperty2(obj, key, getValue, setter) {
    if (setter === void 0) {
      setter = true;
    }
    var set4 = function set5(value) {
      return Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        writable: true
      });
    };
    var options = {
      configurable: true,
      enumerable: true,
      get: function get7() {
        var value = getValue();
        set4(value);
        return value;
      }
    };
    if (setter) {
      options.set = set4;
    }
    return Object.defineProperty(obj, key, options);
  };
  var Html5 = /* @__PURE__ */ function(_Tech) {
    import_inheritsLoose2.default(Html52, _Tech);
    function Html52(options, ready) {
      var _this;
      _this = _Tech.call(this, options, ready) || this;
      var source = options.source;
      var crossoriginTracks = false;
      if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
        _this.setSource(source);
      } else {
        _this.handleLateInit_(_this.el_);
      }
      if (options.enableSourceset) {
        _this.setupSourcesetHandling_();
      }
      _this.isScrubbing_ = false;
      if (_this.el_.hasChildNodes()) {
        var nodes = _this.el_.childNodes;
        var nodesLength = nodes.length;
        var removeNodes = [];
        while (nodesLength--) {
          var node = nodes[nodesLength];
          var nodeName = node.nodeName.toLowerCase();
          if (nodeName === "track") {
            if (!_this.featuresNativeTextTracks) {
              removeNodes.push(node);
            } else {
              _this.remoteTextTrackEls().addTrackElement_(node);
              _this.remoteTextTracks().addTrack(node.track);
              _this.textTracks().addTrack(node.track);
              if (!crossoriginTracks && !_this.el_.hasAttribute("crossorigin") && isCrossOrigin(node.src)) {
                crossoriginTracks = true;
              }
            }
          }
        }
        for (var i = 0; i < removeNodes.length; i++) {
          _this.el_.removeChild(removeNodes[i]);
        }
      }
      _this.proxyNativeTracks_();
      if (_this.featuresNativeTextTracks && crossoriginTracks) {
        log.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading.");
      }
      _this.restoreMetadataTracksInIOSNativePlayer_();
      if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
        _this.setControls(true);
      }
      _this.proxyWebkitFullscreen_();
      _this.triggerReady();
      return _this;
    }
    var _proto = Html52.prototype;
    _proto.dispose = function dispose3() {
      if (this.el_ && this.el_.resetSourceset_) {
        this.el_.resetSourceset_();
      }
      Html52.disposeMediaElement(this.el_);
      this.options_ = null;
      _Tech.prototype.dispose.call(this);
    };
    _proto.setupSourcesetHandling_ = function setupSourcesetHandling_() {
      setupSourceset(this);
    };
    _proto.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
      var textTracks = this.textTracks();
      var metadataTracksPreFullscreenState;
      var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot2() {
        metadataTracksPreFullscreenState = [];
        for (var i = 0; i < textTracks.length; i++) {
          var track = textTracks[i];
          if (track.kind === "metadata") {
            metadataTracksPreFullscreenState.push({
              track,
              storedMode: track.mode
            });
          }
        }
      };
      takeMetadataTrackSnapshot();
      textTracks.addEventListener("change", takeMetadataTrackSnapshot);
      this.on("dispose", function() {
        return textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
      });
      var restoreTrackMode = function restoreTrackMode2() {
        for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
          var storedTrack = metadataTracksPreFullscreenState[i];
          if (storedTrack.track.mode === "disabled" && storedTrack.track.mode !== storedTrack.storedMode) {
            storedTrack.track.mode = storedTrack.storedMode;
          }
        }
        textTracks.removeEventListener("change", restoreTrackMode2);
      };
      this.on("webkitbeginfullscreen", function() {
        textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
        textTracks.removeEventListener("change", restoreTrackMode);
        textTracks.addEventListener("change", restoreTrackMode);
      });
      this.on("webkitendfullscreen", function() {
        textTracks.removeEventListener("change", takeMetadataTrackSnapshot);
        textTracks.addEventListener("change", takeMetadataTrackSnapshot);
        textTracks.removeEventListener("change", restoreTrackMode);
      });
    };
    _proto.overrideNative_ = function overrideNative_(type3, override) {
      var _this2 = this;
      if (override !== this["featuresNative" + type3 + "Tracks"]) {
        return;
      }
      var lowerCaseType = type3.toLowerCase();
      if (this[lowerCaseType + "TracksListeners_"]) {
        Object.keys(this[lowerCaseType + "TracksListeners_"]).forEach(function(eventName) {
          var elTracks = _this2.el()[lowerCaseType + "Tracks"];
          elTracks.removeEventListener(eventName, _this2[lowerCaseType + "TracksListeners_"][eventName]);
        });
      }
      this["featuresNative" + type3 + "Tracks"] = !override;
      this[lowerCaseType + "TracksListeners_"] = null;
      this.proxyNativeTracksForType_(lowerCaseType);
    };
    _proto.overrideNativeAudioTracks = function overrideNativeAudioTracks(override) {
      this.overrideNative_("Audio", override);
    };
    _proto.overrideNativeVideoTracks = function overrideNativeVideoTracks(override) {
      this.overrideNative_("Video", override);
    };
    _proto.proxyNativeTracksForType_ = function proxyNativeTracksForType_(name) {
      var _this3 = this;
      var props = NORMAL[name];
      var elTracks = this.el()[props.getterName];
      var techTracks = this[props.getterName]();
      if (!this["featuresNative" + props.capitalName + "Tracks"] || !elTracks || !elTracks.addEventListener) {
        return;
      }
      var listeners = {
        change: function change(e) {
          var event = {
            type: "change",
            target: techTracks,
            currentTarget: techTracks,
            srcElement: techTracks
          };
          techTracks.trigger(event);
          if (name === "text") {
            _this3[REMOTE.remoteText.getterName]().trigger(event);
          }
        },
        addtrack: function addtrack(e) {
          techTracks.addTrack(e.track);
        },
        removetrack: function removetrack(e) {
          techTracks.removeTrack(e.track);
        }
      };
      var removeOldTracks = function removeOldTracks2() {
        var removeTracks = [];
        for (var i = 0; i < techTracks.length; i++) {
          var found = false;
          for (var j = 0; j < elTracks.length; j++) {
            if (elTracks[j] === techTracks[i]) {
              found = true;
              break;
            }
          }
          if (!found) {
            removeTracks.push(techTracks[i]);
          }
        }
        while (removeTracks.length) {
          techTracks.removeTrack(removeTracks.shift());
        }
      };
      this[props.getterName + "Listeners_"] = listeners;
      Object.keys(listeners).forEach(function(eventName) {
        var listener = listeners[eventName];
        elTracks.addEventListener(eventName, listener);
        _this3.on("dispose", function(e) {
          return elTracks.removeEventListener(eventName, listener);
        });
      });
      this.on("loadstart", removeOldTracks);
      this.on("dispose", function(e) {
        return _this3.off("loadstart", removeOldTracks);
      });
    };
    _proto.proxyNativeTracks_ = function proxyNativeTracks_() {
      var _this4 = this;
      NORMAL.names.forEach(function(name) {
        _this4.proxyNativeTracksForType_(name);
      });
    };
    _proto.createEl = function createEl2() {
      var el = this.options_.tag;
      if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
        if (el) {
          var clone = el.cloneNode(true);
          if (el.parentNode) {
            el.parentNode.insertBefore(clone, el);
          }
          Html52.disposeMediaElement(el);
          el = clone;
        } else {
          el = import_document.default.createElement("video");
          var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
          var attributes = mergeOptions({}, tagAttributes);
          if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
            delete attributes.controls;
          }
          setAttributes(el, assign(attributes, {
            id: this.options_.techId,
            class: "vjs-tech"
          }));
        }
        el.playerId = this.options_.playerId;
      }
      if (typeof this.options_.preload !== "undefined") {
        setAttribute(el, "preload", this.options_.preload);
      }
      if (this.options_.disablePictureInPicture !== void 0) {
        el.disablePictureInPicture = this.options_.disablePictureInPicture;
      }
      var settingsAttrs = ["loop", "muted", "playsinline", "autoplay"];
      for (var i = 0; i < settingsAttrs.length; i++) {
        var attr = settingsAttrs[i];
        var value = this.options_[attr];
        if (typeof value !== "undefined") {
          if (value) {
            setAttribute(el, attr, attr);
          } else {
            removeAttribute(el, attr);
          }
          el[attr] = value;
        }
      }
      return el;
    };
    _proto.handleLateInit_ = function handleLateInit_(el) {
      if (el.networkState === 0 || el.networkState === 3) {
        return;
      }
      if (el.readyState === 0) {
        var loadstartFired = false;
        var setLoadstartFired = function setLoadstartFired2() {
          loadstartFired = true;
        };
        this.on("loadstart", setLoadstartFired);
        var triggerLoadstart = function triggerLoadstart2() {
          if (!loadstartFired) {
            this.trigger("loadstart");
          }
        };
        this.on("loadedmetadata", triggerLoadstart);
        this.ready(function() {
          this.off("loadstart", setLoadstartFired);
          this.off("loadedmetadata", triggerLoadstart);
          if (!loadstartFired) {
            this.trigger("loadstart");
          }
        });
        return;
      }
      var eventsToTrigger = ["loadstart"];
      eventsToTrigger.push("loadedmetadata");
      if (el.readyState >= 2) {
        eventsToTrigger.push("loadeddata");
      }
      if (el.readyState >= 3) {
        eventsToTrigger.push("canplay");
      }
      if (el.readyState >= 4) {
        eventsToTrigger.push("canplaythrough");
      }
      this.ready(function() {
        eventsToTrigger.forEach(function(type3) {
          this.trigger(type3);
        }, this);
      });
    };
    _proto.setScrubbing = function setScrubbing(isScrubbing) {
      this.isScrubbing_ = isScrubbing;
    };
    _proto.scrubbing = function scrubbing() {
      return this.isScrubbing_;
    };
    _proto.setCurrentTime = function setCurrentTime(seconds) {
      try {
        if (this.isScrubbing_ && this.el_.fastSeek && IS_ANY_SAFARI) {
          this.el_.fastSeek(seconds);
        } else {
          this.el_.currentTime = seconds;
        }
      } catch (e) {
        log(e, "Video is not ready. (Video.js)");
      }
    };
    _proto.duration = function duration5() {
      var _this5 = this;
      if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
        var checkProgress = function checkProgress2() {
          if (_this5.el_.currentTime > 0) {
            if (_this5.el_.duration === Infinity) {
              _this5.trigger("durationchange");
            }
            _this5.off("timeupdate", checkProgress2);
          }
        };
        this.on("timeupdate", checkProgress);
        return NaN;
      }
      return this.el_.duration || NaN;
    };
    _proto.width = function width2() {
      return this.el_.offsetWidth;
    };
    _proto.height = function height2() {
      return this.el_.offsetHeight;
    };
    _proto.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
      var _this6 = this;
      if (!("webkitDisplayingFullscreen" in this.el_)) {
        return;
      }
      var endFn = function endFn2() {
        this.trigger("fullscreenchange", {
          isFullscreen: false
        });
      };
      var beginFn = function beginFn2() {
        if ("webkitPresentationMode" in this.el_ && this.el_.webkitPresentationMode !== "picture-in-picture") {
          this.one("webkitendfullscreen", endFn);
          this.trigger("fullscreenchange", {
            isFullscreen: true,
            nativeIOSFullscreen: true
          });
        }
      };
      this.on("webkitbeginfullscreen", beginFn);
      this.on("dispose", function() {
        _this6.off("webkitbeginfullscreen", beginFn);
        _this6.off("webkitendfullscreen", endFn);
      });
    };
    _proto.supportsFullScreen = function supportsFullScreen() {
      if (typeof this.el_.webkitEnterFullScreen === "function") {
        var userAgent = import_window2.default.navigator && import_window2.default.navigator.userAgent || "";
        if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
          return true;
        }
      }
      return false;
    };
    _proto.enterFullScreen = function enterFullScreen() {
      var video = this.el_;
      if (video.paused && video.networkState <= video.HAVE_METADATA) {
        silencePromise(this.el_.play());
        this.setTimeout(function() {
          video.pause();
          try {
            video.webkitEnterFullScreen();
          } catch (e) {
            this.trigger("fullscreenerror", e);
          }
        }, 0);
      } else {
        try {
          video.webkitEnterFullScreen();
        } catch (e) {
          this.trigger("fullscreenerror", e);
        }
      }
    };
    _proto.exitFullScreen = function exitFullScreen() {
      if (!this.el_.webkitDisplayingFullscreen) {
        this.trigger("fullscreenerror", new Error("The video is not fullscreen"));
        return;
      }
      this.el_.webkitExitFullScreen();
    };
    _proto.requestPictureInPicture = function requestPictureInPicture() {
      return this.el_.requestPictureInPicture();
    };
    _proto.src = function src(_src) {
      if (_src === void 0) {
        return this.el_.src;
      }
      this.setSrc(_src);
    };
    _proto.reset = function reset3() {
      Html52.resetMediaElement(this.el_);
    };
    _proto.currentSrc = function currentSrc() {
      if (this.currentSource_) {
        return this.currentSource_.src;
      }
      return this.el_.currentSrc;
    };
    _proto.setControls = function setControls(val) {
      this.el_.controls = !!val;
    };
    _proto.addTextTrack = function addTextTrack(kind, label, language) {
      if (!this.featuresNativeTextTracks) {
        return _Tech.prototype.addTextTrack.call(this, kind, label, language);
      }
      return this.el_.addTextTrack(kind, label, language);
    };
    _proto.createRemoteTextTrack = function createRemoteTextTrack(options) {
      if (!this.featuresNativeTextTracks) {
        return _Tech.prototype.createRemoteTextTrack.call(this, options);
      }
      var htmlTrackElement = import_document.default.createElement("track");
      if (options.kind) {
        htmlTrackElement.kind = options.kind;
      }
      if (options.label) {
        htmlTrackElement.label = options.label;
      }
      if (options.language || options.srclang) {
        htmlTrackElement.srclang = options.language || options.srclang;
      }
      if (options["default"]) {
        htmlTrackElement["default"] = options["default"];
      }
      if (options.id) {
        htmlTrackElement.id = options.id;
      }
      if (options.src) {
        htmlTrackElement.src = options.src;
      }
      return htmlTrackElement;
    };
    _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
      var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);
      if (this.featuresNativeTextTracks) {
        this.el().appendChild(htmlTrackElement);
      }
      return htmlTrackElement;
    };
    _proto.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
      _Tech.prototype.removeRemoteTextTrack.call(this, track);
      if (this.featuresNativeTextTracks) {
        var tracks = this.$$("track");
        var i = tracks.length;
        while (i--) {
          if (track === tracks[i] || track === tracks[i].track) {
            this.el().removeChild(tracks[i]);
          }
        }
      }
    };
    _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
      if (typeof this.el().getVideoPlaybackQuality === "function") {
        return this.el().getVideoPlaybackQuality();
      }
      var videoPlaybackQuality = {};
      if (typeof this.el().webkitDroppedFrameCount !== "undefined" && typeof this.el().webkitDecodedFrameCount !== "undefined") {
        videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
        videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
      }
      if (import_window2.default.performance && typeof import_window2.default.performance.now === "function") {
        videoPlaybackQuality.creationTime = import_window2.default.performance.now();
      } else if (import_window2.default.performance && import_window2.default.performance.timing && typeof import_window2.default.performance.timing.navigationStart === "number") {
        videoPlaybackQuality.creationTime = import_window2.default.Date.now() - import_window2.default.performance.timing.navigationStart;
      }
      return videoPlaybackQuality;
    };
    return Html52;
  }(Tech);
  defineLazyProperty(Html5, "TEST_VID", function() {
    if (!isReal()) {
      return;
    }
    var video = import_document.default.createElement("video");
    var track = import_document.default.createElement("track");
    track.kind = "captions";
    track.srclang = "en";
    track.label = "English";
    video.appendChild(track);
    return video;
  });
  Html5.isSupported = function() {
    try {
      Html5.TEST_VID.volume = 0.5;
    } catch (e) {
      return false;
    }
    return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
  };
  Html5.canPlayType = function(type3) {
    return Html5.TEST_VID.canPlayType(type3);
  };
  Html5.canPlaySource = function(srcObj, options) {
    return Html5.canPlayType(srcObj.type);
  };
  Html5.canControlVolume = function() {
    try {
      var volume = Html5.TEST_VID.volume;
      Html5.TEST_VID.volume = volume / 2 + 0.1;
      return volume !== Html5.TEST_VID.volume;
    } catch (e) {
      return false;
    }
  };
  Html5.canMuteVolume = function() {
    try {
      var muted = Html5.TEST_VID.muted;
      Html5.TEST_VID.muted = !muted;
      if (Html5.TEST_VID.muted) {
        setAttribute(Html5.TEST_VID, "muted", "muted");
      } else {
        removeAttribute(Html5.TEST_VID, "muted", "muted");
      }
      return muted !== Html5.TEST_VID.muted;
    } catch (e) {
      return false;
    }
  };
  Html5.canControlPlaybackRate = function() {
    if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
      return false;
    }
    try {
      var playbackRate = Html5.TEST_VID.playbackRate;
      Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
      return playbackRate !== Html5.TEST_VID.playbackRate;
    } catch (e) {
      return false;
    }
  };
  Html5.canOverrideAttributes = function() {
    try {
      var noop2 = function noop3() {
      };
      Object.defineProperty(import_document.default.createElement("video"), "src", {
        get: noop2,
        set: noop2
      });
      Object.defineProperty(import_document.default.createElement("audio"), "src", {
        get: noop2,
        set: noop2
      });
      Object.defineProperty(import_document.default.createElement("video"), "innerHTML", {
        get: noop2,
        set: noop2
      });
      Object.defineProperty(import_document.default.createElement("audio"), "innerHTML", {
        get: noop2,
        set: noop2
      });
    } catch (e) {
      return false;
    }
    return true;
  };
  Html5.supportsNativeTextTracks = function() {
    return IS_ANY_SAFARI || IS_IOS && IS_CHROME;
  };
  Html5.supportsNativeVideoTracks = function() {
    return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
  };
  Html5.supportsNativeAudioTracks = function() {
    return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
  };
  Html5.Events = ["loadstart", "suspend", "abort", "error", "emptied", "stalled", "loadedmetadata", "loadeddata", "canplay", "canplaythrough", "playing", "waiting", "seeking", "seeked", "ended", "durationchange", "timeupdate", "progress", "play", "pause", "ratechange", "resize", "volumechange"];
  [["featuresVolumeControl", "canControlVolume"], ["featuresMuteControl", "canMuteVolume"], ["featuresPlaybackRate", "canControlPlaybackRate"], ["featuresSourceset", "canOverrideAttributes"], ["featuresNativeTextTracks", "supportsNativeTextTracks"], ["featuresNativeVideoTracks", "supportsNativeVideoTracks"], ["featuresNativeAudioTracks", "supportsNativeAudioTracks"]].forEach(function(_ref) {
    var key = _ref[0], fn = _ref[1];
    defineLazyProperty(Html5.prototype, key, function() {
      return Html5[fn]();
    }, true);
  });
  Html5.prototype.movingMediaElementInDOM = !IS_IOS;
  Html5.prototype.featuresFullscreenResize = true;
  Html5.prototype.featuresProgressEvents = true;
  Html5.prototype.featuresTimeupdateEvents = true;
  var canPlayType;
  Html5.patchCanPlayType = function() {
    if (ANDROID_VERSION >= 4 && !IS_FIREFOX && !IS_CHROME) {
      canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
      Html5.TEST_VID.constructor.prototype.canPlayType = function(type3) {
        var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
        if (type3 && mpegurlRE.test(type3)) {
          return "maybe";
        }
        return canPlayType.call(this, type3);
      };
    }
  };
  Html5.unpatchCanPlayType = function() {
    var r2 = Html5.TEST_VID.constructor.prototype.canPlayType;
    if (canPlayType) {
      Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
    }
    return r2;
  };
  Html5.patchCanPlayType();
  Html5.disposeMediaElement = function(el) {
    if (!el) {
      return;
    }
    if (el.parentNode) {
      el.parentNode.removeChild(el);
    }
    while (el.hasChildNodes()) {
      el.removeChild(el.firstChild);
    }
    el.removeAttribute("src");
    if (typeof el.load === "function") {
      (function() {
        try {
          el.load();
        } catch (e) {
        }
      })();
    }
  };
  Html5.resetMediaElement = function(el) {
    if (!el) {
      return;
    }
    var sources = el.querySelectorAll("source");
    var i = sources.length;
    while (i--) {
      el.removeChild(sources[i]);
    }
    el.removeAttribute("src");
    if (typeof el.load === "function") {
      (function() {
        try {
          el.load();
        } catch (e) {
        }
      })();
    }
  };
  [
    "muted",
    "defaultMuted",
    "autoplay",
    "controls",
    "loop",
    "playsinline"
  ].forEach(function(prop) {
    Html5.prototype[prop] = function() {
      return this.el_[prop] || this.el_.hasAttribute(prop);
    };
  });
  [
    "muted",
    "defaultMuted",
    "autoplay",
    "loop",
    "playsinline"
  ].forEach(function(prop) {
    Html5.prototype["set" + toTitleCase(prop)] = function(v) {
      this.el_[prop] = v;
      if (v) {
        this.el_.setAttribute(prop, prop);
      } else {
        this.el_.removeAttribute(prop);
      }
    };
  });
  [
    "paused",
    "currentTime",
    "buffered",
    "volume",
    "poster",
    "preload",
    "error",
    "seeking",
    "seekable",
    "ended",
    "playbackRate",
    "defaultPlaybackRate",
    "disablePictureInPicture",
    "played",
    "networkState",
    "readyState",
    "videoWidth",
    "videoHeight",
    "crossOrigin"
  ].forEach(function(prop) {
    Html5.prototype[prop] = function() {
      return this.el_[prop];
    };
  });
  [
    "volume",
    "src",
    "poster",
    "preload",
    "playbackRate",
    "defaultPlaybackRate",
    "disablePictureInPicture",
    "crossOrigin"
  ].forEach(function(prop) {
    Html5.prototype["set" + toTitleCase(prop)] = function(v) {
      this.el_[prop] = v;
    };
  });
  [
    "pause",
    "load",
    "play"
  ].forEach(function(prop) {
    Html5.prototype[prop] = function() {
      return this.el_[prop]();
    };
  });
  Tech.withSourceHandlers(Html5);
  Html5.nativeSourceHandler = {};
  Html5.nativeSourceHandler.canPlayType = function(type3) {
    try {
      return Html5.TEST_VID.canPlayType(type3);
    } catch (e) {
      return "";
    }
  };
  Html5.nativeSourceHandler.canHandleSource = function(source, options) {
    if (source.type) {
      return Html5.nativeSourceHandler.canPlayType(source.type);
    } else if (source.src) {
      var ext = getFileExtension(source.src);
      return Html5.nativeSourceHandler.canPlayType("video/" + ext);
    }
    return "";
  };
  Html5.nativeSourceHandler.handleSource = function(source, tech, options) {
    tech.setSrc(source.src);
  };
  Html5.nativeSourceHandler.dispose = function() {
  };
  Html5.registerSourceHandler(Html5.nativeSourceHandler);
  Tech.registerTech("Html5", Html5);
  var TECH_EVENTS_RETRIGGER = [
    "progress",
    "abort",
    "suspend",
    "emptied",
    "stalled",
    "loadedmetadata",
    "loadeddata",
    "timeupdate",
    "resize",
    "volumechange",
    "texttrackchange"
  ];
  var TECH_EVENTS_QUEUE = {
    canplay: "CanPlay",
    canplaythrough: "CanPlayThrough",
    playing: "Playing",
    seeked: "Seeked"
  };
  var BREAKPOINT_ORDER = ["tiny", "xsmall", "small", "medium", "large", "xlarge", "huge"];
  var BREAKPOINT_CLASSES = {};
  BREAKPOINT_ORDER.forEach(function(k) {
    var v = k.charAt(0) === "x" ? "x-" + k.substring(1) : k;
    BREAKPOINT_CLASSES[k] = "vjs-layout-" + v;
  });
  var DEFAULT_BREAKPOINTS = {
    tiny: 210,
    xsmall: 320,
    small: 425,
    medium: 768,
    large: 1440,
    xlarge: 2560,
    huge: Infinity
  };
  var Player = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(Player4, _Component);
    function Player4(tag, options, ready) {
      var _this;
      tag.id = tag.id || options.id || "vjs_video_" + newGUID();
      options = assign(Player4.getTagSettings(tag), options);
      options.initChildren = false;
      options.createEl = false;
      options.evented = false;
      options.reportTouchActivity = false;
      if (!options.language) {
        if (typeof tag.closest === "function") {
          var closest = tag.closest("[lang]");
          if (closest && closest.getAttribute) {
            options.language = closest.getAttribute("lang");
          }
        } else {
          var element = tag;
          while (element && element.nodeType === 1) {
            if (getAttributes(element).hasOwnProperty("lang")) {
              options.language = element.getAttribute("lang");
              break;
            }
            element = element.parentNode;
          }
        }
      }
      _this = _Component.call(this, null, options, ready) || this;
      _this.boundDocumentFullscreenChange_ = function(e) {
        return _this.documentFullscreenChange_(e);
      };
      _this.boundFullWindowOnEscKey_ = function(e) {
        return _this.fullWindowOnEscKey(e);
      };
      _this.isFullscreen_ = false;
      _this.log = createLogger$1(_this.id_);
      _this.fsApi_ = FullscreenApi;
      _this.isPosterFromTech_ = false;
      _this.queuedCallbacks_ = [];
      _this.isReady_ = false;
      _this.hasStarted_ = false;
      _this.userActive_ = false;
      _this.debugEnabled_ = false;
      if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
        throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");
      }
      _this.tag = tag;
      _this.tagAttributes = tag && getAttributes(tag);
      _this.language(_this.options_.language);
      if (options.languages) {
        var languagesToLower = {};
        Object.getOwnPropertyNames(options.languages).forEach(function(name) {
          languagesToLower[name.toLowerCase()] = options.languages[name];
        });
        _this.languages_ = languagesToLower;
      } else {
        _this.languages_ = Player4.prototype.options_.languages;
      }
      _this.resetCache_();
      _this.poster_ = options.poster || "";
      _this.controls_ = !!options.controls;
      tag.controls = false;
      tag.removeAttribute("controls");
      _this.changingSrc_ = false;
      _this.playCallbacks_ = [];
      _this.playTerminatedQueue_ = [];
      if (tag.hasAttribute("autoplay")) {
        _this.autoplay(true);
      } else {
        _this.autoplay(_this.options_.autoplay);
      }
      if (options.plugins) {
        Object.keys(options.plugins).forEach(function(name) {
          if (typeof _this[name] !== "function") {
            throw new Error('plugin "' + name + '" does not exist');
          }
        });
      }
      _this.scrubbing_ = false;
      _this.el_ = _this.createEl();
      evented(import_assertThisInitialized2.default(_this), {
        eventBusKey: "el_"
      });
      if (_this.fsApi_.requestFullscreen) {
        on(import_document.default, _this.fsApi_.fullscreenchange, _this.boundDocumentFullscreenChange_);
        _this.on(_this.fsApi_.fullscreenchange, _this.boundDocumentFullscreenChange_);
      }
      if (_this.fluid_) {
        _this.on(["playerreset", "resize"], _this.updateStyleEl_);
      }
      var playerOptionsCopy = mergeOptions(_this.options_);
      if (options.plugins) {
        Object.keys(options.plugins).forEach(function(name) {
          _this[name](options.plugins[name]);
        });
      }
      if (options.debug) {
        _this.debug(true);
      }
      _this.options_.playerOptions = playerOptionsCopy;
      _this.middleware_ = [];
      _this.initChildren();
      _this.isAudio(tag.nodeName.toLowerCase() === "audio");
      if (_this.controls()) {
        _this.addClass("vjs-controls-enabled");
      } else {
        _this.addClass("vjs-controls-disabled");
      }
      _this.el_.setAttribute("role", "region");
      if (_this.isAudio()) {
        _this.el_.setAttribute("aria-label", _this.localize("Audio Player"));
      } else {
        _this.el_.setAttribute("aria-label", _this.localize("Video Player"));
      }
      if (_this.isAudio()) {
        _this.addClass("vjs-audio");
      }
      if (_this.flexNotSupported_()) {
        _this.addClass("vjs-no-flex");
      }
      if (TOUCH_ENABLED) {
        _this.addClass("vjs-touch-enabled");
      }
      if (!IS_IOS) {
        _this.addClass("vjs-workinghover");
      }
      Player4.players[_this.id_] = import_assertThisInitialized2.default(_this);
      var majorVersion = version.split(".")[0];
      _this.addClass("vjs-v" + majorVersion);
      _this.userActive(true);
      _this.reportUserActivity();
      _this.one("play", _this.listenForUserActivity_);
      _this.on("stageclick", _this.handleStageClick_);
      _this.on("keydown", _this.handleKeyDown);
      _this.on("languagechange", _this.handleLanguagechange);
      _this.breakpoints(_this.options_.breakpoints);
      _this.responsive(_this.options_.responsive);
      return _this;
    }
    var _proto = Player4.prototype;
    _proto.dispose = function dispose3() {
      var _this2 = this;
      this.trigger("dispose");
      this.off("dispose");
      off(import_document.default, this.fsApi_.fullscreenchange, this.boundDocumentFullscreenChange_);
      off(import_document.default, "keydown", this.boundFullWindowOnEscKey_);
      if (this.styleEl_ && this.styleEl_.parentNode) {
        this.styleEl_.parentNode.removeChild(this.styleEl_);
        this.styleEl_ = null;
      }
      Player4.players[this.id_] = null;
      if (this.tag && this.tag.player) {
        this.tag.player = null;
      }
      if (this.el_ && this.el_.player) {
        this.el_.player = null;
      }
      if (this.tech_) {
        this.tech_.dispose();
        this.isPosterFromTech_ = false;
        this.poster_ = "";
      }
      if (this.playerElIngest_) {
        this.playerElIngest_ = null;
      }
      if (this.tag) {
        this.tag = null;
      }
      clearCacheForPlayer(this);
      ALL.names.forEach(function(name) {
        var props = ALL[name];
        var list = _this2[props.getterName]();
        if (list && list.off) {
          list.off();
        }
      });
      _Component.prototype.dispose.call(this);
    };
    _proto.createEl = function createEl2() {
      var tag = this.tag;
      var el;
      var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute("data-vjs-player");
      var divEmbed = this.tag.tagName.toLowerCase() === "video-js";
      if (playerElIngest) {
        el = this.el_ = tag.parentNode;
      } else if (!divEmbed) {
        el = this.el_ = _Component.prototype.createEl.call(this, "div");
      }
      var attrs = getAttributes(tag);
      if (divEmbed) {
        el = this.el_ = tag;
        tag = this.tag = import_document.default.createElement("video");
        while (el.children.length) {
          tag.appendChild(el.firstChild);
        }
        if (!hasClass(el, "video-js")) {
          addClass(el, "video-js");
        }
        el.appendChild(tag);
        playerElIngest = this.playerElIngest_ = el;
        Object.keys(el).forEach(function(k) {
          try {
            tag[k] = el[k];
          } catch (e) {
          }
        });
      }
      tag.setAttribute("tabindex", "-1");
      attrs.tabindex = "-1";
      if (IE_VERSION || IS_CHROME && IS_WINDOWS) {
        tag.setAttribute("role", "application");
        attrs.role = "application";
      }
      tag.removeAttribute("width");
      tag.removeAttribute("height");
      if ("width" in attrs) {
        delete attrs.width;
      }
      if ("height" in attrs) {
        delete attrs.height;
      }
      Object.getOwnPropertyNames(attrs).forEach(function(attr) {
        if (!(divEmbed && attr === "class")) {
          el.setAttribute(attr, attrs[attr]);
        }
        if (divEmbed) {
          tag.setAttribute(attr, attrs[attr]);
        }
      });
      tag.playerId = tag.id;
      tag.id += "_html5_api";
      tag.className = "vjs-tech";
      tag.player = el.player = this;
      this.addClass("vjs-paused");
      if (import_window2.default.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
        this.styleEl_ = createStyleElement("vjs-styles-dimensions");
        var defaultsStyleEl = $(".vjs-styles-defaults");
        var head = $("head");
        head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
      }
      this.fill_ = false;
      this.fluid_ = false;
      this.width(this.options_.width);
      this.height(this.options_.height);
      this.fill(this.options_.fill);
      this.fluid(this.options_.fluid);
      this.aspectRatio(this.options_.aspectRatio);
      this.crossOrigin(this.options_.crossOrigin || this.options_.crossorigin);
      var links = tag.getElementsByTagName("a");
      for (var i = 0; i < links.length; i++) {
        var linkEl = links.item(i);
        addClass(linkEl, "vjs-hidden");
        linkEl.setAttribute("hidden", "hidden");
      }
      tag.initNetworkState_ = tag.networkState;
      if (tag.parentNode && !playerElIngest) {
        tag.parentNode.insertBefore(el, tag);
      }
      prependTo(tag, el);
      this.children_.unshift(tag);
      this.el_.setAttribute("lang", this.language_);
      this.el_ = el;
      return el;
    };
    _proto.crossOrigin = function crossOrigin(value) {
      if (!value) {
        return this.techGet_("crossOrigin");
      }
      if (value !== "anonymous" && value !== "use-credentials") {
        log.warn('crossOrigin must be "anonymous" or "use-credentials", given "' + value + '"');
        return;
      }
      this.techCall_("setCrossOrigin", value);
      return;
    };
    _proto.width = function width2(value) {
      return this.dimension("width", value);
    };
    _proto.height = function height2(value) {
      return this.dimension("height", value);
    };
    _proto.dimension = function dimension(_dimension, value) {
      var privDimension = _dimension + "_";
      if (value === void 0) {
        return this[privDimension] || 0;
      }
      if (value === "" || value === "auto") {
        this[privDimension] = void 0;
        this.updateStyleEl_();
        return;
      }
      var parsedVal = parseFloat(value);
      if (isNaN(parsedVal)) {
        log.error('Improper value "' + value + '" supplied for for ' + _dimension);
        return;
      }
      this[privDimension] = parsedVal;
      this.updateStyleEl_();
    };
    _proto.fluid = function fluid(bool) {
      var _this3 = this;
      if (bool === void 0) {
        return !!this.fluid_;
      }
      this.fluid_ = !!bool;
      if (isEvented(this)) {
        this.off(["playerreset", "resize"], this.updateStyleEl_);
      }
      if (bool) {
        this.addClass("vjs-fluid");
        this.fill(false);
        addEventedCallback(this, function() {
          _this3.on(["playerreset", "resize"], _this3.updateStyleEl_);
        });
      } else {
        this.removeClass("vjs-fluid");
      }
      this.updateStyleEl_();
    };
    _proto.fill = function fill(bool) {
      if (bool === void 0) {
        return !!this.fill_;
      }
      this.fill_ = !!bool;
      if (bool) {
        this.addClass("vjs-fill");
        this.fluid(false);
      } else {
        this.removeClass("vjs-fill");
      }
    };
    _proto.aspectRatio = function aspectRatio(ratio) {
      if (ratio === void 0) {
        return this.aspectRatio_;
      }
      if (!/^\d+\:\d+$/.test(ratio)) {
        throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");
      }
      this.aspectRatio_ = ratio;
      this.fluid(true);
      this.updateStyleEl_();
    };
    _proto.updateStyleEl_ = function updateStyleEl_() {
      if (import_window2.default.VIDEOJS_NO_DYNAMIC_STYLE === true) {
        var _width = typeof this.width_ === "number" ? this.width_ : this.options_.width;
        var _height = typeof this.height_ === "number" ? this.height_ : this.options_.height;
        var techEl = this.tech_ && this.tech_.el();
        if (techEl) {
          if (_width >= 0) {
            techEl.width = _width;
          }
          if (_height >= 0) {
            techEl.height = _height;
          }
        }
        return;
      }
      var width2;
      var height2;
      var aspectRatio;
      var idClass;
      if (this.aspectRatio_ !== void 0 && this.aspectRatio_ !== "auto") {
        aspectRatio = this.aspectRatio_;
      } else if (this.videoWidth() > 0) {
        aspectRatio = this.videoWidth() + ":" + this.videoHeight();
      } else {
        aspectRatio = "16:9";
      }
      var ratioParts = aspectRatio.split(":");
      var ratioMultiplier = ratioParts[1] / ratioParts[0];
      if (this.width_ !== void 0) {
        width2 = this.width_;
      } else if (this.height_ !== void 0) {
        width2 = this.height_ / ratioMultiplier;
      } else {
        width2 = this.videoWidth() || 300;
      }
      if (this.height_ !== void 0) {
        height2 = this.height_;
      } else {
        height2 = width2 * ratioMultiplier;
      }
      if (/^[^a-zA-Z]/.test(this.id())) {
        idClass = "dimensions-" + this.id();
      } else {
        idClass = this.id() + "-dimensions";
      }
      this.addClass(idClass);
      setTextContent(this.styleEl_, "\n      ." + idClass + " {\n        width: " + width2 + "px;\n        height: " + height2 + "px;\n      }\n\n      ." + idClass + ".vjs-fluid {\n        padding-top: " + ratioMultiplier * 100 + "%;\n      }\n    ");
    };
    _proto.loadTech_ = function loadTech_(techName, source) {
      var _this4 = this;
      if (this.tech_) {
        this.unloadTech_();
      }
      var titleTechName = toTitleCase(techName);
      var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);
      if (titleTechName !== "Html5" && this.tag) {
        Tech.getTech("Html5").disposeMediaElement(this.tag);
        this.tag.player = null;
        this.tag = null;
      }
      this.techName_ = titleTechName;
      this.isReady_ = false;
      var autoplay = typeof this.autoplay() === "string" ? false : this.autoplay();
      var techOptions = {
        source,
        autoplay,
        nativeControlsForTouch: this.options_.nativeControlsForTouch,
        playerId: this.id(),
        techId: this.id() + "_" + camelTechName + "_api",
        playsinline: this.options_.playsinline,
        preload: this.options_.preload,
        loop: this.options_.loop,
        disablePictureInPicture: this.options_.disablePictureInPicture,
        muted: this.options_.muted,
        poster: this.poster(),
        language: this.language(),
        playerElIngest: this.playerElIngest_ || false,
        "vtt.js": this.options_["vtt.js"],
        canOverridePoster: !!this.options_.techCanOverridePoster,
        enableSourceset: this.options_.enableSourceset,
        Promise: this.options_.Promise
      };
      ALL.names.forEach(function(name) {
        var props = ALL[name];
        techOptions[props.getterName] = _this4[props.privateName];
      });
      assign(techOptions, this.options_[titleTechName]);
      assign(techOptions, this.options_[camelTechName]);
      assign(techOptions, this.options_[techName.toLowerCase()]);
      if (this.tag) {
        techOptions.tag = this.tag;
      }
      if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
        techOptions.startTime = this.cache_.currentTime;
      }
      var TechClass = Tech.getTech(techName);
      if (!TechClass) {
        throw new Error("No Tech named '" + titleTechName + "' exists! '" + titleTechName + "' should be registered using videojs.registerTech()'");
      }
      this.tech_ = new TechClass(techOptions);
      this.tech_.ready(bind(this, this.handleTechReady_), true);
      textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
      TECH_EVENTS_RETRIGGER.forEach(function(event) {
        _this4.on(_this4.tech_, event, _this4["handleTech" + toTitleCase(event) + "_"]);
      });
      Object.keys(TECH_EVENTS_QUEUE).forEach(function(event) {
        _this4.on(_this4.tech_, event, function(eventObj) {
          if (_this4.tech_.playbackRate() === 0 && _this4.tech_.seeking()) {
            _this4.queuedCallbacks_.push({
              callback: _this4["handleTech" + TECH_EVENTS_QUEUE[event] + "_"].bind(_this4),
              event: eventObj
            });
            return;
          }
          _this4["handleTech" + TECH_EVENTS_QUEUE[event] + "_"](eventObj);
        });
      });
      this.on(this.tech_, "loadstart", this.handleTechLoadStart_);
      this.on(this.tech_, "sourceset", this.handleTechSourceset_);
      this.on(this.tech_, "waiting", this.handleTechWaiting_);
      this.on(this.tech_, "ended", this.handleTechEnded_);
      this.on(this.tech_, "seeking", this.handleTechSeeking_);
      this.on(this.tech_, "play", this.handleTechPlay_);
      this.on(this.tech_, "firstplay", this.handleTechFirstPlay_);
      this.on(this.tech_, "pause", this.handleTechPause_);
      this.on(this.tech_, "durationchange", this.handleTechDurationChange_);
      this.on(this.tech_, "fullscreenchange", this.handleTechFullscreenChange_);
      this.on(this.tech_, "fullscreenerror", this.handleTechFullscreenError_);
      this.on(this.tech_, "enterpictureinpicture", this.handleTechEnterPictureInPicture_);
      this.on(this.tech_, "leavepictureinpicture", this.handleTechLeavePictureInPicture_);
      this.on(this.tech_, "error", this.handleTechError_);
      this.on(this.tech_, "loadedmetadata", this.updateStyleEl_);
      this.on(this.tech_, "posterchange", this.handleTechPosterChange_);
      this.on(this.tech_, "textdata", this.handleTechTextData_);
      this.on(this.tech_, "ratechange", this.handleTechRateChange_);
      this.usingNativeControls(this.techGet_("controls"));
      if (this.controls() && !this.usingNativeControls()) {
        this.addTechControlsListeners_();
      }
      if (this.tech_.el().parentNode !== this.el() && (titleTechName !== "Html5" || !this.tag)) {
        prependTo(this.tech_.el(), this.el());
      }
      if (this.tag) {
        this.tag.player = null;
        this.tag = null;
      }
    };
    _proto.unloadTech_ = function unloadTech_() {
      var _this5 = this;
      ALL.names.forEach(function(name) {
        var props = ALL[name];
        _this5[props.privateName] = _this5[props.getterName]();
      });
      this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);
      this.isReady_ = false;
      this.tech_.dispose();
      this.tech_ = false;
      if (this.isPosterFromTech_) {
        this.poster_ = "";
        this.trigger("posterchange");
      }
      this.isPosterFromTech_ = false;
    };
    _proto.tech = function tech(safety) {
      if (safety === void 0) {
        log.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n");
      }
      return this.tech_;
    };
    _proto.addTechControlsListeners_ = function addTechControlsListeners_() {
      this.removeTechControlsListeners_();
      this.on(this.tech_, "mouseup", this.handleTechClick_);
      this.on(this.tech_, "dblclick", this.handleTechDoubleClick_);
      this.on(this.tech_, "touchstart", this.handleTechTouchStart_);
      this.on(this.tech_, "touchmove", this.handleTechTouchMove_);
      this.on(this.tech_, "touchend", this.handleTechTouchEnd_);
      this.on(this.tech_, "tap", this.handleTechTap_);
    };
    _proto.removeTechControlsListeners_ = function removeTechControlsListeners_() {
      this.off(this.tech_, "tap", this.handleTechTap_);
      this.off(this.tech_, "touchstart", this.handleTechTouchStart_);
      this.off(this.tech_, "touchmove", this.handleTechTouchMove_);
      this.off(this.tech_, "touchend", this.handleTechTouchEnd_);
      this.off(this.tech_, "mouseup", this.handleTechClick_);
      this.off(this.tech_, "dblclick", this.handleTechDoubleClick_);
    };
    _proto.handleTechReady_ = function handleTechReady_() {
      this.triggerReady();
      if (this.cache_.volume) {
        this.techCall_("setVolume", this.cache_.volume);
      }
      this.handleTechPosterChange_();
      this.handleTechDurationChange_();
    };
    _proto.handleTechLoadStart_ = function handleTechLoadStart_() {
      this.removeClass("vjs-ended");
      this.removeClass("vjs-seeking");
      this.error(null);
      this.handleTechDurationChange_();
      if (!this.paused()) {
        this.trigger("loadstart");
        this.trigger("firstplay");
      } else {
        this.hasStarted(false);
        this.trigger("loadstart");
      }
      this.manualAutoplay_(this.autoplay());
    };
    _proto.manualAutoplay_ = function manualAutoplay_(type3) {
      var _this6 = this;
      if (!this.tech_ || typeof type3 !== "string") {
        return;
      }
      var muted = function muted2() {
        var previouslyMuted = _this6.muted();
        _this6.muted(true);
        var restoreMuted = function restoreMuted2() {
          _this6.muted(previouslyMuted);
        };
        _this6.playTerminatedQueue_.push(restoreMuted);
        var mutedPromise = _this6.play();
        if (!isPromise(mutedPromise)) {
          return;
        }
        return mutedPromise["catch"](restoreMuted);
      };
      var promise;
      if (type3 === "any" && this.muted() !== true) {
        promise = this.play();
        if (isPromise(promise)) {
          promise = promise["catch"](muted);
        }
      } else if (type3 === "muted" && this.muted() !== true) {
        promise = muted();
      } else {
        promise = this.play();
      }
      if (!isPromise(promise)) {
        return;
      }
      return promise.then(function() {
        _this6.trigger({
          type: "autoplay-success",
          autoplay: type3
        });
      })["catch"](function(e) {
        _this6.trigger({
          type: "autoplay-failure",
          autoplay: type3
        });
      });
    };
    _proto.updateSourceCaches_ = function updateSourceCaches_(srcObj) {
      if (srcObj === void 0) {
        srcObj = "";
      }
      var src = srcObj;
      var type3 = "";
      if (typeof src !== "string") {
        src = srcObj.src;
        type3 = srcObj.type;
      }
      this.cache_.source = this.cache_.source || {};
      this.cache_.sources = this.cache_.sources || [];
      if (src && !type3) {
        type3 = findMimetype(this, src);
      }
      this.cache_.source = mergeOptions({}, srcObj, {
        src,
        type: type3
      });
      var matchingSources = this.cache_.sources.filter(function(s) {
        return s.src && s.src === src;
      });
      var sourceElSources = [];
      var sourceEls = this.$$("source");
      var matchingSourceEls = [];
      for (var i = 0; i < sourceEls.length; i++) {
        var sourceObj = getAttributes(sourceEls[i]);
        sourceElSources.push(sourceObj);
        if (sourceObj.src && sourceObj.src === src) {
          matchingSourceEls.push(sourceObj.src);
        }
      }
      if (matchingSourceEls.length && !matchingSources.length) {
        this.cache_.sources = sourceElSources;
      } else if (!matchingSources.length) {
        this.cache_.sources = [this.cache_.source];
      }
      this.cache_.src = src;
    };
    _proto.handleTechSourceset_ = function handleTechSourceset_(event) {
      var _this7 = this;
      if (!this.changingSrc_) {
        var updateSourceCaches = function updateSourceCaches2(src) {
          return _this7.updateSourceCaches_(src);
        };
        var playerSrc = this.currentSource().src;
        var eventSrc = event.src;
        if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {
          if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {
            updateSourceCaches = function updateSourceCaches2() {
            };
          }
        }
        updateSourceCaches(eventSrc);
        if (!event.src) {
          this.tech_.any(["sourceset", "loadstart"], function(e) {
            if (e.type === "sourceset") {
              return;
            }
            var techSrc = _this7.techGet("currentSrc");
            _this7.lastSource_.tech = techSrc;
            _this7.updateSourceCaches_(techSrc);
          });
        }
      }
      this.lastSource_ = {
        player: this.currentSource().src,
        tech: event.src
      };
      this.trigger({
        src: event.src,
        type: "sourceset"
      });
    };
    _proto.hasStarted = function hasStarted(request) {
      if (request === void 0) {
        return this.hasStarted_;
      }
      if (request === this.hasStarted_) {
        return;
      }
      this.hasStarted_ = request;
      if (this.hasStarted_) {
        this.addClass("vjs-has-started");
        this.trigger("firstplay");
      } else {
        this.removeClass("vjs-has-started");
      }
    };
    _proto.handleTechPlay_ = function handleTechPlay_() {
      this.removeClass("vjs-ended");
      this.removeClass("vjs-paused");
      this.addClass("vjs-playing");
      this.hasStarted(true);
      this.trigger("play");
    };
    _proto.handleTechRateChange_ = function handleTechRateChange_() {
      if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
        this.queuedCallbacks_.forEach(function(queued) {
          return queued.callback(queued.event);
        });
        this.queuedCallbacks_ = [];
      }
      this.cache_.lastPlaybackRate = this.tech_.playbackRate();
      this.trigger("ratechange");
    };
    _proto.handleTechWaiting_ = function handleTechWaiting_() {
      var _this8 = this;
      this.addClass("vjs-waiting");
      this.trigger("waiting");
      var timeWhenWaiting = this.currentTime();
      var timeUpdateListener = function timeUpdateListener2() {
        if (timeWhenWaiting !== _this8.currentTime()) {
          _this8.removeClass("vjs-waiting");
          _this8.off("timeupdate", timeUpdateListener2);
        }
      };
      this.on("timeupdate", timeUpdateListener);
    };
    _proto.handleTechCanPlay_ = function handleTechCanPlay_() {
      this.removeClass("vjs-waiting");
      this.trigger("canplay");
    };
    _proto.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
      this.removeClass("vjs-waiting");
      this.trigger("canplaythrough");
    };
    _proto.handleTechPlaying_ = function handleTechPlaying_() {
      this.removeClass("vjs-waiting");
      this.trigger("playing");
    };
    _proto.handleTechSeeking_ = function handleTechSeeking_() {
      this.addClass("vjs-seeking");
      this.trigger("seeking");
    };
    _proto.handleTechSeeked_ = function handleTechSeeked_() {
      this.removeClass("vjs-seeking");
      this.removeClass("vjs-ended");
      this.trigger("seeked");
    };
    _proto.handleTechFirstPlay_ = function handleTechFirstPlay_() {
      if (this.options_.starttime) {
        log.warn("Passing the `starttime` option to the player will be deprecated in 6.0");
        this.currentTime(this.options_.starttime);
      }
      this.addClass("vjs-has-started");
      this.trigger("firstplay");
    };
    _proto.handleTechPause_ = function handleTechPause_() {
      this.removeClass("vjs-playing");
      this.addClass("vjs-paused");
      this.trigger("pause");
    };
    _proto.handleTechEnded_ = function handleTechEnded_() {
      this.addClass("vjs-ended");
      if (this.options_.loop) {
        this.currentTime(0);
        this.play();
      } else if (!this.paused()) {
        this.pause();
      }
      this.trigger("ended");
    };
    _proto.handleTechDurationChange_ = function handleTechDurationChange_() {
      this.duration(this.techGet_("duration"));
    };
    _proto.handleTechClick_ = function handleTechClick_(event) {
      if (!isSingleLeftClick(event)) {
        return;
      }
      if (!this.controls_) {
        return;
      }
      if (this.paused()) {
        silencePromise(this.play());
      } else {
        this.pause();
      }
    };
    _proto.handleTechDoubleClick_ = function handleTechDoubleClick_(event) {
      if (!this.controls_) {
        return;
      }
      var inAllowedEls = Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"), function(el) {
        return el.contains(event.target);
      });
      if (!inAllowedEls) {
        if (this.options_ === void 0 || this.options_.userActions === void 0 || this.options_.userActions.doubleClick === void 0 || this.options_.userActions.doubleClick !== false) {
          if (this.options_ !== void 0 && this.options_.userActions !== void 0 && typeof this.options_.userActions.doubleClick === "function") {
            this.options_.userActions.doubleClick.call(this, event);
          } else if (this.isFullscreen()) {
            this.exitFullscreen();
          } else {
            this.requestFullscreen();
          }
        }
      }
    };
    _proto.handleTechTap_ = function handleTechTap_() {
      this.userActive(!this.userActive());
    };
    _proto.handleTechTouchStart_ = function handleTechTouchStart_() {
      this.userWasActive = this.userActive();
    };
    _proto.handleTechTouchMove_ = function handleTechTouchMove_() {
      if (this.userWasActive) {
        this.reportUserActivity();
      }
    };
    _proto.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
      if (event.cancelable) {
        event.preventDefault();
      }
    };
    _proto.handleStageClick_ = function handleStageClick_() {
      this.reportUserActivity();
    };
    _proto.toggleFullscreenClass_ = function toggleFullscreenClass_() {
      if (this.isFullscreen()) {
        this.addClass("vjs-fullscreen");
      } else {
        this.removeClass("vjs-fullscreen");
      }
    };
    _proto.documentFullscreenChange_ = function documentFullscreenChange_(e) {
      var targetPlayer = e.target.player;
      if (targetPlayer && targetPlayer !== this) {
        return;
      }
      var el = this.el();
      var isFs = import_document.default[this.fsApi_.fullscreenElement] === el;
      if (!isFs && el.matches) {
        isFs = el.matches(":" + this.fsApi_.fullscreen);
      } else if (!isFs && el.msMatchesSelector) {
        isFs = el.msMatchesSelector(":" + this.fsApi_.fullscreen);
      }
      this.isFullscreen(isFs);
    };
    _proto.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
      if (data) {
        if (data.nativeIOSFullscreen) {
          this.toggleClass("vjs-ios-native-fs");
        }
        this.isFullscreen(data.isFullscreen);
      }
    };
    _proto.handleTechFullscreenError_ = function handleTechFullscreenError_(event, err) {
      this.trigger("fullscreenerror", err);
    };
    _proto.togglePictureInPictureClass_ = function togglePictureInPictureClass_() {
      if (this.isInPictureInPicture()) {
        this.addClass("vjs-picture-in-picture");
      } else {
        this.removeClass("vjs-picture-in-picture");
      }
    };
    _proto.handleTechEnterPictureInPicture_ = function handleTechEnterPictureInPicture_(event) {
      this.isInPictureInPicture(true);
    };
    _proto.handleTechLeavePictureInPicture_ = function handleTechLeavePictureInPicture_(event) {
      this.isInPictureInPicture(false);
    };
    _proto.handleTechError_ = function handleTechError_() {
      var error = this.tech_.error();
      this.error(error);
    };
    _proto.handleTechTextData_ = function handleTechTextData_() {
      var data = null;
      if (arguments.length > 1) {
        data = arguments[1];
      }
      this.trigger("textdata", data);
    };
    _proto.getCache = function getCache() {
      return this.cache_;
    };
    _proto.resetCache_ = function resetCache_() {
      this.cache_ = {
        currentTime: 0,
        initTime: 0,
        inactivityTimeout: this.options_.inactivityTimeout,
        duration: NaN,
        lastVolume: 1,
        lastPlaybackRate: this.defaultPlaybackRate(),
        media: null,
        src: "",
        source: {},
        sources: [],
        volume: 1
      };
    };
    _proto.techCall_ = function techCall_(method, arg) {
      this.ready(function() {
        if (method in allowedSetters) {
          return set(this.middleware_, this.tech_, method, arg);
        } else if (method in allowedMediators) {
          return mediate(this.middleware_, this.tech_, method, arg);
        }
        try {
          if (this.tech_) {
            this.tech_[method](arg);
          }
        } catch (e) {
          log(e);
          throw e;
        }
      }, true);
    };
    _proto.techGet_ = function techGet_(method) {
      if (!this.tech_ || !this.tech_.isReady_) {
        return;
      }
      if (method in allowedGetters) {
        return get(this.middleware_, this.tech_, method);
      } else if (method in allowedMediators) {
        return mediate(this.middleware_, this.tech_, method);
      }
      try {
        return this.tech_[method]();
      } catch (e) {
        if (this.tech_[method] === void 0) {
          log("Video.js: " + method + " method not defined for " + this.techName_ + " playback technology.", e);
          throw e;
        }
        if (e.name === "TypeError") {
          log("Video.js: " + method + " unavailable on " + this.techName_ + " playback technology element.", e);
          this.tech_.isReady_ = false;
          throw e;
        }
        log(e);
        throw e;
      }
    };
    _proto.play = function play() {
      var _this9 = this;
      var PromiseClass = this.options_.Promise || import_window2.default.Promise;
      if (PromiseClass) {
        return new PromiseClass(function(resolve) {
          _this9.play_(resolve);
        });
      }
      return this.play_();
    };
    _proto.play_ = function play_(callback2) {
      var _this10 = this;
      if (callback2 === void 0) {
        callback2 = silencePromise;
      }
      this.playCallbacks_.push(callback2);
      var isSrcReady = Boolean(!this.changingSrc_ && (this.src() || this.currentSrc()));
      if (this.waitToPlay_) {
        this.off(["ready", "loadstart"], this.waitToPlay_);
        this.waitToPlay_ = null;
      }
      if (!this.isReady_ || !isSrcReady) {
        this.waitToPlay_ = function(e) {
          _this10.play_();
        };
        this.one(["ready", "loadstart"], this.waitToPlay_);
        if (!isSrcReady && (IS_ANY_SAFARI || IS_IOS)) {
          this.load();
        }
        return;
      }
      var val = this.techGet_("play");
      if (val === null) {
        this.runPlayTerminatedQueue_();
      } else {
        this.runPlayCallbacks_(val);
      }
    };
    _proto.runPlayTerminatedQueue_ = function runPlayTerminatedQueue_() {
      var queue = this.playTerminatedQueue_.slice(0);
      this.playTerminatedQueue_ = [];
      queue.forEach(function(q) {
        q();
      });
    };
    _proto.runPlayCallbacks_ = function runPlayCallbacks_(val) {
      var callbacks = this.playCallbacks_.slice(0);
      this.playCallbacks_ = [];
      this.playTerminatedQueue_ = [];
      callbacks.forEach(function(cb) {
        cb(val);
      });
    };
    _proto.pause = function pause() {
      this.techCall_("pause");
    };
    _proto.paused = function paused() {
      return this.techGet_("paused") === false ? false : true;
    };
    _proto.played = function played() {
      return this.techGet_("played") || createTimeRanges(0, 0);
    };
    _proto.scrubbing = function scrubbing(isScrubbing) {
      if (typeof isScrubbing === "undefined") {
        return this.scrubbing_;
      }
      this.scrubbing_ = !!isScrubbing;
      this.techCall_("setScrubbing", this.scrubbing_);
      if (isScrubbing) {
        this.addClass("vjs-scrubbing");
      } else {
        this.removeClass("vjs-scrubbing");
      }
    };
    _proto.currentTime = function currentTime(seconds) {
      if (typeof seconds !== "undefined") {
        if (seconds < 0) {
          seconds = 0;
        }
        if (!this.isReady_ || this.changingSrc_ || !this.tech_ || !this.tech_.isReady_) {
          this.cache_.initTime = seconds;
          this.off("canplay", this.applyInitTime_);
          this.one("canplay", this.applyInitTime_);
          return;
        }
        this.techCall_("setCurrentTime", seconds);
        this.cache_.initTime = 0;
        return;
      }
      this.cache_.currentTime = this.techGet_("currentTime") || 0;
      return this.cache_.currentTime;
    };
    _proto.applyInitTime_ = function applyInitTime_() {
      this.currentTime(this.cache_.initTime);
    };
    _proto.duration = function duration5(seconds) {
      if (seconds === void 0) {
        return this.cache_.duration !== void 0 ? this.cache_.duration : NaN;
      }
      seconds = parseFloat(seconds);
      if (seconds < 0) {
        seconds = Infinity;
      }
      if (seconds !== this.cache_.duration) {
        this.cache_.duration = seconds;
        if (seconds === Infinity) {
          this.addClass("vjs-live");
        } else {
          this.removeClass("vjs-live");
        }
        if (!isNaN(seconds)) {
          this.trigger("durationchange");
        }
      }
    };
    _proto.remainingTime = function remainingTime() {
      return this.duration() - this.currentTime();
    };
    _proto.remainingTimeDisplay = function remainingTimeDisplay() {
      return Math.floor(this.duration()) - Math.floor(this.currentTime());
    };
    _proto.buffered = function buffered() {
      var buffered2 = this.techGet_("buffered");
      if (!buffered2 || !buffered2.length) {
        buffered2 = createTimeRanges(0, 0);
      }
      return buffered2;
    };
    _proto.bufferedPercent = function bufferedPercent$1() {
      return bufferedPercent(this.buffered(), this.duration());
    };
    _proto.bufferedEnd = function bufferedEnd() {
      var buffered = this.buffered();
      var duration5 = this.duration();
      var end = buffered.end(buffered.length - 1);
      if (end > duration5) {
        end = duration5;
      }
      return end;
    };
    _proto.volume = function volume(percentAsDecimal) {
      var vol;
      if (percentAsDecimal !== void 0) {
        vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
        this.cache_.volume = vol;
        this.techCall_("setVolume", vol);
        if (vol > 0) {
          this.lastVolume_(vol);
        }
        return;
      }
      vol = parseFloat(this.techGet_("volume"));
      return isNaN(vol) ? 1 : vol;
    };
    _proto.muted = function muted(_muted) {
      if (_muted !== void 0) {
        this.techCall_("setMuted", _muted);
        return;
      }
      return this.techGet_("muted") || false;
    };
    _proto.defaultMuted = function defaultMuted(_defaultMuted) {
      if (_defaultMuted !== void 0) {
        return this.techCall_("setDefaultMuted", _defaultMuted);
      }
      return this.techGet_("defaultMuted") || false;
    };
    _proto.lastVolume_ = function lastVolume_(percentAsDecimal) {
      if (percentAsDecimal !== void 0 && percentAsDecimal !== 0) {
        this.cache_.lastVolume = percentAsDecimal;
        return;
      }
      return this.cache_.lastVolume;
    };
    _proto.supportsFullScreen = function supportsFullScreen() {
      return this.techGet_("supportsFullScreen") || false;
    };
    _proto.isFullscreen = function isFullscreen(isFS) {
      if (isFS !== void 0) {
        var oldValue = this.isFullscreen_;
        this.isFullscreen_ = Boolean(isFS);
        if (this.isFullscreen_ !== oldValue && this.fsApi_.prefixed) {
          this.trigger("fullscreenchange");
        }
        this.toggleFullscreenClass_();
        return;
      }
      return this.isFullscreen_;
    };
    _proto.requestFullscreen = function requestFullscreen(fullscreenOptions) {
      var PromiseClass = this.options_.Promise || import_window2.default.Promise;
      if (PromiseClass) {
        var self2 = this;
        return new PromiseClass(function(resolve, reject) {
          function offHandler() {
            self2.off("fullscreenerror", errorHandler);
            self2.off("fullscreenchange", changeHandler);
          }
          function changeHandler() {
            offHandler();
            resolve();
          }
          function errorHandler(e, err) {
            offHandler();
            reject(err);
          }
          self2.one("fullscreenchange", changeHandler);
          self2.one("fullscreenerror", errorHandler);
          var promise = self2.requestFullscreenHelper_(fullscreenOptions);
          if (promise) {
            promise.then(offHandler, offHandler);
            return promise;
          }
        });
      }
      return this.requestFullscreenHelper_();
    };
    _proto.requestFullscreenHelper_ = function requestFullscreenHelper_(fullscreenOptions) {
      var _this11 = this;
      var fsOptions;
      if (!this.fsApi_.prefixed) {
        fsOptions = this.options_.fullscreen && this.options_.fullscreen.options || {};
        if (fullscreenOptions !== void 0) {
          fsOptions = fullscreenOptions;
        }
      }
      if (this.fsApi_.requestFullscreen) {
        var promise = this.el_[this.fsApi_.requestFullscreen](fsOptions);
        if (promise) {
          promise.then(function() {
            return _this11.isFullscreen(true);
          }, function() {
            return _this11.isFullscreen(false);
          });
        }
        return promise;
      } else if (this.tech_.supportsFullScreen()) {
        this.techCall_("enterFullScreen");
      } else {
        this.enterFullWindow();
      }
    };
    _proto.exitFullscreen = function exitFullscreen() {
      var PromiseClass = this.options_.Promise || import_window2.default.Promise;
      if (PromiseClass) {
        var self2 = this;
        return new PromiseClass(function(resolve, reject) {
          function offHandler() {
            self2.off("fullscreenerror", errorHandler);
            self2.off("fullscreenchange", changeHandler);
          }
          function changeHandler() {
            offHandler();
            resolve();
          }
          function errorHandler(e, err) {
            offHandler();
            reject(err);
          }
          self2.one("fullscreenchange", changeHandler);
          self2.one("fullscreenerror", errorHandler);
          var promise = self2.exitFullscreenHelper_();
          if (promise) {
            promise.then(offHandler, offHandler);
            return promise;
          }
        });
      }
      return this.exitFullscreenHelper_();
    };
    _proto.exitFullscreenHelper_ = function exitFullscreenHelper_() {
      var _this12 = this;
      if (this.fsApi_.requestFullscreen) {
        var promise = import_document.default[this.fsApi_.exitFullscreen]();
        if (promise) {
          promise.then(function() {
            return _this12.isFullscreen(false);
          });
        }
        return promise;
      } else if (this.tech_.supportsFullScreen()) {
        this.techCall_("exitFullScreen");
      } else {
        this.exitFullWindow();
      }
    };
    _proto.enterFullWindow = function enterFullWindow() {
      this.isFullscreen(true);
      this.isFullWindow = true;
      this.docOrigOverflow = import_document.default.documentElement.style.overflow;
      on(import_document.default, "keydown", this.boundFullWindowOnEscKey_);
      import_document.default.documentElement.style.overflow = "hidden";
      addClass(import_document.default.body, "vjs-full-window");
      this.trigger("enterFullWindow");
    };
    _proto.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
      if (import_keycode.default.isEventKey(event, "Esc")) {
        if (this.isFullscreen() === true) {
          this.exitFullscreen();
        } else {
          this.exitFullWindow();
        }
      }
    };
    _proto.exitFullWindow = function exitFullWindow() {
      this.isFullscreen(false);
      this.isFullWindow = false;
      off(import_document.default, "keydown", this.boundFullWindowOnEscKey_);
      import_document.default.documentElement.style.overflow = this.docOrigOverflow;
      removeClass(import_document.default.body, "vjs-full-window");
      this.trigger("exitFullWindow");
    };
    _proto.disablePictureInPicture = function disablePictureInPicture(value) {
      if (value === void 0) {
        return this.techGet_("disablePictureInPicture");
      }
      this.techCall_("setDisablePictureInPicture", value);
      this.options_.disablePictureInPicture = value;
      this.trigger("disablepictureinpicturechanged");
    };
    _proto.isInPictureInPicture = function isInPictureInPicture(isPiP) {
      if (isPiP !== void 0) {
        this.isInPictureInPicture_ = !!isPiP;
        this.togglePictureInPictureClass_();
        return;
      }
      return !!this.isInPictureInPicture_;
    };
    _proto.requestPictureInPicture = function requestPictureInPicture() {
      if ("pictureInPictureEnabled" in import_document.default && this.disablePictureInPicture() === false) {
        return this.techGet_("requestPictureInPicture");
      }
    };
    _proto.exitPictureInPicture = function exitPictureInPicture() {
      if ("pictureInPictureEnabled" in import_document.default) {
        return import_document.default.exitPictureInPicture();
      }
    };
    _proto.handleKeyDown = function handleKeyDown(event) {
      var userActions = this.options_.userActions;
      if (!userActions || !userActions.hotkeys) {
        return;
      }
      var excludeElement = function excludeElement2(el) {
        var tagName = el.tagName.toLowerCase();
        if (el.isContentEditable) {
          return true;
        }
        var allowedInputTypes = ["button", "checkbox", "hidden", "radio", "reset", "submit"];
        if (tagName === "input") {
          return allowedInputTypes.indexOf(el.type) === -1;
        }
        var excludedTags = ["textarea"];
        return excludedTags.indexOf(tagName) !== -1;
      };
      if (excludeElement(this.el_.ownerDocument.activeElement)) {
        return;
      }
      if (typeof userActions.hotkeys === "function") {
        userActions.hotkeys.call(this, event);
      } else {
        this.handleHotkeys(event);
      }
    };
    _proto.handleHotkeys = function handleHotkeys(event) {
      var hotkeys = this.options_.userActions ? this.options_.userActions.hotkeys : {};
      var _hotkeys$fullscreenKe = hotkeys.fullscreenKey, fullscreenKey = _hotkeys$fullscreenKe === void 0 ? function(keydownEvent) {
        return import_keycode.default.isEventKey(keydownEvent, "f");
      } : _hotkeys$fullscreenKe, _hotkeys$muteKey = hotkeys.muteKey, muteKey = _hotkeys$muteKey === void 0 ? function(keydownEvent) {
        return import_keycode.default.isEventKey(keydownEvent, "m");
      } : _hotkeys$muteKey, _hotkeys$playPauseKey = hotkeys.playPauseKey, playPauseKey = _hotkeys$playPauseKey === void 0 ? function(keydownEvent) {
        return import_keycode.default.isEventKey(keydownEvent, "k") || import_keycode.default.isEventKey(keydownEvent, "Space");
      } : _hotkeys$playPauseKey;
      if (fullscreenKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        var FSToggle = Component.getComponent("FullscreenToggle");
        if (import_document.default[this.fsApi_.fullscreenEnabled] !== false) {
          FSToggle.prototype.handleClick.call(this, event);
        }
      } else if (muteKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        var MuteToggle2 = Component.getComponent("MuteToggle");
        MuteToggle2.prototype.handleClick.call(this, event);
      } else if (playPauseKey.call(this, event)) {
        event.preventDefault();
        event.stopPropagation();
        var PlayToggle2 = Component.getComponent("PlayToggle");
        PlayToggle2.prototype.handleClick.call(this, event);
      }
    };
    _proto.canPlayType = function canPlayType3(type3) {
      var can;
      for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
        var techName = j[i];
        var tech = Tech.getTech(techName);
        if (!tech) {
          tech = Component.getComponent(techName);
        }
        if (!tech) {
          log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
          continue;
        }
        if (tech.isSupported()) {
          can = tech.canPlayType(type3);
          if (can) {
            return can;
          }
        }
      }
      return "";
    };
    _proto.selectSource = function selectSource(sources) {
      var _this13 = this;
      var techs = this.options_.techOrder.map(function(techName) {
        return [techName, Tech.getTech(techName)];
      }).filter(function(_ref) {
        var techName = _ref[0], tech = _ref[1];
        if (tech) {
          return tech.isSupported();
        }
        log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
        return false;
      });
      var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair2(outerArray, innerArray, tester) {
        var found;
        outerArray.some(function(outerChoice) {
          return innerArray.some(function(innerChoice) {
            found = tester(outerChoice, innerChoice);
            if (found) {
              return true;
            }
          });
        });
        return found;
      };
      var foundSourceAndTech;
      var flip = function flip2(fn) {
        return function(a, b) {
          return fn(b, a);
        };
      };
      var finder = function finder2(_ref2, source) {
        var techName = _ref2[0], tech = _ref2[1];
        if (tech.canPlaySource(source, _this13.options_[techName.toLowerCase()])) {
          return {
            source,
            tech: techName
          };
        }
      };
      if (this.options_.sourceOrder) {
        foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
      } else {
        foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
      }
      return foundSourceAndTech || false;
    };
    _proto.src = function src(source) {
      var _this14 = this;
      if (typeof source === "undefined") {
        return this.cache_.src || "";
      }
      var sources = filterSource(source);
      if (!sources.length) {
        this.setTimeout(function() {
          this.error({
            code: 4,
            message: this.localize(this.options_.notSupportedMessage)
          });
        }, 0);
        return;
      }
      this.changingSrc_ = true;
      this.cache_.sources = sources;
      this.updateSourceCaches_(sources[0]);
      setSource(this, sources[0], function(middlewareSource, mws) {
        _this14.middleware_ = mws;
        _this14.cache_.sources = sources;
        _this14.updateSourceCaches_(middlewareSource);
        var err = _this14.src_(middlewareSource);
        if (err) {
          if (sources.length > 1) {
            return _this14.src(sources.slice(1));
          }
          _this14.changingSrc_ = false;
          _this14.setTimeout(function() {
            this.error({
              code: 4,
              message: this.localize(this.options_.notSupportedMessage)
            });
          }, 0);
          _this14.triggerReady();
          return;
        }
        setTech(mws, _this14.tech_);
      });
    };
    _proto.src_ = function src_(source) {
      var _this15 = this;
      var sourceTech = this.selectSource([source]);
      if (!sourceTech) {
        return true;
      }
      if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
        this.changingSrc_ = true;
        this.loadTech_(sourceTech.tech, sourceTech.source);
        this.tech_.ready(function() {
          _this15.changingSrc_ = false;
        });
        return false;
      }
      this.ready(function() {
        if (this.tech_.constructor.prototype.hasOwnProperty("setSource")) {
          this.techCall_("setSource", source);
        } else {
          this.techCall_("src", source.src);
        }
        this.changingSrc_ = false;
      }, true);
      return false;
    };
    _proto.load = function load() {
      this.techCall_("load");
    };
    _proto.reset = function reset3() {
      var _this16 = this;
      var PromiseClass = this.options_.Promise || import_window2.default.Promise;
      if (this.paused() || !PromiseClass) {
        this.doReset_();
      } else {
        var playPromise = this.play();
        silencePromise(playPromise.then(function() {
          return _this16.doReset_();
        }));
      }
    };
    _proto.doReset_ = function doReset_() {
      if (this.tech_) {
        this.tech_.clearTracks("text");
      }
      this.resetCache_();
      this.poster("");
      this.loadTech_(this.options_.techOrder[0], null);
      this.techCall_("reset");
      this.resetControlBarUI_();
      if (isEvented(this)) {
        this.trigger("playerreset");
      }
    };
    _proto.resetControlBarUI_ = function resetControlBarUI_() {
      this.resetProgressBar_();
      this.resetPlaybackRate_();
      this.resetVolumeBar_();
    };
    _proto.resetProgressBar_ = function resetProgressBar_() {
      this.currentTime(0);
      var _this$controlBar = this.controlBar, durationDisplay = _this$controlBar.durationDisplay, remainingTimeDisplay = _this$controlBar.remainingTimeDisplay;
      if (durationDisplay) {
        durationDisplay.updateContent();
      }
      if (remainingTimeDisplay) {
        remainingTimeDisplay.updateContent();
      }
    };
    _proto.resetPlaybackRate_ = function resetPlaybackRate_() {
      this.playbackRate(this.defaultPlaybackRate());
      this.handleTechRateChange_();
    };
    _proto.resetVolumeBar_ = function resetVolumeBar_() {
      this.volume(1);
      this.trigger("volumechange");
    };
    _proto.currentSources = function currentSources() {
      var source = this.currentSource();
      var sources = [];
      if (Object.keys(source).length !== 0) {
        sources.push(source);
      }
      return this.cache_.sources || sources;
    };
    _proto.currentSource = function currentSource() {
      return this.cache_.source || {};
    };
    _proto.currentSrc = function currentSrc() {
      return this.currentSource() && this.currentSource().src || "";
    };
    _proto.currentType = function currentType() {
      return this.currentSource() && this.currentSource().type || "";
    };
    _proto.preload = function preload(value) {
      if (value !== void 0) {
        this.techCall_("setPreload", value);
        this.options_.preload = value;
        return;
      }
      return this.techGet_("preload");
    };
    _proto.autoplay = function autoplay(value) {
      if (value === void 0) {
        return this.options_.autoplay || false;
      }
      var techAutoplay;
      if (typeof value === "string" && /(any|play|muted)/.test(value)) {
        this.options_.autoplay = value;
        this.manualAutoplay_(value);
        techAutoplay = false;
      } else if (!value) {
        this.options_.autoplay = false;
      } else {
        this.options_.autoplay = true;
      }
      techAutoplay = typeof techAutoplay === "undefined" ? this.options_.autoplay : techAutoplay;
      if (this.tech_) {
        this.techCall_("setAutoplay", techAutoplay);
      }
    };
    _proto.playsinline = function playsinline(value) {
      if (value !== void 0) {
        this.techCall_("setPlaysinline", value);
        this.options_.playsinline = value;
        return this;
      }
      return this.techGet_("playsinline");
    };
    _proto.loop = function loop(value) {
      if (value !== void 0) {
        this.techCall_("setLoop", value);
        this.options_.loop = value;
        return;
      }
      return this.techGet_("loop");
    };
    _proto.poster = function poster(src) {
      if (src === void 0) {
        return this.poster_;
      }
      if (!src) {
        src = "";
      }
      if (src === this.poster_) {
        return;
      }
      this.poster_ = src;
      this.techCall_("setPoster", src);
      this.isPosterFromTech_ = false;
      this.trigger("posterchange");
    };
    _proto.handleTechPosterChange_ = function handleTechPosterChange_() {
      if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
        var newPoster = this.tech_.poster() || "";
        if (newPoster !== this.poster_) {
          this.poster_ = newPoster;
          this.isPosterFromTech_ = true;
          this.trigger("posterchange");
        }
      }
    };
    _proto.controls = function controls(bool) {
      if (bool === void 0) {
        return !!this.controls_;
      }
      bool = !!bool;
      if (this.controls_ === bool) {
        return;
      }
      this.controls_ = bool;
      if (this.usingNativeControls()) {
        this.techCall_("setControls", bool);
      }
      if (this.controls_) {
        this.removeClass("vjs-controls-disabled");
        this.addClass("vjs-controls-enabled");
        this.trigger("controlsenabled");
        if (!this.usingNativeControls()) {
          this.addTechControlsListeners_();
        }
      } else {
        this.removeClass("vjs-controls-enabled");
        this.addClass("vjs-controls-disabled");
        this.trigger("controlsdisabled");
        if (!this.usingNativeControls()) {
          this.removeTechControlsListeners_();
        }
      }
    };
    _proto.usingNativeControls = function usingNativeControls(bool) {
      if (bool === void 0) {
        return !!this.usingNativeControls_;
      }
      bool = !!bool;
      if (this.usingNativeControls_ === bool) {
        return;
      }
      this.usingNativeControls_ = bool;
      if (this.usingNativeControls_) {
        this.addClass("vjs-using-native-controls");
        this.trigger("usingnativecontrols");
      } else {
        this.removeClass("vjs-using-native-controls");
        this.trigger("usingcustomcontrols");
      }
    };
    _proto.error = function error(err) {
      if (err === void 0) {
        return this.error_ || null;
      }
      if (this.options_.suppressNotSupportedError && err && err.code === 4) {
        var triggerSuppressedError = function triggerSuppressedError2() {
          this.error(err);
        };
        this.options_.suppressNotSupportedError = false;
        this.any(["click", "touchstart"], triggerSuppressedError);
        this.one("loadstart", function() {
          this.off(["click", "touchstart"], triggerSuppressedError);
        });
        return;
      }
      if (err === null) {
        this.error_ = err;
        this.removeClass("vjs-error");
        if (this.errorDisplay) {
          this.errorDisplay.close();
        }
        return;
      }
      this.error_ = new MediaError(err);
      this.addClass("vjs-error");
      log.error("(CODE:" + this.error_.code + " " + MediaError.errorTypes[this.error_.code] + ")", this.error_.message, this.error_);
      this.trigger("error");
      return;
    };
    _proto.reportUserActivity = function reportUserActivity(event) {
      this.userActivity_ = true;
    };
    _proto.userActive = function userActive(bool) {
      if (bool === void 0) {
        return this.userActive_;
      }
      bool = !!bool;
      if (bool === this.userActive_) {
        return;
      }
      this.userActive_ = bool;
      if (this.userActive_) {
        this.userActivity_ = true;
        this.removeClass("vjs-user-inactive");
        this.addClass("vjs-user-active");
        this.trigger("useractive");
        return;
      }
      if (this.tech_) {
        this.tech_.one("mousemove", function(e) {
          e.stopPropagation();
          e.preventDefault();
        });
      }
      this.userActivity_ = false;
      this.removeClass("vjs-user-active");
      this.addClass("vjs-user-inactive");
      this.trigger("userinactive");
    };
    _proto.listenForUserActivity_ = function listenForUserActivity_() {
      var mouseInProgress;
      var lastMoveX;
      var lastMoveY;
      var handleActivity = bind(this, this.reportUserActivity);
      var handleMouseMove = function handleMouseMove2(e) {
        if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
          lastMoveX = e.screenX;
          lastMoveY = e.screenY;
          handleActivity();
        }
      };
      var handleMouseDown = function handleMouseDown2() {
        handleActivity();
        this.clearInterval(mouseInProgress);
        mouseInProgress = this.setInterval(handleActivity, 250);
      };
      var handleMouseUpAndMouseLeave = function handleMouseUpAndMouseLeave2(event) {
        handleActivity();
        this.clearInterval(mouseInProgress);
      };
      this.on("mousedown", handleMouseDown);
      this.on("mousemove", handleMouseMove);
      this.on("mouseup", handleMouseUpAndMouseLeave);
      this.on("mouseleave", handleMouseUpAndMouseLeave);
      var controlBar = this.getChild("controlBar");
      if (controlBar && !IS_IOS && !IS_ANDROID) {
        controlBar.on("mouseenter", function(event) {
          this.player().cache_.inactivityTimeout = this.player().options_.inactivityTimeout;
          this.player().options_.inactivityTimeout = 0;
        });
        controlBar.on("mouseleave", function(event) {
          this.player().options_.inactivityTimeout = this.player().cache_.inactivityTimeout;
        });
      }
      this.on("keydown", handleActivity);
      this.on("keyup", handleActivity);
      var inactivityTimeout;
      this.setInterval(function() {
        if (!this.userActivity_) {
          return;
        }
        this.userActivity_ = false;
        this.userActive(true);
        this.clearTimeout(inactivityTimeout);
        var timeout = this.options_.inactivityTimeout;
        if (timeout <= 0) {
          return;
        }
        inactivityTimeout = this.setTimeout(function() {
          if (!this.userActivity_) {
            this.userActive(false);
          }
        }, timeout);
      }, 250);
    };
    _proto.playbackRate = function playbackRate(rate) {
      if (rate !== void 0) {
        this.techCall_("setPlaybackRate", rate);
        return;
      }
      if (this.tech_ && this.tech_.featuresPlaybackRate) {
        return this.cache_.lastPlaybackRate || this.techGet_("playbackRate");
      }
      return 1;
    };
    _proto.defaultPlaybackRate = function defaultPlaybackRate(rate) {
      if (rate !== void 0) {
        return this.techCall_("setDefaultPlaybackRate", rate);
      }
      if (this.tech_ && this.tech_.featuresPlaybackRate) {
        return this.techGet_("defaultPlaybackRate");
      }
      return 1;
    };
    _proto.isAudio = function isAudio(bool) {
      if (bool !== void 0) {
        this.isAudio_ = !!bool;
        return;
      }
      return !!this.isAudio_;
    };
    _proto.addTextTrack = function addTextTrack(kind, label, language) {
      if (this.tech_) {
        return this.tech_.addTextTrack(kind, label, language);
      }
    };
    _proto.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
      if (this.tech_) {
        return this.tech_.addRemoteTextTrack(options, manualCleanup);
      }
    };
    _proto.removeRemoteTextTrack = function removeRemoteTextTrack(obj) {
      if (obj === void 0) {
        obj = {};
      }
      var _obj = obj, track = _obj.track;
      if (!track) {
        track = obj;
      }
      if (this.tech_) {
        return this.tech_.removeRemoteTextTrack(track);
      }
    };
    _proto.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
      return this.techGet_("getVideoPlaybackQuality");
    };
    _proto.videoWidth = function videoWidth() {
      return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
    };
    _proto.videoHeight = function videoHeight() {
      return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
    };
    _proto.language = function language(code) {
      if (code === void 0) {
        return this.language_;
      }
      if (this.language_ !== String(code).toLowerCase()) {
        this.language_ = String(code).toLowerCase();
        if (isEvented(this)) {
          this.trigger("languagechange");
        }
      }
    };
    _proto.languages = function languages() {
      return mergeOptions(Player4.prototype.options_.languages, this.languages_);
    };
    _proto.toJSON = function toJSON() {
      var options = mergeOptions(this.options_);
      var tracks = options.tracks;
      options.tracks = [];
      for (var i = 0; i < tracks.length; i++) {
        var track = tracks[i];
        track = mergeOptions(track);
        track.player = void 0;
        options.tracks[i] = track;
      }
      return options;
    };
    _proto.createModal = function createModal(content, options) {
      var _this17 = this;
      options = options || {};
      options.content = content || "";
      var modal = new ModalDialog(this, options);
      this.addChild(modal);
      modal.on("dispose", function() {
        _this17.removeChild(modal);
      });
      modal.open();
      return modal;
    };
    _proto.updateCurrentBreakpoint_ = function updateCurrentBreakpoint_() {
      if (!this.responsive()) {
        return;
      }
      var currentBreakpoint = this.currentBreakpoint();
      var currentWidth = this.currentWidth();
      for (var i = 0; i < BREAKPOINT_ORDER.length; i++) {
        var candidateBreakpoint = BREAKPOINT_ORDER[i];
        var maxWidth = this.breakpoints_[candidateBreakpoint];
        if (currentWidth <= maxWidth) {
          if (currentBreakpoint === candidateBreakpoint) {
            return;
          }
          if (currentBreakpoint) {
            this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);
          }
          this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);
          this.breakpoint_ = candidateBreakpoint;
          break;
        }
      }
    };
    _proto.removeCurrentBreakpoint_ = function removeCurrentBreakpoint_() {
      var className = this.currentBreakpointClass();
      this.breakpoint_ = "";
      if (className) {
        this.removeClass(className);
      }
    };
    _proto.breakpoints = function breakpoints(_breakpoints) {
      if (_breakpoints === void 0) {
        return assign(this.breakpoints_);
      }
      this.breakpoint_ = "";
      this.breakpoints_ = assign({}, DEFAULT_BREAKPOINTS, _breakpoints);
      this.updateCurrentBreakpoint_();
      return assign(this.breakpoints_);
    };
    _proto.responsive = function responsive(value) {
      if (value === void 0) {
        return this.responsive_;
      }
      value = Boolean(value);
      var current = this.responsive_;
      if (value === current) {
        return;
      }
      this.responsive_ = value;
      if (value) {
        this.on("playerresize", this.updateCurrentBreakpoint_);
        this.updateCurrentBreakpoint_();
      } else {
        this.off("playerresize", this.updateCurrentBreakpoint_);
        this.removeCurrentBreakpoint_();
      }
      return value;
    };
    _proto.currentBreakpoint = function currentBreakpoint() {
      return this.breakpoint_;
    };
    _proto.currentBreakpointClass = function currentBreakpointClass() {
      return BREAKPOINT_CLASSES[this.breakpoint_] || "";
    };
    _proto.loadMedia = function loadMedia(media, ready) {
      var _this18 = this;
      if (!media || typeof media !== "object") {
        return;
      }
      this.reset();
      this.cache_.media = mergeOptions(media);
      var _this$cache_$media = this.cache_.media, artwork = _this$cache_$media.artwork, poster = _this$cache_$media.poster, src = _this$cache_$media.src, textTracks = _this$cache_$media.textTracks;
      if (!artwork && poster) {
        this.cache_.media.artwork = [{
          src: poster,
          type: getMimetype(poster)
        }];
      }
      if (src) {
        this.src(src);
      }
      if (poster) {
        this.poster(poster);
      }
      if (Array.isArray(textTracks)) {
        textTracks.forEach(function(tt) {
          return _this18.addRemoteTextTrack(tt, false);
        });
      }
      this.ready(ready);
    };
    _proto.getMedia = function getMedia() {
      if (!this.cache_.media) {
        var poster = this.poster();
        var src = this.currentSources();
        var textTracks = Array.prototype.map.call(this.remoteTextTracks(), function(tt) {
          return {
            kind: tt.kind,
            label: tt.label,
            language: tt.language,
            src: tt.src
          };
        });
        var media = {
          src,
          textTracks
        };
        if (poster) {
          media.poster = poster;
          media.artwork = [{
            src: media.poster,
            type: getMimetype(media.poster)
          }];
        }
        return media;
      }
      return mergeOptions(this.cache_.media);
    };
    Player4.getTagSettings = function getTagSettings(tag) {
      var baseOptions = {
        sources: [],
        tracks: []
      };
      var tagOptions = getAttributes(tag);
      var dataSetup = tagOptions["data-setup"];
      if (hasClass(tag, "vjs-fill")) {
        tagOptions.fill = true;
      }
      if (hasClass(tag, "vjs-fluid")) {
        tagOptions.fluid = true;
      }
      if (dataSetup !== null) {
        var _safeParseTuple = import_tuple.default(dataSetup || "{}"), err = _safeParseTuple[0], data = _safeParseTuple[1];
        if (err) {
          log.error(err);
        }
        assign(tagOptions, data);
      }
      assign(baseOptions, tagOptions);
      if (tag.hasChildNodes()) {
        var children = tag.childNodes;
        for (var i = 0, j = children.length; i < j; i++) {
          var child = children[i];
          var childName = child.nodeName.toLowerCase();
          if (childName === "source") {
            baseOptions.sources.push(getAttributes(child));
          } else if (childName === "track") {
            baseOptions.tracks.push(getAttributes(child));
          }
        }
      }
      return baseOptions;
    };
    _proto.flexNotSupported_ = function flexNotSupported_() {
      var elem = import_document.default.createElement("i");
      return !("flexBasis" in elem.style || "webkitFlexBasis" in elem.style || "mozFlexBasis" in elem.style || "msFlexBasis" in elem.style || "msFlexOrder" in elem.style);
    };
    _proto.debug = function debug(enabled) {
      if (enabled === void 0) {
        return this.debugEnabled_;
      }
      if (enabled) {
        this.trigger("debugon");
        this.previousLogLevel_ = this.log.level;
        this.log.level("debug");
        this.debugEnabled_ = true;
      } else {
        this.trigger("debugoff");
        this.log.level(this.previousLogLevel_);
        this.previousLogLevel_ = void 0;
        this.debugEnabled_ = false;
      }
    };
    return Player4;
  }(Component);
  ALL.names.forEach(function(name) {
    var props = ALL[name];
    Player.prototype[props.getterName] = function() {
      if (this.tech_) {
        return this.tech_[props.getterName]();
      }
      this[props.privateName] = this[props.privateName] || new props.ListClass();
      return this[props.privateName];
    };
  });
  Player.prototype.crossorigin = Player.prototype.crossOrigin;
  Player.players = {};
  var navigator = import_window2.default.navigator;
  Player.prototype.options_ = {
    techOrder: Tech.defaultTechOrder_,
    html5: {},
    inactivityTimeout: 2e3,
    playbackRates: [],
    liveui: false,
    children: ["mediaLoader", "posterImage", "textTrackDisplay", "loadingSpinner", "bigPlayButton", "liveTracker", "controlBar", "errorDisplay", "textTrackSettings", "resizeManager"],
    language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || "en",
    languages: {},
    notSupportedMessage: "No compatible source was found for this media.",
    fullscreen: {
      options: {
        navigationUI: "hide"
      }
    },
    breakpoints: {},
    responsive: false
  };
  [
    "ended",
    "seeking",
    "seekable",
    "networkState",
    "readyState"
  ].forEach(function(fn) {
    Player.prototype[fn] = function() {
      return this.techGet_(fn);
    };
  });
  TECH_EVENTS_RETRIGGER.forEach(function(event) {
    Player.prototype["handleTech" + toTitleCase(event) + "_"] = function() {
      return this.trigger(event);
    };
  });
  Component.registerComponent("Player", Player);
  var BASE_PLUGIN_NAME = "plugin";
  var PLUGIN_CACHE_KEY = "activePlugins_";
  var pluginStorage = {};
  var pluginExists = function pluginExists2(name) {
    return pluginStorage.hasOwnProperty(name);
  };
  var getPlugin = function getPlugin2(name) {
    return pluginExists(name) ? pluginStorage[name] : void 0;
  };
  var markPluginAsActive = function markPluginAsActive2(player, name) {
    player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
    player[PLUGIN_CACHE_KEY][name] = true;
  };
  var triggerSetupEvent = function triggerSetupEvent2(player, hash, before) {
    var eventName = (before ? "before" : "") + "pluginsetup";
    player.trigger(eventName, hash);
    player.trigger(eventName + ":" + hash.name, hash);
  };
  var createBasicPlugin = function createBasicPlugin2(name, plugin) {
    var basicPluginWrapper = function basicPluginWrapper2() {
      triggerSetupEvent(this, {
        name,
        plugin,
        instance: null
      }, true);
      var instance = plugin.apply(this, arguments);
      markPluginAsActive(this, name);
      triggerSetupEvent(this, {
        name,
        plugin,
        instance
      });
      return instance;
    };
    Object.keys(plugin).forEach(function(prop) {
      basicPluginWrapper[prop] = plugin[prop];
    });
    return basicPluginWrapper;
  };
  var createPluginFactory = function createPluginFactory2(name, PluginSubClass) {
    PluginSubClass.prototype.name = name;
    return function() {
      triggerSetupEvent(this, {
        name,
        plugin: PluginSubClass,
        instance: null
      }, true);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var instance = import_construct.default(PluginSubClass, [this].concat(args));
      this[name] = function() {
        return instance;
      };
      triggerSetupEvent(this, instance.getEventHash());
      return instance;
    };
  };
  var Plugin = /* @__PURE__ */ function() {
    function Plugin2(player) {
      if (this.constructor === Plugin2) {
        throw new Error("Plugin must be sub-classed; not directly instantiated.");
      }
      this.player = player;
      if (!this.log) {
        this.log = this.player.log.createLogger(this.name);
      }
      evented(this);
      delete this.trigger;
      stateful(this, this.constructor.defaultState);
      markPluginAsActive(player, this.name);
      this.dispose = bind(this, this.dispose);
      player.on("dispose", this.dispose);
    }
    var _proto = Plugin2.prototype;
    _proto.version = function version2() {
      return this.constructor.VERSION;
    };
    _proto.getEventHash = function getEventHash(hash) {
      if (hash === void 0) {
        hash = {};
      }
      hash.name = this.name;
      hash.plugin = this.constructor;
      hash.instance = this;
      return hash;
    };
    _proto.trigger = function trigger$12(event, hash) {
      if (hash === void 0) {
        hash = {};
      }
      return trigger(this.eventBusEl_, event, this.getEventHash(hash));
    };
    _proto.handleStateChanged = function handleStateChanged(e) {
    };
    _proto.dispose = function dispose3() {
      var name = this.name, player = this.player;
      this.trigger("dispose");
      this.off();
      player.off("dispose", this.dispose);
      player[PLUGIN_CACHE_KEY][name] = false;
      this.player = this.state = null;
      player[name] = createPluginFactory(name, pluginStorage[name]);
    };
    Plugin2.isBasic = function isBasic(plugin) {
      var p = typeof plugin === "string" ? getPlugin(plugin) : plugin;
      return typeof p === "function" && !Plugin2.prototype.isPrototypeOf(p.prototype);
    };
    Plugin2.registerPlugin = function registerPlugin(name, plugin) {
      if (typeof name !== "string") {
        throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + typeof name + ".");
      }
      if (pluginExists(name)) {
        log.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
      } else if (Player.prototype.hasOwnProperty(name)) {
        throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
      }
      if (typeof plugin !== "function") {
        throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + typeof plugin + ".");
      }
      pluginStorage[name] = plugin;
      if (name !== BASE_PLUGIN_NAME) {
        if (Plugin2.isBasic(plugin)) {
          Player.prototype[name] = createBasicPlugin(name, plugin);
        } else {
          Player.prototype[name] = createPluginFactory(name, plugin);
        }
      }
      return plugin;
    };
    Plugin2.deregisterPlugin = function deregisterPlugin(name) {
      if (name === BASE_PLUGIN_NAME) {
        throw new Error("Cannot de-register base plugin.");
      }
      if (pluginExists(name)) {
        delete pluginStorage[name];
        delete Player.prototype[name];
      }
    };
    Plugin2.getPlugins = function getPlugins(names) {
      if (names === void 0) {
        names = Object.keys(pluginStorage);
      }
      var result;
      names.forEach(function(name) {
        var plugin = getPlugin(name);
        if (plugin) {
          result = result || {};
          result[name] = plugin;
        }
      });
      return result;
    };
    Plugin2.getPluginVersion = function getPluginVersion(name) {
      var plugin = getPlugin(name);
      return plugin && plugin.VERSION || "";
    };
    return Plugin2;
  }();
  Plugin.getPlugin = getPlugin;
  Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;
  Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);
  Player.prototype.usingPlugin = function(name) {
    return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
  };
  Player.prototype.hasPlugin = function(name) {
    return !!pluginExists(name);
  };
  var extend = function extend2(superClass, subClassMethods) {
    if (subClassMethods === void 0) {
      subClassMethods = {};
    }
    var subClass = function subClass2() {
      superClass.apply(this, arguments);
    };
    var methods = {};
    if (typeof subClassMethods === "object") {
      if (subClassMethods.constructor !== Object.prototype.constructor) {
        subClass = subClassMethods.constructor;
      }
      methods = subClassMethods;
    } else if (typeof subClassMethods === "function") {
      subClass = subClassMethods;
    }
    import_inherits.default(subClass, superClass);
    if (superClass) {
      subClass.super_ = superClass;
    }
    for (var name in methods) {
      if (methods.hasOwnProperty(name)) {
        subClass.prototype[name] = methods[name];
      }
    }
    return subClass;
  };
  var normalizeId = function normalizeId2(id) {
    return id.indexOf("#") === 0 ? id.slice(1) : id;
  };
  function videojs$1(id, options, ready) {
    var player = videojs$1.getPlayer(id);
    if (player) {
      if (options) {
        log.warn('Player "' + id + '" is already initialised. Options will not be applied.');
      }
      if (ready) {
        player.ready(ready);
      }
      return player;
    }
    var el = typeof id === "string" ? $("#" + normalizeId(id)) : id;
    if (!isEl(el)) {
      throw new TypeError("The element or ID supplied is not valid. (videojs)");
    }
    if (!el.ownerDocument.defaultView || !el.ownerDocument.body.contains(el)) {
      log.warn("The element supplied is not included in the DOM");
    }
    options = options || {};
    videojs$1.hooks("beforesetup").forEach(function(hookFunction) {
      var opts = hookFunction(el, mergeOptions(options));
      if (!isObject3(opts) || Array.isArray(opts)) {
        log.error("please return an object in beforesetup hooks");
        return;
      }
      options = mergeOptions(options, opts);
    });
    var PlayerComponent = Component.getComponent("Player");
    player = new PlayerComponent(el, options, ready);
    videojs$1.hooks("setup").forEach(function(hookFunction) {
      return hookFunction(player);
    });
    return player;
  }
  videojs$1.hooks_ = {};
  videojs$1.hooks = function(type3, fn) {
    videojs$1.hooks_[type3] = videojs$1.hooks_[type3] || [];
    if (fn) {
      videojs$1.hooks_[type3] = videojs$1.hooks_[type3].concat(fn);
    }
    return videojs$1.hooks_[type3];
  };
  videojs$1.hook = function(type3, fn) {
    videojs$1.hooks(type3, fn);
  };
  videojs$1.hookOnce = function(type3, fn) {
    videojs$1.hooks(type3, [].concat(fn).map(function(original) {
      var wrapper = function wrapper2() {
        videojs$1.removeHook(type3, wrapper2);
        return original.apply(void 0, arguments);
      };
      return wrapper;
    }));
  };
  videojs$1.removeHook = function(type3, fn) {
    var index = videojs$1.hooks(type3).indexOf(fn);
    if (index <= -1) {
      return false;
    }
    videojs$1.hooks_[type3] = videojs$1.hooks_[type3].slice();
    videojs$1.hooks_[type3].splice(index, 1);
    return true;
  };
  if (import_window2.default.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
    style = $(".vjs-styles-defaults");
    if (!style) {
      style = createStyleElement("vjs-styles-defaults");
      head = $("head");
      if (head) {
        head.insertBefore(style, head.firstChild);
      }
      setTextContent(style, "\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ");
    }
  }
  var style;
  var head;
  autoSetupTimeout(1, videojs$1);
  videojs$1.VERSION = version;
  videojs$1.options = Player.prototype.options_;
  videojs$1.getPlayers = function() {
    return Player.players;
  };
  videojs$1.getPlayer = function(id) {
    var players = Player.players;
    var tag;
    if (typeof id === "string") {
      var nId = normalizeId(id);
      var player = players[nId];
      if (player) {
        return player;
      }
      tag = $("#" + nId);
    } else {
      tag = id;
    }
    if (isEl(tag)) {
      var _tag = tag, _player = _tag.player, playerId = _tag.playerId;
      if (_player || players[playerId]) {
        return _player || players[playerId];
      }
    }
  };
  videojs$1.getAllPlayers = function() {
    return Object.keys(Player.players).map(function(k) {
      return Player.players[k];
    }).filter(Boolean);
  };
  videojs$1.players = Player.players;
  videojs$1.getComponent = Component.getComponent;
  videojs$1.registerComponent = function(name, comp) {
    if (Tech.isTech(comp)) {
      log.warn("The " + name + " tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)");
    }
    Component.registerComponent.call(Component, name, comp);
  };
  videojs$1.getTech = Tech.getTech;
  videojs$1.registerTech = Tech.registerTech;
  videojs$1.use = use;
  Object.defineProperty(videojs$1, "middleware", {
    value: {},
    writeable: false,
    enumerable: true
  });
  Object.defineProperty(videojs$1.middleware, "TERMINATOR", {
    value: TERMINATOR,
    writeable: false,
    enumerable: true
  });
  videojs$1.browser = browser;
  videojs$1.TOUCH_ENABLED = TOUCH_ENABLED;
  videojs$1.extend = extend;
  videojs$1.mergeOptions = mergeOptions;
  videojs$1.bind = bind;
  videojs$1.registerPlugin = Plugin.registerPlugin;
  videojs$1.deregisterPlugin = Plugin.deregisterPlugin;
  videojs$1.plugin = function(name, plugin) {
    log.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead");
    return Plugin.registerPlugin(name, plugin);
  };
  videojs$1.getPlugins = Plugin.getPlugins;
  videojs$1.getPlugin = Plugin.getPlugin;
  videojs$1.getPluginVersion = Plugin.getPluginVersion;
  videojs$1.addLanguage = function(code, data) {
    var _mergeOptions;
    code = ("" + code).toLowerCase();
    videojs$1.options.languages = mergeOptions(videojs$1.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));
    return videojs$1.options.languages[code];
  };
  videojs$1.log = log;
  videojs$1.createLogger = createLogger$1;
  videojs$1.createTimeRange = videojs$1.createTimeRanges = createTimeRanges;
  videojs$1.formatTime = formatTime;
  videojs$1.setFormatTime = setFormatTime;
  videojs$1.resetFormatTime = resetFormatTime;
  videojs$1.parseUrl = parseUrl;
  videojs$1.isCrossOrigin = isCrossOrigin;
  videojs$1.EventTarget = EventTarget;
  videojs$1.on = on;
  videojs$1.one = one;
  videojs$1.off = off;
  videojs$1.trigger = trigger;
  videojs$1.xhr = import_xhr.default;
  videojs$1.TextTrack = TextTrack;
  videojs$1.AudioTrack = AudioTrack;
  videojs$1.VideoTrack = VideoTrack;
  ["isEl", "isTextNode", "createEl", "hasClass", "addClass", "removeClass", "toggleClass", "setAttributes", "getAttributes", "emptyEl", "appendContent", "insertContent"].forEach(function(k) {
    videojs$1[k] = function() {
      log.warn("videojs." + k + "() is deprecated; use videojs.dom." + k + "() instead");
      return Dom[k].apply(null, arguments);
    };
  });
  videojs$1.computedStyle = computedStyle;
  videojs$1.dom = Dom;
  videojs$1.url = Url;
  videojs$1.defineLazyProperty = defineLazyProperty;
  /*! @name @videojs/http-streaming @version 2.4.2 @license Apache-2.0 */
  var resolveUrl2 = import_resolve_url2.default;
  var resolveManifestRedirect = function resolveManifestRedirect2(handleManifestRedirect, url, req) {
    if (handleManifestRedirect && req && req.responseURL && url !== req.responseURL) {
      return req.responseURL;
    }
    return url;
  };
  var log$1 = videojs$1.log;
  var createPlaylistID = function createPlaylistID2(index, uri) {
    return index + "-" + uri;
  };
  var parseManifest = function parseManifest2(_ref) {
    var manifestString = _ref.manifestString, _ref$customTagParsers = _ref.customTagParsers, customTagParsers = _ref$customTagParsers === void 0 ? [] : _ref$customTagParsers, _ref$customTagMappers = _ref.customTagMappers, customTagMappers = _ref$customTagMappers === void 0 ? [] : _ref$customTagMappers;
    var parser2 = new Parser();
    customTagParsers.forEach(function(customParser) {
      return parser2.addParser(customParser);
    });
    customTagMappers.forEach(function(mapper) {
      return parser2.addTagMapper(mapper);
    });
    parser2.push(manifestString);
    parser2.end();
    return parser2.manifest;
  };
  var forEachMediaGroup = function forEachMediaGroup2(master, callback2) {
    ["AUDIO", "SUBTITLES"].forEach(function(mediaType) {
      for (var groupKey in master.mediaGroups[mediaType]) {
        for (var labelKey in master.mediaGroups[mediaType][groupKey]) {
          var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];
          callback2(mediaProperties, mediaType, groupKey, labelKey);
        }
      }
    });
  };
  var setupMediaPlaylist = function setupMediaPlaylist2(_ref2) {
    var playlist = _ref2.playlist, uri = _ref2.uri, id = _ref2.id;
    playlist.id = id;
    if (uri) {
      playlist.uri = uri;
    }
    playlist.attributes = playlist.attributes || {};
  };
  var setupMediaPlaylists = function setupMediaPlaylists2(master) {
    var i = master.playlists.length;
    while (i--) {
      var playlist = master.playlists[i];
      setupMediaPlaylist({
        playlist,
        id: createPlaylistID(i, playlist.uri)
      });
      playlist.resolvedUri = resolveUrl2(master.uri, playlist.uri);
      master.playlists[playlist.id] = playlist;
      master.playlists[playlist.uri] = playlist;
      if (!playlist.attributes.BANDWIDTH) {
        log$1.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.");
      }
    }
  };
  var resolveMediaGroupUris = function resolveMediaGroupUris2(master) {
    forEachMediaGroup(master, function(properties) {
      if (properties.uri) {
        properties.resolvedUri = resolveUrl2(master.uri, properties.uri);
      }
    });
  };
  var masterForMedia = function masterForMedia2(media, uri) {
    var id = createPlaylistID(0, uri);
    var master = {
      mediaGroups: {
        AUDIO: {},
        VIDEO: {},
        "CLOSED-CAPTIONS": {},
        SUBTITLES: {}
      },
      uri: import_window2.default.location.href,
      resolvedUri: import_window2.default.location.href,
      playlists: [{
        uri,
        id,
        resolvedUri: uri,
        attributes: {}
      }]
    };
    master.playlists[id] = master.playlists[0];
    master.playlists[uri] = master.playlists[0];
    return master;
  };
  var addPropertiesToMaster = function addPropertiesToMaster2(master, uri) {
    master.uri = uri;
    for (var i = 0; i < master.playlists.length; i++) {
      if (!master.playlists[i].uri) {
        var phonyUri = "placeholder-uri-" + i;
        master.playlists[i].uri = phonyUri;
      }
    }
    forEachMediaGroup(master, function(properties, mediaType, groupKey, labelKey) {
      if (!properties.playlists || !properties.playlists.length || properties.playlists[0].uri) {
        return;
      }
      var phonyUri2 = "placeholder-uri-" + mediaType + "-" + groupKey + "-" + labelKey;
      var id = createPlaylistID(0, phonyUri2);
      properties.playlists[0].uri = phonyUri2;
      properties.playlists[0].id = id;
      master.playlists[id] = properties.playlists[0];
      master.playlists[phonyUri2] = properties.playlists[0];
    });
    setupMediaPlaylists(master);
    resolveMediaGroupUris(master);
  };
  var mergeOptions$1 = videojs$1.mergeOptions;
  var EventTarget$1 = videojs$1.EventTarget;
  var updateSegments = function updateSegments2(original, update, offset) {
    var result = update.slice();
    offset = offset || 0;
    var length = Math.min(original.length, update.length + offset);
    for (var i = offset; i < length; i++) {
      result[i - offset] = mergeOptions$1(original[i], result[i - offset]);
    }
    return result;
  };
  var resolveSegmentUris = function resolveSegmentUris2(segment, baseUri) {
    if (!segment.resolvedUri) {
      segment.resolvedUri = resolveUrl2(baseUri, segment.uri);
    }
    if (segment.key && !segment.key.resolvedUri) {
      segment.key.resolvedUri = resolveUrl2(baseUri, segment.key.uri);
    }
    if (segment.map && !segment.map.resolvedUri) {
      segment.map.resolvedUri = resolveUrl2(baseUri, segment.map.uri);
    }
  };
  var updateMaster = function updateMaster2(master, media) {
    var result = mergeOptions$1(master, {});
    var playlist = result.playlists[media.id];
    if (!playlist) {
      return null;
    }
    if (playlist.segments && media.segments && playlist.segments.length === media.segments.length && playlist.endList === media.endList && playlist.mediaSequence === media.mediaSequence) {
      return null;
    }
    var mergedPlaylist = mergeOptions$1(playlist, media);
    if (playlist.segments) {
      mergedPlaylist.segments = updateSegments(playlist.segments, media.segments, media.mediaSequence - playlist.mediaSequence);
    }
    mergedPlaylist.segments.forEach(function(segment) {
      resolveSegmentUris(segment, mergedPlaylist.resolvedUri);
    });
    for (var i = 0; i < result.playlists.length; i++) {
      if (result.playlists[i].id === media.id) {
        result.playlists[i] = mergedPlaylist;
      }
    }
    result.playlists[media.id] = mergedPlaylist;
    result.playlists[media.uri] = mergedPlaylist;
    return result;
  };
  var refreshDelay = function refreshDelay2(media, update) {
    var lastSegment = media.segments[media.segments.length - 1];
    var delay;
    if (update && lastSegment && lastSegment.duration) {
      delay = lastSegment.duration * 1e3;
    } else {
      delay = (media.targetDuration || 10) * 500;
    }
    return delay;
  };
  var PlaylistLoader = /* @__PURE__ */ function(_EventTarget) {
    import_inheritsLoose2.default(PlaylistLoader2, _EventTarget);
    function PlaylistLoader2(src, vhs, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _EventTarget.call(this) || this;
      if (!src) {
        throw new Error("A non-empty playlist URL or object is required");
      }
      var _options = options, _options$withCredenti = _options.withCredentials, withCredentials = _options$withCredenti === void 0 ? false : _options$withCredenti, _options$handleManife = _options.handleManifestRedirects, handleManifestRedirects = _options$handleManife === void 0 ? false : _options$handleManife;
      _this.src = src;
      _this.vhs_ = vhs;
      _this.withCredentials = withCredentials;
      _this.handleManifestRedirects = handleManifestRedirects;
      var vhsOptions = vhs.options_;
      _this.customTagParsers = vhsOptions && vhsOptions.customTagParsers || [];
      _this.customTagMappers = vhsOptions && vhsOptions.customTagMappers || [];
      _this.state = "HAVE_NOTHING";
      _this.on("mediaupdatetimeout", function() {
        if (_this.state !== "HAVE_METADATA") {
          return;
        }
        _this.state = "HAVE_CURRENT_METADATA";
        _this.request = _this.vhs_.xhr({
          uri: resolveUrl2(_this.master.uri, _this.media().uri),
          withCredentials: _this.withCredentials
        }, function(error, req) {
          if (!_this.request) {
            return;
          }
          if (error) {
            return _this.playlistRequestError(_this.request, _this.media(), "HAVE_METADATA");
          }
          _this.haveMetadata({
            playlistString: _this.request.responseText,
            url: _this.media().uri,
            id: _this.media().id
          });
        });
      });
      return _this;
    }
    var _proto = PlaylistLoader2.prototype;
    _proto.playlistRequestError = function playlistRequestError(xhr, playlist, startingState) {
      var uri = playlist.uri, id = playlist.id;
      this.request = null;
      if (startingState) {
        this.state = startingState;
      }
      this.error = {
        playlist: this.master.playlists[id],
        status: xhr.status,
        message: "HLS playlist request error at URL: " + uri + ".",
        responseText: xhr.responseText,
        code: xhr.status >= 500 ? 4 : 2
      };
      this.trigger("error");
    };
    _proto.haveMetadata = function haveMetadata(_ref) {
      var _this2 = this;
      var playlistString = _ref.playlistString, playlistObject = _ref.playlistObject, url = _ref.url, id = _ref.id;
      this.request = null;
      this.state = "HAVE_METADATA";
      var playlist = playlistObject || parseManifest({
        manifestString: playlistString,
        customTagParsers: this.customTagParsers,
        customTagMappers: this.customTagMappers
      });
      playlist.lastRequest = Date.now();
      setupMediaPlaylist({
        playlist,
        uri: url,
        id
      });
      var update = updateMaster(this.master, playlist);
      this.targetDuration = playlist.targetDuration;
      if (update) {
        this.master = update;
        this.media_ = this.master.playlists[id];
      } else {
        this.trigger("playlistunchanged");
      }
      if (!this.media().endList) {
        import_window2.default.clearTimeout(this.mediaUpdateTimeout);
        this.mediaUpdateTimeout = import_window2.default.setTimeout(function() {
          _this2.trigger("mediaupdatetimeout");
        }, refreshDelay(this.media(), !!update));
      }
      this.trigger("loadedplaylist");
    };
    _proto.dispose = function dispose3() {
      this.trigger("dispose");
      this.stopRequest();
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      import_window2.default.clearTimeout(this.finalRenditionTimeout);
      this.off();
    };
    _proto.stopRequest = function stopRequest() {
      if (this.request) {
        var oldRequest = this.request;
        this.request = null;
        oldRequest.onreadystatechange = null;
        oldRequest.abort();
      }
    };
    _proto.media = function media(playlist, shouldDelay) {
      var _this3 = this;
      if (!playlist) {
        return this.media_;
      }
      if (this.state === "HAVE_NOTHING") {
        throw new Error("Cannot switch media playlist from " + this.state);
      }
      if (typeof playlist === "string") {
        if (!this.master.playlists[playlist]) {
          throw new Error("Unknown playlist URI: " + playlist);
        }
        playlist = this.master.playlists[playlist];
      }
      import_window2.default.clearTimeout(this.finalRenditionTimeout);
      if (shouldDelay) {
        var delay = playlist.targetDuration / 2 * 1e3 || 5 * 1e3;
        this.finalRenditionTimeout = import_window2.default.setTimeout(this.media.bind(this, playlist, false), delay);
        return;
      }
      var startingState = this.state;
      var mediaChange = !this.media_ || playlist.id !== this.media_.id;
      if (this.master.playlists[playlist.id].endList || playlist.endList && playlist.segments.length) {
        if (this.request) {
          this.request.onreadystatechange = null;
          this.request.abort();
          this.request = null;
        }
        this.state = "HAVE_METADATA";
        this.media_ = playlist;
        if (mediaChange) {
          this.trigger("mediachanging");
          if (startingState === "HAVE_MASTER") {
            this.trigger("loadedmetadata");
          } else {
            this.trigger("mediachange");
          }
        }
        return;
      }
      if (!mediaChange) {
        return;
      }
      this.state = "SWITCHING_MEDIA";
      if (this.request) {
        if (playlist.resolvedUri === this.request.url) {
          return;
        }
        this.request.onreadystatechange = null;
        this.request.abort();
        this.request = null;
      }
      if (this.media_) {
        this.trigger("mediachanging");
      }
      this.request = this.vhs_.xhr({
        uri: playlist.resolvedUri,
        withCredentials: this.withCredentials
      }, function(error, req) {
        if (!_this3.request) {
          return;
        }
        playlist.lastRequest = Date.now();
        playlist.resolvedUri = resolveManifestRedirect(_this3.handleManifestRedirects, playlist.resolvedUri, req);
        if (error) {
          return _this3.playlistRequestError(_this3.request, playlist, startingState);
        }
        _this3.haveMetadata({
          playlistString: req.responseText,
          url: playlist.uri,
          id: playlist.id
        });
        if (startingState === "HAVE_MASTER") {
          _this3.trigger("loadedmetadata");
        } else {
          _this3.trigger("mediachange");
        }
      });
    };
    _proto.pause = function pause() {
      this.stopRequest();
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      if (this.state === "HAVE_NOTHING") {
        this.started = false;
      }
      if (this.state === "SWITCHING_MEDIA") {
        if (this.media_) {
          this.state = "HAVE_METADATA";
        } else {
          this.state = "HAVE_MASTER";
        }
      } else if (this.state === "HAVE_CURRENT_METADATA") {
        this.state = "HAVE_METADATA";
      }
    };
    _proto.load = function load(shouldDelay) {
      var _this4 = this;
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      var media = this.media();
      if (shouldDelay) {
        var delay = media ? media.targetDuration / 2 * 1e3 : 5 * 1e3;
        this.mediaUpdateTimeout = import_window2.default.setTimeout(function() {
          return _this4.load();
        }, delay);
        return;
      }
      if (!this.started) {
        this.start();
        return;
      }
      if (media && !media.endList) {
        this.trigger("mediaupdatetimeout");
      } else {
        this.trigger("loadedplaylist");
      }
    };
    _proto.start = function start2() {
      var _this5 = this;
      this.started = true;
      if (typeof this.src === "object") {
        if (!this.src.uri) {
          this.src.uri = import_window2.default.location.href;
        }
        this.src.resolvedUri = this.src.uri;
        setTimeout(function() {
          _this5.setupInitialPlaylist(_this5.src);
        }, 0);
        return;
      }
      this.request = this.vhs_.xhr({
        uri: this.src,
        withCredentials: this.withCredentials
      }, function(error, req) {
        if (!_this5.request) {
          return;
        }
        _this5.request = null;
        if (error) {
          _this5.error = {
            status: req.status,
            message: "HLS playlist request error at URL: " + _this5.src + ".",
            responseText: req.responseText,
            code: 2
          };
          if (_this5.state === "HAVE_NOTHING") {
            _this5.started = false;
          }
          return _this5.trigger("error");
        }
        _this5.src = resolveManifestRedirect(_this5.handleManifestRedirects, _this5.src, req);
        var manifest = parseManifest({
          manifestString: req.responseText,
          customTagParsers: _this5.customTagParsers,
          customTagMappers: _this5.customTagMappers
        });
        _this5.setupInitialPlaylist(manifest);
      });
    };
    _proto.srcUri = function srcUri() {
      return typeof this.src === "string" ? this.src : this.src.uri;
    };
    _proto.setupInitialPlaylist = function setupInitialPlaylist(manifest) {
      this.state = "HAVE_MASTER";
      if (manifest.playlists) {
        this.master = manifest;
        addPropertiesToMaster(this.master, this.srcUri());
        manifest.playlists.forEach(function(playlist) {
          if (playlist.segments) {
            playlist.segments.forEach(function(segment) {
              resolveSegmentUris(segment, playlist.resolvedUri);
            });
          }
        });
        this.trigger("loadedplaylist");
        if (!this.request) {
          this.media(this.master.playlists[0]);
        }
        return;
      }
      var uri = this.srcUri() || import_window2.default.location.href;
      this.master = masterForMedia(manifest, uri);
      this.haveMetadata({
        playlistObject: manifest,
        url: uri,
        id: this.master.playlists[0].id
      });
      this.trigger("loadedmetadata");
    };
    return PlaylistLoader2;
  }(EventTarget$1);
  var TIME_FUDGE_FACTOR = 1 / 30;
  var SAFE_TIME_DELTA = TIME_FUDGE_FACTOR * 3;
  var filterRanges = function filterRanges2(timeRanges, predicate) {
    var results = [];
    var i;
    if (timeRanges && timeRanges.length) {
      for (i = 0; i < timeRanges.length; i++) {
        if (predicate(timeRanges.start(i), timeRanges.end(i))) {
          results.push([timeRanges.start(i), timeRanges.end(i)]);
        }
      }
    }
    return videojs$1.createTimeRanges(results);
  };
  var findRange = function findRange2(buffered, time) {
    return filterRanges(buffered, function(start2, end) {
      return start2 - SAFE_TIME_DELTA <= time && end + SAFE_TIME_DELTA >= time;
    });
  };
  var findNextRange = function findNextRange2(timeRanges, time) {
    return filterRanges(timeRanges, function(start2) {
      return start2 - TIME_FUDGE_FACTOR >= time;
    });
  };
  var findGaps = function findGaps2(buffered) {
    if (buffered.length < 2) {
      return videojs$1.createTimeRanges();
    }
    var ranges = [];
    for (var i = 1; i < buffered.length; i++) {
      var start2 = buffered.end(i - 1);
      var end = buffered.start(i);
      ranges.push([start2, end]);
    }
    return videojs$1.createTimeRanges(ranges);
  };
  var bufferIntersection = function bufferIntersection2(bufferA, bufferB) {
    var start2 = null;
    var end = null;
    var arity = 0;
    var extents = [];
    var ranges = [];
    if (!bufferA || !bufferA.length || !bufferB || !bufferB.length) {
      return videojs$1.createTimeRange();
    }
    var count = bufferA.length;
    while (count--) {
      extents.push({
        time: bufferA.start(count),
        type: "start"
      });
      extents.push({
        time: bufferA.end(count),
        type: "end"
      });
    }
    count = bufferB.length;
    while (count--) {
      extents.push({
        time: bufferB.start(count),
        type: "start"
      });
      extents.push({
        time: bufferB.end(count),
        type: "end"
      });
    }
    extents.sort(function(a, b) {
      return a.time - b.time;
    });
    for (count = 0; count < extents.length; count++) {
      if (extents[count].type === "start") {
        arity++;
        if (arity === 2) {
          start2 = extents[count].time;
        }
      } else if (extents[count].type === "end") {
        arity--;
        if (arity === 1) {
          end = extents[count].time;
        }
      }
      if (start2 !== null && end !== null) {
        ranges.push([start2, end]);
        start2 = null;
        end = null;
      }
    }
    return videojs$1.createTimeRanges(ranges);
  };
  var printableRange = function printableRange2(range3) {
    var strArr = [];
    if (!range3 || !range3.length) {
      return "";
    }
    for (var i = 0; i < range3.length; i++) {
      strArr.push(range3.start(i) + " => " + range3.end(i));
    }
    return strArr.join(", ");
  };
  var timeUntilRebuffer = function timeUntilRebuffer2(buffered, currentTime, playbackRate) {
    if (playbackRate === void 0) {
      playbackRate = 1;
    }
    var bufferedEnd = buffered.length ? buffered.end(buffered.length - 1) : 0;
    return (bufferedEnd - currentTime) / playbackRate;
  };
  var timeRangesToArray = function timeRangesToArray2(timeRanges) {
    var timeRangesList = [];
    for (var i = 0; i < timeRanges.length; i++) {
      timeRangesList.push({
        start: timeRanges.start(i),
        end: timeRanges.end(i)
      });
    }
    return timeRangesList;
  };
  var isRangeDifferent = function isRangeDifferent2(a, b) {
    if (a === b) {
      return false;
    }
    if (!a && b || !b && a) {
      return true;
    }
    if (a.length !== b.length) {
      return true;
    }
    for (var i = 0; i < a.length; i++) {
      if (a.start(i) !== b.start(i) || a.end(i) !== b.end(i)) {
        return true;
      }
    }
    return false;
  };
  var createTimeRange = videojs$1.createTimeRange;
  var backwardDuration = function backwardDuration2(playlist, endSequence) {
    var result = 0;
    var i = endSequence - playlist.mediaSequence;
    var segment = playlist.segments[i];
    if (segment) {
      if (typeof segment.start !== "undefined") {
        return {
          result: segment.start,
          precise: true
        };
      }
      if (typeof segment.end !== "undefined") {
        return {
          result: segment.end - segment.duration,
          precise: true
        };
      }
    }
    while (i--) {
      segment = playlist.segments[i];
      if (typeof segment.end !== "undefined") {
        return {
          result: result + segment.end,
          precise: true
        };
      }
      result += segment.duration;
      if (typeof segment.start !== "undefined") {
        return {
          result: result + segment.start,
          precise: true
        };
      }
    }
    return {
      result,
      precise: false
    };
  };
  var forwardDuration = function forwardDuration2(playlist, endSequence) {
    var result = 0;
    var segment;
    var i = endSequence - playlist.mediaSequence;
    for (; i < playlist.segments.length; i++) {
      segment = playlist.segments[i];
      if (typeof segment.start !== "undefined") {
        return {
          result: segment.start - result,
          precise: true
        };
      }
      result += segment.duration;
      if (typeof segment.end !== "undefined") {
        return {
          result: segment.end - result,
          precise: true
        };
      }
    }
    return {
      result: -1,
      precise: false
    };
  };
  var intervalDuration = function intervalDuration2(playlist, endSequence, expired) {
    if (typeof endSequence === "undefined") {
      endSequence = playlist.mediaSequence + playlist.segments.length;
    }
    if (endSequence < playlist.mediaSequence) {
      return 0;
    }
    var backward = backwardDuration(playlist, endSequence);
    if (backward.precise) {
      return backward.result;
    }
    var forward = forwardDuration(playlist, endSequence);
    if (forward.precise) {
      return forward.result;
    }
    return backward.result + expired;
  };
  var duration2 = function duration3(playlist, endSequence, expired) {
    if (!playlist) {
      return 0;
    }
    if (typeof expired !== "number") {
      expired = 0;
    }
    if (typeof endSequence === "undefined") {
      if (playlist.totalDuration) {
        return playlist.totalDuration;
      }
      if (!playlist.endList) {
        return import_window2.default.Infinity;
      }
    }
    return intervalDuration(playlist, endSequence, expired);
  };
  var sumDurations = function sumDurations2(playlist, startIndex, endIndex) {
    var durations = 0;
    if (startIndex > endIndex) {
      var _ref = [endIndex, startIndex];
      startIndex = _ref[0];
      endIndex = _ref[1];
    }
    if (startIndex < 0) {
      for (var i = startIndex; i < Math.min(0, endIndex); i++) {
        durations += playlist.targetDuration;
      }
      startIndex = 0;
    }
    for (var _i = startIndex; _i < endIndex; _i++) {
      durations += playlist.segments[_i].duration;
    }
    return durations;
  };
  var safeLiveIndex = function safeLiveIndex2(playlist, liveEdgePadding) {
    if (!playlist.segments.length) {
      return 0;
    }
    var i = playlist.segments.length;
    var lastSegmentDuration = playlist.segments[i - 1].duration || playlist.targetDuration;
    var safeDistance = typeof liveEdgePadding === "number" ? liveEdgePadding : lastSegmentDuration + playlist.targetDuration * 2;
    if (safeDistance === 0) {
      return i;
    }
    var distanceFromEnd = 0;
    while (i--) {
      distanceFromEnd += playlist.segments[i].duration;
      if (distanceFromEnd >= safeDistance) {
        break;
      }
    }
    return Math.max(0, i);
  };
  var playlistEnd = function playlistEnd2(playlist, expired, useSafeLiveEnd, liveEdgePadding) {
    if (!playlist || !playlist.segments) {
      return null;
    }
    if (playlist.endList) {
      return duration2(playlist);
    }
    if (expired === null) {
      return null;
    }
    expired = expired || 0;
    var endSequence = useSafeLiveEnd ? safeLiveIndex(playlist, liveEdgePadding) : playlist.segments.length;
    return intervalDuration(playlist, playlist.mediaSequence + endSequence, expired);
  };
  var seekable = function seekable2(playlist, expired, liveEdgePadding) {
    var useSafeLiveEnd = true;
    var seekableStart = expired || 0;
    var seekableEnd = playlistEnd(playlist, expired, useSafeLiveEnd, liveEdgePadding);
    if (seekableEnd === null) {
      return createTimeRange();
    }
    return createTimeRange(seekableStart, seekableEnd);
  };
  var getMediaInfoForTime = function getMediaInfoForTime2(playlist, currentTime, startIndex, startTime) {
    var i;
    var segment;
    var numSegments = playlist.segments.length;
    var time = currentTime - startTime;
    if (time < 0) {
      if (startIndex > 0) {
        for (i = startIndex - 1; i >= 0; i--) {
          segment = playlist.segments[i];
          time += segment.duration + TIME_FUDGE_FACTOR;
          if (time > 0) {
            return {
              mediaIndex: i,
              startTime: startTime - sumDurations(playlist, startIndex, i)
            };
          }
        }
      }
      return {
        mediaIndex: 0,
        startTime: currentTime
      };
    }
    if (startIndex < 0) {
      for (i = startIndex; i < 0; i++) {
        time -= playlist.targetDuration;
        if (time < 0) {
          return {
            mediaIndex: 0,
            startTime: currentTime
          };
        }
      }
      startIndex = 0;
    }
    for (i = startIndex; i < numSegments; i++) {
      segment = playlist.segments[i];
      time -= segment.duration + TIME_FUDGE_FACTOR;
      if (time < 0) {
        return {
          mediaIndex: i,
          startTime: startTime + sumDurations(playlist, startIndex, i)
        };
      }
    }
    return {
      mediaIndex: numSegments - 1,
      startTime: currentTime
    };
  };
  var isBlacklisted = function isBlacklisted2(playlist) {
    return playlist.excludeUntil && playlist.excludeUntil > Date.now();
  };
  var isIncompatible = function isIncompatible2(playlist) {
    return playlist.excludeUntil && playlist.excludeUntil === Infinity;
  };
  var isEnabled = function isEnabled2(playlist) {
    var blacklisted = isBlacklisted(playlist);
    return !playlist.disabled && !blacklisted;
  };
  var isDisabled = function isDisabled2(playlist) {
    return playlist.disabled;
  };
  var isAes = function isAes2(media) {
    for (var i = 0; i < media.segments.length; i++) {
      if (media.segments[i].key) {
        return true;
      }
    }
    return false;
  };
  var hasAttribute = function hasAttribute2(attr, playlist) {
    return playlist.attributes && playlist.attributes[attr];
  };
  var estimateSegmentRequestTime = function estimateSegmentRequestTime2(segmentDuration, bandwidth2, playlist, bytesReceived) {
    if (bytesReceived === void 0) {
      bytesReceived = 0;
    }
    if (!hasAttribute("BANDWIDTH", playlist)) {
      return NaN;
    }
    var size = segmentDuration * playlist.attributes.BANDWIDTH;
    return (size - bytesReceived * 8) / bandwidth2;
  };
  var isLowestEnabledRendition = function isLowestEnabledRendition2(master, media) {
    if (master.playlists.length === 1) {
      return true;
    }
    var currentBandwidth = media.attributes.BANDWIDTH || Number.MAX_VALUE;
    return master.playlists.filter(function(playlist) {
      if (!isEnabled(playlist)) {
        return false;
      }
      return (playlist.attributes.BANDWIDTH || 0) < currentBandwidth;
    }).length === 0;
  };
  var Playlist = {
    duration: duration2,
    seekable,
    safeLiveIndex,
    getMediaInfoForTime,
    isEnabled,
    isDisabled,
    isBlacklisted,
    isIncompatible,
    playlistEnd,
    isAes,
    hasAttribute,
    estimateSegmentRequestTime,
    isLowestEnabledRendition
  };
  var videojsXHR = videojs$1.xhr;
  var mergeOptions$1$1 = videojs$1.mergeOptions;
  var callbackWrapper = function callbackWrapper2(request, error, response, callback2) {
    var reqResponse = request.responseType === "arraybuffer" ? request.response : request.responseText;
    if (!error && reqResponse) {
      request.responseTime = Date.now();
      request.roundTripTime = request.responseTime - request.requestTime;
      request.bytesReceived = reqResponse.byteLength || reqResponse.length;
      if (!request.bandwidth) {
        request.bandwidth = Math.floor(request.bytesReceived / request.roundTripTime * 8 * 1e3);
      }
    }
    if (response.headers) {
      request.responseHeaders = response.headers;
    }
    if (error && error.code === "ETIMEDOUT") {
      request.timedout = true;
    }
    if (!error && !request.aborted && response.statusCode !== 200 && response.statusCode !== 206 && response.statusCode !== 0) {
      error = new Error("XHR Failed with a response of: " + (request && (reqResponse || request.responseText)));
    }
    callback2(error, request);
  };
  var xhrFactory = function xhrFactory2() {
    var xhr = function XhrFunction(options, callback2) {
      options = mergeOptions$1$1({
        timeout: 45e3
      }, options);
      var beforeRequest = XhrFunction.beforeRequest || videojs$1.Vhs.xhr.beforeRequest;
      if (beforeRequest && typeof beforeRequest === "function") {
        var newOptions = beforeRequest(options);
        if (newOptions) {
          options = newOptions;
        }
      }
      var request = videojsXHR(options, function(error, response) {
        return callbackWrapper(request, error, response, callback2);
      });
      var originalAbort = request.abort;
      request.abort = function() {
        request.aborted = true;
        return originalAbort.apply(request, arguments);
      };
      request.uri = options.uri;
      request.requestTime = Date.now();
      return request;
    };
    return xhr;
  };
  var byterangeStr = function byterangeStr2(byterange) {
    var byterangeEnd = byterange.offset + byterange.length - 1;
    var byterangeStart = byterange.offset;
    return "bytes=" + byterangeStart + "-" + byterangeEnd;
  };
  var segmentXhrHeaders = function segmentXhrHeaders2(segment) {
    var headers = {};
    if (segment.byterange) {
      headers.Range = byterangeStr(segment.byterange);
    }
    return headers;
  };
  var textRange = function textRange2(range3, i) {
    return range3.start(i) + "-" + range3.end(i);
  };
  var formatHexString = function formatHexString2(e, i) {
    var value = e.toString(16);
    return "00".substring(0, 2 - value.length) + value + (i % 2 ? " " : "");
  };
  var formatAsciiString = function formatAsciiString2(e) {
    if (e >= 32 && e < 126) {
      return String.fromCharCode(e);
    }
    return ".";
  };
  var createTransferableMessage = function createTransferableMessage2(message) {
    var transferable = {};
    Object.keys(message).forEach(function(key) {
      var value = message[key];
      if (ArrayBuffer.isView(value)) {
        transferable[key] = {
          bytes: value.buffer,
          byteOffset: value.byteOffset,
          byteLength: value.byteLength
        };
      } else {
        transferable[key] = value;
      }
    });
    return transferable;
  };
  var initSegmentId = function initSegmentId2(initSegment) {
    var byterange = initSegment.byterange || {
      length: Infinity,
      offset: 0
    };
    return [byterange.length, byterange.offset, initSegment.resolvedUri].join(",");
  };
  var segmentKeyId = function segmentKeyId2(key) {
    return key.resolvedUri;
  };
  var hexDump = function hexDump2(data) {
    var bytes = Array.prototype.slice.call(data);
    var step = 16;
    var result = "";
    var hex;
    var ascii;
    for (var j = 0; j < bytes.length / step; j++) {
      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join("");
      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join("");
      result += hex + " " + ascii + "\n";
    }
    return result;
  };
  var tagDump = function tagDump2(_ref) {
    var bytes = _ref.bytes;
    return hexDump(bytes);
  };
  var textRanges = function textRanges2(ranges) {
    var result = "";
    var i;
    for (i = 0; i < ranges.length; i++) {
      result += textRange(ranges, i) + " ";
    }
    return result;
  };
  var utils = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    createTransferableMessage,
    initSegmentId,
    segmentKeyId,
    hexDump,
    tagDump,
    textRanges
  });
  var SEGMENT_END_FUDGE_PERCENT = 0.25;
  var playerTimeToProgramTime = function playerTimeToProgramTime2(playerTime, segment) {
    if (!segment.dateTimeObject) {
      return null;
    }
    var transmuxerPrependedSeconds = segment.videoTimingInfo.transmuxerPrependedSeconds;
    var transmuxedStart = segment.videoTimingInfo.transmuxedPresentationStart;
    var startOfSegment = transmuxedStart + transmuxerPrependedSeconds;
    var offsetFromSegmentStart = playerTime - startOfSegment;
    return new Date(segment.dateTimeObject.getTime() + offsetFromSegmentStart * 1e3);
  };
  var originalSegmentVideoDuration = function originalSegmentVideoDuration2(videoTimingInfo) {
    return videoTimingInfo.transmuxedPresentationEnd - videoTimingInfo.transmuxedPresentationStart - videoTimingInfo.transmuxerPrependedSeconds;
  };
  var findSegmentForProgramTime = function findSegmentForProgramTime2(programTime, playlist) {
    var dateTimeObject;
    try {
      dateTimeObject = new Date(programTime);
    } catch (e) {
      return null;
    }
    if (!playlist || !playlist.segments || playlist.segments.length === 0) {
      return null;
    }
    var segment = playlist.segments[0];
    if (dateTimeObject < segment.dateTimeObject) {
      return null;
    }
    for (var i = 0; i < playlist.segments.length - 1; i++) {
      segment = playlist.segments[i];
      var nextSegmentStart = playlist.segments[i + 1].dateTimeObject;
      if (dateTimeObject < nextSegmentStart) {
        break;
      }
    }
    var lastSegment = playlist.segments[playlist.segments.length - 1];
    var lastSegmentStart = lastSegment.dateTimeObject;
    var lastSegmentDuration = lastSegment.videoTimingInfo ? originalSegmentVideoDuration(lastSegment.videoTimingInfo) : lastSegment.duration + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT;
    var lastSegmentEnd = new Date(lastSegmentStart.getTime() + lastSegmentDuration * 1e3);
    if (dateTimeObject > lastSegmentEnd) {
      return null;
    }
    if (dateTimeObject > lastSegmentStart) {
      segment = lastSegment;
    }
    return {
      segment,
      estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : Playlist.duration(playlist, playlist.mediaSequence + playlist.segments.indexOf(segment)),
      type: segment.videoTimingInfo ? "accurate" : "estimate"
    };
  };
  var findSegmentForPlayerTime = function findSegmentForPlayerTime2(time, playlist) {
    if (!playlist || !playlist.segments || playlist.segments.length === 0) {
      return null;
    }
    var segmentEnd = 0;
    var segment;
    for (var i = 0; i < playlist.segments.length; i++) {
      segment = playlist.segments[i];
      segmentEnd = segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationEnd : segmentEnd + segment.duration;
      if (time <= segmentEnd) {
        break;
      }
    }
    var lastSegment = playlist.segments[playlist.segments.length - 1];
    if (lastSegment.videoTimingInfo && lastSegment.videoTimingInfo.transmuxedPresentationEnd < time) {
      return null;
    }
    if (time > segmentEnd) {
      if (time > segmentEnd + lastSegment.duration * SEGMENT_END_FUDGE_PERCENT) {
        return null;
      }
      segment = lastSegment;
    }
    return {
      segment,
      estimatedStart: segment.videoTimingInfo ? segment.videoTimingInfo.transmuxedPresentationStart : segmentEnd - segment.duration,
      type: segment.videoTimingInfo ? "accurate" : "estimate"
    };
  };
  var getOffsetFromTimestamp = function getOffsetFromTimestamp2(comparisonTimeStamp, programTime) {
    var segmentDateTime;
    var programDateTime;
    try {
      segmentDateTime = new Date(comparisonTimeStamp);
      programDateTime = new Date(programTime);
    } catch (e) {
    }
    var segmentTimeEpoch = segmentDateTime.getTime();
    var programTimeEpoch = programDateTime.getTime();
    return (programTimeEpoch - segmentTimeEpoch) / 1e3;
  };
  var verifyProgramDateTimeTags = function verifyProgramDateTimeTags2(playlist) {
    if (!playlist.segments || playlist.segments.length === 0) {
      return false;
    }
    for (var i = 0; i < playlist.segments.length; i++) {
      var segment = playlist.segments[i];
      if (!segment.dateTimeObject) {
        return false;
      }
    }
    return true;
  };
  var getProgramTime = function getProgramTime2(_ref) {
    var playlist = _ref.playlist, _ref$time = _ref.time, time = _ref$time === void 0 ? void 0 : _ref$time, callback2 = _ref.callback;
    if (!callback2) {
      throw new Error("getProgramTime: callback must be provided");
    }
    if (!playlist || time === void 0) {
      return callback2({
        message: "getProgramTime: playlist and time must be provided"
      });
    }
    var matchedSegment = findSegmentForPlayerTime(time, playlist);
    if (!matchedSegment) {
      return callback2({
        message: "valid programTime was not found"
      });
    }
    if (matchedSegment.type === "estimate") {
      return callback2({
        message: "Accurate programTime could not be determined. Please seek to e.seekTime and try again",
        seekTime: matchedSegment.estimatedStart
      });
    }
    var programTimeObject = {
      mediaSeconds: time
    };
    var programTime = playerTimeToProgramTime(time, matchedSegment.segment);
    if (programTime) {
      programTimeObject.programDateTime = programTime.toISOString();
    }
    return callback2(null, programTimeObject);
  };
  var seekToProgramTime = function seekToProgramTime2(_ref2) {
    var programTime = _ref2.programTime, playlist = _ref2.playlist, _ref2$retryCount = _ref2.retryCount, retryCount = _ref2$retryCount === void 0 ? 2 : _ref2$retryCount, seekTo = _ref2.seekTo, _ref2$pauseAfterSeek = _ref2.pauseAfterSeek, pauseAfterSeek = _ref2$pauseAfterSeek === void 0 ? true : _ref2$pauseAfterSeek, tech = _ref2.tech, callback2 = _ref2.callback;
    if (!callback2) {
      throw new Error("seekToProgramTime: callback must be provided");
    }
    if (typeof programTime === "undefined" || !playlist || !seekTo) {
      return callback2({
        message: "seekToProgramTime: programTime, seekTo and playlist must be provided"
      });
    }
    if (!playlist.endList && !tech.hasStarted_) {
      return callback2({
        message: "player must be playing a live stream to start buffering"
      });
    }
    if (!verifyProgramDateTimeTags(playlist)) {
      return callback2({
        message: "programDateTime tags must be provided in the manifest " + playlist.resolvedUri
      });
    }
    var matchedSegment = findSegmentForProgramTime(programTime, playlist);
    if (!matchedSegment) {
      return callback2({
        message: programTime + " was not found in the stream"
      });
    }
    var segment = matchedSegment.segment;
    var mediaOffset = getOffsetFromTimestamp(segment.dateTimeObject, programTime);
    if (matchedSegment.type === "estimate") {
      if (retryCount === 0) {
        return callback2({
          message: programTime + " is not buffered yet. Try again"
        });
      }
      seekTo(matchedSegment.estimatedStart + mediaOffset);
      tech.one("seeked", function() {
        seekToProgramTime2({
          programTime,
          playlist,
          retryCount: retryCount - 1,
          seekTo,
          pauseAfterSeek,
          tech,
          callback: callback2
        });
      });
      return;
    }
    var seekToTime = segment.start + mediaOffset;
    var seekedCallback = function seekedCallback2() {
      return callback2(null, tech.currentTime());
    };
    tech.one("seeked", seekedCallback);
    if (pauseAfterSeek) {
      tech.pause();
    }
    seekTo(seekToTime);
  };
  var callbackOnCompleted = function callbackOnCompleted2(request, cb) {
    if (request.readyState === 4) {
      return cb();
    }
    return;
  };
  var containerRequest = function containerRequest2(uri, xhr, cb) {
    var bytes = [];
    var id3Offset;
    var finished = false;
    var endRequestAndCallback = function endRequestAndCallback2(err, req, type3, _bytes) {
      req.abort();
      finished = true;
      return cb(err, req, type3, _bytes);
    };
    var progressListener = function progressListener2(error, request2) {
      if (finished) {
        return;
      }
      if (error) {
        return endRequestAndCallback(error, request2, "", bytes);
      }
      var newPart = request2.responseText.substring(bytes && bytes.byteLength || 0, request2.responseText.length);
      bytes = import_byte_helpers.concatTypedArrays(bytes, import_byte_helpers.stringToBytes(newPart, true));
      id3Offset = id3Offset || import_containers.getId3Offset(bytes);
      if (bytes.length < 10 || id3Offset && bytes.length < id3Offset + 2) {
        return callbackOnCompleted(request2, function() {
          return endRequestAndCallback(error, request2, "", bytes);
        });
      }
      var type3 = import_containers.detectContainerForBytes(bytes);
      if (type3 === "ts" && bytes.length < 188) {
        return callbackOnCompleted(request2, function() {
          return endRequestAndCallback(error, request2, "", bytes);
        });
      }
      if (!type3 && bytes.length < 376) {
        return callbackOnCompleted(request2, function() {
          return endRequestAndCallback(error, request2, "", bytes);
        });
      }
      return endRequestAndCallback(null, request2, type3, bytes);
    };
    var options = {
      uri,
      beforeSend: function beforeSend(request2) {
        request2.overrideMimeType("text/plain; charset=x-user-defined");
        request2.addEventListener("progress", function(_ref) {
          var total = _ref.total, loaded = _ref.loaded;
          return callbackWrapper(request2, null, {
            statusCode: request2.status
          }, progressListener);
        });
      }
    };
    var request = xhr(options, function(error, response) {
      return callbackWrapper(request, error, response, progressListener);
    });
    return request;
  };
  var EventTarget$1$1 = videojs$1.EventTarget;
  var mergeOptions$2 = videojs$1.mergeOptions;
  var parseMasterXml = function parseMasterXml2(_ref) {
    var masterXml = _ref.masterXml, srcUrl = _ref.srcUrl, clientOffset = _ref.clientOffset, sidxMapping = _ref.sidxMapping;
    var master = parse(masterXml, {
      manifestUri: srcUrl,
      clientOffset,
      sidxMapping
    });
    addPropertiesToMaster(master, srcUrl);
    return master;
  };
  var generateSidxKey = function generateSidxKey2(sidxInfo) {
    var sidxByteRangeEnd = sidxInfo.byterange.offset + sidxInfo.byterange.length - 1;
    return sidxInfo.uri + "-" + sidxInfo.byterange.offset + "-" + sidxByteRangeEnd;
  };
  var updateMaster$1 = function updateMaster$12(oldMaster, newMaster, sidxMapping) {
    var noChanges = true;
    var update = mergeOptions$2(oldMaster, {
      duration: newMaster.duration,
      minimumUpdatePeriod: newMaster.minimumUpdatePeriod
    });
    for (var i = 0; i < newMaster.playlists.length; i++) {
      var playlist = newMaster.playlists[i];
      if (playlist.sidx) {
        var sidxKey = generateSidxKey(playlist.sidx);
        if (sidxMapping && sidxMapping[sidxKey]) {
          addSidxSegmentsToPlaylist(playlist, sidxMapping[sidxKey].sidx, playlist.sidx.resolvedUri);
        }
      }
      var playlistUpdate = updateMaster(update, playlist);
      if (playlistUpdate) {
        update = playlistUpdate;
        noChanges = false;
      }
    }
    forEachMediaGroup(newMaster, function(properties, type3, group, label) {
      if (properties.playlists && properties.playlists.length) {
        var id = properties.playlists[0].id;
        var _playlistUpdate = updateMaster(update, properties.playlists[0]);
        if (_playlistUpdate) {
          update = _playlistUpdate;
          update.mediaGroups[type3][group][label].playlists[0] = update.playlists[id];
          noChanges = false;
        }
      }
    });
    if (newMaster.minimumUpdatePeriod !== oldMaster.minimumUpdatePeriod) {
      noChanges = false;
    }
    if (noChanges) {
      return null;
    }
    return update;
  };
  var equivalentSidx = function equivalentSidx2(a, b) {
    var neitherMap = Boolean(!a.map && !b.map);
    var equivalentMap = neitherMap || Boolean(a.map && b.map && a.map.byterange.offset === b.map.byterange.offset && a.map.byterange.length === b.map.byterange.length);
    return equivalentMap && a.uri === b.uri && a.byterange.offset === b.byterange.offset && a.byterange.length === b.byterange.length;
  };
  var compareSidxEntry = function compareSidxEntry2(playlists, oldSidxMapping) {
    var newSidxMapping = {};
    for (var id in playlists) {
      var playlist = playlists[id];
      var currentSidxInfo = playlist.sidx;
      if (currentSidxInfo) {
        var key = generateSidxKey(currentSidxInfo);
        if (!oldSidxMapping[key]) {
          break;
        }
        var savedSidxInfo = oldSidxMapping[key].sidxInfo;
        if (equivalentSidx(savedSidxInfo, currentSidxInfo)) {
          newSidxMapping[key] = oldSidxMapping[key];
        }
      }
    }
    return newSidxMapping;
  };
  var filterChangedSidxMappings = function filterChangedSidxMappings2(master, oldSidxMapping) {
    var videoSidx = compareSidxEntry(master.playlists, oldSidxMapping);
    var mediaGroupSidx = videoSidx;
    forEachMediaGroup(master, function(properties, mediaType, groupKey, labelKey) {
      if (properties.playlists && properties.playlists.length) {
        var playlists = properties.playlists;
        mediaGroupSidx = mergeOptions$2(mediaGroupSidx, compareSidxEntry(playlists, oldSidxMapping));
      }
    });
    return mediaGroupSidx;
  };
  var DashPlaylistLoader = /* @__PURE__ */ function(_EventTarget) {
    import_inheritsLoose2.default(DashPlaylistLoader2, _EventTarget);
    function DashPlaylistLoader2(srcUrlOrPlaylist, vhs, options, masterPlaylistLoader) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _EventTarget.call(this) || this;
      _this.masterPlaylistLoader_ = masterPlaylistLoader || import_assertThisInitialized2.default(_this);
      if (!masterPlaylistLoader) {
        _this.isMaster_ = true;
      }
      var _options = options, _options$withCredenti = _options.withCredentials, withCredentials = _options$withCredenti === void 0 ? false : _options$withCredenti, _options$handleManife = _options.handleManifestRedirects, handleManifestRedirects = _options$handleManife === void 0 ? false : _options$handleManife;
      _this.vhs_ = vhs;
      _this.withCredentials = withCredentials;
      _this.handleManifestRedirects = handleManifestRedirects;
      if (!srcUrlOrPlaylist) {
        throw new Error("A non-empty playlist URL or object is required");
      }
      _this.on("minimumUpdatePeriod", function() {
        _this.refreshXml_();
      });
      _this.on("mediaupdatetimeout", function() {
        _this.refreshMedia_(_this.media().id);
      });
      _this.state = "HAVE_NOTHING";
      _this.loadedPlaylists_ = {};
      if (_this.isMaster_) {
        _this.masterPlaylistLoader_.srcUrl = srcUrlOrPlaylist;
        _this.masterPlaylistLoader_.sidxMapping_ = {};
      } else {
        _this.childPlaylist_ = srcUrlOrPlaylist;
      }
      return _this;
    }
    var _proto = DashPlaylistLoader2.prototype;
    _proto.requestErrored_ = function requestErrored_(err, request, startingState) {
      if (!this.request) {
        return true;
      }
      this.request = null;
      if (err) {
        this.error = typeof err === "object" && !(err instanceof Error) ? err : {
          status: request.status,
          message: "DASH request error at URL: " + request.uri,
          response: request.response,
          code: 2
        };
        if (startingState) {
          this.state = startingState;
        }
        this.trigger("error");
        return true;
      }
    };
    _proto.addSidxSegments_ = function addSidxSegments_(playlist, startingState, cb) {
      var _this2 = this;
      var sidxKey = playlist.sidx && generateSidxKey(playlist.sidx);
      if (!playlist.sidx || !sidxKey || this.masterPlaylistLoader_.sidxMapping_[sidxKey]) {
        this.mediaRequest_ = import_window2.default.setTimeout(function() {
          return cb(false);
        }, 0);
        return;
      }
      var uri = resolveManifestRedirect(this.handleManifestRedirects, playlist.sidx.resolvedUri);
      var sidxMapping = this.masterPlaylistLoader_.sidxMapping_;
      sidxMapping[sidxKey] = {
        sidxInfo: playlist.sidx
      };
      var fin = function fin2(err, request) {
        if (_this2.requestErrored_(err, request, startingState)) {
          return;
        }
        var sidx = import_parse_sidx.default(import_byte_helpers.toUint8(request.response).subarray(8));
        sidxMapping[sidxKey].sidx = sidx;
        addSidxSegmentsToPlaylist(playlist, sidx, playlist.sidx.resolvedUri);
        return cb(true);
      };
      this.request = containerRequest(uri, this.vhs_.xhr, function(err, request, container, bytes) {
        if (err) {
          return fin(err, request);
        }
        if (!container || container !== "mp4") {
          return fin({
            status: request.status,
            message: "Unsupported " + (container || "unknown") + " container type for sidx segment at URL: " + uri,
            response: "",
            playlist,
            internal: true,
            blacklistDuration: Infinity,
            code: 2
          }, request);
        }
        var _playlist$sidx$bytera = playlist.sidx.byterange, offset = _playlist$sidx$bytera.offset, length = _playlist$sidx$bytera.length;
        if (bytes.length >= length + offset) {
          return fin(err, {
            response: bytes.subarray(offset, offset + length),
            status: request.status,
            uri: request.uri
          });
        }
        _this2.request = _this2.vhs_.xhr({
          uri,
          responseType: "arraybuffer",
          headers: segmentXhrHeaders({
            byterange: playlist.sidx.byterange
          })
        }, fin);
      });
    };
    _proto.dispose = function dispose3() {
      this.trigger("dispose");
      this.stopRequest();
      this.loadedPlaylists_ = {};
      import_window2.default.clearTimeout(this.minimumUpdatePeriodTimeout_);
      import_window2.default.clearTimeout(this.mediaRequest_);
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      this.off();
    };
    _proto.hasPendingRequest = function hasPendingRequest() {
      return this.request || this.mediaRequest_;
    };
    _proto.stopRequest = function stopRequest() {
      if (this.request) {
        var oldRequest = this.request;
        this.request = null;
        oldRequest.onreadystatechange = null;
        oldRequest.abort();
      }
    };
    _proto.media = function media(playlist) {
      var _this3 = this;
      if (!playlist) {
        return this.media_;
      }
      if (this.state === "HAVE_NOTHING") {
        throw new Error("Cannot switch media playlist from " + this.state);
      }
      var startingState = this.state;
      if (typeof playlist === "string") {
        if (!this.masterPlaylistLoader_.master.playlists[playlist]) {
          throw new Error("Unknown playlist URI: " + playlist);
        }
        playlist = this.masterPlaylistLoader_.master.playlists[playlist];
      }
      var mediaChange = !this.media_ || playlist.id !== this.media_.id;
      if (mediaChange && this.loadedPlaylists_[playlist.id] && this.loadedPlaylists_[playlist.id].endList) {
        this.state = "HAVE_METADATA";
        this.media_ = playlist;
        if (mediaChange) {
          this.trigger("mediachanging");
          this.trigger("mediachange");
        }
        return;
      }
      if (!mediaChange) {
        return;
      }
      if (this.media_) {
        this.trigger("mediachanging");
      }
      this.addSidxSegments_(playlist, startingState, function(sidxChanged) {
        _this3.haveMetadata({
          startingState,
          playlist
        });
      });
    };
    _proto.haveMetadata = function haveMetadata(_ref2) {
      var startingState = _ref2.startingState, playlist = _ref2.playlist;
      this.state = "HAVE_METADATA";
      this.loadedPlaylists_[playlist.id] = playlist;
      this.mediaRequest_ = null;
      this.refreshMedia_(playlist.id);
      if (startingState === "HAVE_MASTER") {
        this.trigger("loadedmetadata");
      } else {
        this.trigger("mediachange");
      }
    };
    _proto.pause = function pause() {
      this.stopRequest();
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      import_window2.default.clearTimeout(this.minimumUpdatePeriodTimeout_);
      if (this.state === "HAVE_NOTHING") {
        this.started = false;
      }
    };
    _proto.load = function load(isFinalRendition) {
      var _this4 = this;
      import_window2.default.clearTimeout(this.mediaUpdateTimeout);
      import_window2.default.clearTimeout(this.minimumUpdatePeriodTimeout_);
      var media = this.media();
      if (isFinalRendition) {
        var delay = media ? media.targetDuration / 2 * 1e3 : 5 * 1e3;
        this.mediaUpdateTimeout = import_window2.default.setTimeout(function() {
          return _this4.load();
        }, delay);
        return;
      }
      if (!this.started) {
        this.start();
        return;
      }
      if (media && !media.endList) {
        this.trigger("mediaupdatetimeout");
      } else {
        this.trigger("loadedplaylist");
      }
    };
    _proto.start = function start2() {
      var _this5 = this;
      this.started = true;
      if (!this.isMaster_) {
        this.mediaRequest_ = import_window2.default.setTimeout(function() {
          return _this5.haveMaster_();
        }, 0);
        return;
      }
      this.requestMaster_(function(req, masterChanged) {
        _this5.haveMaster_();
        if (!_this5.hasPendingRequest() && !_this5.media_) {
          _this5.media(_this5.masterPlaylistLoader_.master.playlists[0]);
        }
      });
    };
    _proto.requestMaster_ = function requestMaster_(cb) {
      var _this6 = this;
      this.request = this.vhs_.xhr({
        uri: this.masterPlaylistLoader_.srcUrl,
        withCredentials: this.withCredentials
      }, function(error, req) {
        if (_this6.requestErrored_(error, req)) {
          if (_this6.state === "HAVE_NOTHING") {
            _this6.started = false;
          }
          return;
        }
        var masterChanged = req.responseText !== _this6.masterPlaylistLoader_.masterXml_;
        _this6.masterPlaylistLoader_.masterXml_ = req.responseText;
        if (req.responseHeaders && req.responseHeaders.date) {
          _this6.masterLoaded_ = Date.parse(req.responseHeaders.date);
        } else {
          _this6.masterLoaded_ = Date.now();
        }
        _this6.masterPlaylistLoader_.srcUrl = resolveManifestRedirect(_this6.handleManifestRedirects, _this6.masterPlaylistLoader_.srcUrl, req);
        if (masterChanged) {
          _this6.handleMaster_();
          _this6.syncClientServerClock_(function() {
            return cb(req, masterChanged);
          });
          return;
        }
        return cb(req, masterChanged);
      });
    };
    _proto.syncClientServerClock_ = function syncClientServerClock_(done) {
      var _this7 = this;
      var utcTiming = parseUTCTiming(this.masterPlaylistLoader_.masterXml_);
      if (utcTiming === null) {
        this.masterPlaylistLoader_.clientOffset_ = this.masterLoaded_ - Date.now();
        return done();
      }
      if (utcTiming.method === "DIRECT") {
        this.masterPlaylistLoader_.clientOffset_ = utcTiming.value - Date.now();
        return done();
      }
      this.request = this.vhs_.xhr({
        uri: resolveUrl2(this.masterPlaylistLoader_.srcUrl, utcTiming.value),
        method: utcTiming.method,
        withCredentials: this.withCredentials
      }, function(error, req) {
        if (!_this7.request) {
          return;
        }
        if (error) {
          _this7.masterPlaylistLoader_.clientOffset_ = _this7.masterLoaded_ - Date.now();
          return done();
        }
        var serverTime;
        if (utcTiming.method === "HEAD") {
          if (!req.responseHeaders || !req.responseHeaders.date) {
            serverTime = _this7.masterLoaded_;
          } else {
            serverTime = Date.parse(req.responseHeaders.date);
          }
        } else {
          serverTime = Date.parse(req.responseText);
        }
        _this7.masterPlaylistLoader_.clientOffset_ = serverTime - Date.now();
        done();
      });
    };
    _proto.haveMaster_ = function haveMaster_() {
      this.state = "HAVE_MASTER";
      if (this.isMaster_) {
        this.trigger("loadedplaylist");
      } else if (!this.media_) {
        this.media(this.childPlaylist_);
      }
    };
    _proto.handleMaster_ = function handleMaster_() {
      this.mediaRequest_ = null;
      var newMaster = parseMasterXml({
        masterXml: this.masterPlaylistLoader_.masterXml_,
        srcUrl: this.masterPlaylistLoader_.srcUrl,
        clientOffset: this.masterPlaylistLoader_.clientOffset_,
        sidxMapping: this.masterPlaylistLoader_.sidxMapping_
      });
      var oldMaster = this.masterPlaylistLoader_.master;
      if (oldMaster) {
        newMaster = updateMaster$1(oldMaster, newMaster, this.masterPlaylistLoader_.sidxMapping_);
      }
      this.masterPlaylistLoader_.master = newMaster ? newMaster : oldMaster;
      var location = this.masterPlaylistLoader_.master.locations && this.masterPlaylistLoader_.master.locations[0];
      if (location && location !== this.masterPlaylistLoader_.srcUrl) {
        this.masterPlaylistLoader_.srcUrl = location;
      }
      if (!oldMaster || newMaster && oldMaster.minimumUpdatePeriod !== newMaster.minimumUpdatePeriod) {
        this.updateMinimumUpdatePeriodTimeout_();
      }
      return Boolean(newMaster);
    };
    _proto.updateMinimumUpdatePeriodTimeout_ = function updateMinimumUpdatePeriodTimeout_() {
      var _this8 = this;
      import_window2.default.clearTimeout(this.minimumUpdatePeriodTimeout_);
      var createMUPTimeout = function createMUPTimeout2(mup) {
        _this8.minimumUpdatePeriodTimeout_ = import_window2.default.setTimeout(function() {
          _this8.trigger("minimumUpdatePeriod");
          createMUPTimeout2(mup);
        }, mup);
      };
      var minimumUpdatePeriod2 = this.masterPlaylistLoader_.master && this.masterPlaylistLoader_.master.minimumUpdatePeriod;
      if (minimumUpdatePeriod2 > 0) {
        createMUPTimeout(minimumUpdatePeriod2);
      } else if (minimumUpdatePeriod2 === 0) {
        if (!this.media()) {
          this.one("loadedplaylist", function() {
            createMUPTimeout(_this8.media().targetDuration * 1e3);
          });
        } else {
          createMUPTimeout(this.media().targetDuration * 1e3);
        }
      }
    };
    _proto.refreshXml_ = function refreshXml_() {
      var _this9 = this;
      this.requestMaster_(function(req, masterChanged) {
        if (!masterChanged) {
          return;
        }
        if (_this9.media_) {
          _this9.media_ = _this9.masterPlaylistLoader_.master.playlists[_this9.media_.id];
        }
        _this9.masterPlaylistLoader_.sidxMapping_ = filterChangedSidxMappings(_this9.masterPlaylistLoader_.master, _this9.masterPlaylistLoader_.sidxMapping_);
        _this9.addSidxSegments_(_this9.media(), _this9.state, function(sidxChanged) {
          _this9.refreshMedia_(_this9.media().id);
        });
      });
    };
    _proto.refreshMedia_ = function refreshMedia_(mediaID) {
      var _this10 = this;
      if (!mediaID) {
        throw new Error("refreshMedia_ must take a media id");
      }
      if (this.media_ && this.isMaster_) {
        this.handleMaster_();
      }
      var playlists = this.masterPlaylistLoader_.master.playlists;
      var mediaChanged = !this.media_ || this.media_ !== playlists[mediaID];
      if (mediaChanged) {
        this.media_ = playlists[mediaID];
      } else {
        this.trigger("playlistunchanged");
      }
      if (!this.media().endList) {
        this.mediaUpdateTimeout = import_window2.default.setTimeout(function() {
          _this10.trigger("mediaupdatetimeout");
        }, refreshDelay(this.media(), Boolean(mediaChanged)));
      }
      this.trigger("loadedplaylist");
    };
    return DashPlaylistLoader2;
  }(EventTarget$1$1);
  var Config = {
    GOAL_BUFFER_LENGTH: 30,
    MAX_GOAL_BUFFER_LENGTH: 60,
    BACK_BUFFER_LENGTH: 30,
    GOAL_BUFFER_LENGTH_RATE: 1,
    INITIAL_BANDWIDTH: 4194304,
    BANDWIDTH_VARIANCE: 1.2,
    BUFFER_LOW_WATER_LINE: 0,
    MAX_BUFFER_LOW_WATER_LINE: 30,
    EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE: 16,
    BUFFER_LOW_WATER_LINE_RATE: 1,
    BUFFER_HIGH_WATER_LINE: 30
  };
  var stringToArrayBuffer = function stringToArrayBuffer2(string) {
    var view = new Uint8Array(new ArrayBuffer(string.length));
    for (var i = 0; i < string.length; i++) {
      view[i] = string.charCodeAt(i);
    }
    return view.buffer;
  };
  var transmuxQueue = [];
  var currentTransmux;
  var handleData_ = function handleData_2(event, transmuxedData, callback2) {
    var _event$data$segment = event.data.segment, type3 = _event$data$segment.type, initSegment = _event$data$segment.initSegment, captions = _event$data$segment.captions, captionStreams = _event$data$segment.captionStreams, metadata = _event$data$segment.metadata, videoFrameDtsTime = _event$data$segment.videoFrameDtsTime, videoFramePtsTime = _event$data$segment.videoFramePtsTime;
    transmuxedData.buffer.push({
      captions,
      captionStreams,
      metadata
    });
    var boxes = event.data.segment.boxes || {
      data: event.data.segment.data
    };
    var result = {
      type: type3,
      data: new Uint8Array(boxes.data, boxes.data.byteOffset, boxes.data.byteLength),
      initSegment: new Uint8Array(initSegment.data, initSegment.byteOffset, initSegment.byteLength)
    };
    if (typeof videoFrameDtsTime !== "undefined") {
      result.videoFrameDtsTime = videoFrameDtsTime;
    }
    if (typeof videoFramePtsTime !== "undefined") {
      result.videoFramePtsTime = videoFramePtsTime;
    }
    callback2(result);
  };
  var handleDone_ = function handleDone_2(_ref) {
    var transmuxedData = _ref.transmuxedData, callback2 = _ref.callback;
    transmuxedData.buffer = [];
    callback2(transmuxedData);
  };
  var handleGopInfo_ = function handleGopInfo_2(event, transmuxedData) {
    transmuxedData.gopInfo = event.data.gopInfo;
  };
  var processTransmux = function processTransmux2(_ref2) {
    var transmuxer = _ref2.transmuxer, bytes = _ref2.bytes, audioAppendStart = _ref2.audioAppendStart, gopsToAlignWith = _ref2.gopsToAlignWith, isPartial = _ref2.isPartial, remux = _ref2.remux, onData = _ref2.onData, onTrackInfo = _ref2.onTrackInfo, onAudioTimingInfo = _ref2.onAudioTimingInfo, onVideoTimingInfo = _ref2.onVideoTimingInfo, onVideoSegmentTimingInfo = _ref2.onVideoSegmentTimingInfo, onAudioSegmentTimingInfo = _ref2.onAudioSegmentTimingInfo, onId3 = _ref2.onId3, onCaptions = _ref2.onCaptions, onDone = _ref2.onDone;
    var transmuxedData = {
      isPartial,
      buffer: []
    };
    var handleMessage = function handleMessage2(event) {
      if (!currentTransmux) {
        return;
      }
      if (event.data.action === "data") {
        handleData_(event, transmuxedData, onData);
      }
      if (event.data.action === "trackinfo") {
        onTrackInfo(event.data.trackInfo);
      }
      if (event.data.action === "gopInfo") {
        handleGopInfo_(event, transmuxedData);
      }
      if (event.data.action === "audioTimingInfo") {
        onAudioTimingInfo(event.data.audioTimingInfo);
      }
      if (event.data.action === "videoTimingInfo") {
        onVideoTimingInfo(event.data.videoTimingInfo);
      }
      if (event.data.action === "videoSegmentTimingInfo") {
        onVideoSegmentTimingInfo(event.data.videoSegmentTimingInfo);
      }
      if (event.data.action === "audioSegmentTimingInfo") {
        onAudioSegmentTimingInfo(event.data.audioSegmentTimingInfo);
      }
      if (event.data.action === "id3Frame") {
        onId3([event.data.id3Frame], event.data.id3Frame.dispatchType);
      }
      if (event.data.action === "caption") {
        onCaptions(event.data.caption);
      }
      if (event.data.type !== "transmuxed") {
        return;
      }
      transmuxer.onmessage = null;
      handleDone_({
        transmuxedData,
        callback: onDone
      });
      dequeue();
    };
    transmuxer.onmessage = handleMessage;
    if (audioAppendStart) {
      transmuxer.postMessage({
        action: "setAudioAppendStart",
        appendStart: audioAppendStart
      });
    }
    if (Array.isArray(gopsToAlignWith)) {
      transmuxer.postMessage({
        action: "alignGopsWith",
        gopsToAlignWith
      });
    }
    if (typeof remux !== "undefined") {
      transmuxer.postMessage({
        action: "setRemux",
        remux
      });
    }
    if (bytes.byteLength) {
      var buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;
      var byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;
      transmuxer.postMessage({
        action: "push",
        data: buffer,
        byteOffset,
        byteLength: bytes.byteLength
      }, [buffer]);
    }
    transmuxer.postMessage({
      action: isPartial ? "partialFlush" : "flush"
    });
  };
  var dequeue = function dequeue2() {
    currentTransmux = null;
    if (transmuxQueue.length) {
      currentTransmux = transmuxQueue.shift();
      if (typeof currentTransmux === "function") {
        currentTransmux();
      } else {
        processTransmux(currentTransmux);
      }
    }
  };
  var processAction = function processAction2(transmuxer, action) {
    transmuxer.postMessage({
      action
    });
    dequeue();
  };
  var enqueueAction = function enqueueAction2(action, transmuxer) {
    if (!currentTransmux) {
      currentTransmux = action;
      processAction(transmuxer, action);
      return;
    }
    transmuxQueue.push(processAction.bind(null, transmuxer, action));
  };
  var reset = function reset2(transmuxer) {
    enqueueAction("reset", transmuxer);
  };
  var endTimeline = function endTimeline2(transmuxer) {
    enqueueAction("endTimeline", transmuxer);
  };
  var transmux = function transmux2(options) {
    if (!currentTransmux) {
      currentTransmux = options;
      processTransmux(options);
      return;
    }
    transmuxQueue.push(options);
  };
  var dispose = function dispose2() {
    currentTransmux = null;
    transmuxQueue.length = 0;
  };
  var segmentTransmuxer = {
    reset,
    dispose,
    endTimeline,
    transmux
  };
  var probeTsSegment = function probeTsSegment2(bytes, baseStartTime) {
    var timeInfo = import_ts_inspector.default.inspect(bytes, baseStartTime * import_clock.ONE_SECOND_IN_TS);
    if (!timeInfo) {
      return null;
    }
    var result = {
      hasVideo: timeInfo.video && timeInfo.video.length === 2 || false,
      hasAudio: timeInfo.audio && timeInfo.audio.length === 2 || false
    };
    if (result.hasVideo) {
      result.videoStart = timeInfo.video[0].ptsTime;
    }
    if (result.hasAudio) {
      result.audioStart = timeInfo.audio[0].ptsTime;
    }
    return result;
  };
  var concatSegments = function concatSegments2(segmentObj) {
    var offset = 0;
    var tempBuffer;
    if (segmentObj.bytes) {
      tempBuffer = new Uint8Array(segmentObj.bytes);
      segmentObj.segments.forEach(function(segment) {
        tempBuffer.set(segment, offset);
        offset += segment.byteLength;
      });
    }
    return tempBuffer;
  };
  var REQUEST_ERRORS = {
    FAILURE: 2,
    TIMEOUT: -101,
    ABORTED: -102
  };
  var abortAll = function abortAll2(activeXhrs) {
    activeXhrs.forEach(function(xhr) {
      xhr.abort();
    });
  };
  var getRequestStats = function getRequestStats2(request) {
    return {
      bandwidth: request.bandwidth,
      bytesReceived: request.bytesReceived || 0,
      roundTripTime: request.roundTripTime || 0
    };
  };
  var getProgressStats = function getProgressStats2(progressEvent) {
    var request = progressEvent.target;
    var roundTripTime = Date.now() - request.requestTime;
    var stats = {
      bandwidth: Infinity,
      bytesReceived: 0,
      roundTripTime: roundTripTime || 0
    };
    stats.bytesReceived = progressEvent.loaded;
    stats.bandwidth = Math.floor(stats.bytesReceived / stats.roundTripTime * 8 * 1e3);
    return stats;
  };
  var handleErrors = function handleErrors2(error, request) {
    if (request.timedout) {
      return {
        status: request.status,
        message: "HLS request timed-out at URL: " + request.uri,
        code: REQUEST_ERRORS.TIMEOUT,
        xhr: request
      };
    }
    if (request.aborted) {
      return {
        status: request.status,
        message: "HLS request aborted at URL: " + request.uri,
        code: REQUEST_ERRORS.ABORTED,
        xhr: request
      };
    }
    if (error) {
      return {
        status: request.status,
        message: "HLS request errored at URL: " + request.uri,
        code: REQUEST_ERRORS.FAILURE,
        xhr: request
      };
    }
    return null;
  };
  var handleKeyResponse = function handleKeyResponse2(segment, finishProcessingFn) {
    return function(error, request) {
      var response = request.response;
      var errorObj = handleErrors(error, request);
      if (errorObj) {
        return finishProcessingFn(errorObj, segment);
      }
      if (response.byteLength !== 16) {
        return finishProcessingFn({
          status: request.status,
          message: "Invalid HLS key at URL: " + request.uri,
          code: REQUEST_ERRORS.FAILURE,
          xhr: request
        }, segment);
      }
      var view = new DataView(response);
      segment.key.bytes = new Uint32Array([view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12)]);
      return finishProcessingFn(null, segment);
    };
  };
  var handleInitSegmentResponse = function handleInitSegmentResponse2(_ref) {
    var segment = _ref.segment, finishProcessingFn = _ref.finishProcessingFn;
    return function(error, request) {
      var response = request.response;
      var errorObj = handleErrors(error, request);
      if (errorObj) {
        return finishProcessingFn(errorObj, segment);
      }
      if (response.byteLength === 0) {
        return finishProcessingFn({
          status: request.status,
          message: "Empty HLS segment content at URL: " + request.uri,
          code: REQUEST_ERRORS.FAILURE,
          xhr: request
        }, segment);
      }
      segment.map.bytes = new Uint8Array(request.response);
      var type3 = import_containers.detectContainerForBytes(segment.map.bytes);
      if (type3 !== "mp4") {
        return finishProcessingFn({
          status: request.status,
          message: "Found unsupported " + (type3 || "unknown") + " container for initialization segment at URL: " + request.uri,
          code: REQUEST_ERRORS.FAILURE,
          internal: true,
          xhr: request
        }, segment);
      }
      var tracks = import_probe.default.tracks(segment.map.bytes);
      tracks.forEach(function(track) {
        segment.map.tracks = segment.map.tracks || {};
        if (segment.map.tracks[track.type]) {
          return;
        }
        segment.map.tracks[track.type] = track;
        if (typeof track.id === "number" && track.timescale) {
          segment.map.timescales = segment.map.timescales || {};
          segment.map.timescales[track.id] = track.timescale;
        }
      });
      return finishProcessingFn(null, segment);
    };
  };
  var handleSegmentResponse = function handleSegmentResponse2(_ref2) {
    var segment = _ref2.segment, finishProcessingFn = _ref2.finishProcessingFn, responseType = _ref2.responseType;
    return function(error, request) {
      var response = request.response;
      var errorObj = handleErrors(error, request);
      if (errorObj) {
        return finishProcessingFn(errorObj, segment);
      }
      var newBytes = responseType === "arraybuffer" || !request.responseText ? request.response : stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));
      if (response.byteLength === 0) {
        return finishProcessingFn({
          status: request.status,
          message: "Empty HLS segment content at URL: " + request.uri,
          code: REQUEST_ERRORS.FAILURE,
          xhr: request
        }, segment);
      }
      segment.stats = getRequestStats(request);
      if (segment.key) {
        segment.encryptedBytes = new Uint8Array(newBytes);
      } else {
        segment.bytes = new Uint8Array(newBytes);
      }
      return finishProcessingFn(null, segment);
    };
  };
  var transmuxAndNotify = function transmuxAndNotify2(_ref3) {
    var segment = _ref3.segment, bytes = _ref3.bytes, isPartial = _ref3.isPartial, trackInfoFn = _ref3.trackInfoFn, timingInfoFn = _ref3.timingInfoFn, videoSegmentTimingInfoFn = _ref3.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref3.audioSegmentTimingInfoFn, id3Fn = _ref3.id3Fn, captionsFn = _ref3.captionsFn, dataFn = _ref3.dataFn, doneFn = _ref3.doneFn;
    var fmp4Tracks = segment.map && segment.map.tracks || {};
    var isMuxed3 = Boolean(fmp4Tracks.audio && fmp4Tracks.video);
    var audioStartFn = timingInfoFn.bind(null, segment, "audio", "start");
    var audioEndFn = timingInfoFn.bind(null, segment, "audio", "end");
    var videoStartFn = timingInfoFn.bind(null, segment, "video", "start");
    var videoEndFn = timingInfoFn.bind(null, segment, "video", "end");
    if (!isPartial && !segment.lastReachedChar) {
      var probeResult = probeTsSegment(bytes, segment.baseStartTime);
      if (probeResult) {
        trackInfoFn(segment, {
          hasAudio: probeResult.hasAudio,
          hasVideo: probeResult.hasVideo,
          isMuxed: isMuxed3
        });
        trackInfoFn = null;
        if (probeResult.hasAudio && !isMuxed3) {
          audioStartFn(probeResult.audioStart);
        }
        if (probeResult.hasVideo) {
          videoStartFn(probeResult.videoStart);
        }
        audioStartFn = null;
        videoStartFn = null;
      }
    }
    transmux({
      bytes,
      transmuxer: segment.transmuxer,
      audioAppendStart: segment.audioAppendStart,
      gopsToAlignWith: segment.gopsToAlignWith,
      isPartial,
      remux: isMuxed3,
      onData: function onData(result) {
        result.type = result.type === "combined" ? "video" : result.type;
        dataFn(segment, result);
      },
      onTrackInfo: function onTrackInfo(trackInfo) {
        if (trackInfoFn) {
          if (isMuxed3) {
            trackInfo.isMuxed = true;
          }
          trackInfoFn(segment, trackInfo);
        }
      },
      onAudioTimingInfo: function onAudioTimingInfo(audioTimingInfo) {
        if (audioStartFn && typeof audioTimingInfo.start !== "undefined") {
          audioStartFn(audioTimingInfo.start);
          audioStartFn = null;
        }
        if (audioEndFn && typeof audioTimingInfo.end !== "undefined") {
          audioEndFn(audioTimingInfo.end);
        }
      },
      onVideoTimingInfo: function onVideoTimingInfo(videoTimingInfo) {
        if (videoStartFn && typeof videoTimingInfo.start !== "undefined") {
          videoStartFn(videoTimingInfo.start);
          videoStartFn = null;
        }
        if (videoEndFn && typeof videoTimingInfo.end !== "undefined") {
          videoEndFn(videoTimingInfo.end);
        }
      },
      onVideoSegmentTimingInfo: function onVideoSegmentTimingInfo(videoSegmentTimingInfo) {
        videoSegmentTimingInfoFn(videoSegmentTimingInfo);
      },
      onAudioSegmentTimingInfo: function onAudioSegmentTimingInfo(audioSegmentTimingInfo) {
        audioSegmentTimingInfoFn(audioSegmentTimingInfo);
      },
      onId3: function onId3(id3Frames, dispatchType) {
        id3Fn(segment, id3Frames, dispatchType);
      },
      onCaptions: function onCaptions(captions) {
        captionsFn(segment, [captions]);
      },
      onDone: function onDone(result) {
        if (!doneFn || isPartial) {
          return;
        }
        result.type = result.type === "combined" ? "video" : result.type;
        doneFn(null, segment, result);
      }
    });
  };
  var handleSegmentBytes = function handleSegmentBytes2(_ref4) {
    var segment = _ref4.segment, bytes = _ref4.bytes, isPartial = _ref4.isPartial, trackInfoFn = _ref4.trackInfoFn, timingInfoFn = _ref4.timingInfoFn, videoSegmentTimingInfoFn = _ref4.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref4.audioSegmentTimingInfoFn, id3Fn = _ref4.id3Fn, captionsFn = _ref4.captionsFn, dataFn = _ref4.dataFn, doneFn = _ref4.doneFn;
    var bytesAsUint8Array = new Uint8Array(bytes);
    if (import_containers.isLikelyFmp4MediaSegment(bytesAsUint8Array)) {
      segment.isFmp4 = true;
      var tracks = segment.map.tracks;
      var trackInfo = {
        isFmp4: true,
        hasVideo: !!tracks.video,
        hasAudio: !!tracks.audio
      };
      if (tracks.audio && tracks.audio.codec && tracks.audio.codec !== "enca") {
        trackInfo.audioCodec = tracks.audio.codec;
      }
      if (tracks.video && tracks.video.codec && tracks.video.codec !== "encv") {
        trackInfo.videoCodec = tracks.video.codec;
      }
      if (tracks.video && tracks.audio) {
        trackInfo.isMuxed = true;
      }
      trackInfoFn(segment, trackInfo);
      var timingInfo = import_probe.default.startTime(segment.map.timescales, bytesAsUint8Array);
      if (trackInfo.hasAudio && !trackInfo.isMuxed) {
        timingInfoFn(segment, "audio", "start", timingInfo);
      }
      if (trackInfo.hasVideo) {
        timingInfoFn(segment, "video", "start", timingInfo);
      }
      var finishLoading = function finishLoading2(captions) {
        dataFn(segment, {
          data: bytes,
          type: trackInfo.hasAudio && !trackInfo.isMuxed ? "audio" : "video"
        });
        if (captions && captions.length) {
          captionsFn(segment, captions);
        }
        doneFn(null, segment, {});
      };
      if (!tracks.video || !bytes.byteLength || !segment.transmuxer) {
        finishLoading();
        return;
      }
      var buffer = bytes instanceof ArrayBuffer ? bytes : bytes.buffer;
      var byteOffset = bytes instanceof ArrayBuffer ? 0 : bytes.byteOffset;
      var listenForCaptions = function listenForCaptions2(event) {
        if (event.data.action !== "mp4Captions") {
          return;
        }
        segment.transmuxer.removeEventListener("message", listenForCaptions2);
        var data = event.data.data;
        segment.bytes = bytes = new Uint8Array(data, data.byteOffset || 0, data.byteLength);
        finishLoading(event.data.captions);
      };
      segment.transmuxer.addEventListener("message", listenForCaptions);
      segment.transmuxer.postMessage({
        action: "pushMp4Captions",
        timescales: segment.map.timescales,
        trackIds: [tracks.video.id],
        data: buffer,
        byteOffset,
        byteLength: bytes.byteLength
      }, [buffer]);
      return;
    }
    if (!segment.transmuxer) {
      doneFn(null, segment, {});
      return;
    }
    if (typeof segment.container === "undefined") {
      segment.container = import_containers.detectContainerForBytes(bytesAsUint8Array);
    }
    if (segment.container !== "ts" && segment.container !== "aac") {
      trackInfoFn(segment, {
        hasAudio: false,
        hasVideo: false
      });
      doneFn(null, segment, {});
      return;
    }
    transmuxAndNotify({
      segment,
      bytes,
      isPartial,
      trackInfoFn,
      timingInfoFn,
      videoSegmentTimingInfoFn,
      audioSegmentTimingInfoFn,
      id3Fn,
      captionsFn,
      dataFn,
      doneFn
    });
  };
  var decryptSegment = function decryptSegment2(_ref5) {
    var decryptionWorker = _ref5.decryptionWorker, segment = _ref5.segment, trackInfoFn = _ref5.trackInfoFn, timingInfoFn = _ref5.timingInfoFn, videoSegmentTimingInfoFn = _ref5.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref5.audioSegmentTimingInfoFn, id3Fn = _ref5.id3Fn, captionsFn = _ref5.captionsFn, dataFn = _ref5.dataFn, doneFn = _ref5.doneFn;
    var decryptionHandler = function decryptionHandler2(event) {
      if (event.data.source === segment.requestId) {
        decryptionWorker.removeEventListener("message", decryptionHandler2);
        var decrypted = event.data.decrypted;
        segment.bytes = new Uint8Array(decrypted.bytes, decrypted.byteOffset, decrypted.byteLength);
        handleSegmentBytes({
          segment,
          bytes: segment.bytes,
          isPartial: false,
          trackInfoFn,
          timingInfoFn,
          videoSegmentTimingInfoFn,
          audioSegmentTimingInfoFn,
          id3Fn,
          captionsFn,
          dataFn,
          doneFn
        });
      }
    };
    decryptionWorker.addEventListener("message", decryptionHandler);
    var keyBytes;
    if (segment.key.bytes.slice) {
      keyBytes = segment.key.bytes.slice();
    } else {
      keyBytes = new Uint32Array(Array.prototype.slice.call(segment.key.bytes));
    }
    decryptionWorker.postMessage(createTransferableMessage({
      source: segment.requestId,
      encrypted: segment.encryptedBytes,
      key: keyBytes,
      iv: segment.key.iv
    }), [segment.encryptedBytes.buffer, keyBytes.buffer]);
  };
  var waitForCompletion = function waitForCompletion2(_ref6) {
    var activeXhrs = _ref6.activeXhrs, decryptionWorker = _ref6.decryptionWorker, trackInfoFn = _ref6.trackInfoFn, timingInfoFn = _ref6.timingInfoFn, videoSegmentTimingInfoFn = _ref6.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref6.audioSegmentTimingInfoFn, id3Fn = _ref6.id3Fn, captionsFn = _ref6.captionsFn, dataFn = _ref6.dataFn, doneFn = _ref6.doneFn;
    var count = 0;
    var didError = false;
    return function(error, segment) {
      if (didError) {
        return;
      }
      if (error) {
        didError = true;
        abortAll(activeXhrs);
        return doneFn(error, segment);
      }
      count += 1;
      if (count === activeXhrs.length) {
        segment.endOfAllRequests = Date.now();
        if (segment.encryptedBytes) {
          return decryptSegment({
            decryptionWorker,
            segment,
            trackInfoFn,
            timingInfoFn,
            videoSegmentTimingInfoFn,
            audioSegmentTimingInfoFn,
            id3Fn,
            captionsFn,
            dataFn,
            doneFn
          });
        }
        handleSegmentBytes({
          segment,
          bytes: segment.bytes,
          isPartial: false,
          trackInfoFn,
          timingInfoFn,
          videoSegmentTimingInfoFn,
          audioSegmentTimingInfoFn,
          id3Fn,
          captionsFn,
          dataFn,
          doneFn
        });
      }
    };
  };
  var handleLoadEnd = function handleLoadEnd2(_ref7) {
    var loadendState = _ref7.loadendState, abortFn = _ref7.abortFn;
    return function(event) {
      var request = event.target;
      if (request.aborted && abortFn && !loadendState.calledAbortFn) {
        abortFn();
        loadendState.calledAbortFn = true;
      }
    };
  };
  var handleProgress = function handleProgress2(_ref8) {
    var segment = _ref8.segment, progressFn = _ref8.progressFn, trackInfoFn = _ref8.trackInfoFn, timingInfoFn = _ref8.timingInfoFn, videoSegmentTimingInfoFn = _ref8.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref8.audioSegmentTimingInfoFn, id3Fn = _ref8.id3Fn, captionsFn = _ref8.captionsFn, dataFn = _ref8.dataFn, handlePartialData = _ref8.handlePartialData;
    return function(event) {
      var request = event.target;
      if (request.aborted) {
        return;
      }
      if (handlePartialData && !segment.key && request.responseText && request.responseText.length >= 8) {
        var newBytes = stringToArrayBuffer(request.responseText.substring(segment.lastReachedChar || 0));
        if (segment.lastReachedChar || !import_containers.isLikelyFmp4MediaSegment(new Uint8Array(newBytes))) {
          segment.lastReachedChar = request.responseText.length;
          handleSegmentBytes({
            segment,
            bytes: newBytes,
            isPartial: true,
            trackInfoFn,
            timingInfoFn,
            videoSegmentTimingInfoFn,
            audioSegmentTimingInfoFn,
            id3Fn,
            captionsFn,
            dataFn
          });
        }
      }
      segment.stats = videojs$1.mergeOptions(segment.stats, getProgressStats(event));
      if (!segment.stats.firstBytesReceivedAt && segment.stats.bytesReceived) {
        segment.stats.firstBytesReceivedAt = Date.now();
      }
      return progressFn(event, segment);
    };
  };
  var mediaSegmentRequest = function mediaSegmentRequest2(_ref9) {
    var xhr = _ref9.xhr, xhrOptions = _ref9.xhrOptions, decryptionWorker = _ref9.decryptionWorker, segment = _ref9.segment, abortFn = _ref9.abortFn, progressFn = _ref9.progressFn, trackInfoFn = _ref9.trackInfoFn, timingInfoFn = _ref9.timingInfoFn, videoSegmentTimingInfoFn = _ref9.videoSegmentTimingInfoFn, audioSegmentTimingInfoFn = _ref9.audioSegmentTimingInfoFn, id3Fn = _ref9.id3Fn, captionsFn = _ref9.captionsFn, dataFn = _ref9.dataFn, doneFn = _ref9.doneFn, handlePartialData = _ref9.handlePartialData;
    var activeXhrs = [];
    var finishProcessingFn = waitForCompletion({
      activeXhrs,
      decryptionWorker,
      trackInfoFn,
      timingInfoFn,
      videoSegmentTimingInfoFn,
      audioSegmentTimingInfoFn,
      id3Fn,
      captionsFn,
      dataFn,
      doneFn
    });
    if (segment.key && !segment.key.bytes) {
      var keyRequestOptions = videojs$1.mergeOptions(xhrOptions, {
        uri: segment.key.resolvedUri,
        responseType: "arraybuffer"
      });
      var keyRequestCallback = handleKeyResponse(segment, finishProcessingFn);
      var keyXhr = xhr(keyRequestOptions, keyRequestCallback);
      activeXhrs.push(keyXhr);
    }
    if (segment.map && !segment.map.bytes) {
      var initSegmentOptions = videojs$1.mergeOptions(xhrOptions, {
        uri: segment.map.resolvedUri,
        responseType: "arraybuffer",
        headers: segmentXhrHeaders(segment.map)
      });
      var initSegmentRequestCallback = handleInitSegmentResponse({
        segment,
        finishProcessingFn
      });
      var initSegmentXhr = xhr(initSegmentOptions, initSegmentRequestCallback);
      activeXhrs.push(initSegmentXhr);
    }
    var segmentRequestOptions = videojs$1.mergeOptions(xhrOptions, {
      uri: segment.resolvedUri,
      responseType: "arraybuffer",
      headers: segmentXhrHeaders(segment)
    });
    if (handlePartialData) {
      segmentRequestOptions.responseType = "text";
      segmentRequestOptions.beforeSend = function(xhrObject) {
        xhrObject.overrideMimeType("text/plain; charset=x-user-defined");
      };
    }
    var segmentRequestCallback = handleSegmentResponse({
      segment,
      finishProcessingFn,
      responseType: segmentRequestOptions.responseType
    });
    var segmentXhr = xhr(segmentRequestOptions, segmentRequestCallback);
    segmentXhr.addEventListener("progress", handleProgress({
      segment,
      progressFn,
      trackInfoFn,
      timingInfoFn,
      videoSegmentTimingInfoFn,
      audioSegmentTimingInfoFn,
      id3Fn,
      captionsFn,
      dataFn,
      handlePartialData
    }));
    activeXhrs.push(segmentXhr);
    var loadendState = {};
    activeXhrs.forEach(function(activeXhr) {
      activeXhr.addEventListener("loadend", handleLoadEnd({
        loadendState,
        abortFn
      }));
    });
    return function() {
      return abortAll(activeXhrs);
    };
  };
  var win = typeof window !== "undefined" ? window : {};
  var TARGET = typeof Symbol === "undefined" ? "__target" : Symbol();
  var SCRIPT_TYPE = "application/javascript";
  var BlobBuilder = win.BlobBuilder || win.WebKitBlobBuilder || win.MozBlobBuilder || win.MSBlobBuilder;
  var URL = win.URL || win.webkitURL || URL && URL.msURL;
  var Worker = win.Worker;
  function shimWorker(filename, fn) {
    return function ShimWorker(forceFallback) {
      var o = this;
      if (!fn) {
        return new Worker(filename);
      } else if (Worker && !forceFallback) {
        var source = fn.toString().replace(/^function.+?{/, "").slice(0, -1), objURL = createSourceObject(source);
        this[TARGET] = new Worker(objURL);
        wrapTerminate(this[TARGET], objURL);
        return this[TARGET];
      } else {
        var selfShim = {
          postMessage: function postMessage(m) {
            if (o.onmessage) {
              setTimeout(function() {
                o.onmessage({
                  data: m,
                  target: selfShim
                });
              });
            }
          }
        };
        fn.call(selfShim);
        this.postMessage = function(m) {
          setTimeout(function() {
            selfShim.onmessage({
              data: m,
              target: o
            });
          });
        };
        this.isThisThread = true;
      }
    };
  }
  if (Worker) {
    objURL = createSourceObject("self.onmessage = function () {}"), testArray = new Uint8Array(1);
    try {
      testWorker = new Worker(objURL);
      testWorker.postMessage(testArray, [testArray.buffer]);
    } catch (e) {
      Worker = null;
    } finally {
      URL.revokeObjectURL(objURL);
      if (testWorker) {
        testWorker.terminate();
      }
    }
  }
  var testWorker;
  var objURL;
  var testArray;
  function createSourceObject(str) {
    try {
      return URL.createObjectURL(new Blob([str], {
        type: SCRIPT_TYPE
      }));
    } catch (e) {
      var blob = new BlobBuilder();
      blob.append(str);
      return URL.createObjectURL(blob.getBlob(type));
    }
  }
  function wrapTerminate(worker, objURL) {
    if (!worker || !objURL)
      return;
    var term = worker.terminate;
    worker.objURL = objURL;
    worker.terminate = function() {
      if (worker.objURL)
        URL.revokeObjectURL(worker.objURL);
      term.call(worker);
    };
  }
  var TransmuxWorker = new shimWorker("./transmuxer-worker.worker.js", function(window3, document3) {
    var self2 = this;
    /*! @name @videojs/http-streaming @version 2.4.2 @license Apache-2.0 */
    var transmuxerWorker = function() {
      var Stream2 = function Stream3() {
        this.init = function() {
          var listeners = {};
          this.on = function(type4, listener) {
            if (!listeners[type4]) {
              listeners[type4] = [];
            }
            listeners[type4] = listeners[type4].concat(listener);
          };
          this.off = function(type4, listener) {
            var index;
            if (!listeners[type4]) {
              return false;
            }
            index = listeners[type4].indexOf(listener);
            listeners[type4] = listeners[type4].slice();
            listeners[type4].splice(index, 1);
            return index > -1;
          };
          this.trigger = function(type4) {
            var callbacks, i, length, args;
            callbacks = listeners[type4];
            if (!callbacks) {
              return;
            }
            if (arguments.length === 2) {
              length = callbacks.length;
              for (i = 0; i < length; ++i) {
                callbacks[i].call(this, arguments[1]);
              }
            } else {
              args = [];
              i = arguments.length;
              for (i = 1; i < arguments.length; ++i) {
                args.push(arguments[i]);
              }
              length = callbacks.length;
              for (i = 0; i < length; ++i) {
                callbacks[i].apply(this, args);
              }
            }
          };
          this.dispose = function() {
            listeners = {};
          };
        };
      };
      Stream2.prototype.pipe = function(destination) {
        this.on("data", function(data) {
          destination.push(data);
        });
        this.on("done", function(flushSource) {
          destination.flush(flushSource);
        });
        this.on("partialdone", function(flushSource) {
          destination.partialFlush(flushSource);
        });
        this.on("endedtimeline", function(flushSource) {
          destination.endTimeline(flushSource);
        });
        this.on("reset", function(flushSource) {
          destination.reset(flushSource);
        });
        return destination;
      };
      Stream2.prototype.push = function(data) {
        this.trigger("data", data);
      };
      Stream2.prototype.flush = function(flushSource) {
        this.trigger("done", flushSource);
      };
      Stream2.prototype.partialFlush = function(flushSource) {
        this.trigger("partialdone", flushSource);
      };
      Stream2.prototype.endTimeline = function(flushSource) {
        this.trigger("endedtimeline", flushSource);
      };
      Stream2.prototype.reset = function(flushSource) {
        this.trigger("reset", flushSource);
      };
      var stream = Stream2;
      var UINT32_MAX = Math.pow(2, 32) - 1;
      var box, dinf, esds, ftyp, mdat, mfhd, minf, moof, moov, mvex, mvhd, trak, tkhd, mdia, mdhd, hdlr, sdtp, stbl, stsd, traf, trex, trun, types, MAJOR_BRAND, MINOR_VERSION, AVC1_BRAND, VIDEO_HDLR, AUDIO_HDLR, HDLR_TYPES, VMHD, SMHD, DREF, STCO, STSC, STSZ, STTS;
      (function() {
        var i;
        types = {
          avc1: [],
          avcC: [],
          btrt: [],
          dinf: [],
          dref: [],
          esds: [],
          ftyp: [],
          hdlr: [],
          mdat: [],
          mdhd: [],
          mdia: [],
          mfhd: [],
          minf: [],
          moof: [],
          moov: [],
          mp4a: [],
          mvex: [],
          mvhd: [],
          pasp: [],
          sdtp: [],
          smhd: [],
          stbl: [],
          stco: [],
          stsc: [],
          stsd: [],
          stsz: [],
          stts: [],
          styp: [],
          tfdt: [],
          tfhd: [],
          traf: [],
          trak: [],
          trun: [],
          trex: [],
          tkhd: [],
          vmhd: []
        };
        if (typeof Uint8Array === "undefined") {
          return;
        }
        for (i in types) {
          if (types.hasOwnProperty(i)) {
            types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
          }
        }
        MAJOR_BRAND = new Uint8Array(["i".charCodeAt(0), "s".charCodeAt(0), "o".charCodeAt(0), "m".charCodeAt(0)]);
        AVC1_BRAND = new Uint8Array(["a".charCodeAt(0), "v".charCodeAt(0), "c".charCodeAt(0), "1".charCodeAt(0)]);
        MINOR_VERSION = new Uint8Array([0, 0, 0, 1]);
        VIDEO_HDLR = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          118,
          105,
          100,
          101,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          86,
          105,
          100,
          101,
          111,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          0
        ]);
        AUDIO_HDLR = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          115,
          111,
          117,
          110,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          83,
          111,
          117,
          110,
          100,
          72,
          97,
          110,
          100,
          108,
          101,
          114,
          0
        ]);
        HDLR_TYPES = {
          video: VIDEO_HDLR,
          audio: AUDIO_HDLR
        };
        DREF = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          12,
          117,
          114,
          108,
          32,
          0,
          0,
          0,
          1
        ]);
        SMHD = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
        STCO = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
        STSC = STCO;
        STSZ = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
        STTS = STCO;
        VMHD = new Uint8Array([
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]);
      })();
      box = function box2(type4) {
        var payload = [], size = 0, i, result, view;
        for (i = 1; i < arguments.length; i++) {
          payload.push(arguments[i]);
        }
        i = payload.length;
        while (i--) {
          size += payload[i].byteLength;
        }
        result = new Uint8Array(size + 8);
        view = new DataView(result.buffer, result.byteOffset, result.byteLength);
        view.setUint32(0, result.byteLength);
        result.set(type4, 4);
        for (i = 0, size = 8; i < payload.length; i++) {
          result.set(payload[i], size);
          size += payload[i].byteLength;
        }
        return result;
      };
      dinf = function dinf2() {
        return box(types.dinf, box(types.dref, DREF));
      };
      esds = function esds2(track) {
        return box(types.esds, new Uint8Array([
          0,
          0,
          0,
          0,
          3,
          25,
          0,
          0,
          0,
          4,
          17,
          64,
          21,
          0,
          6,
          0,
          0,
          0,
          218,
          192,
          0,
          0,
          218,
          192,
          5,
          2,
          track.audioobjecttype << 3 | track.samplingfrequencyindex >>> 1,
          track.samplingfrequencyindex << 7 | track.channelcount << 3,
          6,
          1,
          2
        ]));
      };
      ftyp = function ftyp2() {
        return box(types.ftyp, MAJOR_BRAND, MINOR_VERSION, MAJOR_BRAND, AVC1_BRAND);
      };
      hdlr = function hdlr2(type4) {
        return box(types.hdlr, HDLR_TYPES[type4]);
      };
      mdat = function mdat2(data) {
        return box(types.mdat, data);
      };
      mdhd = function mdhd2(track) {
        var result = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          2,
          0,
          0,
          0,
          3,
          0,
          1,
          95,
          144,
          track.duration >>> 24 & 255,
          track.duration >>> 16 & 255,
          track.duration >>> 8 & 255,
          track.duration & 255,
          85,
          196,
          0,
          0
        ]);
        if (track.samplerate) {
          result[12] = track.samplerate >>> 24 & 255;
          result[13] = track.samplerate >>> 16 & 255;
          result[14] = track.samplerate >>> 8 & 255;
          result[15] = track.samplerate & 255;
        }
        return box(types.mdhd, result);
      };
      mdia = function mdia2(track) {
        return box(types.mdia, mdhd(track), hdlr(track.type), minf(track));
      };
      mfhd = function mfhd2(sequenceNumber) {
        return box(types.mfhd, new Uint8Array([
          0,
          0,
          0,
          0,
          (sequenceNumber & 4278190080) >> 24,
          (sequenceNumber & 16711680) >> 16,
          (sequenceNumber & 65280) >> 8,
          sequenceNumber & 255
        ]));
      };
      minf = function minf2(track) {
        return box(types.minf, track.type === "video" ? box(types.vmhd, VMHD) : box(types.smhd, SMHD), dinf(), stbl(track));
      };
      moof = function moof2(sequenceNumber, tracks) {
        var trackFragments = [], i = tracks.length;
        while (i--) {
          trackFragments[i] = traf(tracks[i]);
        }
        return box.apply(null, [types.moof, mfhd(sequenceNumber)].concat(trackFragments));
      };
      moov = function moov2(tracks) {
        var i = tracks.length, boxes = [];
        while (i--) {
          boxes[i] = trak(tracks[i]);
        }
        return box.apply(null, [types.moov, mvhd(4294967295)].concat(boxes).concat(mvex(tracks)));
      };
      mvex = function mvex2(tracks) {
        var i = tracks.length, boxes = [];
        while (i--) {
          boxes[i] = trex(tracks[i]);
        }
        return box.apply(null, [types.mvex].concat(boxes));
      };
      mvhd = function mvhd2(duration5) {
        var bytes = new Uint8Array([
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          2,
          0,
          1,
          95,
          144,
          (duration5 & 4278190080) >> 24,
          (duration5 & 16711680) >> 16,
          (duration5 & 65280) >> 8,
          duration5 & 255,
          0,
          1,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          64,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          255,
          255,
          255,
          255
        ]);
        return box(types.mvhd, bytes);
      };
      sdtp = function sdtp2(track) {
        var samples = track.samples || [], bytes = new Uint8Array(4 + samples.length), flags, i;
        for (i = 0; i < samples.length; i++) {
          flags = samples[i].flags;
          bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
        }
        return box(types.sdtp, bytes);
      };
      stbl = function stbl2(track) {
        return box(types.stbl, stsd(track), box(types.stts, STTS), box(types.stsc, STSC), box(types.stsz, STSZ), box(types.stco, STCO));
      };
      (function() {
        var videoSample, audioSample;
        stsd = function stsd2(track) {
          return box(types.stsd, new Uint8Array([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1
          ]), track.type === "video" ? videoSample(track) : audioSample(track));
        };
        videoSample = function videoSample2(track) {
          var sps = track.sps || [], pps = track.pps || [], sequenceParameterSets = [], pictureParameterSets = [], i, avc1Box;
          for (i = 0; i < sps.length; i++) {
            sequenceParameterSets.push((sps[i].byteLength & 65280) >>> 8);
            sequenceParameterSets.push(sps[i].byteLength & 255);
            sequenceParameterSets = sequenceParameterSets.concat(Array.prototype.slice.call(sps[i]));
          }
          for (i = 0; i < pps.length; i++) {
            pictureParameterSets.push((pps[i].byteLength & 65280) >>> 8);
            pictureParameterSets.push(pps[i].byteLength & 255);
            pictureParameterSets = pictureParameterSets.concat(Array.prototype.slice.call(pps[i]));
          }
          avc1Box = [types.avc1, new Uint8Array([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            (track.width & 65280) >> 8,
            track.width & 255,
            (track.height & 65280) >> 8,
            track.height & 255,
            0,
            72,
            0,
            0,
            0,
            72,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            19,
            118,
            105,
            100,
            101,
            111,
            106,
            115,
            45,
            99,
            111,
            110,
            116,
            114,
            105,
            98,
            45,
            104,
            108,
            115,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            24,
            17,
            17
          ]), box(types.avcC, new Uint8Array([
            1,
            track.profileIdc,
            track.profileCompatibility,
            track.levelIdc,
            255
          ].concat([sps.length], sequenceParameterSets, [pps.length], pictureParameterSets))), box(types.btrt, new Uint8Array([
            0,
            28,
            156,
            128,
            0,
            45,
            198,
            192,
            0,
            45,
            198,
            192
          ]))];
          if (track.sarRatio) {
            var hSpacing = track.sarRatio[0], vSpacing = track.sarRatio[1];
            avc1Box.push(box(types.pasp, new Uint8Array([(hSpacing & 4278190080) >> 24, (hSpacing & 16711680) >> 16, (hSpacing & 65280) >> 8, hSpacing & 255, (vSpacing & 4278190080) >> 24, (vSpacing & 16711680) >> 16, (vSpacing & 65280) >> 8, vSpacing & 255])));
          }
          return box.apply(null, avc1Box);
        };
        audioSample = function audioSample2(track) {
          return box(types.mp4a, new Uint8Array([
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            (track.channelcount & 65280) >> 8,
            track.channelcount & 255,
            (track.samplesize & 65280) >> 8,
            track.samplesize & 255,
            0,
            0,
            0,
            0,
            (track.samplerate & 65280) >> 8,
            track.samplerate & 255,
            0,
            0
          ]), esds(track));
        };
      })();
      tkhd = function tkhd2(track) {
        var result = new Uint8Array([
          0,
          0,
          0,
          7,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          0,
          0,
          0,
          0,
          (track.duration & 4278190080) >> 24,
          (track.duration & 16711680) >> 16,
          (track.duration & 65280) >> 8,
          track.duration & 255,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          64,
          0,
          0,
          0,
          (track.width & 65280) >> 8,
          track.width & 255,
          0,
          0,
          (track.height & 65280) >> 8,
          track.height & 255,
          0,
          0
        ]);
        return box(types.tkhd, result);
      };
      traf = function traf2(track) {
        var trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable, dataOffset, upperWordBaseMediaDecodeTime, lowerWordBaseMediaDecodeTime;
        trackFragmentHeader = box(types.tfhd, new Uint8Array([
          0,
          0,
          0,
          58,
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ]));
        upperWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime / (UINT32_MAX + 1));
        lowerWordBaseMediaDecodeTime = Math.floor(track.baseMediaDecodeTime % (UINT32_MAX + 1));
        trackFragmentDecodeTime = box(types.tfdt, new Uint8Array([
          1,
          0,
          0,
          0,
          upperWordBaseMediaDecodeTime >>> 24 & 255,
          upperWordBaseMediaDecodeTime >>> 16 & 255,
          upperWordBaseMediaDecodeTime >>> 8 & 255,
          upperWordBaseMediaDecodeTime & 255,
          lowerWordBaseMediaDecodeTime >>> 24 & 255,
          lowerWordBaseMediaDecodeTime >>> 16 & 255,
          lowerWordBaseMediaDecodeTime >>> 8 & 255,
          lowerWordBaseMediaDecodeTime & 255
        ]));
        dataOffset = 32 + 20 + 8 + 16 + 8 + 8;
        if (track.type === "audio") {
          trackFragmentRun = trun(track, dataOffset);
          return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun);
        }
        sampleDependencyTable = sdtp(track);
        trackFragmentRun = trun(track, sampleDependencyTable.length + dataOffset);
        return box(types.traf, trackFragmentHeader, trackFragmentDecodeTime, trackFragmentRun, sampleDependencyTable);
      };
      trak = function trak2(track) {
        track.duration = track.duration || 4294967295;
        return box(types.trak, tkhd(track), mdia(track));
      };
      trex = function trex2(track) {
        var result = new Uint8Array([
          0,
          0,
          0,
          0,
          (track.id & 4278190080) >> 24,
          (track.id & 16711680) >> 16,
          (track.id & 65280) >> 8,
          track.id & 255,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          1
        ]);
        if (track.type !== "video") {
          result[result.length - 1] = 0;
        }
        return box(types.trex, result);
      };
      (function() {
        var audioTrun, videoTrun, trunHeader;
        trunHeader = function trunHeader2(samples, offset) {
          var durationPresent = 0, sizePresent = 0, flagsPresent = 0, compositionTimeOffset = 0;
          if (samples.length) {
            if (samples[0].duration !== void 0) {
              durationPresent = 1;
            }
            if (samples[0].size !== void 0) {
              sizePresent = 2;
            }
            if (samples[0].flags !== void 0) {
              flagsPresent = 4;
            }
            if (samples[0].compositionTimeOffset !== void 0) {
              compositionTimeOffset = 8;
            }
          }
          return [
            0,
            0,
            durationPresent | sizePresent | flagsPresent | compositionTimeOffset,
            1,
            (samples.length & 4278190080) >>> 24,
            (samples.length & 16711680) >>> 16,
            (samples.length & 65280) >>> 8,
            samples.length & 255,
            (offset & 4278190080) >>> 24,
            (offset & 16711680) >>> 16,
            (offset & 65280) >>> 8,
            offset & 255
          ];
        };
        videoTrun = function videoTrun2(track, offset) {
          var bytesOffest, bytes, header, samples, sample, i;
          samples = track.samples || [];
          offset += 8 + 12 + 16 * samples.length;
          header = trunHeader(samples, offset);
          bytes = new Uint8Array(header.length + samples.length * 16);
          bytes.set(header);
          bytesOffest = header.length;
          for (i = 0; i < samples.length; i++) {
            sample = samples[i];
            bytes[bytesOffest++] = (sample.duration & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.duration & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.duration & 65280) >>> 8;
            bytes[bytesOffest++] = sample.duration & 255;
            bytes[bytesOffest++] = (sample.size & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.size & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.size & 65280) >>> 8;
            bytes[bytesOffest++] = sample.size & 255;
            bytes[bytesOffest++] = sample.flags.isLeading << 2 | sample.flags.dependsOn;
            bytes[bytesOffest++] = sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.paddingValue << 1 | sample.flags.isNonSyncSample;
            bytes[bytesOffest++] = sample.flags.degradationPriority & 240 << 8;
            bytes[bytesOffest++] = sample.flags.degradationPriority & 15;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.compositionTimeOffset & 65280) >>> 8;
            bytes[bytesOffest++] = sample.compositionTimeOffset & 255;
          }
          return box(types.trun, bytes);
        };
        audioTrun = function audioTrun2(track, offset) {
          var bytes, bytesOffest, header, samples, sample, i;
          samples = track.samples || [];
          offset += 8 + 12 + 8 * samples.length;
          header = trunHeader(samples, offset);
          bytes = new Uint8Array(header.length + samples.length * 8);
          bytes.set(header);
          bytesOffest = header.length;
          for (i = 0; i < samples.length; i++) {
            sample = samples[i];
            bytes[bytesOffest++] = (sample.duration & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.duration & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.duration & 65280) >>> 8;
            bytes[bytesOffest++] = sample.duration & 255;
            bytes[bytesOffest++] = (sample.size & 4278190080) >>> 24;
            bytes[bytesOffest++] = (sample.size & 16711680) >>> 16;
            bytes[bytesOffest++] = (sample.size & 65280) >>> 8;
            bytes[bytesOffest++] = sample.size & 255;
          }
          return box(types.trun, bytes);
        };
        trun = function trun2(track, offset) {
          if (track.type === "audio") {
            return audioTrun(track, offset);
          }
          return videoTrun(track, offset);
        };
      })();
      var mp4Generator = {
        ftyp,
        mdat,
        moof,
        moov,
        initSegment: function initSegment(tracks) {
          var fileType = ftyp(), movie = moov(tracks), result;
          result = new Uint8Array(fileType.byteLength + movie.byteLength);
          result.set(fileType);
          result.set(movie, fileType.byteLength);
          return result;
        }
      };
      var groupNalsIntoFrames = function groupNalsIntoFrames2(nalUnits) {
        var i, currentNal, currentFrame = [], frames = [];
        frames.byteLength = 0;
        frames.nalCount = 0;
        frames.duration = 0;
        currentFrame.byteLength = 0;
        for (i = 0; i < nalUnits.length; i++) {
          currentNal = nalUnits[i];
          if (currentNal.nalUnitType === "access_unit_delimiter_rbsp") {
            if (currentFrame.length) {
              currentFrame.duration = currentNal.dts - currentFrame.dts;
              frames.byteLength += currentFrame.byteLength;
              frames.nalCount += currentFrame.length;
              frames.duration += currentFrame.duration;
              frames.push(currentFrame);
            }
            currentFrame = [currentNal];
            currentFrame.byteLength = currentNal.data.byteLength;
            currentFrame.pts = currentNal.pts;
            currentFrame.dts = currentNal.dts;
          } else {
            if (currentNal.nalUnitType === "slice_layer_without_partitioning_rbsp_idr") {
              currentFrame.keyFrame = true;
            }
            currentFrame.duration = currentNal.dts - currentFrame.dts;
            currentFrame.byteLength += currentNal.data.byteLength;
            currentFrame.push(currentNal);
          }
        }
        if (frames.length && (!currentFrame.duration || currentFrame.duration <= 0)) {
          currentFrame.duration = frames[frames.length - 1].duration;
        }
        frames.byteLength += currentFrame.byteLength;
        frames.nalCount += currentFrame.length;
        frames.duration += currentFrame.duration;
        frames.push(currentFrame);
        return frames;
      };
      var groupFramesIntoGops = function groupFramesIntoGops2(frames) {
        var i, currentFrame, currentGop = [], gops = [];
        currentGop.byteLength = 0;
        currentGop.nalCount = 0;
        currentGop.duration = 0;
        currentGop.pts = frames[0].pts;
        currentGop.dts = frames[0].dts;
        gops.byteLength = 0;
        gops.nalCount = 0;
        gops.duration = 0;
        gops.pts = frames[0].pts;
        gops.dts = frames[0].dts;
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          if (currentFrame.keyFrame) {
            if (currentGop.length) {
              gops.push(currentGop);
              gops.byteLength += currentGop.byteLength;
              gops.nalCount += currentGop.nalCount;
              gops.duration += currentGop.duration;
            }
            currentGop = [currentFrame];
            currentGop.nalCount = currentFrame.length;
            currentGop.byteLength = currentFrame.byteLength;
            currentGop.pts = currentFrame.pts;
            currentGop.dts = currentFrame.dts;
            currentGop.duration = currentFrame.duration;
          } else {
            currentGop.duration += currentFrame.duration;
            currentGop.nalCount += currentFrame.length;
            currentGop.byteLength += currentFrame.byteLength;
            currentGop.push(currentFrame);
          }
        }
        if (gops.length && currentGop.duration <= 0) {
          currentGop.duration = gops[gops.length - 1].duration;
        }
        gops.byteLength += currentGop.byteLength;
        gops.nalCount += currentGop.nalCount;
        gops.duration += currentGop.duration;
        gops.push(currentGop);
        return gops;
      };
      var extendFirstKeyFrame = function extendFirstKeyFrame2(gops) {
        var currentGop;
        if (!gops[0][0].keyFrame && gops.length > 1) {
          currentGop = gops.shift();
          gops.byteLength -= currentGop.byteLength;
          gops.nalCount -= currentGop.nalCount;
          gops[0][0].dts = currentGop.dts;
          gops[0][0].pts = currentGop.pts;
          gops[0][0].duration += currentGop.duration;
        }
        return gops;
      };
      var createDefaultSample = function createDefaultSample2() {
        return {
          size: 0,
          flags: {
            isLeading: 0,
            dependsOn: 1,
            isDependedOn: 0,
            hasRedundancy: 0,
            degradationPriority: 0,
            isNonSyncSample: 1
          }
        };
      };
      var sampleForFrame = function sampleForFrame2(frame, dataOffset) {
        var sample = createDefaultSample();
        sample.dataOffset = dataOffset;
        sample.compositionTimeOffset = frame.pts - frame.dts;
        sample.duration = frame.duration;
        sample.size = 4 * frame.length;
        sample.size += frame.byteLength;
        if (frame.keyFrame) {
          sample.flags.dependsOn = 2;
          sample.flags.isNonSyncSample = 0;
        }
        return sample;
      };
      var generateSampleTable = function generateSampleTable2(gops, baseDataOffset) {
        var h, i, sample, currentGop, currentFrame, dataOffset = baseDataOffset || 0, samples = [];
        for (h = 0; h < gops.length; h++) {
          currentGop = gops[h];
          for (i = 0; i < currentGop.length; i++) {
            currentFrame = currentGop[i];
            sample = sampleForFrame(currentFrame, dataOffset);
            dataOffset += sample.size;
            samples.push(sample);
          }
        }
        return samples;
      };
      var concatenateNalData = function concatenateNalData2(gops) {
        var h, i, j, currentGop, currentFrame, currentNal, dataOffset = 0, nalsByteLength = gops.byteLength, numberOfNals = gops.nalCount, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer);
        for (h = 0; h < gops.length; h++) {
          currentGop = gops[h];
          for (i = 0; i < currentGop.length; i++) {
            currentFrame = currentGop[i];
            for (j = 0; j < currentFrame.length; j++) {
              currentNal = currentFrame[j];
              view.setUint32(dataOffset, currentNal.data.byteLength);
              dataOffset += 4;
              data.set(currentNal.data, dataOffset);
              dataOffset += currentNal.data.byteLength;
            }
          }
        }
        return data;
      };
      var generateSampleTableForFrame = function generateSampleTableForFrame2(frame, baseDataOffset) {
        var sample, dataOffset = baseDataOffset || 0, samples = [];
        sample = sampleForFrame(frame, dataOffset);
        samples.push(sample);
        return samples;
      };
      var concatenateNalDataForFrame = function concatenateNalDataForFrame2(frame) {
        var i, currentNal, dataOffset = 0, nalsByteLength = frame.byteLength, numberOfNals = frame.length, totalByteLength = nalsByteLength + 4 * numberOfNals, data = new Uint8Array(totalByteLength), view = new DataView(data.buffer);
        for (i = 0; i < frame.length; i++) {
          currentNal = frame[i];
          view.setUint32(dataOffset, currentNal.data.byteLength);
          dataOffset += 4;
          data.set(currentNal.data, dataOffset);
          dataOffset += currentNal.data.byteLength;
        }
        return data;
      };
      var frameUtils = {
        groupNalsIntoFrames,
        groupFramesIntoGops,
        extendFirstKeyFrame,
        generateSampleTable,
        concatenateNalData,
        generateSampleTableForFrame,
        concatenateNalDataForFrame
      };
      var highPrefix = [33, 16, 5, 32, 164, 27];
      var lowPrefix = [33, 65, 108, 84, 1, 2, 4, 8, 168, 2, 4, 8, 17, 191, 252];
      var zeroFill = function zeroFill2(count) {
        var a = [];
        while (count--) {
          a.push(0);
        }
        return a;
      };
      var makeTable = function makeTable2(metaTable) {
        return Object.keys(metaTable).reduce(function(obj, key) {
          obj[key] = new Uint8Array(metaTable[key].reduce(function(arr, part) {
            return arr.concat(part);
          }, []));
          return obj;
        }, {});
      };
      var silence;
      var silence_1 = function silence_12() {
        if (!silence) {
          var coneOfSilence = {
            96e3: [highPrefix, [227, 64], zeroFill(154), [56]],
            88200: [highPrefix, [231], zeroFill(170), [56]],
            64e3: [highPrefix, [248, 192], zeroFill(240), [56]],
            48e3: [highPrefix, [255, 192], zeroFill(268), [55, 148, 128], zeroFill(54), [112]],
            44100: [highPrefix, [255, 192], zeroFill(268), [55, 163, 128], zeroFill(84), [112]],
            32e3: [highPrefix, [255, 192], zeroFill(268), [55, 234], zeroFill(226), [112]],
            24e3: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 112], zeroFill(126), [224]],
            16e3: [highPrefix, [255, 192], zeroFill(268), [55, 255, 128], zeroFill(268), [111, 255], zeroFill(269), [223, 108], zeroFill(195), [1, 192]],
            12e3: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 253, 128], zeroFill(259), [56]],
            11025: [lowPrefix, zeroFill(268), [3, 127, 248], zeroFill(268), [6, 255, 240], zeroFill(268), [13, 255, 224], zeroFill(268), [27, 255, 192], zeroFill(268), [55, 175, 128], zeroFill(108), [112]],
            8e3: [lowPrefix, zeroFill(268), [3, 121, 16], zeroFill(47), [7]]
          };
          silence = makeTable(coneOfSilence);
        }
        return silence;
      };
      var ONE_SECOND_IN_TS2 = 9e4, secondsToVideoTs, secondsToAudioTs, videoTsToSeconds, audioTsToSeconds, audioTsToVideoTs, videoTsToAudioTs, metadataTsToSeconds;
      secondsToVideoTs = function secondsToVideoTs2(seconds) {
        return seconds * ONE_SECOND_IN_TS2;
      };
      secondsToAudioTs = function secondsToAudioTs2(seconds, sampleRate) {
        return seconds * sampleRate;
      };
      videoTsToSeconds = function videoTsToSeconds2(timestamp) {
        return timestamp / ONE_SECOND_IN_TS2;
      };
      audioTsToSeconds = function audioTsToSeconds2(timestamp, sampleRate) {
        return timestamp / sampleRate;
      };
      audioTsToVideoTs = function audioTsToVideoTs2(timestamp, sampleRate) {
        return secondsToVideoTs(audioTsToSeconds(timestamp, sampleRate));
      };
      videoTsToAudioTs = function videoTsToAudioTs2(timestamp, sampleRate) {
        return secondsToAudioTs(videoTsToSeconds(timestamp), sampleRate);
      };
      metadataTsToSeconds = function metadataTsToSeconds2(timestamp, timelineStartPts, keepOriginalTimestamps) {
        return videoTsToSeconds(keepOriginalTimestamps ? timestamp : timestamp - timelineStartPts);
      };
      var clock = {
        ONE_SECOND_IN_TS: ONE_SECOND_IN_TS2,
        secondsToVideoTs,
        secondsToAudioTs,
        videoTsToSeconds,
        audioTsToSeconds,
        audioTsToVideoTs,
        videoTsToAudioTs,
        metadataTsToSeconds
      };
      var sumFrameByteLengths = function sumFrameByteLengths2(array) {
        var i, currentObj, sum = 0;
        for (i = 0; i < array.length; i++) {
          currentObj = array[i];
          sum += currentObj.data.byteLength;
        }
        return sum;
      };
      var prefixWithSilence = function prefixWithSilence2(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime) {
        var baseMediaDecodeTimeTs, frameDuration = 0, audioGapDuration = 0, audioFillFrameCount = 0, audioFillDuration = 0, silentFrame, i, firstFrame;
        if (!frames.length) {
          return;
        }
        baseMediaDecodeTimeTs = clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate);
        frameDuration = Math.ceil(clock.ONE_SECOND_IN_TS / (track.samplerate / 1024));
        if (audioAppendStartTs && videoBaseMediaDecodeTime) {
          audioGapDuration = baseMediaDecodeTimeTs - Math.max(audioAppendStartTs, videoBaseMediaDecodeTime);
          audioFillFrameCount = Math.floor(audioGapDuration / frameDuration);
          audioFillDuration = audioFillFrameCount * frameDuration;
        }
        if (audioFillFrameCount < 1 || audioFillDuration > clock.ONE_SECOND_IN_TS / 2) {
          return;
        }
        silentFrame = silence_1()[track.samplerate];
        if (!silentFrame) {
          silentFrame = frames[0].data;
        }
        for (i = 0; i < audioFillFrameCount; i++) {
          firstFrame = frames[0];
          frames.splice(0, 0, {
            data: silentFrame,
            dts: firstFrame.dts - frameDuration,
            pts: firstFrame.pts - frameDuration
          });
        }
        track.baseMediaDecodeTime -= Math.floor(clock.videoTsToAudioTs(audioFillDuration, track.samplerate));
        return audioFillDuration;
      };
      var trimAdtsFramesByEarliestDts = function trimAdtsFramesByEarliestDts2(adtsFrames, track, earliestAllowedDts) {
        if (track.minSegmentDts >= earliestAllowedDts) {
          return adtsFrames;
        }
        track.minSegmentDts = Infinity;
        return adtsFrames.filter(function(currentFrame) {
          if (currentFrame.dts >= earliestAllowedDts) {
            track.minSegmentDts = Math.min(track.minSegmentDts, currentFrame.dts);
            track.minSegmentPts = track.minSegmentDts;
            return true;
          }
          return false;
        });
      };
      var generateSampleTable$1 = function generateSampleTable2(frames) {
        var i, currentFrame, samples = [];
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          samples.push({
            size: currentFrame.data.byteLength,
            duration: 1024
          });
        }
        return samples;
      };
      var concatenateFrameData = function concatenateFrameData2(frames) {
        var i, currentFrame, dataOffset = 0, data = new Uint8Array(sumFrameByteLengths(frames));
        for (i = 0; i < frames.length; i++) {
          currentFrame = frames[i];
          data.set(currentFrame.data, dataOffset);
          dataOffset += currentFrame.data.byteLength;
        }
        return data;
      };
      var audioFrameUtils = {
        prefixWithSilence,
        trimAdtsFramesByEarliestDts,
        generateSampleTable: generateSampleTable$1,
        concatenateFrameData
      };
      var ONE_SECOND_IN_TS$1 = clock.ONE_SECOND_IN_TS;
      var collectDtsInfo = function collectDtsInfo2(track, data) {
        if (typeof data.pts === "number") {
          if (track.timelineStartInfo.pts === void 0) {
            track.timelineStartInfo.pts = data.pts;
          }
          if (track.minSegmentPts === void 0) {
            track.minSegmentPts = data.pts;
          } else {
            track.minSegmentPts = Math.min(track.minSegmentPts, data.pts);
          }
          if (track.maxSegmentPts === void 0) {
            track.maxSegmentPts = data.pts;
          } else {
            track.maxSegmentPts = Math.max(track.maxSegmentPts, data.pts);
          }
        }
        if (typeof data.dts === "number") {
          if (track.timelineStartInfo.dts === void 0) {
            track.timelineStartInfo.dts = data.dts;
          }
          if (track.minSegmentDts === void 0) {
            track.minSegmentDts = data.dts;
          } else {
            track.minSegmentDts = Math.min(track.minSegmentDts, data.dts);
          }
          if (track.maxSegmentDts === void 0) {
            track.maxSegmentDts = data.dts;
          } else {
            track.maxSegmentDts = Math.max(track.maxSegmentDts, data.dts);
          }
        }
      };
      var clearDtsInfo = function clearDtsInfo2(track) {
        delete track.minSegmentDts;
        delete track.maxSegmentDts;
        delete track.minSegmentPts;
        delete track.maxSegmentPts;
      };
      var calculateTrackBaseMediaDecodeTime = function calculateTrackBaseMediaDecodeTime2(track, keepOriginalTimestamps) {
        var baseMediaDecodeTime, scale, minSegmentDts = track.minSegmentDts;
        if (!keepOriginalTimestamps) {
          minSegmentDts -= track.timelineStartInfo.dts;
        }
        baseMediaDecodeTime = track.timelineStartInfo.baseMediaDecodeTime;
        baseMediaDecodeTime += minSegmentDts;
        baseMediaDecodeTime = Math.max(0, baseMediaDecodeTime);
        if (track.type === "audio") {
          scale = track.samplerate / ONE_SECOND_IN_TS$1;
          baseMediaDecodeTime *= scale;
          baseMediaDecodeTime = Math.floor(baseMediaDecodeTime);
        }
        return baseMediaDecodeTime;
      };
      var trackDecodeInfo = {
        clearDtsInfo,
        calculateTrackBaseMediaDecodeTime,
        collectDtsInfo
      };
      var USER_DATA_REGISTERED_ITU_T_T35 = 4, RBSP_TRAILING_BITS = 128;
      var parseSei = function parseSei2(bytes) {
        var i = 0, result = {
          payloadType: -1,
          payloadSize: 0
        }, payloadType = 0, payloadSize = 0;
        while (i < bytes.byteLength) {
          if (bytes[i] === RBSP_TRAILING_BITS) {
            break;
          }
          while (bytes[i] === 255) {
            payloadType += 255;
            i++;
          }
          payloadType += bytes[i++];
          while (bytes[i] === 255) {
            payloadSize += 255;
            i++;
          }
          payloadSize += bytes[i++];
          if (!result.payload && payloadType === USER_DATA_REGISTERED_ITU_T_T35) {
            var userIdentifier = String.fromCharCode(bytes[i + 3], bytes[i + 4], bytes[i + 5], bytes[i + 6]);
            if (userIdentifier === "GA94") {
              result.payloadType = payloadType;
              result.payloadSize = payloadSize;
              result.payload = bytes.subarray(i, i + payloadSize);
              break;
            } else {
              result.payload = void 0;
            }
          }
          i += payloadSize;
          payloadType = 0;
          payloadSize = 0;
        }
        return result;
      };
      var parseUserData = function parseUserData2(sei) {
        if (sei.payload[0] !== 181) {
          return null;
        }
        if ((sei.payload[1] << 8 | sei.payload[2]) !== 49) {
          return null;
        }
        if (String.fromCharCode(sei.payload[3], sei.payload[4], sei.payload[5], sei.payload[6]) !== "GA94") {
          return null;
        }
        if (sei.payload[7] !== 3) {
          return null;
        }
        return sei.payload.subarray(8, sei.payload.length - 1);
      };
      var parseCaptionPackets = function parseCaptionPackets2(pts, userData) {
        var results = [], i, count, offset, data;
        if (!(userData[0] & 64)) {
          return results;
        }
        count = userData[0] & 31;
        for (i = 0; i < count; i++) {
          offset = i * 3;
          data = {
            type: userData[offset + 2] & 3,
            pts
          };
          if (userData[offset + 2] & 4) {
            data.ccData = userData[offset + 3] << 8 | userData[offset + 4];
            results.push(data);
          }
        }
        return results;
      };
      var discardEmulationPreventionBytes = function discardEmulationPreventionBytes2(data) {
        var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData;
        while (i < length - 2) {
          if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
            emulationPreventionBytesPositions.push(i + 2);
            i += 2;
          } else {
            i++;
          }
        }
        if (emulationPreventionBytesPositions.length === 0) {
          return data;
        }
        newLength = length - emulationPreventionBytesPositions.length;
        newData = new Uint8Array(newLength);
        var sourceIndex = 0;
        for (i = 0; i < newLength; sourceIndex++, i++) {
          if (sourceIndex === emulationPreventionBytesPositions[0]) {
            sourceIndex++;
            emulationPreventionBytesPositions.shift();
          }
          newData[i] = data[sourceIndex];
        }
        return newData;
      };
      var captionPacketParser = {
        parseSei,
        parseUserData,
        parseCaptionPackets,
        discardEmulationPreventionBytes,
        USER_DATA_REGISTERED_ITU_T_T35
      };
      var CaptionStream = function CaptionStream2() {
        CaptionStream2.prototype.init.call(this);
        this.captionPackets_ = [];
        this.ccStreams_ = [
          new Cea608Stream(0, 0),
          new Cea608Stream(0, 1),
          new Cea608Stream(1, 0),
          new Cea608Stream(1, 1)
        ];
        this.cc708Stream_ = new Cea708Stream();
        this.reset();
        this.ccStreams_.forEach(function(cc) {
          cc.on("data", this.trigger.bind(this, "data"));
          cc.on("partialdone", this.trigger.bind(this, "partialdone"));
          cc.on("done", this.trigger.bind(this, "done"));
        }, this);
        this.cc708Stream_.on("data", this.trigger.bind(this, "data"));
        this.cc708Stream_.on("partialdone", this.trigger.bind(this, "partialdone"));
        this.cc708Stream_.on("done", this.trigger.bind(this, "done"));
      };
      CaptionStream.prototype = new stream();
      CaptionStream.prototype.push = function(event) {
        var sei, userData, newCaptionPackets;
        if (event.nalUnitType !== "sei_rbsp") {
          return;
        }
        sei = captionPacketParser.parseSei(event.escapedRBSP);
        if (!sei.payload) {
          return;
        }
        if (sei.payloadType !== captionPacketParser.USER_DATA_REGISTERED_ITU_T_T35) {
          return;
        }
        userData = captionPacketParser.parseUserData(sei);
        if (!userData) {
          return;
        }
        if (event.dts < this.latestDts_) {
          this.ignoreNextEqualDts_ = true;
          return;
        } else if (event.dts === this.latestDts_ && this.ignoreNextEqualDts_) {
          this.numSameDts_--;
          if (!this.numSameDts_) {
            this.ignoreNextEqualDts_ = false;
          }
          return;
        }
        newCaptionPackets = captionPacketParser.parseCaptionPackets(event.pts, userData);
        this.captionPackets_ = this.captionPackets_.concat(newCaptionPackets);
        if (this.latestDts_ !== event.dts) {
          this.numSameDts_ = 0;
        }
        this.numSameDts_++;
        this.latestDts_ = event.dts;
      };
      CaptionStream.prototype.flushCCStreams = function(flushType) {
        this.ccStreams_.forEach(function(cc) {
          return flushType === "flush" ? cc.flush() : cc.partialFlush();
        }, this);
      };
      CaptionStream.prototype.flushStream = function(flushType) {
        if (!this.captionPackets_.length) {
          this.flushCCStreams(flushType);
          return;
        }
        this.captionPackets_.forEach(function(elem, idx) {
          elem.presortIndex = idx;
        });
        this.captionPackets_.sort(function(a, b) {
          if (a.pts === b.pts) {
            return a.presortIndex - b.presortIndex;
          }
          return a.pts - b.pts;
        });
        this.captionPackets_.forEach(function(packet) {
          if (packet.type < 2) {
            this.dispatchCea608Packet(packet);
          } else {
            this.dispatchCea708Packet(packet);
          }
        }, this);
        this.captionPackets_.length = 0;
        this.flushCCStreams(flushType);
      };
      CaptionStream.prototype.flush = function() {
        return this.flushStream("flush");
      };
      CaptionStream.prototype.partialFlush = function() {
        return this.flushStream("partialFlush");
      };
      CaptionStream.prototype.reset = function() {
        this.latestDts_ = null;
        this.ignoreNextEqualDts_ = false;
        this.numSameDts_ = 0;
        this.activeCea608Channel_ = [null, null];
        this.ccStreams_.forEach(function(ccStream) {
          ccStream.reset();
        });
      };
      CaptionStream.prototype.dispatchCea608Packet = function(packet) {
        if (this.setsTextOrXDSActive(packet)) {
          this.activeCea608Channel_[packet.type] = null;
        } else if (this.setsChannel1Active(packet)) {
          this.activeCea608Channel_[packet.type] = 0;
        } else if (this.setsChannel2Active(packet)) {
          this.activeCea608Channel_[packet.type] = 1;
        }
        if (this.activeCea608Channel_[packet.type] === null) {
          return;
        }
        this.ccStreams_[(packet.type << 1) + this.activeCea608Channel_[packet.type]].push(packet);
      };
      CaptionStream.prototype.setsChannel1Active = function(packet) {
        return (packet.ccData & 30720) === 4096;
      };
      CaptionStream.prototype.setsChannel2Active = function(packet) {
        return (packet.ccData & 30720) === 6144;
      };
      CaptionStream.prototype.setsTextOrXDSActive = function(packet) {
        return (packet.ccData & 28928) === 256 || (packet.ccData & 30974) === 4138 || (packet.ccData & 30974) === 6186;
      };
      CaptionStream.prototype.dispatchCea708Packet = function(packet) {
        this.cc708Stream_.push(packet);
      };
      var CHARACTER_TRANSLATION_708 = {
        127: 9834,
        4128: 32,
        4129: 160,
        4133: 8230,
        4138: 352,
        4140: 338,
        4144: 9608,
        4145: 8216,
        4146: 8217,
        4147: 8220,
        4148: 8221,
        4149: 8226,
        4153: 8482,
        4154: 353,
        4156: 339,
        4157: 8480,
        4159: 376,
        4214: 8539,
        4215: 8540,
        4216: 8541,
        4217: 8542,
        4218: 9168,
        4219: 9124,
        4220: 9123,
        4221: 9135,
        4222: 9126,
        4223: 9121,
        4256: 12600
      };
      var get708CharFromCode = function get708CharFromCode2(code) {
        var newCode = CHARACTER_TRANSLATION_708[code] || code;
        if (code & 4096 && code === newCode) {
          return "";
        }
        return String.fromCharCode(newCode);
      };
      var within708TextBlock = function within708TextBlock2(b) {
        return 32 <= b && b <= 127 || 160 <= b && b <= 255;
      };
      var Cea708Window = function Cea708Window2(windowNum) {
        this.windowNum = windowNum;
        this.reset();
      };
      Cea708Window.prototype.reset = function() {
        this.clearText();
        this.pendingNewLine = false;
        this.winAttr = {};
        this.penAttr = {};
        this.penLoc = {};
        this.penColor = {};
        this.visible = 0;
        this.rowLock = 0;
        this.columnLock = 0;
        this.priority = 0;
        this.relativePositioning = 0;
        this.anchorVertical = 0;
        this.anchorHorizontal = 0;
        this.anchorPoint = 0;
        this.rowCount = 1;
        this.virtualRowCount = this.rowCount + 1;
        this.columnCount = 41;
        this.windowStyle = 0;
        this.penStyle = 0;
      };
      Cea708Window.prototype.getText = function() {
        return this.rows.join("\n");
      };
      Cea708Window.prototype.clearText = function() {
        this.rows = [""];
        this.rowIdx = 0;
      };
      Cea708Window.prototype.newLine = function(pts) {
        if (this.rows.length >= this.virtualRowCount && typeof this.beforeRowOverflow === "function") {
          this.beforeRowOverflow(pts);
        }
        if (this.rows.length > 0) {
          this.rows.push("");
          this.rowIdx++;
        }
        while (this.rows.length > this.virtualRowCount) {
          this.rows.shift();
          this.rowIdx--;
        }
      };
      Cea708Window.prototype.isEmpty = function() {
        if (this.rows.length === 0) {
          return true;
        } else if (this.rows.length === 1) {
          return this.rows[0] === "";
        }
        return false;
      };
      Cea708Window.prototype.addText = function(text) {
        this.rows[this.rowIdx] += text;
      };
      Cea708Window.prototype.backspace = function() {
        if (!this.isEmpty()) {
          var row = this.rows[this.rowIdx];
          this.rows[this.rowIdx] = row.substr(0, row.length - 1);
        }
      };
      var Cea708Service = function Cea708Service2(serviceNum) {
        this.serviceNum = serviceNum;
        this.text = "";
        this.currentWindow = new Cea708Window(-1);
        this.windows = [];
      };
      Cea708Service.prototype.init = function(pts, beforeRowOverflow) {
        this.startPts = pts;
        for (var win2 = 0; win2 < 8; win2++) {
          this.windows[win2] = new Cea708Window(win2);
          if (typeof beforeRowOverflow === "function") {
            this.windows[win2].beforeRowOverflow = beforeRowOverflow;
          }
        }
      };
      Cea708Service.prototype.setCurrentWindow = function(windowNum) {
        this.currentWindow = this.windows[windowNum];
      };
      var Cea708Stream = function Cea708Stream2() {
        Cea708Stream2.prototype.init.call(this);
        var self3 = this;
        this.current708Packet = null;
        this.services = {};
        this.push = function(packet) {
          if (packet.type === 3) {
            self3.new708Packet();
            self3.add708Bytes(packet);
          } else {
            if (self3.current708Packet === null) {
              self3.new708Packet();
            }
            self3.add708Bytes(packet);
          }
        };
      };
      Cea708Stream.prototype = new stream();
      Cea708Stream.prototype.new708Packet = function() {
        if (this.current708Packet !== null) {
          this.push708Packet();
        }
        this.current708Packet = {
          data: [],
          ptsVals: []
        };
      };
      Cea708Stream.prototype.add708Bytes = function(packet) {
        var data = packet.ccData;
        var byte0 = data >>> 8;
        var byte1 = data & 255;
        this.current708Packet.ptsVals.push(packet.pts);
        this.current708Packet.data.push(byte0);
        this.current708Packet.data.push(byte1);
      };
      Cea708Stream.prototype.push708Packet = function() {
        var packet708 = this.current708Packet;
        var packetData = packet708.data;
        var serviceNum = null;
        var blockSize = null;
        var i = 0;
        var b = packetData[i++];
        packet708.seq = b >> 6;
        packet708.sizeCode = b & 63;
        for (; i < packetData.length; i++) {
          b = packetData[i++];
          serviceNum = b >> 5;
          blockSize = b & 31;
          if (serviceNum === 7 && blockSize > 0) {
            b = packetData[i++];
            serviceNum = b;
          }
          this.pushServiceBlock(serviceNum, i, blockSize);
          if (blockSize > 0) {
            i += blockSize - 1;
          }
        }
      };
      Cea708Stream.prototype.pushServiceBlock = function(serviceNum, start2, size) {
        var b;
        var i = start2;
        var packetData = this.current708Packet.data;
        var service = this.services[serviceNum];
        if (!service) {
          service = this.initService(serviceNum, i);
        }
        for (; i < start2 + size && i < packetData.length; i++) {
          b = packetData[i];
          if (within708TextBlock(b)) {
            i = this.handleText(i, service);
          } else if (b === 16) {
            i = this.extendedCommands(i, service);
          } else if (128 <= b && b <= 135) {
            i = this.setCurrentWindow(i, service);
          } else if (152 <= b && b <= 159) {
            i = this.defineWindow(i, service);
          } else if (b === 136) {
            i = this.clearWindows(i, service);
          } else if (b === 140) {
            i = this.deleteWindows(i, service);
          } else if (b === 137) {
            i = this.displayWindows(i, service);
          } else if (b === 138) {
            i = this.hideWindows(i, service);
          } else if (b === 139) {
            i = this.toggleWindows(i, service);
          } else if (b === 151) {
            i = this.setWindowAttributes(i, service);
          } else if (b === 144) {
            i = this.setPenAttributes(i, service);
          } else if (b === 145) {
            i = this.setPenColor(i, service);
          } else if (b === 146) {
            i = this.setPenLocation(i, service);
          } else if (b === 143) {
            service = this.reset(i, service);
          } else if (b === 8) {
            service.currentWindow.backspace();
          } else if (b === 12) {
            service.currentWindow.clearText();
          } else if (b === 13) {
            service.currentWindow.pendingNewLine = true;
          } else if (b === 14) {
            service.currentWindow.clearText();
          } else if (b === 141) {
            i++;
          }
        }
      };
      Cea708Stream.prototype.extendedCommands = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        if (within708TextBlock(b)) {
          i = this.handleText(i, service, true);
        }
        return i;
      };
      Cea708Stream.prototype.getPts = function(byteIndex) {
        return this.current708Packet.ptsVals[Math.floor(byteIndex / 2)];
      };
      Cea708Stream.prototype.initService = function(serviceNum, i) {
        var self3 = this;
        this.services[serviceNum] = new Cea708Service(serviceNum);
        this.services[serviceNum].init(this.getPts(i), function(pts) {
          self3.flushDisplayed(pts, self3.services[serviceNum]);
        });
        return this.services[serviceNum];
      };
      Cea708Stream.prototype.handleText = function(i, service, isExtended) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var extended = isExtended ? 4096 : 0;
        var _char = get708CharFromCode(extended | b);
        var win2 = service.currentWindow;
        if (win2.pendingNewLine && !win2.isEmpty()) {
          win2.newLine(this.getPts(i));
        }
        win2.pendingNewLine = false;
        win2.addText(_char);
        return i;
      };
      Cea708Stream.prototype.setCurrentWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var windowNum = b & 7;
        service.setCurrentWindow(windowNum);
        return i;
      };
      Cea708Stream.prototype.defineWindow = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var windowNum = b & 7;
        service.setCurrentWindow(windowNum);
        var win2 = service.currentWindow;
        b = packetData[++i];
        win2.visible = (b & 32) >> 5;
        win2.rowLock = (b & 16) >> 4;
        win2.columnLock = (b & 8) >> 3;
        win2.priority = b & 7;
        b = packetData[++i];
        win2.relativePositioning = (b & 128) >> 7;
        win2.anchorVertical = b & 127;
        b = packetData[++i];
        win2.anchorHorizontal = b;
        b = packetData[++i];
        win2.anchorPoint = (b & 240) >> 4;
        win2.rowCount = b & 15;
        b = packetData[++i];
        win2.columnCount = b & 63;
        b = packetData[++i];
        win2.windowStyle = (b & 56) >> 3;
        win2.penStyle = b & 7;
        win2.virtualRowCount = win2.rowCount + 1;
        return i;
      };
      Cea708Stream.prototype.setWindowAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var winAttr = service.currentWindow.winAttr;
        b = packetData[++i];
        winAttr.fillOpacity = (b & 192) >> 6;
        winAttr.fillRed = (b & 48) >> 4;
        winAttr.fillGreen = (b & 12) >> 2;
        winAttr.fillBlue = b & 3;
        b = packetData[++i];
        winAttr.borderType = (b & 192) >> 6;
        winAttr.borderRed = (b & 48) >> 4;
        winAttr.borderGreen = (b & 12) >> 2;
        winAttr.borderBlue = b & 3;
        b = packetData[++i];
        winAttr.borderType += (b & 128) >> 5;
        winAttr.wordWrap = (b & 64) >> 6;
        winAttr.printDirection = (b & 48) >> 4;
        winAttr.scrollDirection = (b & 12) >> 2;
        winAttr.justify = b & 3;
        b = packetData[++i];
        winAttr.effectSpeed = (b & 240) >> 4;
        winAttr.effectDirection = (b & 12) >> 2;
        winAttr.displayEffect = b & 3;
        return i;
      };
      Cea708Stream.prototype.flushDisplayed = function(pts, service) {
        var displayedText = [];
        for (var winId = 0; winId < 8; winId++) {
          if (service.windows[winId].visible && !service.windows[winId].isEmpty()) {
            displayedText.push(service.windows[winId].getText());
          }
        }
        service.endPts = pts;
        service.text = displayedText.join("\n\n");
        this.pushCaption(service);
        service.startPts = pts;
      };
      Cea708Stream.prototype.pushCaption = function(service) {
        if (service.text !== "") {
          this.trigger("data", {
            startPts: service.startPts,
            endPts: service.endPts,
            text: service.text,
            stream: "cc708_" + service.serviceNum
          });
          service.text = "";
          service.startPts = service.endPts;
        }
      };
      Cea708Stream.prototype.displayWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b & 1 << winId) {
            service.windows[winId].visible = 1;
          }
        }
        return i;
      };
      Cea708Stream.prototype.hideWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b & 1 << winId) {
            service.windows[winId].visible = 0;
          }
        }
        return i;
      };
      Cea708Stream.prototype.toggleWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b & 1 << winId) {
            service.windows[winId].visible ^= 1;
          }
        }
        return i;
      };
      Cea708Stream.prototype.clearWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b & 1 << winId) {
            service.windows[winId].clearText();
          }
        }
        return i;
      };
      Cea708Stream.prototype.deleteWindows = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[++i];
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        for (var winId = 0; winId < 8; winId++) {
          if (b & 1 << winId) {
            service.windows[winId].reset();
          }
        }
        return i;
      };
      Cea708Stream.prototype.setPenAttributes = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penAttr = service.currentWindow.penAttr;
        b = packetData[++i];
        penAttr.textTag = (b & 240) >> 4;
        penAttr.offset = (b & 12) >> 2;
        penAttr.penSize = b & 3;
        b = packetData[++i];
        penAttr.italics = (b & 128) >> 7;
        penAttr.underline = (b & 64) >> 6;
        penAttr.edgeType = (b & 56) >> 3;
        penAttr.fontStyle = b & 7;
        return i;
      };
      Cea708Stream.prototype.setPenColor = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penColor = service.currentWindow.penColor;
        b = packetData[++i];
        penColor.fgOpacity = (b & 192) >> 6;
        penColor.fgRed = (b & 48) >> 4;
        penColor.fgGreen = (b & 12) >> 2;
        penColor.fgBlue = b & 3;
        b = packetData[++i];
        penColor.bgOpacity = (b & 192) >> 6;
        penColor.bgRed = (b & 48) >> 4;
        penColor.bgGreen = (b & 12) >> 2;
        penColor.bgBlue = b & 3;
        b = packetData[++i];
        penColor.edgeRed = (b & 48) >> 4;
        penColor.edgeGreen = (b & 12) >> 2;
        penColor.edgeBlue = b & 3;
        return i;
      };
      Cea708Stream.prototype.setPenLocation = function(i, service) {
        var packetData = this.current708Packet.data;
        var b = packetData[i];
        var penLoc = service.currentWindow.penLoc;
        service.currentWindow.pendingNewLine = true;
        b = packetData[++i];
        penLoc.row = b & 15;
        b = packetData[++i];
        penLoc.column = b & 63;
        return i;
      };
      Cea708Stream.prototype.reset = function(i, service) {
        var pts = this.getPts(i);
        this.flushDisplayed(pts, service);
        return this.initService(service.serviceNum, i);
      };
      var CHARACTER_TRANSLATION = {
        42: 225,
        92: 233,
        94: 237,
        95: 243,
        96: 250,
        123: 231,
        124: 247,
        125: 209,
        126: 241,
        127: 9608,
        304: 174,
        305: 176,
        306: 189,
        307: 191,
        308: 8482,
        309: 162,
        310: 163,
        311: 9834,
        312: 224,
        313: 160,
        314: 232,
        315: 226,
        316: 234,
        317: 238,
        318: 244,
        319: 251,
        544: 193,
        545: 201,
        546: 211,
        547: 218,
        548: 220,
        549: 252,
        550: 8216,
        551: 161,
        552: 42,
        553: 39,
        554: 8212,
        555: 169,
        556: 8480,
        557: 8226,
        558: 8220,
        559: 8221,
        560: 192,
        561: 194,
        562: 199,
        563: 200,
        564: 202,
        565: 203,
        566: 235,
        567: 206,
        568: 207,
        569: 239,
        570: 212,
        571: 217,
        572: 249,
        573: 219,
        574: 171,
        575: 187,
        800: 195,
        801: 227,
        802: 205,
        803: 204,
        804: 236,
        805: 210,
        806: 242,
        807: 213,
        808: 245,
        809: 123,
        810: 125,
        811: 92,
        812: 94,
        813: 95,
        814: 124,
        815: 126,
        816: 196,
        817: 228,
        818: 214,
        819: 246,
        820: 223,
        821: 165,
        822: 164,
        823: 9474,
        824: 197,
        825: 229,
        826: 216,
        827: 248,
        828: 9484,
        829: 9488,
        830: 9492,
        831: 9496
      };
      var getCharFromCode = function getCharFromCode2(code) {
        if (code === null) {
          return "";
        }
        code = CHARACTER_TRANSLATION[code] || code;
        return String.fromCharCode(code);
      };
      var BOTTOM_ROW = 14;
      var ROWS = [4352, 4384, 4608, 4640, 5376, 5408, 5632, 5664, 5888, 5920, 4096, 4864, 4896, 5120, 5152];
      var createDisplayBuffer = function createDisplayBuffer2() {
        var result = [], i = BOTTOM_ROW + 1;
        while (i--) {
          result.push("");
        }
        return result;
      };
      var Cea608Stream = function Cea608Stream2(field, dataChannel) {
        Cea608Stream2.prototype.init.call(this);
        this.field_ = field || 0;
        this.dataChannel_ = dataChannel || 0;
        this.name_ = "CC" + ((this.field_ << 1 | this.dataChannel_) + 1);
        this.setConstants();
        this.reset();
        this.push = function(packet) {
          var data, swap, char0, char1, text;
          data = packet.ccData & 32639;
          if (data === this.lastControlCode_) {
            this.lastControlCode_ = null;
            return;
          }
          if ((data & 61440) === 4096) {
            this.lastControlCode_ = data;
          } else if (data !== this.PADDING_) {
            this.lastControlCode_ = null;
          }
          char0 = data >>> 8;
          char1 = data & 255;
          if (data === this.PADDING_) {
            return;
          } else if (data === this.RESUME_CAPTION_LOADING_) {
            this.mode_ = "popOn";
          } else if (data === this.END_OF_CAPTION_) {
            this.mode_ = "popOn";
            this.clearFormatting(packet.pts);
            this.flushDisplayed(packet.pts);
            swap = this.displayed_;
            this.displayed_ = this.nonDisplayed_;
            this.nonDisplayed_ = swap;
            this.startPts_ = packet.pts;
          } else if (data === this.ROLL_UP_2_ROWS_) {
            this.rollUpRows_ = 2;
            this.setRollUp(packet.pts);
          } else if (data === this.ROLL_UP_3_ROWS_) {
            this.rollUpRows_ = 3;
            this.setRollUp(packet.pts);
          } else if (data === this.ROLL_UP_4_ROWS_) {
            this.rollUpRows_ = 4;
            this.setRollUp(packet.pts);
          } else if (data === this.CARRIAGE_RETURN_) {
            this.clearFormatting(packet.pts);
            this.flushDisplayed(packet.pts);
            this.shiftRowsUp_();
            this.startPts_ = packet.pts;
          } else if (data === this.BACKSPACE_) {
            if (this.mode_ === "popOn") {
              this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
            } else {
              this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
            }
          } else if (data === this.ERASE_DISPLAYED_MEMORY_) {
            this.flushDisplayed(packet.pts);
            this.displayed_ = createDisplayBuffer();
          } else if (data === this.ERASE_NON_DISPLAYED_MEMORY_) {
            this.nonDisplayed_ = createDisplayBuffer();
          } else if (data === this.RESUME_DIRECT_CAPTIONING_) {
            if (this.mode_ !== "paintOn") {
              this.flushDisplayed(packet.pts);
              this.displayed_ = createDisplayBuffer();
            }
            this.mode_ = "paintOn";
            this.startPts_ = packet.pts;
          } else if (this.isSpecialCharacter(char0, char1)) {
            char0 = (char0 & 3) << 8;
            text = getCharFromCode(char0 | char1);
            this[this.mode_](packet.pts, text);
            this.column_++;
          } else if (this.isExtCharacter(char0, char1)) {
            if (this.mode_ === "popOn") {
              this.nonDisplayed_[this.row_] = this.nonDisplayed_[this.row_].slice(0, -1);
            } else {
              this.displayed_[this.row_] = this.displayed_[this.row_].slice(0, -1);
            }
            char0 = (char0 & 3) << 8;
            text = getCharFromCode(char0 | char1);
            this[this.mode_](packet.pts, text);
            this.column_++;
          } else if (this.isMidRowCode(char0, char1)) {
            this.clearFormatting(packet.pts);
            this[this.mode_](packet.pts, " ");
            this.column_++;
            if ((char1 & 14) === 14) {
              this.addFormatting(packet.pts, ["i"]);
            }
            if ((char1 & 1) === 1) {
              this.addFormatting(packet.pts, ["u"]);
            }
          } else if (this.isOffsetControlCode(char0, char1)) {
            this.column_ += char1 & 3;
          } else if (this.isPAC(char0, char1)) {
            var row = ROWS.indexOf(data & 7968);
            if (this.mode_ === "rollUp") {
              if (row - this.rollUpRows_ + 1 < 0) {
                row = this.rollUpRows_ - 1;
              }
              this.setRollUp(packet.pts, row);
            }
            if (row !== this.row_) {
              this.clearFormatting(packet.pts);
              this.row_ = row;
            }
            if (char1 & 1 && this.formatting_.indexOf("u") === -1) {
              this.addFormatting(packet.pts, ["u"]);
            }
            if ((data & 16) === 16) {
              this.column_ = ((data & 14) >> 1) * 4;
            }
            if (this.isColorPAC(char1)) {
              if ((char1 & 14) === 14) {
                this.addFormatting(packet.pts, ["i"]);
              }
            }
          } else if (this.isNormalChar(char0)) {
            if (char1 === 0) {
              char1 = null;
            }
            text = getCharFromCode(char0);
            text += getCharFromCode(char1);
            this[this.mode_](packet.pts, text);
            this.column_ += text.length;
          }
        };
      };
      Cea608Stream.prototype = new stream();
      Cea608Stream.prototype.flushDisplayed = function(pts) {
        var content = this.displayed_.map(function(row) {
          try {
            return row.trim();
          } catch (e) {
            console.error("Skipping malformed caption.");
            return "";
          }
        }).join("\n").replace(/^\n+|\n+$/g, "");
        if (content.length) {
          this.trigger("data", {
            startPts: this.startPts_,
            endPts: pts,
            text: content,
            stream: this.name_
          });
        }
      };
      Cea608Stream.prototype.reset = function() {
        this.mode_ = "popOn";
        this.topRow_ = 0;
        this.startPts_ = 0;
        this.displayed_ = createDisplayBuffer();
        this.nonDisplayed_ = createDisplayBuffer();
        this.lastControlCode_ = null;
        this.column_ = 0;
        this.row_ = BOTTOM_ROW;
        this.rollUpRows_ = 2;
        this.formatting_ = [];
      };
      Cea608Stream.prototype.setConstants = function() {
        if (this.dataChannel_ === 0) {
          this.BASE_ = 16;
          this.EXT_ = 17;
          this.CONTROL_ = (20 | this.field_) << 8;
          this.OFFSET_ = 23;
        } else if (this.dataChannel_ === 1) {
          this.BASE_ = 24;
          this.EXT_ = 25;
          this.CONTROL_ = (28 | this.field_) << 8;
          this.OFFSET_ = 31;
        }
        this.PADDING_ = 0;
        this.RESUME_CAPTION_LOADING_ = this.CONTROL_ | 32;
        this.END_OF_CAPTION_ = this.CONTROL_ | 47;
        this.ROLL_UP_2_ROWS_ = this.CONTROL_ | 37;
        this.ROLL_UP_3_ROWS_ = this.CONTROL_ | 38;
        this.ROLL_UP_4_ROWS_ = this.CONTROL_ | 39;
        this.CARRIAGE_RETURN_ = this.CONTROL_ | 45;
        this.RESUME_DIRECT_CAPTIONING_ = this.CONTROL_ | 41;
        this.BACKSPACE_ = this.CONTROL_ | 33;
        this.ERASE_DISPLAYED_MEMORY_ = this.CONTROL_ | 44;
        this.ERASE_NON_DISPLAYED_MEMORY_ = this.CONTROL_ | 46;
      };
      Cea608Stream.prototype.isSpecialCharacter = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 48 && char1 <= 63;
      };
      Cea608Stream.prototype.isExtCharacter = function(char0, char1) {
        return (char0 === this.EXT_ + 1 || char0 === this.EXT_ + 2) && char1 >= 32 && char1 <= 63;
      };
      Cea608Stream.prototype.isMidRowCode = function(char0, char1) {
        return char0 === this.EXT_ && char1 >= 32 && char1 <= 47;
      };
      Cea608Stream.prototype.isOffsetControlCode = function(char0, char1) {
        return char0 === this.OFFSET_ && char1 >= 33 && char1 <= 35;
      };
      Cea608Stream.prototype.isPAC = function(char0, char1) {
        return char0 >= this.BASE_ && char0 < this.BASE_ + 8 && char1 >= 64 && char1 <= 127;
      };
      Cea608Stream.prototype.isColorPAC = function(char1) {
        return char1 >= 64 && char1 <= 79 || char1 >= 96 && char1 <= 127;
      };
      Cea608Stream.prototype.isNormalChar = function(_char2) {
        return _char2 >= 32 && _char2 <= 127;
      };
      Cea608Stream.prototype.setRollUp = function(pts, newBaseRow) {
        if (this.mode_ !== "rollUp") {
          this.row_ = BOTTOM_ROW;
          this.mode_ = "rollUp";
          this.flushDisplayed(pts);
          this.nonDisplayed_ = createDisplayBuffer();
          this.displayed_ = createDisplayBuffer();
        }
        if (newBaseRow !== void 0 && newBaseRow !== this.row_) {
          for (var i = 0; i < this.rollUpRows_; i++) {
            this.displayed_[newBaseRow - i] = this.displayed_[this.row_ - i];
            this.displayed_[this.row_ - i] = "";
          }
        }
        if (newBaseRow === void 0) {
          newBaseRow = this.row_;
        }
        this.topRow_ = newBaseRow - this.rollUpRows_ + 1;
      };
      Cea608Stream.prototype.addFormatting = function(pts, format) {
        this.formatting_ = this.formatting_.concat(format);
        var text = format.reduce(function(text2, format2) {
          return text2 + "<" + format2 + ">";
        }, "");
        this[this.mode_](pts, text);
      };
      Cea608Stream.prototype.clearFormatting = function(pts) {
        if (!this.formatting_.length) {
          return;
        }
        var text = this.formatting_.reverse().reduce(function(text2, format) {
          return text2 + "</" + format + ">";
        }, "");
        this.formatting_ = [];
        this[this.mode_](pts, text);
      };
      Cea608Stream.prototype.popOn = function(pts, text) {
        var baseRow = this.nonDisplayed_[this.row_];
        baseRow += text;
        this.nonDisplayed_[this.row_] = baseRow;
      };
      Cea608Stream.prototype.rollUp = function(pts, text) {
        var baseRow = this.displayed_[this.row_];
        baseRow += text;
        this.displayed_[this.row_] = baseRow;
      };
      Cea608Stream.prototype.shiftRowsUp_ = function() {
        var i;
        for (i = 0; i < this.topRow_; i++) {
          this.displayed_[i] = "";
        }
        for (i = this.row_ + 1; i < BOTTOM_ROW + 1; i++) {
          this.displayed_[i] = "";
        }
        for (i = this.topRow_; i < this.row_; i++) {
          this.displayed_[i] = this.displayed_[i + 1];
        }
        this.displayed_[this.row_] = "";
      };
      Cea608Stream.prototype.paintOn = function(pts, text) {
        var baseRow = this.displayed_[this.row_];
        baseRow += text;
        this.displayed_[this.row_] = baseRow;
      };
      var captionStream = {
        CaptionStream,
        Cea608Stream,
        Cea708Stream
      };
      var streamTypes = {
        H264_STREAM_TYPE: 27,
        ADTS_STREAM_TYPE: 15,
        METADATA_STREAM_TYPE: 21
      };
      var MAX_TS = 8589934592;
      var RO_THRESH = 4294967296;
      var TYPE_SHARED = "shared";
      var handleRollover = function handleRollover2(value, reference) {
        var direction = 1;
        if (value > reference) {
          direction = -1;
        }
        while (Math.abs(reference - value) > RO_THRESH) {
          value += direction * MAX_TS;
        }
        return value;
      };
      var TimestampRolloverStream = function TimestampRolloverStream2(type4) {
        var lastDTS, referenceDTS;
        TimestampRolloverStream2.prototype.init.call(this);
        this.type_ = type4 || TYPE_SHARED;
        this.push = function(data) {
          if (this.type_ !== TYPE_SHARED && data.type !== this.type_) {
            return;
          }
          if (referenceDTS === void 0) {
            referenceDTS = data.dts;
          }
          data.dts = handleRollover(data.dts, referenceDTS);
          data.pts = handleRollover(data.pts, referenceDTS);
          lastDTS = data.dts;
          this.trigger("data", data);
        };
        this.flush = function() {
          referenceDTS = lastDTS;
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
        this.discontinuity = function() {
          referenceDTS = void 0;
          lastDTS = void 0;
        };
        this.reset = function() {
          this.discontinuity();
          this.trigger("reset");
        };
      };
      TimestampRolloverStream.prototype = new stream();
      var timestampRolloverStream = {
        TimestampRolloverStream,
        handleRollover
      };
      var percentEncode = function percentEncode2(bytes, start2, end) {
        var i, result = "";
        for (i = start2; i < end; i++) {
          result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        }
        return result;
      }, parseUtf8 = function parseUtf82(bytes, start2, end) {
        return decodeURIComponent(percentEncode(bytes, start2, end));
      }, parseIso88591 = function parseIso885912(bytes, start2, end) {
        return unescape(percentEncode(bytes, start2, end));
      }, parseSyncSafeInteger = function parseSyncSafeInteger2(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
      }, tagParsers = {
        TXXX: function TXXX(tag) {
          var i;
          if (tag.data[0] !== 3) {
            return;
          }
          for (i = 1; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.description = parseUtf8(tag.data, 1, i);
              tag.value = parseUtf8(tag.data, i + 1, tag.data.length).replace(/\0*$/, "");
              break;
            }
          }
          tag.data = tag.value;
        },
        WXXX: function WXXX(tag) {
          var i;
          if (tag.data[0] !== 3) {
            return;
          }
          for (i = 1; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.description = parseUtf8(tag.data, 1, i);
              tag.url = parseUtf8(tag.data, i + 1, tag.data.length);
              break;
            }
          }
        },
        PRIV: function PRIV(tag) {
          var i;
          for (i = 0; i < tag.data.length; i++) {
            if (tag.data[i] === 0) {
              tag.owner = parseIso88591(tag.data, 0, i);
              break;
            }
          }
          tag.privateData = tag.data.subarray(i + 1);
          tag.data = tag.privateData;
        }
      }, _MetadataStream;
      _MetadataStream = function MetadataStream(options) {
        var settings = {
          debug: !!(options && options.debug),
          descriptor: options && options.descriptor
        }, tagSize = 0, buffer = [], bufferSize = 0, i;
        _MetadataStream.prototype.init.call(this);
        this.dispatchType = streamTypes.METADATA_STREAM_TYPE.toString(16);
        if (settings.descriptor) {
          for (i = 0; i < settings.descriptor.length; i++) {
            this.dispatchType += ("00" + settings.descriptor[i].toString(16)).slice(-2);
          }
        }
        this.push = function(chunk) {
          var tag, frameStart, frameSize, frame, i2, frameHeader;
          if (chunk.type !== "timed-metadata") {
            return;
          }
          if (chunk.dataAlignmentIndicator) {
            bufferSize = 0;
            buffer.length = 0;
          }
          if (buffer.length === 0 && (chunk.data.length < 10 || chunk.data[0] !== "I".charCodeAt(0) || chunk.data[1] !== "D".charCodeAt(0) || chunk.data[2] !== "3".charCodeAt(0))) {
            if (settings.debug) {
              console.log("Skipping unrecognized metadata packet");
            }
            return;
          }
          buffer.push(chunk);
          bufferSize += chunk.data.byteLength;
          if (buffer.length === 1) {
            tagSize = parseSyncSafeInteger(chunk.data.subarray(6, 10));
            tagSize += 10;
          }
          if (bufferSize < tagSize) {
            return;
          }
          tag = {
            data: new Uint8Array(tagSize),
            frames: [],
            pts: buffer[0].pts,
            dts: buffer[0].dts
          };
          for (i2 = 0; i2 < tagSize; ) {
            tag.data.set(buffer[0].data.subarray(0, tagSize - i2), i2);
            i2 += buffer[0].data.byteLength;
            bufferSize -= buffer[0].data.byteLength;
            buffer.shift();
          }
          frameStart = 10;
          if (tag.data[5] & 64) {
            frameStart += 4;
            frameStart += parseSyncSafeInteger(tag.data.subarray(10, 14));
            tagSize -= parseSyncSafeInteger(tag.data.subarray(16, 20));
          }
          do {
            frameSize = parseSyncSafeInteger(tag.data.subarray(frameStart + 4, frameStart + 8));
            if (frameSize < 1) {
              return console.log("Malformed ID3 frame encountered. Skipping metadata parsing.");
            }
            frameHeader = String.fromCharCode(tag.data[frameStart], tag.data[frameStart + 1], tag.data[frameStart + 2], tag.data[frameStart + 3]);
            frame = {
              id: frameHeader,
              data: tag.data.subarray(frameStart + 10, frameStart + frameSize + 10)
            };
            frame.key = frame.id;
            if (tagParsers[frame.id]) {
              tagParsers[frame.id](frame);
              if (frame.owner === "com.apple.streaming.transportStreamTimestamp") {
                var d2 = frame.data, size = (d2[3] & 1) << 30 | d2[4] << 22 | d2[5] << 14 | d2[6] << 6 | d2[7] >>> 2;
                size *= 4;
                size += d2[7] & 3;
                frame.timeStamp = size;
                if (tag.pts === void 0 && tag.dts === void 0) {
                  tag.pts = frame.timeStamp;
                  tag.dts = frame.timeStamp;
                }
                this.trigger("timestamp", frame);
              }
            }
            tag.frames.push(frame);
            frameStart += 10;
            frameStart += frameSize;
          } while (frameStart < tagSize);
          this.trigger("data", tag);
        };
      };
      _MetadataStream.prototype = new stream();
      var metadataStream = _MetadataStream;
      var TimestampRolloverStream$1 = timestampRolloverStream.TimestampRolloverStream;
      var _TransportPacketStream, _TransportParseStream, _ElementaryStream;
      var MP2T_PACKET_LENGTH = 188, SYNC_BYTE = 71;
      _TransportPacketStream = function TransportPacketStream() {
        var buffer = new Uint8Array(MP2T_PACKET_LENGTH), bytesInBuffer = 0;
        _TransportPacketStream.prototype.init.call(this);
        this.push = function(bytes) {
          var startIndex = 0, endIndex = MP2T_PACKET_LENGTH, everything;
          if (bytesInBuffer) {
            everything = new Uint8Array(bytes.byteLength + bytesInBuffer);
            everything.set(buffer.subarray(0, bytesInBuffer));
            everything.set(bytes, bytesInBuffer);
            bytesInBuffer = 0;
          } else {
            everything = bytes;
          }
          while (endIndex < everything.byteLength) {
            if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {
              this.trigger("data", everything.subarray(startIndex, endIndex));
              startIndex += MP2T_PACKET_LENGTH;
              endIndex += MP2T_PACKET_LENGTH;
              continue;
            }
            startIndex++;
            endIndex++;
          }
          if (startIndex < everything.byteLength) {
            buffer.set(everything.subarray(startIndex), 0);
            bytesInBuffer = everything.byteLength - startIndex;
          }
        };
        this.flush = function() {
          if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {
            this.trigger("data", buffer);
            bytesInBuffer = 0;
          }
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
        this.reset = function() {
          bytesInBuffer = 0;
          this.trigger("reset");
        };
      };
      _TransportPacketStream.prototype = new stream();
      _TransportParseStream = function TransportParseStream() {
        var parsePsi, parsePat, parsePmt, self3;
        _TransportParseStream.prototype.init.call(this);
        self3 = this;
        this.packetsWaitingForPmt = [];
        this.programMapTable = void 0;
        parsePsi = function parsePsi2(payload, psi) {
          var offset = 0;
          if (psi.payloadUnitStartIndicator) {
            offset += payload[offset] + 1;
          }
          if (psi.type === "pat") {
            parsePat(payload.subarray(offset), psi);
          } else {
            parsePmt(payload.subarray(offset), psi);
          }
        };
        parsePat = function parsePat2(payload, pat) {
          pat.section_number = payload[7];
          pat.last_section_number = payload[8];
          self3.pmtPid = (payload[10] & 31) << 8 | payload[11];
          pat.pmtPid = self3.pmtPid;
        };
        parsePmt = function parsePmt2(payload, pmt) {
          var sectionLength, tableEnd, programInfoLength, offset;
          if (!(payload[5] & 1)) {
            return;
          }
          self3.programMapTable = {
            video: null,
            audio: null,
            "timed-metadata": {}
          };
          sectionLength = (payload[1] & 15) << 8 | payload[2];
          tableEnd = 3 + sectionLength - 4;
          programInfoLength = (payload[10] & 15) << 8 | payload[11];
          offset = 12 + programInfoLength;
          while (offset < tableEnd) {
            var streamType = payload[offset];
            var pid = (payload[offset + 1] & 31) << 8 | payload[offset + 2];
            if (streamType === streamTypes.H264_STREAM_TYPE && self3.programMapTable.video === null) {
              self3.programMapTable.video = pid;
            } else if (streamType === streamTypes.ADTS_STREAM_TYPE && self3.programMapTable.audio === null) {
              self3.programMapTable.audio = pid;
            } else if (streamType === streamTypes.METADATA_STREAM_TYPE) {
              self3.programMapTable["timed-metadata"][pid] = streamType;
            }
            offset += ((payload[offset + 3] & 15) << 8 | payload[offset + 4]) + 5;
          }
          pmt.programMapTable = self3.programMapTable;
        };
        this.push = function(packet) {
          var result = {}, offset = 4;
          result.payloadUnitStartIndicator = !!(packet[1] & 64);
          result.pid = packet[1] & 31;
          result.pid <<= 8;
          result.pid |= packet[2];
          if ((packet[3] & 48) >>> 4 > 1) {
            offset += packet[offset] + 1;
          }
          if (result.pid === 0) {
            result.type = "pat";
            parsePsi(packet.subarray(offset), result);
            this.trigger("data", result);
          } else if (result.pid === this.pmtPid) {
            result.type = "pmt";
            parsePsi(packet.subarray(offset), result);
            this.trigger("data", result);
            while (this.packetsWaitingForPmt.length) {
              this.processPes_.apply(this, this.packetsWaitingForPmt.shift());
            }
          } else if (this.programMapTable === void 0) {
            this.packetsWaitingForPmt.push([packet, offset, result]);
          } else {
            this.processPes_(packet, offset, result);
          }
        };
        this.processPes_ = function(packet, offset, result) {
          if (result.pid === this.programMapTable.video) {
            result.streamType = streamTypes.H264_STREAM_TYPE;
          } else if (result.pid === this.programMapTable.audio) {
            result.streamType = streamTypes.ADTS_STREAM_TYPE;
          } else {
            result.streamType = this.programMapTable["timed-metadata"][result.pid];
          }
          result.type = "pes";
          result.data = packet.subarray(offset);
          this.trigger("data", result);
        };
      };
      _TransportParseStream.prototype = new stream();
      _TransportParseStream.STREAM_TYPES = {
        h264: 27,
        adts: 15
      };
      _ElementaryStream = function ElementaryStream() {
        var self3 = this, video = {
          data: [],
          size: 0
        }, audio = {
          data: [],
          size: 0
        }, timedMetadata = {
          data: [],
          size: 0
        }, programMapTable, parsePes = function parsePes2(payload, pes) {
          var ptsDtsFlags;
          pes.packetLength = 6 + (payload[4] << 8 | payload[5]);
          pes.dataAlignmentIndicator = (payload[6] & 4) !== 0;
          ptsDtsFlags = payload[7];
          if (ptsDtsFlags & 192) {
            pes.pts = (payload[9] & 14) << 27 | (payload[10] & 255) << 20 | (payload[11] & 254) << 12 | (payload[12] & 255) << 5 | (payload[13] & 254) >>> 3;
            pes.pts *= 4;
            pes.pts += (payload[13] & 6) >>> 1;
            pes.dts = pes.pts;
            if (ptsDtsFlags & 64) {
              pes.dts = (payload[14] & 14) << 27 | (payload[15] & 255) << 20 | (payload[16] & 254) << 12 | (payload[17] & 255) << 5 | (payload[18] & 254) >>> 3;
              pes.dts *= 4;
              pes.dts += (payload[18] & 6) >>> 1;
            }
          }
          pes.data = payload.subarray(9 + payload[8]);
        }, flushStream = function flushStream2(stream2, type4, forceFlush) {
          var packetData = new Uint8Array(stream2.size), event = {
            type: type4
          }, i = 0, offset = 0, packetFlushable = false, fragment;
          if (!stream2.data.length || stream2.size < 9) {
            return;
          }
          event.trackId = stream2.data[0].pid;
          for (i = 0; i < stream2.data.length; i++) {
            fragment = stream2.data[i];
            packetData.set(fragment.data, offset);
            offset += fragment.data.byteLength;
          }
          parsePes(packetData, event);
          packetFlushable = type4 === "video" || event.packetLength <= stream2.size;
          if (forceFlush || packetFlushable) {
            stream2.size = 0;
            stream2.data.length = 0;
          }
          if (packetFlushable) {
            self3.trigger("data", event);
          }
        };
        _ElementaryStream.prototype.init.call(this);
        this.push = function(data) {
          ({
            pat: function pat() {
            },
            pes: function pes() {
              var stream2, streamType;
              switch (data.streamType) {
                case streamTypes.H264_STREAM_TYPE:
                  stream2 = video;
                  streamType = "video";
                  break;
                case streamTypes.ADTS_STREAM_TYPE:
                  stream2 = audio;
                  streamType = "audio";
                  break;
                case streamTypes.METADATA_STREAM_TYPE:
                  stream2 = timedMetadata;
                  streamType = "timed-metadata";
                  break;
                default:
                  return;
              }
              if (data.payloadUnitStartIndicator) {
                flushStream(stream2, streamType, true);
              }
              stream2.data.push(data);
              stream2.size += data.data.byteLength;
            },
            pmt: function pmt() {
              var event = {
                type: "metadata",
                tracks: []
              };
              programMapTable = data.programMapTable;
              if (programMapTable.video !== null) {
                event.tracks.push({
                  timelineStartInfo: {
                    baseMediaDecodeTime: 0
                  },
                  id: +programMapTable.video,
                  codec: "avc",
                  type: "video"
                });
              }
              if (programMapTable.audio !== null) {
                event.tracks.push({
                  timelineStartInfo: {
                    baseMediaDecodeTime: 0
                  },
                  id: +programMapTable.audio,
                  codec: "adts",
                  type: "audio"
                });
              }
              self3.trigger("data", event);
            }
          })[data.type]();
        };
        this.reset = function() {
          video.size = 0;
          video.data.length = 0;
          audio.size = 0;
          audio.data.length = 0;
          this.trigger("reset");
        };
        this.flushStreams_ = function() {
          flushStream(video, "video");
          flushStream(audio, "audio");
          flushStream(timedMetadata, "timed-metadata");
        };
        this.flush = function() {
          this.flushStreams_();
          this.trigger("done");
        };
      };
      _ElementaryStream.prototype = new stream();
      var m2ts = {
        PAT_PID: 0,
        MP2T_PACKET_LENGTH,
        TransportPacketStream: _TransportPacketStream,
        TransportParseStream: _TransportParseStream,
        ElementaryStream: _ElementaryStream,
        TimestampRolloverStream: TimestampRolloverStream$1,
        CaptionStream: captionStream.CaptionStream,
        Cea608Stream: captionStream.Cea608Stream,
        Cea708Stream: captionStream.Cea708Stream,
        MetadataStream: metadataStream
      };
      for (var type3 in streamTypes) {
        if (streamTypes.hasOwnProperty(type3)) {
          m2ts[type3] = streamTypes[type3];
        }
      }
      var m2ts_1 = m2ts;
      var ONE_SECOND_IN_TS$2 = clock.ONE_SECOND_IN_TS;
      var _AdtsStream;
      var ADTS_SAMPLING_FREQUENCIES = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
      _AdtsStream = function AdtsStream(handlePartialSegments) {
        var buffer, frameNum = 0;
        _AdtsStream.prototype.init.call(this);
        this.push = function(packet) {
          var i = 0, frameLength, protectionSkipBytes, frameEnd, oldBuffer, sampleCount, adtsFrameDuration;
          if (!handlePartialSegments) {
            frameNum = 0;
          }
          if (packet.type !== "audio") {
            return;
          }
          if (buffer) {
            oldBuffer = buffer;
            buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);
            buffer.set(oldBuffer);
            buffer.set(packet.data, oldBuffer.byteLength);
          } else {
            buffer = packet.data;
          }
          while (i + 5 < buffer.length) {
            if (buffer[i] !== 255 || (buffer[i + 1] & 246) !== 240) {
              i++;
              continue;
            }
            protectionSkipBytes = (~buffer[i + 1] & 1) * 2;
            frameLength = (buffer[i + 3] & 3) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 224) >> 5;
            sampleCount = ((buffer[i + 6] & 3) + 1) * 1024;
            adtsFrameDuration = sampleCount * ONE_SECOND_IN_TS$2 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 60) >>> 2];
            frameEnd = i + frameLength;
            if (buffer.byteLength < frameEnd) {
              return;
            }
            this.trigger("data", {
              pts: packet.pts + frameNum * adtsFrameDuration,
              dts: packet.dts + frameNum * adtsFrameDuration,
              sampleCount,
              audioobjecttype: (buffer[i + 2] >>> 6 & 3) + 1,
              channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 192) >>> 6,
              samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 60) >>> 2],
              samplingfrequencyindex: (buffer[i + 2] & 60) >>> 2,
              samplesize: 16,
              data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)
            });
            frameNum++;
            if (buffer.byteLength === frameEnd) {
              buffer = void 0;
              return;
            }
            buffer = buffer.subarray(frameEnd);
          }
        };
        this.flush = function() {
          frameNum = 0;
          this.trigger("done");
        };
        this.reset = function() {
          buffer = void 0;
          this.trigger("reset");
        };
        this.endTimeline = function() {
          buffer = void 0;
          this.trigger("endedtimeline");
        };
      };
      _AdtsStream.prototype = new stream();
      var adts = _AdtsStream;
      var ExpGolomb;
      ExpGolomb = function ExpGolomb2(workingData) {
        var workingBytesAvailable = workingData.byteLength, workingWord = 0, workingBitsAvailable = 0;
        this.length = function() {
          return 8 * workingBytesAvailable;
        };
        this.bitsAvailable = function() {
          return 8 * workingBytesAvailable + workingBitsAvailable;
        };
        this.loadWord = function() {
          var position = workingData.byteLength - workingBytesAvailable, workingBytes = new Uint8Array(4), availableBytes = Math.min(4, workingBytesAvailable);
          if (availableBytes === 0) {
            throw new Error("no bytes available");
          }
          workingBytes.set(workingData.subarray(position, position + availableBytes));
          workingWord = new DataView(workingBytes.buffer).getUint32(0);
          workingBitsAvailable = availableBytes * 8;
          workingBytesAvailable -= availableBytes;
        };
        this.skipBits = function(count) {
          var skipBytes;
          if (workingBitsAvailable > count) {
            workingWord <<= count;
            workingBitsAvailable -= count;
          } else {
            count -= workingBitsAvailable;
            skipBytes = Math.floor(count / 8);
            count -= skipBytes * 8;
            workingBytesAvailable -= skipBytes;
            this.loadWord();
            workingWord <<= count;
            workingBitsAvailable -= count;
          }
        };
        this.readBits = function(size) {
          var bits = Math.min(workingBitsAvailable, size), valu = workingWord >>> 32 - bits;
          workingBitsAvailable -= bits;
          if (workingBitsAvailable > 0) {
            workingWord <<= bits;
          } else if (workingBytesAvailable > 0) {
            this.loadWord();
          }
          bits = size - bits;
          if (bits > 0) {
            return valu << bits | this.readBits(bits);
          }
          return valu;
        };
        this.skipLeadingZeros = function() {
          var leadingZeroCount;
          for (leadingZeroCount = 0; leadingZeroCount < workingBitsAvailable; ++leadingZeroCount) {
            if ((workingWord & 2147483648 >>> leadingZeroCount) !== 0) {
              workingWord <<= leadingZeroCount;
              workingBitsAvailable -= leadingZeroCount;
              return leadingZeroCount;
            }
          }
          this.loadWord();
          return leadingZeroCount + this.skipLeadingZeros();
        };
        this.skipUnsignedExpGolomb = function() {
          this.skipBits(1 + this.skipLeadingZeros());
        };
        this.skipExpGolomb = function() {
          this.skipBits(1 + this.skipLeadingZeros());
        };
        this.readUnsignedExpGolomb = function() {
          var clz = this.skipLeadingZeros();
          return this.readBits(clz + 1) - 1;
        };
        this.readExpGolomb = function() {
          var valu = this.readUnsignedExpGolomb();
          if (1 & valu) {
            return 1 + valu >>> 1;
          }
          return -1 * (valu >>> 1);
        };
        this.readBoolean = function() {
          return this.readBits(1) === 1;
        };
        this.readUnsignedByte = function() {
          return this.readBits(8);
        };
        this.loadWord();
      };
      var expGolomb = ExpGolomb;
      var _H264Stream, _NalByteStream;
      var PROFILES_WITH_OPTIONAL_SPS_DATA;
      _NalByteStream = function NalByteStream() {
        var syncPoint = 0, i, buffer;
        _NalByteStream.prototype.init.call(this);
        this.push = function(data) {
          var swapBuffer;
          if (!buffer) {
            buffer = data.data;
          } else {
            swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);
            swapBuffer.set(buffer);
            swapBuffer.set(data.data, buffer.byteLength);
            buffer = swapBuffer;
          }
          var len = buffer.byteLength;
          for (; syncPoint < len - 3; syncPoint++) {
            if (buffer[syncPoint + 2] === 1) {
              i = syncPoint + 5;
              break;
            }
          }
          while (i < len) {
            switch (buffer[i]) {
              case 0:
                if (buffer[i - 1] !== 0) {
                  i += 2;
                  break;
                } else if (buffer[i - 2] !== 0) {
                  i++;
                  break;
                }
                if (syncPoint + 3 !== i - 2) {
                  this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                }
                do {
                  i++;
                } while (buffer[i] !== 1 && i < len);
                syncPoint = i - 2;
                i += 3;
                break;
              case 1:
                if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {
                  i += 3;
                  break;
                }
                this.trigger("data", buffer.subarray(syncPoint + 3, i - 2));
                syncPoint = i - 2;
                i += 3;
                break;
              default:
                i += 3;
                break;
            }
          }
          buffer = buffer.subarray(syncPoint);
          i -= syncPoint;
          syncPoint = 0;
        };
        this.reset = function() {
          buffer = null;
          syncPoint = 0;
          this.trigger("reset");
        };
        this.flush = function() {
          if (buffer && buffer.byteLength > 3) {
            this.trigger("data", buffer.subarray(syncPoint + 3));
          }
          buffer = null;
          syncPoint = 0;
          this.trigger("done");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline");
        };
      };
      _NalByteStream.prototype = new stream();
      PROFILES_WITH_OPTIONAL_SPS_DATA = {
        100: true,
        110: true,
        122: true,
        244: true,
        44: true,
        83: true,
        86: true,
        118: true,
        128: true,
        138: true,
        139: true,
        134: true
      };
      _H264Stream = function H264Stream2() {
        var nalByteStream = new _NalByteStream(), self3, trackId, currentPts, currentDts, discardEmulationPreventionBytes2, readSequenceParameterSet, skipScalingList;
        _H264Stream.prototype.init.call(this);
        self3 = this;
        this.push = function(packet) {
          if (packet.type !== "video") {
            return;
          }
          trackId = packet.trackId;
          currentPts = packet.pts;
          currentDts = packet.dts;
          nalByteStream.push(packet);
        };
        nalByteStream.on("data", function(data) {
          var event = {
            trackId,
            pts: currentPts,
            dts: currentDts,
            data
          };
          switch (data[0] & 31) {
            case 5:
              event.nalUnitType = "slice_layer_without_partitioning_rbsp_idr";
              break;
            case 6:
              event.nalUnitType = "sei_rbsp";
              event.escapedRBSP = discardEmulationPreventionBytes2(data.subarray(1));
              break;
            case 7:
              event.nalUnitType = "seq_parameter_set_rbsp";
              event.escapedRBSP = discardEmulationPreventionBytes2(data.subarray(1));
              event.config = readSequenceParameterSet(event.escapedRBSP);
              break;
            case 8:
              event.nalUnitType = "pic_parameter_set_rbsp";
              break;
            case 9:
              event.nalUnitType = "access_unit_delimiter_rbsp";
              break;
          }
          self3.trigger("data", event);
        });
        nalByteStream.on("done", function() {
          self3.trigger("done");
        });
        nalByteStream.on("partialdone", function() {
          self3.trigger("partialdone");
        });
        nalByteStream.on("reset", function() {
          self3.trigger("reset");
        });
        nalByteStream.on("endedtimeline", function() {
          self3.trigger("endedtimeline");
        });
        this.flush = function() {
          nalByteStream.flush();
        };
        this.partialFlush = function() {
          nalByteStream.partialFlush();
        };
        this.reset = function() {
          nalByteStream.reset();
        };
        this.endTimeline = function() {
          nalByteStream.endTimeline();
        };
        skipScalingList = function skipScalingList2(count, expGolombDecoder) {
          var lastScale = 8, nextScale = 8, j, deltaScale;
          for (j = 0; j < count; j++) {
            if (nextScale !== 0) {
              deltaScale = expGolombDecoder.readExpGolomb();
              nextScale = (lastScale + deltaScale + 256) % 256;
            }
            lastScale = nextScale === 0 ? lastScale : nextScale;
          }
        };
        discardEmulationPreventionBytes2 = function discardEmulationPreventionBytes3(data) {
          var length = data.byteLength, emulationPreventionBytesPositions = [], i = 1, newLength, newData;
          while (i < length - 2) {
            if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
              emulationPreventionBytesPositions.push(i + 2);
              i += 2;
            } else {
              i++;
            }
          }
          if (emulationPreventionBytesPositions.length === 0) {
            return data;
          }
          newLength = length - emulationPreventionBytesPositions.length;
          newData = new Uint8Array(newLength);
          var sourceIndex = 0;
          for (i = 0; i < newLength; sourceIndex++, i++) {
            if (sourceIndex === emulationPreventionBytesPositions[0]) {
              sourceIndex++;
              emulationPreventionBytesPositions.shift();
            }
            newData[i] = data[sourceIndex];
          }
          return newData;
        };
        readSequenceParameterSet = function readSequenceParameterSet2(data) {
          var frameCropLeftOffset = 0, frameCropRightOffset = 0, frameCropTopOffset = 0, frameCropBottomOffset = 0, sarScale = 1, expGolombDecoder, profileIdc, levelIdc, profileCompatibility, chromaFormatIdc, picOrderCntType, numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1, picHeightInMapUnitsMinus1, frameMbsOnlyFlag, scalingListCount, sarRatio, aspectRatioIdc, i;
          expGolombDecoder = new expGolomb(data);
          profileIdc = expGolombDecoder.readUnsignedByte();
          profileCompatibility = expGolombDecoder.readUnsignedByte();
          levelIdc = expGolombDecoder.readUnsignedByte();
          expGolombDecoder.skipUnsignedExpGolomb();
          if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {
            chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();
            if (chromaFormatIdc === 3) {
              expGolombDecoder.skipBits(1);
            }
            expGolombDecoder.skipUnsignedExpGolomb();
            expGolombDecoder.skipUnsignedExpGolomb();
            expGolombDecoder.skipBits(1);
            if (expGolombDecoder.readBoolean()) {
              scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
              for (i = 0; i < scalingListCount; i++) {
                if (expGolombDecoder.readBoolean()) {
                  if (i < 6) {
                    skipScalingList(16, expGolombDecoder);
                  } else {
                    skipScalingList(64, expGolombDecoder);
                  }
                }
              }
            }
          }
          expGolombDecoder.skipUnsignedExpGolomb();
          picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();
          if (picOrderCntType === 0) {
            expGolombDecoder.readUnsignedExpGolomb();
          } else if (picOrderCntType === 1) {
            expGolombDecoder.skipBits(1);
            expGolombDecoder.skipExpGolomb();
            expGolombDecoder.skipExpGolomb();
            numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();
            for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
              expGolombDecoder.skipExpGolomb();
            }
          }
          expGolombDecoder.skipUnsignedExpGolomb();
          expGolombDecoder.skipBits(1);
          picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
          picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();
          frameMbsOnlyFlag = expGolombDecoder.readBits(1);
          if (frameMbsOnlyFlag === 0) {
            expGolombDecoder.skipBits(1);
          }
          expGolombDecoder.skipBits(1);
          if (expGolombDecoder.readBoolean()) {
            frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();
            frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();
          }
          if (expGolombDecoder.readBoolean()) {
            if (expGolombDecoder.readBoolean()) {
              aspectRatioIdc = expGolombDecoder.readUnsignedByte();
              switch (aspectRatioIdc) {
                case 1:
                  sarRatio = [1, 1];
                  break;
                case 2:
                  sarRatio = [12, 11];
                  break;
                case 3:
                  sarRatio = [10, 11];
                  break;
                case 4:
                  sarRatio = [16, 11];
                  break;
                case 5:
                  sarRatio = [40, 33];
                  break;
                case 6:
                  sarRatio = [24, 11];
                  break;
                case 7:
                  sarRatio = [20, 11];
                  break;
                case 8:
                  sarRatio = [32, 11];
                  break;
                case 9:
                  sarRatio = [80, 33];
                  break;
                case 10:
                  sarRatio = [18, 11];
                  break;
                case 11:
                  sarRatio = [15, 11];
                  break;
                case 12:
                  sarRatio = [64, 33];
                  break;
                case 13:
                  sarRatio = [160, 99];
                  break;
                case 14:
                  sarRatio = [4, 3];
                  break;
                case 15:
                  sarRatio = [3, 2];
                  break;
                case 16:
                  sarRatio = [2, 1];
                  break;
                case 255: {
                  sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];
                  break;
                }
              }
              if (sarRatio) {
                sarScale = sarRatio[0] / sarRatio[1];
              }
            }
          }
          return {
            profileIdc,
            levelIdc,
            profileCompatibility,
            width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),
            height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2,
            sarRatio
          };
        };
      };
      _H264Stream.prototype = new stream();
      var h264 = {
        H264Stream: _H264Stream,
        NalByteStream: _NalByteStream
      };
      var ADTS_SAMPLING_FREQUENCIES$1 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
      var parseId3TagSize = function parseId3TagSize2(header, byteIndex) {
        var returnSize = header[byteIndex + 6] << 21 | header[byteIndex + 7] << 14 | header[byteIndex + 8] << 7 | header[byteIndex + 9], flags = header[byteIndex + 5], footerPresent = (flags & 16) >> 4;
        returnSize = returnSize >= 0 ? returnSize : 0;
        if (footerPresent) {
          return returnSize + 20;
        }
        return returnSize + 10;
      };
      var getId3Offset2 = function getId3Offset3(data, offset) {
        if (data.length - offset < 10 || data[offset] !== "I".charCodeAt(0) || data[offset + 1] !== "D".charCodeAt(0) || data[offset + 2] !== "3".charCodeAt(0)) {
          return offset;
        }
        offset += parseId3TagSize(data, offset);
        return getId3Offset3(data, offset);
      };
      var isLikelyAacData = function isLikelyAacData2(data) {
        var offset = getId3Offset2(data, 0);
        return data.length >= offset + 2 && (data[offset] & 255) === 255 && (data[offset + 1] & 240) === 240 && (data[offset + 1] & 22) === 16;
      };
      var parseSyncSafeInteger$1 = function parseSyncSafeInteger2(data) {
        return data[0] << 21 | data[1] << 14 | data[2] << 7 | data[3];
      };
      var percentEncode$1 = function percentEncode2(bytes, start2, end) {
        var i, result = "";
        for (i = start2; i < end; i++) {
          result += "%" + ("00" + bytes[i].toString(16)).slice(-2);
        }
        return result;
      };
      var parseIso88591$1 = function parseIso885912(bytes, start2, end) {
        return unescape(percentEncode$1(bytes, start2, end));
      };
      var parseAdtsSize = function parseAdtsSize2(header, byteIndex) {
        var lowThree = (header[byteIndex + 5] & 224) >> 5, middle = header[byteIndex + 4] << 3, highTwo = header[byteIndex + 3] & 3 << 11;
        return highTwo | middle | lowThree;
      };
      var parseType = function parseType2(header, byteIndex) {
        if (header[byteIndex] === "I".charCodeAt(0) && header[byteIndex + 1] === "D".charCodeAt(0) && header[byteIndex + 2] === "3".charCodeAt(0)) {
          return "timed-metadata";
        } else if (header[byteIndex] & true && (header[byteIndex + 1] & 240) === 240) {
          return "audio";
        }
        return null;
      };
      var parseSampleRate = function parseSampleRate2(packet) {
        var i = 0;
        while (i + 5 < packet.length) {
          if (packet[i] !== 255 || (packet[i + 1] & 246) !== 240) {
            i++;
            continue;
          }
          return ADTS_SAMPLING_FREQUENCIES$1[(packet[i + 2] & 60) >>> 2];
        }
        return null;
      };
      var parseAacTimestamp = function parseAacTimestamp2(packet) {
        var frameStart, frameSize, frame, frameHeader;
        frameStart = 10;
        if (packet[5] & 64) {
          frameStart += 4;
          frameStart += parseSyncSafeInteger$1(packet.subarray(10, 14));
        }
        do {
          frameSize = parseSyncSafeInteger$1(packet.subarray(frameStart + 4, frameStart + 8));
          if (frameSize < 1) {
            return null;
          }
          frameHeader = String.fromCharCode(packet[frameStart], packet[frameStart + 1], packet[frameStart + 2], packet[frameStart + 3]);
          if (frameHeader === "PRIV") {
            frame = packet.subarray(frameStart + 10, frameStart + frameSize + 10);
            for (var i = 0; i < frame.byteLength; i++) {
              if (frame[i] === 0) {
                var owner = parseIso88591$1(frame, 0, i);
                if (owner === "com.apple.streaming.transportStreamTimestamp") {
                  var d2 = frame.subarray(i + 1);
                  var size = (d2[3] & 1) << 30 | d2[4] << 22 | d2[5] << 14 | d2[6] << 6 | d2[7] >>> 2;
                  size *= 4;
                  size += d2[7] & 3;
                  return size;
                }
                break;
              }
            }
          }
          frameStart += 10;
          frameStart += frameSize;
        } while (frameStart < packet.byteLength);
        return null;
      };
      var utils2 = {
        isLikelyAacData,
        parseId3TagSize,
        parseAdtsSize,
        parseType,
        parseSampleRate,
        parseAacTimestamp
      };
      var _AacStream;
      _AacStream = function AacStream() {
        var everything = new Uint8Array(), timeStamp = 0;
        _AacStream.prototype.init.call(this);
        this.setTimestamp = function(timestamp) {
          timeStamp = timestamp;
        };
        this.push = function(bytes) {
          var frameSize = 0, byteIndex = 0, bytesLeft, chunk, packet, tempLength;
          if (everything.length) {
            tempLength = everything.length;
            everything = new Uint8Array(bytes.byteLength + tempLength);
            everything.set(everything.subarray(0, tempLength));
            everything.set(bytes, tempLength);
          } else {
            everything = bytes;
          }
          while (everything.length - byteIndex >= 3) {
            if (everything[byteIndex] === "I".charCodeAt(0) && everything[byteIndex + 1] === "D".charCodeAt(0) && everything[byteIndex + 2] === "3".charCodeAt(0)) {
              if (everything.length - byteIndex < 10) {
                break;
              }
              frameSize = utils2.parseId3TagSize(everything, byteIndex);
              if (byteIndex + frameSize > everything.length) {
                break;
              }
              chunk = {
                type: "timed-metadata",
                data: everything.subarray(byteIndex, byteIndex + frameSize)
              };
              this.trigger("data", chunk);
              byteIndex += frameSize;
              continue;
            } else if ((everything[byteIndex] & 255) === 255 && (everything[byteIndex + 1] & 240) === 240) {
              if (everything.length - byteIndex < 7) {
                break;
              }
              frameSize = utils2.parseAdtsSize(everything, byteIndex);
              if (byteIndex + frameSize > everything.length) {
                break;
              }
              packet = {
                type: "audio",
                data: everything.subarray(byteIndex, byteIndex + frameSize),
                pts: timeStamp,
                dts: timeStamp
              };
              this.trigger("data", packet);
              byteIndex += frameSize;
              continue;
            }
            byteIndex++;
          }
          bytesLeft = everything.length - byteIndex;
          if (bytesLeft > 0) {
            everything = everything.subarray(byteIndex);
          } else {
            everything = new Uint8Array();
          }
        };
        this.reset = function() {
          everything = new Uint8Array();
          this.trigger("reset");
        };
        this.endTimeline = function() {
          everything = new Uint8Array();
          this.trigger("endedtimeline");
        };
      };
      _AacStream.prototype = new stream();
      var aac = _AacStream;
      var AUDIO_PROPERTIES = ["audioobjecttype", "channelcount", "samplerate", "samplingfrequencyindex", "samplesize"];
      var audioProperties = AUDIO_PROPERTIES;
      var VIDEO_PROPERTIES = ["width", "height", "profileIdc", "levelIdc", "profileCompatibility", "sarRatio"];
      var videoProperties = VIDEO_PROPERTIES;
      var H264Stream = h264.H264Stream;
      var isLikelyAacData$1 = utils2.isLikelyAacData;
      var ONE_SECOND_IN_TS$3 = clock.ONE_SECOND_IN_TS;
      var _VideoSegmentStream, _AudioSegmentStream, _Transmuxer, _CoalesceStream;
      var arrayEquals = function arrayEquals2(a, b) {
        var i;
        if (a.length !== b.length) {
          return false;
        }
        for (i = 0; i < a.length; i++) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      };
      var generateSegmentTimingInfo = function generateSegmentTimingInfo2(baseMediaDecodeTime, startDts, startPts, endDts, endPts, prependedContentDuration) {
        var ptsOffsetFromDts = startPts - startDts, decodeDuration = endDts - startDts, presentationDuration = endPts - startPts;
        return {
          start: {
            dts: baseMediaDecodeTime,
            pts: baseMediaDecodeTime + ptsOffsetFromDts
          },
          end: {
            dts: baseMediaDecodeTime + decodeDuration,
            pts: baseMediaDecodeTime + presentationDuration
          },
          prependedContentDuration,
          baseMediaDecodeTime
        };
      };
      _AudioSegmentStream = function AudioSegmentStream2(track, options) {
        var adtsFrames = [], sequenceNumber = 0, earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = Infinity;
        options = options || {};
        _AudioSegmentStream.prototype.init.call(this);
        this.push = function(data) {
          trackDecodeInfo.collectDtsInfo(track, data);
          if (track) {
            audioProperties.forEach(function(prop) {
              track[prop] = data[prop];
            });
          }
          adtsFrames.push(data);
        };
        this.setEarliestDts = function(earliestDts) {
          earliestAllowedDts = earliestDts;
        };
        this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          videoBaseMediaDecodeTime = baseMediaDecodeTime;
        };
        this.setAudioAppendStart = function(timestamp) {
          audioAppendStartTs = timestamp;
        };
        this.flush = function() {
          var frames, moof2, mdat2, boxes, frameDuration, segmentDuration, videoClockCyclesOfSilencePrefixed;
          if (adtsFrames.length === 0) {
            this.trigger("done", "AudioSegmentStream");
            return;
          }
          frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          videoClockCyclesOfSilencePrefixed = audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);
          track.samples = audioFrameUtils.generateSampleTable(frames);
          mdat2 = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));
          adtsFrames = [];
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          sequenceNumber++;
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          trackDecodeInfo.clearDtsInfo(track);
          frameDuration = Math.ceil(ONE_SECOND_IN_TS$3 * 1024 / track.samplerate);
          if (frames.length) {
            segmentDuration = frames.length * frameDuration;
            this.trigger("segmentTimingInfo", generateSegmentTimingInfo(clock.audioTsToVideoTs(track.baseMediaDecodeTime, track.samplerate), frames[0].dts, frames[0].pts, frames[0].dts + segmentDuration, frames[0].pts + segmentDuration, videoClockCyclesOfSilencePrefixed || 0));
            this.trigger("timingInfo", {
              start: frames[0].pts,
              end: frames[0].pts + segmentDuration
            });
          }
          this.trigger("data", {
            track,
            boxes
          });
          this.trigger("done", "AudioSegmentStream");
        };
        this.reset = function() {
          trackDecodeInfo.clearDtsInfo(track);
          adtsFrames = [];
          this.trigger("reset");
        };
      };
      _AudioSegmentStream.prototype = new stream();
      _VideoSegmentStream = function VideoSegmentStream2(track, options) {
        var sequenceNumber = 0, nalUnits = [], gopsToAlignWith = [], config, pps;
        options = options || {};
        _VideoSegmentStream.prototype.init.call(this);
        delete track.minPTS;
        this.gopCache_ = [];
        this.push = function(nalUnit) {
          trackDecodeInfo.collectDtsInfo(track, nalUnit);
          if (nalUnit.nalUnitType === "seq_parameter_set_rbsp" && !config) {
            config = nalUnit.config;
            track.sps = [nalUnit.data];
            videoProperties.forEach(function(prop) {
              track[prop] = config[prop];
            }, this);
          }
          if (nalUnit.nalUnitType === "pic_parameter_set_rbsp" && !pps) {
            pps = nalUnit.data;
            track.pps = [nalUnit.data];
          }
          nalUnits.push(nalUnit);
        };
        this.flush = function() {
          var frames, gopForFusion, gops, moof2, mdat2, boxes, prependedContentDuration = 0, firstGop, lastGop;
          while (nalUnits.length) {
            if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") {
              break;
            }
            nalUnits.shift();
          }
          if (nalUnits.length === 0) {
            this.resetStream_();
            this.trigger("done", "VideoSegmentStream");
            return;
          }
          frames = frameUtils.groupNalsIntoFrames(nalUnits);
          gops = frameUtils.groupFramesIntoGops(frames);
          if (!gops[0][0].keyFrame) {
            gopForFusion = this.getGopForFusion_(nalUnits[0], track);
            if (gopForFusion) {
              prependedContentDuration = gopForFusion.duration;
              gops.unshift(gopForFusion);
              gops.byteLength += gopForFusion.byteLength;
              gops.nalCount += gopForFusion.nalCount;
              gops.pts = gopForFusion.pts;
              gops.dts = gopForFusion.dts;
              gops.duration += gopForFusion.duration;
            } else {
              gops = frameUtils.extendFirstKeyFrame(gops);
            }
          }
          if (gopsToAlignWith.length) {
            var alignedGops;
            if (options.alignGopsAtEnd) {
              alignedGops = this.alignGopsAtEnd_(gops);
            } else {
              alignedGops = this.alignGopsAtStart_(gops);
            }
            if (!alignedGops) {
              this.gopCache_.unshift({
                gop: gops.pop(),
                pps: track.pps,
                sps: track.sps
              });
              this.gopCache_.length = Math.min(6, this.gopCache_.length);
              nalUnits = [];
              this.resetStream_();
              this.trigger("done", "VideoSegmentStream");
              return;
            }
            trackDecodeInfo.clearDtsInfo(track);
            gops = alignedGops;
          }
          trackDecodeInfo.collectDtsInfo(track, gops);
          track.samples = frameUtils.generateSampleTable(gops);
          mdat2 = mp4Generator.mdat(frameUtils.concatenateNalData(gops));
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          this.trigger("processedGopsInfo", gops.map(function(gop) {
            return {
              pts: gop.pts,
              dts: gop.dts,
              byteLength: gop.byteLength
            };
          }));
          firstGop = gops[0];
          lastGop = gops[gops.length - 1];
          this.trigger("segmentTimingInfo", generateSegmentTimingInfo(track.baseMediaDecodeTime, firstGop.dts, firstGop.pts, lastGop.dts + lastGop.duration, lastGop.pts + lastGop.duration, prependedContentDuration));
          this.trigger("timingInfo", {
            start: gops[0].pts,
            end: gops[gops.length - 1].pts + gops[gops.length - 1].duration
          });
          this.gopCache_.unshift({
            gop: gops.pop(),
            pps: track.pps,
            sps: track.sps
          });
          this.gopCache_.length = Math.min(6, this.gopCache_.length);
          nalUnits = [];
          this.trigger("baseMediaDecodeTime", track.baseMediaDecodeTime);
          this.trigger("timelineStartInfo", track.timelineStartInfo);
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          sequenceNumber++;
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          this.trigger("data", {
            track,
            boxes
          });
          this.resetStream_();
          this.trigger("done", "VideoSegmentStream");
        };
        this.reset = function() {
          this.resetStream_();
          nalUnits = [];
          this.gopCache_.length = 0;
          gopsToAlignWith.length = 0;
          this.trigger("reset");
        };
        this.resetStream_ = function() {
          trackDecodeInfo.clearDtsInfo(track);
          config = void 0;
          pps = void 0;
        };
        this.getGopForFusion_ = function(nalUnit) {
          var halfSecond = 45e3, allowableOverlap = 1e4, nearestDistance = Infinity, dtsDistance, nearestGopObj, currentGop, currentGopObj, i;
          for (i = 0; i < this.gopCache_.length; i++) {
            currentGopObj = this.gopCache_[i];
            currentGop = currentGopObj.gop;
            if (!(track.pps && arrayEquals(track.pps[0], currentGopObj.pps[0])) || !(track.sps && arrayEquals(track.sps[0], currentGopObj.sps[0]))) {
              continue;
            }
            if (currentGop.dts < track.timelineStartInfo.dts) {
              continue;
            }
            dtsDistance = nalUnit.dts - currentGop.dts - currentGop.duration;
            if (dtsDistance >= -allowableOverlap && dtsDistance <= halfSecond) {
              if (!nearestGopObj || nearestDistance > dtsDistance) {
                nearestGopObj = currentGopObj;
                nearestDistance = dtsDistance;
              }
            }
          }
          if (nearestGopObj) {
            return nearestGopObj.gop;
          }
          return null;
        };
        this.alignGopsAtStart_ = function(gops) {
          var alignIndex, gopIndex, align, gop, byteLength, nalCount, duration5, alignedGops;
          byteLength = gops.byteLength;
          nalCount = gops.nalCount;
          duration5 = gops.duration;
          alignIndex = gopIndex = 0;
          while (alignIndex < gopsToAlignWith.length && gopIndex < gops.length) {
            align = gopsToAlignWith[alignIndex];
            gop = gops[gopIndex];
            if (align.pts === gop.pts) {
              break;
            }
            if (gop.pts > align.pts) {
              alignIndex++;
              continue;
            }
            gopIndex++;
            byteLength -= gop.byteLength;
            nalCount -= gop.nalCount;
            duration5 -= gop.duration;
          }
          if (gopIndex === 0) {
            return gops;
          }
          if (gopIndex === gops.length) {
            return null;
          }
          alignedGops = gops.slice(gopIndex);
          alignedGops.byteLength = byteLength;
          alignedGops.duration = duration5;
          alignedGops.nalCount = nalCount;
          alignedGops.pts = alignedGops[0].pts;
          alignedGops.dts = alignedGops[0].dts;
          return alignedGops;
        };
        this.alignGopsAtEnd_ = function(gops) {
          var alignIndex, gopIndex, align, gop, alignEndIndex, matchFound;
          alignIndex = gopsToAlignWith.length - 1;
          gopIndex = gops.length - 1;
          alignEndIndex = null;
          matchFound = false;
          while (alignIndex >= 0 && gopIndex >= 0) {
            align = gopsToAlignWith[alignIndex];
            gop = gops[gopIndex];
            if (align.pts === gop.pts) {
              matchFound = true;
              break;
            }
            if (align.pts > gop.pts) {
              alignIndex--;
              continue;
            }
            if (alignIndex === gopsToAlignWith.length - 1) {
              alignEndIndex = gopIndex;
            }
            gopIndex--;
          }
          if (!matchFound && alignEndIndex === null) {
            return null;
          }
          var trimIndex;
          if (matchFound) {
            trimIndex = gopIndex;
          } else {
            trimIndex = alignEndIndex;
          }
          if (trimIndex === 0) {
            return gops;
          }
          var alignedGops = gops.slice(trimIndex);
          var metadata = alignedGops.reduce(function(total, gop2) {
            total.byteLength += gop2.byteLength;
            total.duration += gop2.duration;
            total.nalCount += gop2.nalCount;
            return total;
          }, {
            byteLength: 0,
            duration: 0,
            nalCount: 0
          });
          alignedGops.byteLength = metadata.byteLength;
          alignedGops.duration = metadata.duration;
          alignedGops.nalCount = metadata.nalCount;
          alignedGops.pts = alignedGops[0].pts;
          alignedGops.dts = alignedGops[0].dts;
          return alignedGops;
        };
        this.alignGopsWith = function(newGopsToAlignWith) {
          gopsToAlignWith = newGopsToAlignWith;
        };
      };
      _VideoSegmentStream.prototype = new stream();
      _CoalesceStream = function CoalesceStream(options, metadataStream2) {
        this.numberOfTracks = 0;
        this.metadataStream = metadataStream2;
        options = options || {};
        if (typeof options.remux !== "undefined") {
          this.remuxTracks = !!options.remux;
        } else {
          this.remuxTracks = true;
        }
        if (typeof options.keepOriginalTimestamps === "boolean") {
          this.keepOriginalTimestamps = options.keepOriginalTimestamps;
        } else {
          this.keepOriginalTimestamps = false;
        }
        this.pendingTracks = [];
        this.videoTrack = null;
        this.pendingBoxes = [];
        this.pendingCaptions = [];
        this.pendingMetadata = [];
        this.pendingBytes = 0;
        this.emittedTracks = 0;
        _CoalesceStream.prototype.init.call(this);
        this.push = function(output) {
          if (output.text) {
            return this.pendingCaptions.push(output);
          }
          if (output.frames) {
            return this.pendingMetadata.push(output);
          }
          this.pendingTracks.push(output.track);
          this.pendingBytes += output.boxes.byteLength;
          if (output.track.type === "video") {
            this.videoTrack = output.track;
            this.pendingBoxes.push(output.boxes);
          }
          if (output.track.type === "audio") {
            this.audioTrack = output.track;
            this.pendingBoxes.unshift(output.boxes);
          }
        };
      };
      _CoalesceStream.prototype = new stream();
      _CoalesceStream.prototype.flush = function(flushSource) {
        var offset = 0, event = {
          captions: [],
          captionStreams: {},
          metadata: [],
          info: {}
        }, caption, id3, initSegment, timelineStartPts = 0, i;
        if (this.pendingTracks.length < this.numberOfTracks) {
          if (flushSource !== "VideoSegmentStream" && flushSource !== "AudioSegmentStream") {
            return;
          } else if (this.remuxTracks) {
            return;
          } else if (this.pendingTracks.length === 0) {
            this.emittedTracks++;
            if (this.emittedTracks >= this.numberOfTracks) {
              this.trigger("done");
              this.emittedTracks = 0;
            }
            return;
          }
        }
        if (this.videoTrack) {
          timelineStartPts = this.videoTrack.timelineStartInfo.pts;
          videoProperties.forEach(function(prop) {
            event.info[prop] = this.videoTrack[prop];
          }, this);
        } else if (this.audioTrack) {
          timelineStartPts = this.audioTrack.timelineStartInfo.pts;
          audioProperties.forEach(function(prop) {
            event.info[prop] = this.audioTrack[prop];
          }, this);
        }
        if (this.videoTrack || this.audioTrack) {
          if (this.pendingTracks.length === 1) {
            event.type = this.pendingTracks[0].type;
          } else {
            event.type = "combined";
          }
          this.emittedTracks += this.pendingTracks.length;
          initSegment = mp4Generator.initSegment(this.pendingTracks);
          event.initSegment = new Uint8Array(initSegment.byteLength);
          event.initSegment.set(initSegment);
          event.data = new Uint8Array(this.pendingBytes);
          for (i = 0; i < this.pendingBoxes.length; i++) {
            event.data.set(this.pendingBoxes[i], offset);
            offset += this.pendingBoxes[i].byteLength;
          }
          for (i = 0; i < this.pendingCaptions.length; i++) {
            caption = this.pendingCaptions[i];
            caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, this.keepOriginalTimestamps);
            caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, this.keepOriginalTimestamps);
            event.captionStreams[caption.stream] = true;
            event.captions.push(caption);
          }
          for (i = 0; i < this.pendingMetadata.length; i++) {
            id3 = this.pendingMetadata[i];
            id3.cueTime = clock.metadataTsToSeconds(id3.pts, timelineStartPts, this.keepOriginalTimestamps);
            event.metadata.push(id3);
          }
          event.metadata.dispatchType = this.metadataStream.dispatchType;
          this.pendingTracks.length = 0;
          this.videoTrack = null;
          this.pendingBoxes.length = 0;
          this.pendingCaptions.length = 0;
          this.pendingBytes = 0;
          this.pendingMetadata.length = 0;
          this.trigger("data", event);
          for (i = 0; i < event.captions.length; i++) {
            caption = event.captions[i];
            this.trigger("caption", caption);
          }
          for (i = 0; i < event.metadata.length; i++) {
            id3 = event.metadata[i];
            this.trigger("id3Frame", id3);
          }
        }
        if (this.emittedTracks >= this.numberOfTracks) {
          this.trigger("done");
          this.emittedTracks = 0;
        }
      };
      _CoalesceStream.prototype.setRemux = function(val) {
        this.remuxTracks = val;
      };
      _Transmuxer = function Transmuxer2(options) {
        var self3 = this, hasFlushed = true, videoTrack, audioTrack;
        _Transmuxer.prototype.init.call(this);
        options = options || {};
        this.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
        this.transmuxPipeline_ = {};
        this.setupAacPipeline = function() {
          var pipeline = {};
          this.transmuxPipeline_ = pipeline;
          pipeline.type = "aac";
          pipeline.metadataStream = new m2ts_1.MetadataStream();
          pipeline.aacStream = new aac();
          pipeline.audioTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("audio");
          pipeline.timedMetadataTimestampRolloverStream = new m2ts_1.TimestampRolloverStream("timed-metadata");
          pipeline.adtsStream = new adts();
          pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
          pipeline.headOfPipeline = pipeline.aacStream;
          pipeline.aacStream.pipe(pipeline.audioTimestampRolloverStream).pipe(pipeline.adtsStream);
          pipeline.aacStream.pipe(pipeline.timedMetadataTimestampRolloverStream).pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);
          pipeline.metadataStream.on("timestamp", function(frame) {
            pipeline.aacStream.setTimestamp(frame.timeStamp);
          });
          pipeline.aacStream.on("data", function(data) {
            if (data.type !== "timed-metadata" && data.type !== "audio" || pipeline.audioSegmentStream) {
              return;
            }
            audioTrack = audioTrack || {
              timelineStartInfo: {
                baseMediaDecodeTime: self3.baseMediaDecodeTime
              },
              codec: "adts",
              type: "audio"
            };
            pipeline.coalesceStream.numberOfTracks++;
            pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);
            pipeline.audioSegmentStream.on("timingInfo", self3.trigger.bind(self3, "audioTimingInfo"));
            pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
            self3.trigger("trackinfo", {
              hasAudio: !!audioTrack,
              hasVideo: !!videoTrack
            });
          });
          pipeline.coalesceStream.on("data", this.trigger.bind(this, "data"));
          pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
        };
        this.setupTsPipeline = function() {
          var pipeline = {};
          this.transmuxPipeline_ = pipeline;
          pipeline.type = "ts";
          pipeline.metadataStream = new m2ts_1.MetadataStream();
          pipeline.packetStream = new m2ts_1.TransportPacketStream();
          pipeline.parseStream = new m2ts_1.TransportParseStream();
          pipeline.elementaryStream = new m2ts_1.ElementaryStream();
          pipeline.timestampRolloverStream = new m2ts_1.TimestampRolloverStream();
          pipeline.adtsStream = new adts();
          pipeline.h264Stream = new H264Stream();
          pipeline.captionStream = new m2ts_1.CaptionStream();
          pipeline.coalesceStream = new _CoalesceStream(options, pipeline.metadataStream);
          pipeline.headOfPipeline = pipeline.packetStream;
          pipeline.packetStream.pipe(pipeline.parseStream).pipe(pipeline.elementaryStream).pipe(pipeline.timestampRolloverStream);
          pipeline.timestampRolloverStream.pipe(pipeline.h264Stream);
          pipeline.timestampRolloverStream.pipe(pipeline.adtsStream);
          pipeline.timestampRolloverStream.pipe(pipeline.metadataStream).pipe(pipeline.coalesceStream);
          pipeline.h264Stream.pipe(pipeline.captionStream).pipe(pipeline.coalesceStream);
          pipeline.elementaryStream.on("data", function(data) {
            var i;
            if (data.type === "metadata") {
              i = data.tracks.length;
              while (i--) {
                if (!videoTrack && data.tracks[i].type === "video") {
                  videoTrack = data.tracks[i];
                  videoTrack.timelineStartInfo.baseMediaDecodeTime = self3.baseMediaDecodeTime;
                } else if (!audioTrack && data.tracks[i].type === "audio") {
                  audioTrack = data.tracks[i];
                  audioTrack.timelineStartInfo.baseMediaDecodeTime = self3.baseMediaDecodeTime;
                }
              }
              if (videoTrack && !pipeline.videoSegmentStream) {
                pipeline.coalesceStream.numberOfTracks++;
                pipeline.videoSegmentStream = new _VideoSegmentStream(videoTrack, options);
                pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
                  if (audioTrack && !options.keepOriginalTimestamps) {
                    audioTrack.timelineStartInfo = timelineStartInfo;
                    pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - self3.baseMediaDecodeTime);
                  }
                });
                pipeline.videoSegmentStream.on("processedGopsInfo", self3.trigger.bind(self3, "gopInfo"));
                pipeline.videoSegmentStream.on("segmentTimingInfo", self3.trigger.bind(self3, "videoSegmentTimingInfo"));
                pipeline.videoSegmentStream.on("baseMediaDecodeTime", function(baseMediaDecodeTime) {
                  if (audioTrack) {
                    pipeline.audioSegmentStream.setVideoBaseMediaDecodeTime(baseMediaDecodeTime);
                  }
                });
                pipeline.videoSegmentStream.on("timingInfo", self3.trigger.bind(self3, "videoTimingInfo"));
                pipeline.h264Stream.pipe(pipeline.videoSegmentStream).pipe(pipeline.coalesceStream);
              }
              if (audioTrack && !pipeline.audioSegmentStream) {
                pipeline.coalesceStream.numberOfTracks++;
                pipeline.audioSegmentStream = new _AudioSegmentStream(audioTrack, options);
                pipeline.audioSegmentStream.on("timingInfo", self3.trigger.bind(self3, "audioTimingInfo"));
                pipeline.audioSegmentStream.on("segmentTimingInfo", self3.trigger.bind(self3, "audioSegmentTimingInfo"));
                pipeline.adtsStream.pipe(pipeline.audioSegmentStream).pipe(pipeline.coalesceStream);
              }
              self3.trigger("trackinfo", {
                hasAudio: !!audioTrack,
                hasVideo: !!videoTrack
              });
            }
          });
          pipeline.coalesceStream.on("data", this.trigger.bind(this, "data"));
          pipeline.coalesceStream.on("id3Frame", function(id3Frame) {
            id3Frame.dispatchType = pipeline.metadataStream.dispatchType;
            self3.trigger("id3Frame", id3Frame);
          });
          pipeline.coalesceStream.on("caption", this.trigger.bind(this, "caption"));
          pipeline.coalesceStream.on("done", this.trigger.bind(this, "done"));
        };
        this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          var pipeline = this.transmuxPipeline_;
          if (!options.keepOriginalTimestamps) {
            this.baseMediaDecodeTime = baseMediaDecodeTime;
          }
          if (audioTrack) {
            audioTrack.timelineStartInfo.dts = void 0;
            audioTrack.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(audioTrack);
            if (pipeline.audioTimestampRolloverStream) {
              pipeline.audioTimestampRolloverStream.discontinuity();
            }
          }
          if (videoTrack) {
            if (pipeline.videoSegmentStream) {
              pipeline.videoSegmentStream.gopCache_ = [];
            }
            videoTrack.timelineStartInfo.dts = void 0;
            videoTrack.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(videoTrack);
            pipeline.captionStream.reset();
          }
          if (pipeline.timestampRolloverStream) {
            pipeline.timestampRolloverStream.discontinuity();
          }
        };
        this.setAudioAppendStart = function(timestamp) {
          if (audioTrack) {
            this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(timestamp);
          }
        };
        this.setRemux = function(val) {
          var pipeline = this.transmuxPipeline_;
          options.remux = val;
          if (pipeline && pipeline.coalesceStream) {
            pipeline.coalesceStream.setRemux(val);
          }
        };
        this.alignGopsWith = function(gopsToAlignWith) {
          if (videoTrack && this.transmuxPipeline_.videoSegmentStream) {
            this.transmuxPipeline_.videoSegmentStream.alignGopsWith(gopsToAlignWith);
          }
        };
        this.push = function(data) {
          if (hasFlushed) {
            var isAac = isLikelyAacData$1(data);
            if (isAac && this.transmuxPipeline_.type !== "aac") {
              this.setupAacPipeline();
            } else if (!isAac && this.transmuxPipeline_.type !== "ts") {
              this.setupTsPipeline();
            }
            hasFlushed = false;
          }
          this.transmuxPipeline_.headOfPipeline.push(data);
        };
        this.flush = function() {
          hasFlushed = true;
          this.transmuxPipeline_.headOfPipeline.flush();
        };
        this.endTimeline = function() {
          this.transmuxPipeline_.headOfPipeline.endTimeline();
        };
        this.reset = function() {
          if (this.transmuxPipeline_.headOfPipeline) {
            this.transmuxPipeline_.headOfPipeline.reset();
          }
        };
        this.resetCaptions = function() {
          if (this.transmuxPipeline_.captionStream) {
            this.transmuxPipeline_.captionStream.reset();
          }
        };
      };
      _Transmuxer.prototype = new stream();
      var transmuxer = {
        Transmuxer: _Transmuxer,
        VideoSegmentStream: _VideoSegmentStream,
        AudioSegmentStream: _AudioSegmentStream,
        AUDIO_PROPERTIES: audioProperties,
        VIDEO_PROPERTIES: videoProperties,
        generateSegmentTimingInfo
      };
      var codecs = {
        Adts: adts,
        h264
      };
      var ONE_SECOND_IN_TS$4 = clock.ONE_SECOND_IN_TS;
      var AudioSegmentStream = function AudioSegmentStream2(track, options) {
        var adtsFrames = [], sequenceNumber = 0, earliestAllowedDts = 0, audioAppendStartTs = 0, videoBaseMediaDecodeTime = Infinity, segmentStartPts = null, segmentEndPts = null;
        options = options || {};
        AudioSegmentStream2.prototype.init.call(this);
        this.push = function(data) {
          trackDecodeInfo.collectDtsInfo(track, data);
          if (track) {
            audioProperties.forEach(function(prop) {
              track[prop] = data[prop];
            });
          }
          adtsFrames.push(data);
        };
        this.setEarliestDts = function(earliestDts) {
          earliestAllowedDts = earliestDts;
        };
        this.setVideoBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          videoBaseMediaDecodeTime = baseMediaDecodeTime;
        };
        this.setAudioAppendStart = function(timestamp) {
          audioAppendStartTs = timestamp;
        };
        this.processFrames_ = function() {
          var frames, moof2, mdat2, boxes, timingInfo;
          if (adtsFrames.length === 0) {
            return;
          }
          frames = audioFrameUtils.trimAdtsFramesByEarliestDts(adtsFrames, track, earliestAllowedDts);
          if (frames.length === 0) {
            return;
          }
          track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
          audioFrameUtils.prefixWithSilence(track, frames, audioAppendStartTs, videoBaseMediaDecodeTime);
          track.samples = audioFrameUtils.generateSampleTable(frames);
          mdat2 = mp4Generator.mdat(audioFrameUtils.concatenateFrameData(frames));
          adtsFrames = [];
          moof2 = mp4Generator.moof(sequenceNumber, [track]);
          sequenceNumber++;
          track.initSegment = mp4Generator.initSegment([track]);
          boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
          boxes.set(moof2);
          boxes.set(mdat2, moof2.byteLength);
          trackDecodeInfo.clearDtsInfo(track);
          if (segmentStartPts === null) {
            segmentEndPts = segmentStartPts = frames[0].pts;
          }
          segmentEndPts += frames.length * (ONE_SECOND_IN_TS$4 * 1024 / track.samplerate);
          timingInfo = {
            start: segmentStartPts
          };
          this.trigger("timingInfo", timingInfo);
          this.trigger("data", {
            track,
            boxes
          });
        };
        this.flush = function() {
          this.processFrames_();
          this.trigger("timingInfo", {
            start: segmentStartPts,
            end: segmentEndPts
          });
          this.resetTiming_();
          this.trigger("done", "AudioSegmentStream");
        };
        this.partialFlush = function() {
          this.processFrames_();
          this.trigger("partialdone", "AudioSegmentStream");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline", "AudioSegmentStream");
        };
        this.resetTiming_ = function() {
          trackDecodeInfo.clearDtsInfo(track);
          segmentStartPts = null;
          segmentEndPts = null;
        };
        this.reset = function() {
          this.resetTiming_();
          adtsFrames = [];
          this.trigger("reset");
        };
      };
      AudioSegmentStream.prototype = new stream();
      var audioSegmentStream = AudioSegmentStream;
      var VideoSegmentStream = function VideoSegmentStream2(track, options) {
        var sequenceNumber = 0, nalUnits = [], frameCache = [], config, pps, segmentStartPts = null, segmentEndPts = null, gops, ensureNextFrameIsKeyFrame = true;
        options = options || {};
        VideoSegmentStream2.prototype.init.call(this);
        this.push = function(nalUnit) {
          trackDecodeInfo.collectDtsInfo(track, nalUnit);
          if (typeof track.timelineStartInfo.dts === "undefined") {
            track.timelineStartInfo.dts = nalUnit.dts;
          }
          if (nalUnit.nalUnitType === "seq_parameter_set_rbsp" && !config) {
            config = nalUnit.config;
            track.sps = [nalUnit.data];
            videoProperties.forEach(function(prop) {
              track[prop] = config[prop];
            }, this);
          }
          if (nalUnit.nalUnitType === "pic_parameter_set_rbsp" && !pps) {
            pps = nalUnit.data;
            track.pps = [nalUnit.data];
          }
          nalUnits.push(nalUnit);
        };
        this.processNals_ = function(cacheLastFrame) {
          var i;
          nalUnits = frameCache.concat(nalUnits);
          while (nalUnits.length) {
            if (nalUnits[0].nalUnitType === "access_unit_delimiter_rbsp") {
              break;
            }
            nalUnits.shift();
          }
          if (nalUnits.length === 0) {
            return;
          }
          var frames = frameUtils.groupNalsIntoFrames(nalUnits);
          if (!frames.length) {
            return;
          }
          frameCache = frames[frames.length - 1];
          if (cacheLastFrame) {
            frames.pop();
            frames.duration -= frameCache.duration;
            frames.nalCount -= frameCache.length;
            frames.byteLength -= frameCache.byteLength;
          }
          if (!frames.length) {
            nalUnits = [];
            return;
          }
          this.trigger("timelineStartInfo", track.timelineStartInfo);
          if (ensureNextFrameIsKeyFrame) {
            gops = frameUtils.groupFramesIntoGops(frames);
            if (!gops[0][0].keyFrame) {
              gops = frameUtils.extendFirstKeyFrame(gops);
              if (!gops[0][0].keyFrame) {
                nalUnits = [].concat.apply([], frames).concat(frameCache);
                frameCache = [];
                return;
              }
              frames = [].concat.apply([], gops);
              frames.duration = gops.duration;
            }
            ensureNextFrameIsKeyFrame = false;
          }
          if (segmentStartPts === null) {
            segmentStartPts = frames[0].pts;
            segmentEndPts = segmentStartPts;
          }
          segmentEndPts += frames.duration;
          this.trigger("timingInfo", {
            start: segmentStartPts,
            end: segmentEndPts
          });
          for (i = 0; i < frames.length; i++) {
            var frame = frames[i];
            track.samples = frameUtils.generateSampleTableForFrame(frame);
            var mdat2 = mp4Generator.mdat(frameUtils.concatenateNalDataForFrame(frame));
            trackDecodeInfo.clearDtsInfo(track);
            trackDecodeInfo.collectDtsInfo(track, frame);
            track.baseMediaDecodeTime = trackDecodeInfo.calculateTrackBaseMediaDecodeTime(track, options.keepOriginalTimestamps);
            var moof2 = mp4Generator.moof(sequenceNumber, [track]);
            sequenceNumber++;
            track.initSegment = mp4Generator.initSegment([track]);
            var boxes = new Uint8Array(moof2.byteLength + mdat2.byteLength);
            boxes.set(moof2);
            boxes.set(mdat2, moof2.byteLength);
            this.trigger("data", {
              track,
              boxes,
              sequence: sequenceNumber,
              videoFrameDts: frame.dts,
              videoFramePts: frame.pts
            });
          }
          nalUnits = [];
        };
        this.resetTimingAndConfig_ = function() {
          config = void 0;
          pps = void 0;
          segmentStartPts = null;
          segmentEndPts = null;
        };
        this.partialFlush = function() {
          this.processNals_(true);
          this.trigger("partialdone", "VideoSegmentStream");
        };
        this.flush = function() {
          this.processNals_(false);
          this.resetTimingAndConfig_();
          this.trigger("done", "VideoSegmentStream");
        };
        this.endTimeline = function() {
          this.flush();
          this.trigger("endedtimeline", "VideoSegmentStream");
        };
        this.reset = function() {
          this.resetTimingAndConfig_();
          frameCache = [];
          nalUnits = [];
          ensureNextFrameIsKeyFrame = true;
          this.trigger("reset");
        };
      };
      VideoSegmentStream.prototype = new stream();
      var videoSegmentStream = VideoSegmentStream;
      var isLikelyAacData$2 = utils2.isLikelyAacData;
      var createPipeline = function createPipeline2(object) {
        object.prototype = new stream();
        object.prototype.init.call(object);
        return object;
      };
      var tsPipeline = function tsPipeline2(options) {
        var pipeline = {
          type: "ts",
          tracks: {
            audio: null,
            video: null
          },
          packet: new m2ts_1.TransportPacketStream(),
          parse: new m2ts_1.TransportParseStream(),
          elementary: new m2ts_1.ElementaryStream(),
          timestampRollover: new m2ts_1.TimestampRolloverStream(),
          adts: new codecs.Adts(),
          h264: new codecs.h264.H264Stream(),
          captionStream: new m2ts_1.CaptionStream(),
          metadataStream: new m2ts_1.MetadataStream()
        };
        pipeline.headOfPipeline = pipeline.packet;
        pipeline.packet.pipe(pipeline.parse).pipe(pipeline.elementary).pipe(pipeline.timestampRollover);
        pipeline.timestampRollover.pipe(pipeline.h264);
        pipeline.h264.pipe(pipeline.captionStream);
        pipeline.timestampRollover.pipe(pipeline.metadataStream);
        pipeline.timestampRollover.pipe(pipeline.adts);
        pipeline.elementary.on("data", function(data) {
          if (data.type !== "metadata") {
            return;
          }
          for (var i = 0; i < data.tracks.length; i++) {
            if (!pipeline.tracks[data.tracks[i].type]) {
              pipeline.tracks[data.tracks[i].type] = data.tracks[i];
              pipeline.tracks[data.tracks[i].type].timelineStartInfo.baseMediaDecodeTime = options.baseMediaDecodeTime;
            }
          }
          if (pipeline.tracks.video && !pipeline.videoSegmentStream) {
            pipeline.videoSegmentStream = new videoSegmentStream(pipeline.tracks.video, options);
            pipeline.videoSegmentStream.on("timelineStartInfo", function(timelineStartInfo) {
              if (pipeline.tracks.audio && !options.keepOriginalTimestamps) {
                pipeline.audioSegmentStream.setEarliestDts(timelineStartInfo.dts - options.baseMediaDecodeTime);
              }
            });
            pipeline.videoSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "videoTimingInfo"));
            pipeline.videoSegmentStream.on("data", function(data2) {
              pipeline.trigger("data", {
                type: "video",
                data: data2
              });
            });
            pipeline.videoSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
            pipeline.videoSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
            pipeline.videoSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
            pipeline.h264.pipe(pipeline.videoSegmentStream);
          }
          if (pipeline.tracks.audio && !pipeline.audioSegmentStream) {
            pipeline.audioSegmentStream = new audioSegmentStream(pipeline.tracks.audio, options);
            pipeline.audioSegmentStream.on("data", function(data2) {
              pipeline.trigger("data", {
                type: "audio",
                data: data2
              });
            });
            pipeline.audioSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
            pipeline.audioSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
            pipeline.audioSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
            pipeline.audioSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "audioTimingInfo"));
            pipeline.adts.pipe(pipeline.audioSegmentStream);
          }
          pipeline.trigger("trackinfo", {
            hasAudio: !!pipeline.tracks.audio,
            hasVideo: !!pipeline.tracks.video
          });
        });
        pipeline.captionStream.on("data", function(caption) {
          var timelineStartPts;
          if (pipeline.tracks.video) {
            timelineStartPts = pipeline.tracks.video.timelineStartInfo.pts || 0;
          } else {
            timelineStartPts = 0;
          }
          caption.startTime = clock.metadataTsToSeconds(caption.startPts, timelineStartPts, options.keepOriginalTimestamps);
          caption.endTime = clock.metadataTsToSeconds(caption.endPts, timelineStartPts, options.keepOriginalTimestamps);
          pipeline.trigger("caption", caption);
        });
        pipeline = createPipeline(pipeline);
        pipeline.metadataStream.on("data", pipeline.trigger.bind(pipeline, "id3Frame"));
        return pipeline;
      };
      var aacPipeline = function aacPipeline2(options) {
        var pipeline = {
          type: "aac",
          tracks: {
            audio: null
          },
          metadataStream: new m2ts_1.MetadataStream(),
          aacStream: new aac(),
          audioRollover: new m2ts_1.TimestampRolloverStream("audio"),
          timedMetadataRollover: new m2ts_1.TimestampRolloverStream("timed-metadata"),
          adtsStream: new adts(true)
        };
        pipeline.headOfPipeline = pipeline.aacStream;
        pipeline.aacStream.pipe(pipeline.audioRollover).pipe(pipeline.adtsStream);
        pipeline.aacStream.pipe(pipeline.timedMetadataRollover).pipe(pipeline.metadataStream);
        pipeline.metadataStream.on("timestamp", function(frame) {
          pipeline.aacStream.setTimestamp(frame.timeStamp);
        });
        pipeline.aacStream.on("data", function(data) {
          if (data.type !== "timed-metadata" && data.type !== "audio" || pipeline.audioSegmentStream) {
            return;
          }
          pipeline.tracks.audio = pipeline.tracks.audio || {
            timelineStartInfo: {
              baseMediaDecodeTime: options.baseMediaDecodeTime
            },
            codec: "adts",
            type: "audio"
          };
          pipeline.audioSegmentStream = new audioSegmentStream(pipeline.tracks.audio, options);
          pipeline.audioSegmentStream.on("data", function(data2) {
            pipeline.trigger("data", {
              type: "audio",
              data: data2
            });
          });
          pipeline.audioSegmentStream.on("partialdone", pipeline.trigger.bind(pipeline, "partialdone"));
          pipeline.audioSegmentStream.on("done", pipeline.trigger.bind(pipeline, "done"));
          pipeline.audioSegmentStream.on("endedtimeline", pipeline.trigger.bind(pipeline, "endedtimeline"));
          pipeline.audioSegmentStream.on("timingInfo", pipeline.trigger.bind(pipeline, "audioTimingInfo"));
          pipeline.adtsStream.pipe(pipeline.audioSegmentStream);
          pipeline.trigger("trackinfo", {
            hasAudio: !!pipeline.tracks.audio,
            hasVideo: !!pipeline.tracks.video
          });
        });
        pipeline = createPipeline(pipeline);
        pipeline.metadataStream.on("data", pipeline.trigger.bind(pipeline, "id3Frame"));
        return pipeline;
      };
      var setupPipelineListeners = function setupPipelineListeners2(pipeline, transmuxer2) {
        pipeline.on("data", transmuxer2.trigger.bind(transmuxer2, "data"));
        pipeline.on("done", transmuxer2.trigger.bind(transmuxer2, "done"));
        pipeline.on("partialdone", transmuxer2.trigger.bind(transmuxer2, "partialdone"));
        pipeline.on("endedtimeline", transmuxer2.trigger.bind(transmuxer2, "endedtimeline"));
        pipeline.on("audioTimingInfo", transmuxer2.trigger.bind(transmuxer2, "audioTimingInfo"));
        pipeline.on("videoTimingInfo", transmuxer2.trigger.bind(transmuxer2, "videoTimingInfo"));
        pipeline.on("trackinfo", transmuxer2.trigger.bind(transmuxer2, "trackinfo"));
        pipeline.on("id3Frame", function(event) {
          event.dispatchType = pipeline.metadataStream.dispatchType;
          event.cueTime = clock.videoTsToSeconds(event.pts);
          transmuxer2.trigger("id3Frame", event);
        });
        pipeline.on("caption", function(event) {
          transmuxer2.trigger("caption", event);
        });
      };
      var Transmuxer = function Transmuxer2(options) {
        var pipeline = null, hasFlushed = true;
        options = options || {};
        Transmuxer2.prototype.init.call(this);
        options.baseMediaDecodeTime = options.baseMediaDecodeTime || 0;
        this.push = function(bytes) {
          if (hasFlushed) {
            var isAac = isLikelyAacData$2(bytes);
            if (isAac && (!pipeline || pipeline.type !== "aac")) {
              pipeline = aacPipeline(options);
              setupPipelineListeners(pipeline, this);
            } else if (!isAac && (!pipeline || pipeline.type !== "ts")) {
              pipeline = tsPipeline(options);
              setupPipelineListeners(pipeline, this);
            }
            hasFlushed = false;
          }
          pipeline.headOfPipeline.push(bytes);
        };
        this.flush = function() {
          if (!pipeline) {
            return;
          }
          hasFlushed = true;
          pipeline.headOfPipeline.flush();
        };
        this.partialFlush = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.partialFlush();
        };
        this.endTimeline = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.endTimeline();
        };
        this.reset = function() {
          if (!pipeline) {
            return;
          }
          pipeline.headOfPipeline.reset();
        };
        this.setBaseMediaDecodeTime = function(baseMediaDecodeTime) {
          if (!options.keepOriginalTimestamps) {
            options.baseMediaDecodeTime = baseMediaDecodeTime;
          }
          if (!pipeline) {
            return;
          }
          if (pipeline.tracks.audio) {
            pipeline.tracks.audio.timelineStartInfo.dts = void 0;
            pipeline.tracks.audio.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(pipeline.tracks.audio);
            if (pipeline.audioRollover) {
              pipeline.audioRollover.discontinuity();
            }
          }
          if (pipeline.tracks.video) {
            if (pipeline.videoSegmentStream) {
              pipeline.videoSegmentStream.gopCache_ = [];
            }
            pipeline.tracks.video.timelineStartInfo.dts = void 0;
            pipeline.tracks.video.timelineStartInfo.pts = void 0;
            trackDecodeInfo.clearDtsInfo(pipeline.tracks.video);
          }
          if (pipeline.timestampRollover) {
            pipeline.timestampRollover.discontinuity();
          }
        };
        this.setRemux = function(val) {
          options.remux = val;
          if (pipeline && pipeline.coalesceStream) {
            pipeline.coalesceStream.setRemux(val);
          }
        };
        this.setAudioAppendStart = function(audioAppendStart) {
          if (!pipeline || !pipeline.tracks.audio || !pipeline.audioSegmentStream) {
            return;
          }
          pipeline.audioSegmentStream.setAudioAppendStart(audioAppendStart);
        };
        this.alignGopsWith = function(gopsToAlignWith) {
          return;
        };
      };
      Transmuxer.prototype = new stream();
      var transmuxer$1 = Transmuxer;
      var toUnsigned = function toUnsigned2(value) {
        return value >>> 0;
      };
      var toHexString = function toHexString2(value) {
        return ("00" + value.toString(16)).slice(-2);
      };
      var bin = {
        toUnsigned,
        toHexString
      };
      var parseType$1 = function parseType2(buffer) {
        var result = "";
        result += String.fromCharCode(buffer[0]);
        result += String.fromCharCode(buffer[1]);
        result += String.fromCharCode(buffer[2]);
        result += String.fromCharCode(buffer[3]);
        return result;
      };
      var parseType_1 = parseType$1;
      var toUnsigned$1 = bin.toUnsigned;
      var findBox = function findBox2(data, path) {
        var results = [], i, size, type4, end, subresults;
        if (!path.length) {
          return null;
        }
        for (i = 0; i < data.byteLength; ) {
          size = toUnsigned$1(data[i] << 24 | data[i + 1] << 16 | data[i + 2] << 8 | data[i + 3]);
          type4 = parseType_1(data.subarray(i + 4, i + 8));
          end = size > 1 ? i + size : data.byteLength;
          if (type4 === path[0]) {
            if (path.length === 1) {
              results.push(data.subarray(i + 8, end));
            } else {
              subresults = findBox2(data.subarray(i + 8, end), path.slice(1));
              if (subresults.length) {
                results = results.concat(subresults);
              }
            }
          }
          i = end;
        }
        return results;
      };
      var findBox_1 = findBox;
      var toUnsigned$2 = bin.toUnsigned;
      var tfdt = function tfdt2(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          baseMediaDecodeTime: toUnsigned$2(data[4] << 24 | data[5] << 16 | data[6] << 8 | data[7])
        };
        if (result.version === 1) {
          result.baseMediaDecodeTime *= Math.pow(2, 32);
          result.baseMediaDecodeTime += toUnsigned$2(data[8] << 24 | data[9] << 16 | data[10] << 8 | data[11]);
        }
        return result;
      };
      var parseTfdt = tfdt;
      var parseSampleFlags = function parseSampleFlags2(flags) {
        return {
          isLeading: (flags[0] & 12) >>> 2,
          dependsOn: flags[0] & 3,
          isDependedOn: (flags[1] & 192) >>> 6,
          hasRedundancy: (flags[1] & 48) >>> 4,
          paddingValue: (flags[1] & 14) >>> 1,
          isNonSyncSample: flags[1] & 1,
          degradationPriority: flags[2] << 8 | flags[3]
        };
      };
      var parseSampleFlags_1 = parseSampleFlags;
      var trun$1 = function trun2(data) {
        var result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          samples: []
        }, view = new DataView(data.buffer, data.byteOffset, data.byteLength), dataOffsetPresent = result.flags[2] & 1, firstSampleFlagsPresent = result.flags[2] & 4, sampleDurationPresent = result.flags[1] & 1, sampleSizePresent = result.flags[1] & 2, sampleFlagsPresent = result.flags[1] & 4, sampleCompositionTimeOffsetPresent = result.flags[1] & 8, sampleCount = view.getUint32(4), offset = 8, sample;
        if (dataOffsetPresent) {
          result.dataOffset = view.getInt32(offset);
          offset += 4;
        }
        if (firstSampleFlagsPresent && sampleCount) {
          sample = {
            flags: parseSampleFlags_1(data.subarray(offset, offset + 4))
          };
          offset += 4;
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            if (result.version === 1) {
              sample.compositionTimeOffset = view.getInt32(offset);
            } else {
              sample.compositionTimeOffset = view.getUint32(offset);
            }
            offset += 4;
          }
          result.samples.push(sample);
          sampleCount--;
        }
        while (sampleCount--) {
          sample = {};
          if (sampleDurationPresent) {
            sample.duration = view.getUint32(offset);
            offset += 4;
          }
          if (sampleSizePresent) {
            sample.size = view.getUint32(offset);
            offset += 4;
          }
          if (sampleFlagsPresent) {
            sample.flags = parseSampleFlags_1(data.subarray(offset, offset + 4));
            offset += 4;
          }
          if (sampleCompositionTimeOffsetPresent) {
            if (result.version === 1) {
              sample.compositionTimeOffset = view.getInt32(offset);
            } else {
              sample.compositionTimeOffset = view.getUint32(offset);
            }
            offset += 4;
          }
          result.samples.push(sample);
        }
        return result;
      };
      var parseTrun = trun$1;
      var tfhd = function tfhd2(data) {
        var view = new DataView(data.buffer, data.byteOffset, data.byteLength), result = {
          version: data[0],
          flags: new Uint8Array(data.subarray(1, 4)),
          trackId: view.getUint32(4)
        }, baseDataOffsetPresent = result.flags[2] & 1, sampleDescriptionIndexPresent = result.flags[2] & 2, defaultSampleDurationPresent = result.flags[2] & 8, defaultSampleSizePresent = result.flags[2] & 16, defaultSampleFlagsPresent = result.flags[2] & 32, durationIsEmpty = result.flags[0] & 65536, defaultBaseIsMoof = result.flags[0] & 131072, i;
        i = 8;
        if (baseDataOffsetPresent) {
          i += 4;
          result.baseDataOffset = view.getUint32(12);
          i += 4;
        }
        if (sampleDescriptionIndexPresent) {
          result.sampleDescriptionIndex = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleDurationPresent) {
          result.defaultSampleDuration = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleSizePresent) {
          result.defaultSampleSize = view.getUint32(i);
          i += 4;
        }
        if (defaultSampleFlagsPresent) {
          result.defaultSampleFlags = view.getUint32(i);
        }
        if (durationIsEmpty) {
          result.durationIsEmpty = true;
        }
        if (!baseDataOffsetPresent && defaultBaseIsMoof) {
          result.baseDataOffsetIsMoof = true;
        }
        return result;
      };
      var parseTfhd = tfhd;
      var discardEmulationPreventionBytes$1 = captionPacketParser.discardEmulationPreventionBytes;
      var CaptionStream$1 = captionStream.CaptionStream;
      var mapToSample = function mapToSample2(offset, samples) {
        var approximateOffset = offset;
        for (var i = 0; i < samples.length; i++) {
          var sample = samples[i];
          if (approximateOffset < sample.size) {
            return sample;
          }
          approximateOffset -= sample.size;
        }
        return null;
      };
      var findSeiNals = function findSeiNals2(avcStream, samples, trackId) {
        var avcView = new DataView(avcStream.buffer, avcStream.byteOffset, avcStream.byteLength), result = [], seiNal, i, length, lastMatchedSample;
        for (i = 0; i + 4 < avcStream.length; i += length) {
          length = avcView.getUint32(i);
          i += 4;
          if (length <= 0) {
            continue;
          }
          switch (avcStream[i] & 31) {
            case 6:
              var data = avcStream.subarray(i + 1, i + 1 + length);
              var matchingSample = mapToSample(i, samples);
              seiNal = {
                nalUnitType: "sei_rbsp",
                size: length,
                data,
                escapedRBSP: discardEmulationPreventionBytes$1(data),
                trackId
              };
              if (matchingSample) {
                seiNal.pts = matchingSample.pts;
                seiNal.dts = matchingSample.dts;
                lastMatchedSample = matchingSample;
              } else if (lastMatchedSample) {
                seiNal.pts = lastMatchedSample.pts;
                seiNal.dts = lastMatchedSample.dts;
              } else {
                console.log("We've encountered a nal unit without data. See mux.js#233.");
                break;
              }
              result.push(seiNal);
              break;
          }
        }
        return result;
      };
      var parseSamples = function parseSamples2(truns, baseMediaDecodeTime, tfhd2) {
        var currentDts = baseMediaDecodeTime;
        var defaultSampleDuration = tfhd2.defaultSampleDuration || 0;
        var defaultSampleSize = tfhd2.defaultSampleSize || 0;
        var trackId = tfhd2.trackId;
        var allSamples = [];
        truns.forEach(function(trun2) {
          var trackRun = parseTrun(trun2);
          var samples = trackRun.samples;
          samples.forEach(function(sample) {
            if (sample.duration === void 0) {
              sample.duration = defaultSampleDuration;
            }
            if (sample.size === void 0) {
              sample.size = defaultSampleSize;
            }
            sample.trackId = trackId;
            sample.dts = currentDts;
            if (sample.compositionTimeOffset === void 0) {
              sample.compositionTimeOffset = 0;
            }
            sample.pts = currentDts + sample.compositionTimeOffset;
            currentDts += sample.duration;
          });
          allSamples = allSamples.concat(samples);
        });
        return allSamples;
      };
      var parseCaptionNals = function parseCaptionNals2(segment, videoTrackId) {
        var trafs = findBox_1(segment, ["moof", "traf"]);
        var mdats = findBox_1(segment, ["mdat"]);
        var captionNals = {};
        var mdatTrafPairs = [];
        mdats.forEach(function(mdat2, index) {
          var matchingTraf = trafs[index];
          mdatTrafPairs.push({
            mdat: mdat2,
            traf: matchingTraf
          });
        });
        mdatTrafPairs.forEach(function(pair) {
          var mdat2 = pair.mdat;
          var traf2 = pair.traf;
          var tfhd2 = findBox_1(traf2, ["tfhd"]);
          var headerInfo = parseTfhd(tfhd2[0]);
          var trackId = headerInfo.trackId;
          var tfdt2 = findBox_1(traf2, ["tfdt"]);
          var baseMediaDecodeTime = tfdt2.length > 0 ? parseTfdt(tfdt2[0]).baseMediaDecodeTime : 0;
          var truns = findBox_1(traf2, ["trun"]);
          var samples;
          var seiNals;
          if (videoTrackId === trackId && truns.length > 0) {
            samples = parseSamples(truns, baseMediaDecodeTime, headerInfo);
            seiNals = findSeiNals(mdat2, samples, trackId);
            if (!captionNals[trackId]) {
              captionNals[trackId] = [];
            }
            captionNals[trackId] = captionNals[trackId].concat(seiNals);
          }
        });
        return captionNals;
      };
      var parseEmbeddedCaptions = function parseEmbeddedCaptions2(segment, trackId, timescale2) {
        var seiNals;
        if (trackId === null) {
          return null;
        }
        seiNals = parseCaptionNals(segment, trackId);
        return {
          seiNals: seiNals[trackId],
          timescale: timescale2
        };
      };
      var CaptionParser = function CaptionParser2() {
        var isInitialized = false;
        var captionStream2;
        var segmentCache;
        var trackId;
        var timescale2;
        var parsedCaptions;
        var parsingPartial;
        this.isInitialized = function() {
          return isInitialized;
        };
        this.init = function(options) {
          captionStream2 = new CaptionStream$1();
          isInitialized = true;
          parsingPartial = options ? options.isPartial : false;
          captionStream2.on("data", function(event) {
            event.startTime = event.startPts / timescale2;
            event.endTime = event.endPts / timescale2;
            parsedCaptions.captions.push(event);
            parsedCaptions.captionStreams[event.stream] = true;
          });
        };
        this.isNewInit = function(videoTrackIds, timescales) {
          if (videoTrackIds && videoTrackIds.length === 0 || timescales && typeof timescales === "object" && Object.keys(timescales).length === 0) {
            return false;
          }
          return trackId !== videoTrackIds[0] || timescale2 !== timescales[trackId];
        };
        this.parse = function(segment, videoTrackIds, timescales) {
          var parsedData;
          if (!this.isInitialized()) {
            return null;
          } else if (!videoTrackIds || !timescales) {
            return null;
          } else if (this.isNewInit(videoTrackIds, timescales)) {
            trackId = videoTrackIds[0];
            timescale2 = timescales[trackId];
          } else if (trackId === null || !timescale2) {
            segmentCache.push(segment);
            return null;
          }
          while (segmentCache.length > 0) {
            var cachedSegment = segmentCache.shift();
            this.parse(cachedSegment, videoTrackIds, timescales);
          }
          parsedData = parseEmbeddedCaptions(segment, trackId, timescale2);
          if (parsedData === null || !parsedData.seiNals) {
            return null;
          }
          this.pushNals(parsedData.seiNals);
          this.flushStream();
          return parsedCaptions;
        };
        this.pushNals = function(nals) {
          if (!this.isInitialized() || !nals || nals.length === 0) {
            return null;
          }
          nals.forEach(function(nal) {
            captionStream2.push(nal);
          });
        };
        this.flushStream = function() {
          if (!this.isInitialized()) {
            return null;
          }
          if (!parsingPartial) {
            captionStream2.flush();
          } else {
            captionStream2.partialFlush();
          }
        };
        this.clearParsedCaptions = function() {
          parsedCaptions.captions = [];
          parsedCaptions.captionStreams = {};
        };
        this.resetCaptionStream = function() {
          if (!this.isInitialized()) {
            return null;
          }
          captionStream2.reset();
        };
        this.clearAllCaptions = function() {
          this.clearParsedCaptions();
          this.resetCaptionStream();
        };
        this.reset = function() {
          segmentCache = [];
          trackId = null;
          timescale2 = null;
          if (!parsedCaptions) {
            parsedCaptions = {
              captions: [],
              captionStreams: {}
            };
          } else {
            this.clearParsedCaptions();
          }
          this.resetCaptionStream();
        };
        this.reset();
      };
      var captionParser = CaptionParser;
      var typeFromStreamString = function typeFromStreamString2(streamString) {
        if (streamString === "AudioSegmentStream") {
          return "audio";
        }
        return streamString === "VideoSegmentStream" ? "video" : "";
      };
      var wireFullTransmuxerEvents = function wireFullTransmuxerEvents2(self3, transmuxer2) {
        transmuxer2.on("data", function(segment) {
          var initArray = segment.initSegment;
          segment.initSegment = {
            data: initArray.buffer,
            byteOffset: initArray.byteOffset,
            byteLength: initArray.byteLength
          };
          var typedArray = segment.data;
          segment.data = typedArray.buffer;
          self3.postMessage({
            action: "data",
            segment,
            byteOffset: typedArray.byteOffset,
            byteLength: typedArray.byteLength
          }, [segment.data]);
        });
        transmuxer2.on("done", function(data) {
          self3.postMessage({
            action: "done"
          });
        });
        transmuxer2.on("gopInfo", function(gopInfo) {
          self3.postMessage({
            action: "gopInfo",
            gopInfo
          });
        });
        transmuxer2.on("videoSegmentTimingInfo", function(timingInfo) {
          var videoSegmentTimingInfo = {
            start: {
              decode: clock.videoTsToSeconds(timingInfo.start.dts),
              presentation: clock.videoTsToSeconds(timingInfo.start.pts)
            },
            end: {
              decode: clock.videoTsToSeconds(timingInfo.end.dts),
              presentation: clock.videoTsToSeconds(timingInfo.end.pts)
            },
            baseMediaDecodeTime: clock.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
          };
          if (timingInfo.prependedContentDuration) {
            videoSegmentTimingInfo.prependedContentDuration = clock.videoTsToSeconds(timingInfo.prependedContentDuration);
          }
          self3.postMessage({
            action: "videoSegmentTimingInfo",
            videoSegmentTimingInfo
          });
        });
        transmuxer2.on("audioSegmentTimingInfo", function(timingInfo) {
          var audioSegmentTimingInfo = {
            start: {
              decode: clock.videoTsToSeconds(timingInfo.start.dts),
              presentation: clock.videoTsToSeconds(timingInfo.start.pts)
            },
            end: {
              decode: clock.videoTsToSeconds(timingInfo.end.dts),
              presentation: clock.videoTsToSeconds(timingInfo.end.pts)
            },
            baseMediaDecodeTime: clock.videoTsToSeconds(timingInfo.baseMediaDecodeTime)
          };
          if (timingInfo.prependedContentDuration) {
            audioSegmentTimingInfo.prependedContentDuration = clock.videoTsToSeconds(timingInfo.prependedContentDuration);
          }
          self3.postMessage({
            action: "audioSegmentTimingInfo",
            audioSegmentTimingInfo
          });
        });
        transmuxer2.on("id3Frame", function(id3Frame) {
          self3.postMessage({
            action: "id3Frame",
            id3Frame
          });
        });
        transmuxer2.on("caption", function(caption) {
          self3.postMessage({
            action: "caption",
            caption
          });
        });
        transmuxer2.on("trackinfo", function(trackInfo) {
          self3.postMessage({
            action: "trackinfo",
            trackInfo
          });
        });
        transmuxer2.on("audioTimingInfo", function(audioTimingInfo) {
          self3.postMessage({
            action: "audioTimingInfo",
            audioTimingInfo: {
              start: clock.videoTsToSeconds(audioTimingInfo.start),
              end: clock.videoTsToSeconds(audioTimingInfo.end)
            }
          });
        });
        transmuxer2.on("videoTimingInfo", function(videoTimingInfo) {
          self3.postMessage({
            action: "videoTimingInfo",
            videoTimingInfo: {
              start: clock.videoTsToSeconds(videoTimingInfo.start),
              end: clock.videoTsToSeconds(videoTimingInfo.end)
            }
          });
        });
      };
      var wirePartialTransmuxerEvents = function wirePartialTransmuxerEvents2(self3, transmuxer2) {
        transmuxer2.on("data", function(event) {
          var initSegment = {
            data: event.data.track.initSegment.buffer,
            byteOffset: event.data.track.initSegment.byteOffset,
            byteLength: event.data.track.initSegment.byteLength
          };
          var boxes = {
            data: event.data.boxes.buffer,
            byteOffset: event.data.boxes.byteOffset,
            byteLength: event.data.boxes.byteLength
          };
          var segment = {
            boxes,
            initSegment,
            type: event.type,
            sequence: event.data.sequence
          };
          if (typeof event.data.videoFrameDts !== "undefined") {
            segment.videoFrameDtsTime = clock.videoTsToSeconds(event.data.videoFrameDts);
          }
          if (typeof event.data.videoFramePts !== "undefined") {
            segment.videoFramePtsTime = clock.videoTsToSeconds(event.data.videoFramePts);
          }
          self3.postMessage({
            action: "data",
            segment
          }, [segment.boxes.data, segment.initSegment.data]);
        });
        transmuxer2.on("id3Frame", function(id3Frame) {
          self3.postMessage({
            action: "id3Frame",
            id3Frame
          });
        });
        transmuxer2.on("caption", function(caption) {
          self3.postMessage({
            action: "caption",
            caption
          });
        });
        transmuxer2.on("done", function(data) {
          self3.postMessage({
            action: "done",
            type: typeFromStreamString(data)
          });
        });
        transmuxer2.on("partialdone", function(data) {
          self3.postMessage({
            action: "partialdone",
            type: typeFromStreamString(data)
          });
        });
        transmuxer2.on("endedsegment", function(data) {
          self3.postMessage({
            action: "endedSegment",
            type: typeFromStreamString(data)
          });
        });
        transmuxer2.on("trackinfo", function(trackInfo) {
          self3.postMessage({
            action: "trackinfo",
            trackInfo
          });
        });
        transmuxer2.on("audioTimingInfo", function(audioTimingInfo) {
          if (audioTimingInfo.start === null) {
            self3.postMessage({
              action: "audioTimingInfo",
              audioTimingInfo
            });
            return;
          }
          var timingInfoInSeconds = {
            start: clock.videoTsToSeconds(audioTimingInfo.start)
          };
          if (audioTimingInfo.end) {
            timingInfoInSeconds.end = clock.videoTsToSeconds(audioTimingInfo.end);
          }
          self3.postMessage({
            action: "audioTimingInfo",
            audioTimingInfo: timingInfoInSeconds
          });
        });
        transmuxer2.on("videoTimingInfo", function(videoTimingInfo) {
          var timingInfoInSeconds = {
            start: clock.videoTsToSeconds(videoTimingInfo.start)
          };
          if (videoTimingInfo.end) {
            timingInfoInSeconds.end = clock.videoTsToSeconds(videoTimingInfo.end);
          }
          self3.postMessage({
            action: "videoTimingInfo",
            videoTimingInfo: timingInfoInSeconds
          });
        });
      };
      var MessageHandlers = /* @__PURE__ */ function() {
        function MessageHandlers2(self3, options) {
          this.options = options || {};
          this.self = self3;
          this.init();
        }
        var _proto = MessageHandlers2.prototype;
        _proto.init = function init() {
          if (this.transmuxer) {
            this.transmuxer.dispose();
          }
          this.transmuxer = this.options.handlePartialData ? new transmuxer$1(this.options) : new transmuxer.Transmuxer(this.options);
          if (this.options.handlePartialData) {
            wirePartialTransmuxerEvents(this.self, this.transmuxer);
          } else {
            wireFullTransmuxerEvents(this.self, this.transmuxer);
          }
        };
        _proto.pushMp4Captions = function pushMp4Captions(data) {
          if (!this.captionParser) {
            this.captionParser = new captionParser();
            this.captionParser.init();
          }
          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);
          var parsed = this.captionParser.parse(segment, data.trackIds, data.timescales);
          this.self.postMessage({
            action: "mp4Captions",
            captions: parsed && parsed.captions || [],
            data: segment.buffer
          }, [segment.buffer]);
        };
        _proto.clearAllMp4Captions = function clearAllMp4Captions() {
          if (this.captionParser) {
            this.captionParser.clearAllCaptions();
          }
        };
        _proto.clearParsedMp4Captions = function clearParsedMp4Captions() {
          if (this.captionParser) {
            this.captionParser.clearParsedCaptions();
          }
        };
        _proto.push = function push(data) {
          var segment = new Uint8Array(data.data, data.byteOffset, data.byteLength);
          this.transmuxer.push(segment);
        };
        _proto.reset = function reset3() {
          this.transmuxer.reset();
        };
        _proto.setTimestampOffset = function setTimestampOffset(data) {
          var timestampOffset2 = data.timestampOffset || 0;
          this.transmuxer.setBaseMediaDecodeTime(Math.round(clock.secondsToVideoTs(timestampOffset2)));
        };
        _proto.setAudioAppendStart = function setAudioAppendStart(data) {
          this.transmuxer.setAudioAppendStart(Math.ceil(clock.secondsToVideoTs(data.appendStart)));
        };
        _proto.setRemux = function setRemux(data) {
          this.transmuxer.setRemux(data.remux);
        };
        _proto.flush = function flush(data) {
          this.transmuxer.flush();
          self2.postMessage({
            action: "done",
            type: "transmuxed"
          });
        };
        _proto.partialFlush = function partialFlush(data) {
          this.transmuxer.partialFlush();
          self2.postMessage({
            action: "partialdone",
            type: "transmuxed"
          });
        };
        _proto.endTimeline = function endTimeline3() {
          this.transmuxer.endTimeline();
          self2.postMessage({
            action: "endedtimeline",
            type: "transmuxed"
          });
        };
        _proto.alignGopsWith = function alignGopsWith(data) {
          this.transmuxer.alignGopsWith(data.gopsToAlignWith.slice());
        };
        return MessageHandlers2;
      }();
      var TransmuxerWorker = function TransmuxerWorker2(self3) {
        self3.onmessage = function(event) {
          if (event.data.action === "init" && event.data.options) {
            this.messageHandlers = new MessageHandlers(self3, event.data.options);
            return;
          }
          if (!this.messageHandlers) {
            this.messageHandlers = new MessageHandlers(self3);
          }
          if (event.data && event.data.action && event.data.action !== "init") {
            if (this.messageHandlers[event.data.action]) {
              this.messageHandlers[event.data.action](event.data);
            }
          }
        };
      };
      var transmuxerWorker2 = new TransmuxerWorker(self2);
      return transmuxerWorker2;
    }();
  });
  var getCodecs = function getCodecs2(media) {
    var mediaAttributes = media.attributes || {};
    if (mediaAttributes.CODECS) {
      return import_codecs.parseCodecs(mediaAttributes.CODECS);
    }
  };
  var isMaat = function isMaat2(master, media) {
    var mediaAttributes = media.attributes || {};
    return master && master.mediaGroups && master.mediaGroups.AUDIO && mediaAttributes.AUDIO && master.mediaGroups.AUDIO[mediaAttributes.AUDIO];
  };
  var isMuxed = function isMuxed2(master, media) {
    if (!isMaat(master, media)) {
      return true;
    }
    var mediaAttributes = media.attributes || {};
    var audioGroup = master.mediaGroups.AUDIO[mediaAttributes.AUDIO];
    for (var groupId in audioGroup) {
      if (!audioGroup[groupId].uri && !audioGroup[groupId].playlists) {
        return true;
      }
    }
    return false;
  };
  var codecsForPlaylist = function codecsForPlaylist2(master, media) {
    var mediaAttributes = media.attributes || {};
    var codecInfo = getCodecs(media) || {};
    if (isMaat(master, media) && !codecInfo.audio) {
      if (!isMuxed(master, media)) {
        var defaultCodecs = import_codecs.codecsFromDefault(master, mediaAttributes.AUDIO);
        if (defaultCodecs) {
          codecInfo.audio = defaultCodecs.audio;
        }
      }
    }
    var codecs = {};
    if (codecInfo.video) {
      codecs.video = import_codecs.translateLegacyCodec("" + codecInfo.video.type + codecInfo.video.details);
    }
    if (codecInfo.audio) {
      codecs.audio = import_codecs.translateLegacyCodec("" + codecInfo.audio.type + codecInfo.audio.details);
    }
    if (codecInfo.text) {
      codecs.text = codecInfo.text.type;
    }
    if (codecInfo.unknown) {
      codecs.unknown = codecInfo.unknown;
    }
    return codecs;
  };
  var logger = function logger2(source) {
    if (videojs$1.log.debug) {
      return videojs$1.log.debug.bind(videojs$1, "VHS:", source + " >");
    }
    return function() {
    };
  };
  var logFn = logger("PlaylistSelector");
  var representationToString = function representationToString2(representation) {
    if (!representation || !representation.playlist) {
      return;
    }
    var playlist = representation.playlist;
    return JSON.stringify({
      id: playlist.id,
      bandwidth: representation.bandwidth,
      width: representation.width,
      height: representation.height,
      codecs: playlist.attributes && playlist.attributes.CODECS || ""
    });
  };
  var safeGetComputedStyle = function safeGetComputedStyle2(el, property) {
    if (!el) {
      return "";
    }
    var result = import_window2.default.getComputedStyle(el);
    if (!result) {
      return "";
    }
    return result[property];
  };
  var stableSort = function stableSort2(array, sortFn) {
    var newArray = array.slice();
    array.sort(function(left, right) {
      var cmp = sortFn(left, right);
      if (cmp === 0) {
        return newArray.indexOf(left) - newArray.indexOf(right);
      }
      return cmp;
    });
  };
  var comparePlaylistBandwidth = function comparePlaylistBandwidth2(left, right) {
    var leftBandwidth;
    var rightBandwidth;
    if (left.attributes.BANDWIDTH) {
      leftBandwidth = left.attributes.BANDWIDTH;
    }
    leftBandwidth = leftBandwidth || import_window2.default.Number.MAX_VALUE;
    if (right.attributes.BANDWIDTH) {
      rightBandwidth = right.attributes.BANDWIDTH;
    }
    rightBandwidth = rightBandwidth || import_window2.default.Number.MAX_VALUE;
    return leftBandwidth - rightBandwidth;
  };
  var comparePlaylistResolution = function comparePlaylistResolution2(left, right) {
    var leftWidth;
    var rightWidth;
    if (left.attributes.RESOLUTION && left.attributes.RESOLUTION.width) {
      leftWidth = left.attributes.RESOLUTION.width;
    }
    leftWidth = leftWidth || import_window2.default.Number.MAX_VALUE;
    if (right.attributes.RESOLUTION && right.attributes.RESOLUTION.width) {
      rightWidth = right.attributes.RESOLUTION.width;
    }
    rightWidth = rightWidth || import_window2.default.Number.MAX_VALUE;
    if (leftWidth === rightWidth && left.attributes.BANDWIDTH && right.attributes.BANDWIDTH) {
      return left.attributes.BANDWIDTH - right.attributes.BANDWIDTH;
    }
    return leftWidth - rightWidth;
  };
  var simpleSelector = function simpleSelector2(master, playerBandwidth, playerWidth, playerHeight, limitRenditionByPlayerDimensions) {
    if (!master) {
      return;
    }
    var options = {
      bandwidth: playerBandwidth,
      width: playerWidth,
      height: playerHeight,
      limitRenditionByPlayerDimensions
    };
    var sortedPlaylistReps = master.playlists.map(function(playlist) {
      var bandwidth2;
      var width2 = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.width;
      var height2 = playlist.attributes.RESOLUTION && playlist.attributes.RESOLUTION.height;
      bandwidth2 = playlist.attributes.BANDWIDTH;
      bandwidth2 = bandwidth2 || import_window2.default.Number.MAX_VALUE;
      return {
        bandwidth: bandwidth2,
        width: width2,
        height: height2,
        playlist
      };
    });
    stableSort(sortedPlaylistReps, function(left, right) {
      return left.bandwidth - right.bandwidth;
    });
    sortedPlaylistReps = sortedPlaylistReps.filter(function(rep) {
      return !Playlist.isIncompatible(rep.playlist);
    });
    var enabledPlaylistReps = sortedPlaylistReps.filter(function(rep) {
      return Playlist.isEnabled(rep.playlist);
    });
    if (!enabledPlaylistReps.length) {
      enabledPlaylistReps = sortedPlaylistReps.filter(function(rep) {
        return !Playlist.isDisabled(rep.playlist);
      });
    }
    var bandwidthPlaylistReps = enabledPlaylistReps.filter(function(rep) {
      return rep.bandwidth * Config.BANDWIDTH_VARIANCE < playerBandwidth;
    });
    var highestRemainingBandwidthRep = bandwidthPlaylistReps[bandwidthPlaylistReps.length - 1];
    var bandwidthBestRep = bandwidthPlaylistReps.filter(function(rep) {
      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
    })[0];
    if (limitRenditionByPlayerDimensions === false) {
      var _chosenRep = bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
      if (_chosenRep && _chosenRep.playlist) {
        var type3 = "sortedPlaylistReps";
        if (bandwidthBestRep) {
          type3 = "bandwidthBestRep";
        }
        if (enabledPlaylistReps[0]) {
          type3 = "enabledPlaylistReps";
        }
        logFn("choosing " + representationToString(_chosenRep) + " using " + type3 + " with options", options);
        return _chosenRep.playlist;
      }
      logFn("could not choose a playlist with options", options);
      return null;
    }
    var haveResolution = bandwidthPlaylistReps.filter(function(rep) {
      return rep.width && rep.height;
    });
    stableSort(haveResolution, function(left, right) {
      return left.width - right.width;
    });
    var resolutionBestRepList = haveResolution.filter(function(rep) {
      return rep.width === playerWidth && rep.height === playerHeight;
    });
    highestRemainingBandwidthRep = resolutionBestRepList[resolutionBestRepList.length - 1];
    var resolutionBestRep = resolutionBestRepList.filter(function(rep) {
      return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
    })[0];
    var resolutionPlusOneList;
    var resolutionPlusOneSmallest;
    var resolutionPlusOneRep;
    if (!resolutionBestRep) {
      resolutionPlusOneList = haveResolution.filter(function(rep) {
        return rep.width > playerWidth || rep.height > playerHeight;
      });
      resolutionPlusOneSmallest = resolutionPlusOneList.filter(function(rep) {
        return rep.width === resolutionPlusOneList[0].width && rep.height === resolutionPlusOneList[0].height;
      });
      highestRemainingBandwidthRep = resolutionPlusOneSmallest[resolutionPlusOneSmallest.length - 1];
      resolutionPlusOneRep = resolutionPlusOneSmallest.filter(function(rep) {
        return rep.bandwidth === highestRemainingBandwidthRep.bandwidth;
      })[0];
    }
    var chosenRep = resolutionPlusOneRep || resolutionBestRep || bandwidthBestRep || enabledPlaylistReps[0] || sortedPlaylistReps[0];
    if (chosenRep && chosenRep.playlist) {
      var _type = "sortedPlaylistReps";
      if (resolutionPlusOneRep) {
        _type = "resolutionPlusOneRep";
      } else if (resolutionBestRep) {
        _type = "resolutionBestRep";
      } else if (bandwidthBestRep) {
        _type = "bandwidthBestRep";
      } else if (enabledPlaylistReps[0]) {
        _type = "enabledPlaylistReps";
      }
      logFn("choosing " + representationToString(chosenRep) + " using " + _type + " with options", options);
      return chosenRep.playlist;
    }
    logFn("could not choose a playlist with options", options);
    return null;
  };
  var lastBandwidthSelector = function lastBandwidthSelector2() {
    var pixelRatio = this.useDevicePixelRatio ? import_window2.default.devicePixelRatio || 1 : 1;
    return simpleSelector(this.playlists.master, this.systemBandwidth, parseInt(safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions);
  };
  var movingAverageBandwidthSelector = function movingAverageBandwidthSelector2(decay) {
    var average = -1;
    if (decay < 0 || decay > 1) {
      throw new Error("Moving average bandwidth decay must be between 0 and 1.");
    }
    return function() {
      var pixelRatio = this.useDevicePixelRatio ? import_window2.default.devicePixelRatio || 1 : 1;
      if (average < 0) {
        average = this.systemBandwidth;
      }
      average = decay * this.systemBandwidth + (1 - decay) * average;
      return simpleSelector(this.playlists.master, average, parseInt(safeGetComputedStyle(this.tech_.el(), "width"), 10) * pixelRatio, parseInt(safeGetComputedStyle(this.tech_.el(), "height"), 10) * pixelRatio, this.limitRenditionByPlayerDimensions);
    };
  };
  var minRebufferMaxBandwidthSelector = function minRebufferMaxBandwidthSelector2(settings) {
    var master = settings.master, currentTime = settings.currentTime, bandwidth2 = settings.bandwidth, duration5 = settings.duration, segmentDuration = settings.segmentDuration, timeUntilRebuffer3 = settings.timeUntilRebuffer, currentTimeline = settings.currentTimeline, syncController = settings.syncController;
    var compatiblePlaylists = master.playlists.filter(function(playlist) {
      return !Playlist.isIncompatible(playlist);
    });
    var enabledPlaylists = compatiblePlaylists.filter(Playlist.isEnabled);
    if (!enabledPlaylists.length) {
      enabledPlaylists = compatiblePlaylists.filter(function(playlist) {
        return !Playlist.isDisabled(playlist);
      });
    }
    var bandwidthPlaylists = enabledPlaylists.filter(Playlist.hasAttribute.bind(null, "BANDWIDTH"));
    var rebufferingEstimates = bandwidthPlaylists.map(function(playlist) {
      var syncPoint = syncController.getSyncPoint(playlist, duration5, currentTimeline, currentTime);
      var numRequests = syncPoint ? 1 : 2;
      var requestTimeEstimate = Playlist.estimateSegmentRequestTime(segmentDuration, bandwidth2, playlist);
      var rebufferingImpact = requestTimeEstimate * numRequests - timeUntilRebuffer3;
      return {
        playlist,
        rebufferingImpact
      };
    });
    var noRebufferingPlaylists = rebufferingEstimates.filter(function(estimate) {
      return estimate.rebufferingImpact <= 0;
    });
    stableSort(noRebufferingPlaylists, function(a, b) {
      return comparePlaylistBandwidth(b.playlist, a.playlist);
    });
    if (noRebufferingPlaylists.length) {
      return noRebufferingPlaylists[0];
    }
    stableSort(rebufferingEstimates, function(a, b) {
      return a.rebufferingImpact - b.rebufferingImpact;
    });
    return rebufferingEstimates[0] || null;
  };
  var lowestBitrateCompatibleVariantSelector = function lowestBitrateCompatibleVariantSelector2() {
    var _this = this;
    var playlists = this.playlists.master.playlists.filter(Playlist.isEnabled);
    stableSort(playlists, function(a, b) {
      return comparePlaylistBandwidth(a, b);
    });
    var playlistsWithVideo = playlists.filter(function(playlist) {
      return !!codecsForPlaylist(_this.playlists.master, playlist).video;
    });
    return playlistsWithVideo[0] || null;
  };
  var createCaptionsTrackIfNotExists = function createCaptionsTrackIfNotExists2(inbandTextTracks, tech, captionStream) {
    if (!inbandTextTracks[captionStream]) {
      tech.trigger({
        type: "usage",
        name: "vhs-608"
      });
      tech.trigger({
        type: "usage",
        name: "hls-608"
      });
      var track = tech.textTracks().getTrackById(captionStream);
      if (track) {
        inbandTextTracks[captionStream] = track;
      } else {
        inbandTextTracks[captionStream] = tech.addRemoteTextTrack({
          kind: "captions",
          id: captionStream,
          label: captionStream
        }, false).track;
      }
    }
  };
  var addCaptionData = function addCaptionData2(_ref) {
    var inbandTextTracks = _ref.inbandTextTracks, captionArray = _ref.captionArray, timestampOffset2 = _ref.timestampOffset;
    if (!captionArray) {
      return;
    }
    var Cue = import_window2.default.WebKitDataCue || import_window2.default.VTTCue;
    captionArray.forEach(function(caption) {
      var track = caption.stream;
      inbandTextTracks[track].addCue(new Cue(caption.startTime + timestampOffset2, caption.endTime + timestampOffset2, caption.text));
    });
  };
  var deprecateOldCue = function deprecateOldCue2(cue) {
    Object.defineProperties(cue.frame, {
      id: {
        get: function get7() {
          videojs$1.log.warn("cue.frame.id is deprecated. Use cue.value.key instead.");
          return cue.value.key;
        }
      },
      value: {
        get: function get7() {
          videojs$1.log.warn("cue.frame.value is deprecated. Use cue.value.data instead.");
          return cue.value.data;
        }
      },
      privateData: {
        get: function get7() {
          videojs$1.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead.");
          return cue.value.data;
        }
      }
    });
  };
  var addMetadata = function addMetadata2(_ref2) {
    var inbandTextTracks = _ref2.inbandTextTracks, metadataArray = _ref2.metadataArray, timestampOffset2 = _ref2.timestampOffset, videoDuration = _ref2.videoDuration;
    if (!metadataArray) {
      return;
    }
    var Cue = import_window2.default.WebKitDataCue || import_window2.default.VTTCue;
    var metadataTrack = inbandTextTracks.metadataTrack_;
    if (!metadataTrack) {
      return;
    }
    metadataArray.forEach(function(metadata) {
      var time = metadata.cueTime + timestampOffset2;
      if (typeof time !== "number" || import_window2.default.isNaN(time) || time < 0 || !(time < Infinity)) {
        return;
      }
      metadata.frames.forEach(function(frame) {
        var cue = new Cue(time, time, frame.value || frame.url || frame.data || "");
        cue.frame = frame;
        cue.value = frame;
        deprecateOldCue(cue);
        metadataTrack.addCue(cue);
      });
    });
    if (!metadataTrack.cues || !metadataTrack.cues.length) {
      return;
    }
    var cues = metadataTrack.cues;
    var cuesArray = [];
    for (var i = 0; i < cues.length; i++) {
      if (cues[i]) {
        cuesArray.push(cues[i]);
      }
    }
    var cuesGroupedByStartTime = cuesArray.reduce(function(obj, cue) {
      var timeSlot = obj[cue.startTime] || [];
      timeSlot.push(cue);
      obj[cue.startTime] = timeSlot;
      return obj;
    }, {});
    var sortedStartTimes = Object.keys(cuesGroupedByStartTime).sort(function(a, b) {
      return Number(a) - Number(b);
    });
    sortedStartTimes.forEach(function(startTime, idx) {
      var cueGroup = cuesGroupedByStartTime[startTime];
      var nextTime = Number(sortedStartTimes[idx + 1]) || videoDuration;
      cueGroup.forEach(function(cue) {
        cue.endTime = nextTime;
      });
    });
  };
  var createMetadataTrackIfNotExists = function createMetadataTrackIfNotExists2(inbandTextTracks, dispatchType, tech) {
    if (inbandTextTracks.metadataTrack_) {
      return;
    }
    inbandTextTracks.metadataTrack_ = tech.addRemoteTextTrack({
      kind: "metadata",
      label: "Timed Metadata"
    }, false).track;
    inbandTextTracks.metadataTrack_.inBandMetadataTrackDispatchType = dispatchType;
  };
  var removeCuesFromTrack = function removeCuesFromTrack2(start2, end, track) {
    var i;
    var cue;
    if (!track) {
      return;
    }
    if (!track.cues) {
      return;
    }
    i = track.cues.length;
    while (i--) {
      cue = track.cues[i];
      if (cue.startTime >= start2 && cue.endTime <= end) {
        track.removeCue(cue);
      }
    }
  };
  var removeDuplicateCuesFromTrack = function removeDuplicateCuesFromTrack2(track) {
    var cues = track.cues;
    if (!cues) {
      return;
    }
    for (var i = 0; i < cues.length; i++) {
      var duplicates = [];
      var occurrences = 0;
      for (var j = 0; j < cues.length; j++) {
        if (cues[i].startTime === cues[j].startTime && cues[i].endTime === cues[j].endTime && cues[i].text === cues[j].text) {
          occurrences++;
          if (occurrences > 1) {
            duplicates.push(cues[j]);
          }
        }
      }
      if (duplicates.length) {
        duplicates.forEach(function(dupe) {
          return track.removeCue(dupe);
        });
      }
    }
  };
  var gopsSafeToAlignWith = function gopsSafeToAlignWith2(buffer, currentTime, mapping) {
    if (typeof currentTime === "undefined" || currentTime === null || !buffer.length) {
      return [];
    }
    var currentTimePts = Math.ceil((currentTime - mapping + 3) * import_clock.ONE_SECOND_IN_TS);
    var i;
    for (i = 0; i < buffer.length; i++) {
      if (buffer[i].pts > currentTimePts) {
        break;
      }
    }
    return buffer.slice(i);
  };
  var updateGopBuffer = function updateGopBuffer2(buffer, gops, replace) {
    if (!gops.length) {
      return buffer;
    }
    if (replace) {
      return gops.slice();
    }
    var start2 = gops[0].pts;
    var i = 0;
    for (i; i < buffer.length; i++) {
      if (buffer[i].pts >= start2) {
        break;
      }
    }
    return buffer.slice(0, i).concat(gops);
  };
  var removeGopBuffer = function removeGopBuffer2(buffer, start2, end, mapping) {
    var startPts = Math.ceil((start2 - mapping) * import_clock.ONE_SECOND_IN_TS);
    var endPts = Math.ceil((end - mapping) * import_clock.ONE_SECOND_IN_TS);
    var updatedBuffer = buffer.slice();
    var i = buffer.length;
    while (i--) {
      if (buffer[i].pts <= endPts) {
        break;
      }
    }
    if (i === -1) {
      return updatedBuffer;
    }
    var j = i + 1;
    while (j--) {
      if (buffer[j].pts <= startPts) {
        break;
      }
    }
    j = Math.max(j, 0);
    updatedBuffer.splice(j, i - j + 1);
    return updatedBuffer;
  };
  var shallowEqual = function shallowEqual2(a, b) {
    if (!a && !b || !a && b || a && !b) {
      return false;
    }
    if (a === b) {
      return true;
    }
    var akeys = Object.keys(a).sort();
    var bkeys = Object.keys(b).sort();
    if (akeys.length !== bkeys.length) {
      return false;
    }
    for (var i = 0; i < akeys.length; i++) {
      var key = akeys[i];
      if (key !== bkeys[i]) {
        return false;
      }
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  };
  var CHECK_BUFFER_DELAY = 500;
  var finite = function finite2(num) {
    return typeof num === "number" && isFinite(num);
  };
  var MIN_SEGMENT_DURATION_TO_SAVE_STATS = 1 / 60;
  var illegalMediaSwitch = function illegalMediaSwitch2(loaderType, startingMedia, trackInfo) {
    if (loaderType !== "main" || !startingMedia || !trackInfo) {
      return null;
    }
    if (!trackInfo.hasAudio && !trackInfo.hasVideo) {
      return "Neither audio nor video found in segment.";
    }
    if (startingMedia.hasVideo && !trackInfo.hasVideo) {
      return "Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest.";
    }
    if (!startingMedia.hasVideo && trackInfo.hasVideo) {
      return "Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest.";
    }
    return null;
  };
  var safeBackBufferTrimTime = function safeBackBufferTrimTime2(seekable3, currentTime, targetDuration) {
    var trimTime = currentTime - Config.BACK_BUFFER_LENGTH;
    if (seekable3.length) {
      trimTime = Math.max(trimTime, seekable3.start(0));
    }
    var maxTrimTime = currentTime - targetDuration;
    return Math.min(maxTrimTime, trimTime);
  };
  var segmentInfoString = function segmentInfoString2(segmentInfo) {
    var _segmentInfo$segment = segmentInfo.segment, start2 = _segmentInfo$segment.start, end = _segmentInfo$segment.end, _segmentInfo$playlist = segmentInfo.playlist, seq = _segmentInfo$playlist.mediaSequence, id = _segmentInfo$playlist.id, _segmentInfo$playlist2 = _segmentInfo$playlist.segments, segments = _segmentInfo$playlist2 === void 0 ? [] : _segmentInfo$playlist2, index = segmentInfo.mediaIndex, timeline = segmentInfo.timeline;
    return ["appending [" + index + "] of [" + seq + ", " + (seq + segments.length) + "] from playlist [" + id + "]", "[" + start2 + " => " + end + "] in timeline [" + timeline + "]"].join(" ");
  };
  var timingInfoPropertyForMedia = function timingInfoPropertyForMedia2(mediaType) {
    return mediaType + "TimingInfo";
  };
  var timestampOffsetForSegment = function timestampOffsetForSegment2(_ref) {
    var segmentTimeline = _ref.segmentTimeline, currentTimeline = _ref.currentTimeline, startOfSegment = _ref.startOfSegment, buffered = _ref.buffered, overrideCheck = _ref.overrideCheck;
    if (!overrideCheck && segmentTimeline === currentTimeline) {
      return null;
    }
    if (segmentTimeline < currentTimeline) {
      return startOfSegment;
    }
    return buffered.length ? buffered.end(buffered.length - 1) : startOfSegment;
  };
  var shouldWaitForTimelineChange = function shouldWaitForTimelineChange2(_ref2) {
    var timelineChangeController = _ref2.timelineChangeController, currentTimeline = _ref2.currentTimeline, segmentTimeline = _ref2.segmentTimeline, loaderType = _ref2.loaderType, audioDisabled = _ref2.audioDisabled;
    if (currentTimeline === segmentTimeline) {
      return false;
    }
    if (loaderType === "audio") {
      var lastMainTimelineChange = timelineChangeController.lastTimelineChange({
        type: "main"
      });
      return !lastMainTimelineChange || lastMainTimelineChange.to !== segmentTimeline;
    }
    if (loaderType === "main" && audioDisabled) {
      var pendingAudioTimelineChange = timelineChangeController.pendingTimelineChange({
        type: "audio"
      });
      if (pendingAudioTimelineChange && pendingAudioTimelineChange.to === segmentTimeline) {
        return false;
      }
      return true;
    }
    return false;
  };
  var mediaDuration = function mediaDuration2(audioTimingInfo, videoTimingInfo) {
    var audioDuration = audioTimingInfo && typeof audioTimingInfo.start === "number" && typeof audioTimingInfo.end === "number" ? audioTimingInfo.end - audioTimingInfo.start : 0;
    var videoDuration = videoTimingInfo && typeof videoTimingInfo.start === "number" && typeof videoTimingInfo.end === "number" ? videoTimingInfo.end - videoTimingInfo.start : 0;
    return Math.max(audioDuration, videoDuration);
  };
  var segmentTooLong = function segmentTooLong2(_ref3) {
    var segmentDuration = _ref3.segmentDuration, maxDuration = _ref3.maxDuration;
    if (!segmentDuration) {
      return false;
    }
    return Math.round(segmentDuration) > maxDuration + TIME_FUDGE_FACTOR;
  };
  var getTroublesomeSegmentDurationMessage = function getTroublesomeSegmentDurationMessage2(segmentInfo, sourceType) {
    if (sourceType !== "hls") {
      return null;
    }
    var segmentDuration = mediaDuration(segmentInfo.audioTimingInfo, segmentInfo.videoTimingInfo);
    if (!segmentDuration) {
      return null;
    }
    var targetDuration = segmentInfo.playlist.targetDuration;
    var isSegmentWayTooLong = segmentTooLong({
      segmentDuration,
      maxDuration: targetDuration * 2
    });
    var isSegmentSlightlyTooLong = segmentTooLong({
      segmentDuration,
      maxDuration: targetDuration
    });
    var segmentTooLongMessage = "Segment with index " + segmentInfo.mediaIndex + " " + ("from playlist " + segmentInfo.playlist.id + " ") + ("has a duration of " + segmentDuration + " ") + ("when the reported duration is " + segmentInfo.duration + " ") + ("and the target duration is " + targetDuration + ". ") + "For HLS content, a duration in excess of the target duration may result in playback issues. See the HLS specification section on EXT-X-TARGETDURATION for more details: https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1";
    if (isSegmentWayTooLong || isSegmentSlightlyTooLong) {
      return {
        severity: isSegmentWayTooLong ? "warn" : "info",
        message: segmentTooLongMessage
      };
    }
    return null;
  };
  var SegmentLoader = /* @__PURE__ */ function(_videojs$EventTarget) {
    import_inheritsLoose2.default(SegmentLoader2, _videojs$EventTarget);
    function SegmentLoader2(settings, options) {
      var _this;
      _this = _videojs$EventTarget.call(this) || this;
      if (!settings) {
        throw new TypeError("Initialization settings are required");
      }
      if (typeof settings.currentTime !== "function") {
        throw new TypeError("No currentTime getter specified");
      }
      if (!settings.mediaSource) {
        throw new TypeError("No MediaSource specified");
      }
      _this.bandwidth = settings.bandwidth;
      _this.throughput = {
        rate: 0,
        count: 0
      };
      _this.roundTrip = NaN;
      _this.resetStats_();
      _this.mediaIndex = null;
      _this.hasPlayed_ = settings.hasPlayed;
      _this.currentTime_ = settings.currentTime;
      _this.seekable_ = settings.seekable;
      _this.seeking_ = settings.seeking;
      _this.duration_ = settings.duration;
      _this.mediaSource_ = settings.mediaSource;
      _this.vhs_ = settings.vhs;
      _this.loaderType_ = settings.loaderType;
      _this.currentMediaInfo_ = void 0;
      _this.startingMediaInfo_ = void 0;
      _this.segmentMetadataTrack_ = settings.segmentMetadataTrack;
      _this.goalBufferLength_ = settings.goalBufferLength;
      _this.sourceType_ = settings.sourceType;
      _this.sourceUpdater_ = settings.sourceUpdater;
      _this.inbandTextTracks_ = settings.inbandTextTracks;
      _this.state_ = "INIT";
      _this.handlePartialData_ = settings.handlePartialData;
      _this.timelineChangeController_ = settings.timelineChangeController;
      _this.shouldSaveSegmentTimingInfo_ = true;
      _this.checkBufferTimeout_ = null;
      _this.error_ = void 0;
      _this.currentTimeline_ = -1;
      _this.pendingSegment_ = null;
      _this.xhrOptions_ = null;
      _this.pendingSegments_ = [];
      _this.audioDisabled_ = false;
      _this.isPendingTimestampOffset_ = false;
      _this.gopBuffer_ = [];
      _this.timeMapping_ = 0;
      _this.safeAppend_ = videojs$1.browser.IE_VERSION >= 11;
      _this.appendInitSegment_ = {
        audio: true,
        video: true
      };
      _this.playlistOfLastInitSegment_ = {
        audio: null,
        video: null
      };
      _this.callQueue_ = [];
      _this.loadQueue_ = [];
      _this.metadataQueue_ = {
        id3: [],
        caption: []
      };
      _this.activeInitSegmentId_ = null;
      _this.initSegments_ = {};
      _this.cacheEncryptionKeys_ = settings.cacheEncryptionKeys;
      _this.keyCache_ = {};
      _this.decrypter_ = settings.decrypter;
      _this.syncController_ = settings.syncController;
      _this.syncPoint_ = {
        segmentIndex: 0,
        time: 0
      };
      _this.transmuxer_ = _this.createTransmuxer_();
      _this.triggerSyncInfoUpdate_ = function() {
        return _this.trigger("syncinfoupdate");
      };
      _this.syncController_.on("syncinfoupdate", _this.triggerSyncInfoUpdate_);
      _this.mediaSource_.addEventListener("sourceopen", function() {
        if (!_this.isEndOfStream_()) {
          _this.ended_ = false;
        }
      });
      _this.fetchAtBuffer_ = false;
      _this.logger_ = logger("SegmentLoader[" + _this.loaderType_ + "]");
      Object.defineProperty(import_assertThisInitialized2.default(_this), "state", {
        get: function get7() {
          return this.state_;
        },
        set: function set4(newState) {
          if (newState !== this.state_) {
            this.logger_(this.state_ + " -> " + newState);
            this.state_ = newState;
            this.trigger("statechange");
          }
        }
      });
      _this.sourceUpdater_.on("ready", function() {
        if (_this.hasEnoughInfoToAppend_()) {
          _this.processCallQueue_();
        }
      });
      if (_this.loaderType_ === "main") {
        _this.timelineChangeController_.on("pendingtimelinechange", function() {
          if (_this.hasEnoughInfoToAppend_()) {
            _this.processCallQueue_();
          }
        });
      }
      if (_this.loaderType_ === "audio") {
        _this.timelineChangeController_.on("timelinechange", function() {
          if (_this.hasEnoughInfoToLoad_()) {
            _this.processLoadQueue_();
          }
          if (_this.hasEnoughInfoToAppend_()) {
            _this.processCallQueue_();
          }
        });
      }
      return _this;
    }
    var _proto = SegmentLoader2.prototype;
    _proto.createTransmuxer_ = function createTransmuxer_() {
      var transmuxer = new TransmuxWorker();
      transmuxer.postMessage({
        action: "init",
        options: {
          remux: false,
          alignGopsAtEnd: this.safeAppend_,
          keepOriginalTimestamps: true,
          handlePartialData: this.handlePartialData_
        }
      });
      return transmuxer;
    };
    _proto.resetStats_ = function resetStats_() {
      this.mediaBytesTransferred = 0;
      this.mediaRequests = 0;
      this.mediaRequestsAborted = 0;
      this.mediaRequestsTimedout = 0;
      this.mediaRequestsErrored = 0;
      this.mediaTransferDuration = 0;
      this.mediaSecondsLoaded = 0;
    };
    _proto.dispose = function dispose3() {
      this.trigger("dispose");
      this.state = "DISPOSED";
      this.pause();
      this.abort_();
      if (this.transmuxer_) {
        this.transmuxer_.terminate();
        segmentTransmuxer.dispose();
      }
      this.resetStats_();
      if (this.checkBufferTimeout_) {
        import_window2.default.clearTimeout(this.checkBufferTimeout_);
      }
      if (this.syncController_ && this.triggerSyncInfoUpdate_) {
        this.syncController_.off("syncinfoupdate", this.triggerSyncInfoUpdate_);
      }
      this.off();
    };
    _proto.setAudio = function setAudio(enable) {
      this.audioDisabled_ = !enable;
      if (enable) {
        this.appendInitSegment_.audio = true;
      } else {
        this.sourceUpdater_.removeAudio(0, this.duration_());
      }
    };
    _proto.abort = function abort2() {
      if (this.state !== "WAITING") {
        if (this.pendingSegment_) {
          this.pendingSegment_ = null;
        }
        return;
      }
      this.abort_();
      this.state = "READY";
      if (!this.paused()) {
        this.monitorBuffer_();
      }
    };
    _proto.abort_ = function abort_() {
      if (this.pendingSegment_ && this.pendingSegment_.abortRequests) {
        this.pendingSegment_.abortRequests();
      }
      this.pendingSegment_ = null;
      this.callQueue_ = [];
      this.loadQueue_ = [];
      this.metadataQueue_.id3 = [];
      this.metadataQueue_.caption = [];
      this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_);
    };
    _proto.checkForAbort_ = function checkForAbort_(requestId) {
      if (this.state === "APPENDING" && !this.pendingSegment_) {
        this.state = "READY";
        return true;
      }
      if (!this.pendingSegment_ || this.pendingSegment_.requestId !== requestId) {
        return true;
      }
      return false;
    };
    _proto.error = function error(_error) {
      if (typeof _error !== "undefined") {
        this.logger_("error occurred:", _error);
        this.error_ = _error;
      }
      this.pendingSegment_ = null;
      return this.error_;
    };
    _proto.endOfStream = function endOfStream2() {
      this.ended_ = true;
      if (this.transmuxer_) {
        segmentTransmuxer.reset(this.transmuxer_);
      }
      this.gopBuffer_.length = 0;
      this.pause();
      this.trigger("ended");
    };
    _proto.buffered_ = function buffered_() {
      if (!this.sourceUpdater_ || !this.startingMediaInfo_) {
        return videojs$1.createTimeRanges();
      }
      if (this.loaderType_ === "main") {
        var _this$startingMediaIn = this.startingMediaInfo_, hasAudio = _this$startingMediaIn.hasAudio, hasVideo = _this$startingMediaIn.hasVideo, isMuxed3 = _this$startingMediaIn.isMuxed;
        if (hasVideo && hasAudio && !this.audioDisabled_ && !isMuxed3) {
          return this.sourceUpdater_.buffered();
        }
        if (hasVideo) {
          return this.sourceUpdater_.videoBuffered();
        }
      }
      return this.sourceUpdater_.audioBuffered();
    };
    _proto.initSegmentForMap = function initSegmentForMap(map, set4) {
      if (set4 === void 0) {
        set4 = false;
      }
      if (!map) {
        return null;
      }
      var id = initSegmentId(map);
      var storedMap = this.initSegments_[id];
      if (set4 && !storedMap && map.bytes) {
        this.initSegments_[id] = storedMap = {
          resolvedUri: map.resolvedUri,
          byterange: map.byterange,
          bytes: map.bytes,
          tracks: map.tracks,
          timescales: map.timescales
        };
      }
      return storedMap || map;
    };
    _proto.segmentKey = function segmentKey(key, set4) {
      if (set4 === void 0) {
        set4 = false;
      }
      if (!key) {
        return null;
      }
      var id = segmentKeyId(key);
      var storedKey = this.keyCache_[id];
      if (this.cacheEncryptionKeys_ && set4 && !storedKey && key.bytes) {
        this.keyCache_[id] = storedKey = {
          resolvedUri: key.resolvedUri,
          bytes: key.bytes
        };
      }
      var result = {
        resolvedUri: (storedKey || key).resolvedUri
      };
      if (storedKey) {
        result.bytes = storedKey.bytes;
      }
      return result;
    };
    _proto.couldBeginLoading_ = function couldBeginLoading_() {
      return this.playlist_ && !this.paused();
    };
    _proto.load = function load() {
      this.monitorBuffer_();
      if (!this.playlist_) {
        return;
      }
      this.syncController_.setDateTimeMapping(this.playlist_);
      if (this.state === "INIT" && this.couldBeginLoading_()) {
        return this.init_();
      }
      if (!this.couldBeginLoading_() || this.state !== "READY" && this.state !== "INIT") {
        return;
      }
      this.state = "READY";
    };
    _proto.init_ = function init_() {
      this.state = "READY";
      this.resetEverything();
      return this.monitorBuffer_();
    };
    _proto.playlist = function playlist(newPlaylist, options) {
      if (options === void 0) {
        options = {};
      }
      if (!newPlaylist) {
        return;
      }
      var oldPlaylist = this.playlist_;
      var segmentInfo = this.pendingSegment_;
      this.playlist_ = newPlaylist;
      this.xhrOptions_ = options;
      if (this.state === "INIT") {
        newPlaylist.syncInfo = {
          mediaSequence: newPlaylist.mediaSequence,
          time: 0
        };
      }
      var oldId = null;
      if (oldPlaylist) {
        if (oldPlaylist.id) {
          oldId = oldPlaylist.id;
        } else if (oldPlaylist.uri) {
          oldId = oldPlaylist.uri;
        }
      }
      this.logger_("playlist update [" + oldId + " => " + (newPlaylist.id || newPlaylist.uri) + "]");
      this.trigger("syncinfoupdate");
      if (this.state === "INIT" && this.couldBeginLoading_()) {
        return this.init_();
      }
      if (!oldPlaylist || oldPlaylist.uri !== newPlaylist.uri) {
        if (this.mediaIndex !== null || this.handlePartialData_) {
          this.resyncLoader();
        }
        this.currentMediaInfo_ = void 0;
        this.trigger("playlistupdate");
        return;
      }
      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;
      this.logger_("live window shift [" + mediaSequenceDiff + "]");
      if (this.mediaIndex !== null) {
        this.mediaIndex -= mediaSequenceDiff;
      }
      if (segmentInfo) {
        segmentInfo.mediaIndex -= mediaSequenceDiff;
        if (segmentInfo.mediaIndex >= 0) {
          segmentInfo.segment = newPlaylist.segments[segmentInfo.mediaIndex];
        }
      }
      this.syncController_.saveExpiredSegmentInfo(oldPlaylist, newPlaylist);
    };
    _proto.pause = function pause() {
      if (this.checkBufferTimeout_) {
        import_window2.default.clearTimeout(this.checkBufferTimeout_);
        this.checkBufferTimeout_ = null;
      }
    };
    _proto.paused = function paused() {
      return this.checkBufferTimeout_ === null;
    };
    _proto.resetEverything = function resetEverything(done) {
      this.ended_ = false;
      this.appendInitSegment_ = {
        audio: true,
        video: true
      };
      this.resetLoader();
      this.remove(0, Infinity, done);
      if (this.transmuxer_) {
        this.transmuxer_.postMessage({
          action: "clearAllMp4Captions"
        });
      }
    };
    _proto.resetLoader = function resetLoader() {
      this.fetchAtBuffer_ = false;
      this.resyncLoader();
    };
    _proto.resyncLoader = function resyncLoader() {
      if (this.transmuxer_) {
        segmentTransmuxer.reset(this.transmuxer_);
      }
      this.mediaIndex = null;
      this.syncPoint_ = null;
      this.isPendingTimestampOffset_ = false;
      this.callQueue_ = [];
      this.loadQueue_ = [];
      this.metadataQueue_.id3 = [];
      this.metadataQueue_.caption = [];
      this.abort();
      if (this.transmuxer_) {
        this.transmuxer_.postMessage({
          action: "clearParsedMp4Captions"
        });
      }
    };
    _proto.remove = function remove2(start2, end, done) {
      if (done === void 0) {
        done = function done2() {
        };
      }
      if (end === Infinity) {
        end = this.duration_();
      }
      if (!this.sourceUpdater_ || !this.currentMediaInfo_) {
        return;
      }
      var removesRemaining = 1;
      var removeFinished = function removeFinished2() {
        removesRemaining--;
        if (removesRemaining === 0) {
          done();
        }
      };
      if (!this.audioDisabled_) {
        removesRemaining++;
        this.sourceUpdater_.removeAudio(start2, end, removeFinished);
      }
      if (this.loaderType_ === "main" && this.currentMediaInfo_ && this.currentMediaInfo_.hasVideo) {
        this.gopBuffer_ = removeGopBuffer(this.gopBuffer_, start2, end, this.timeMapping_);
        removesRemaining++;
        this.sourceUpdater_.removeVideo(start2, end, removeFinished);
      }
      for (var track in this.inbandTextTracks_) {
        removeCuesFromTrack(start2, end, this.inbandTextTracks_[track]);
      }
      removeCuesFromTrack(start2, end, this.segmentMetadataTrack_);
      removeFinished();
    };
    _proto.monitorBuffer_ = function monitorBuffer_() {
      if (this.checkBufferTimeout_) {
        import_window2.default.clearTimeout(this.checkBufferTimeout_);
      }
      this.checkBufferTimeout_ = import_window2.default.setTimeout(this.monitorBufferTick_.bind(this), 1);
    };
    _proto.monitorBufferTick_ = function monitorBufferTick_() {
      if (this.state === "READY") {
        this.fillBuffer_();
      }
      if (this.checkBufferTimeout_) {
        import_window2.default.clearTimeout(this.checkBufferTimeout_);
      }
      this.checkBufferTimeout_ = import_window2.default.setTimeout(this.monitorBufferTick_.bind(this), CHECK_BUFFER_DELAY);
    };
    _proto.fillBuffer_ = function fillBuffer_() {
      if (this.sourceUpdater_.updating()) {
        return;
      }
      if (!this.syncPoint_) {
        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
      }
      var buffered = this.buffered_();
      var segmentInfo = this.checkBuffer_(buffered, this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);
      if (!segmentInfo) {
        return;
      }
      segmentInfo.timestampOffset = timestampOffsetForSegment({
        segmentTimeline: segmentInfo.timeline,
        currentTimeline: this.currentTimeline_,
        startOfSegment: segmentInfo.startOfSegment,
        buffered,
        overrideCheck: this.isPendingTimestampOffset_
      });
      this.isPendingTimestampOffset_ = false;
      if (typeof segmentInfo.timestampOffset === "number") {
        this.timelineChangeController_.pendingTimelineChange({
          type: this.loaderType_,
          from: this.currentTimeline_,
          to: segmentInfo.timeline
        });
      }
      this.loadSegment_(segmentInfo);
    };
    _proto.isEndOfStream_ = function isEndOfStream_(mediaIndex, playlist) {
      if (mediaIndex === void 0) {
        mediaIndex = this.mediaIndex;
      }
      if (playlist === void 0) {
        playlist = this.playlist_;
      }
      if (!playlist || !this.mediaSource_) {
        return false;
      }
      var appendedLastSegment = mediaIndex + 1 === playlist.segments.length;
      return playlist.endList && this.mediaSource_.readyState === "open" && appendedLastSegment;
    };
    _proto.checkBuffer_ = function checkBuffer_(buffered, playlist, currentMediaIndex, hasPlayed, currentTime, syncPoint) {
      var lastBufferedEnd = 0;
      if (buffered.length) {
        lastBufferedEnd = buffered.end(buffered.length - 1);
      }
      var bufferedTime = Math.max(0, lastBufferedEnd - currentTime);
      if (!playlist.segments.length) {
        return null;
      }
      if (bufferedTime >= this.goalBufferLength_()) {
        return null;
      }
      if (!hasPlayed && bufferedTime >= 1) {
        return null;
      }
      var nextMediaIndex = null;
      var startOfSegment;
      var isSyncRequest = false;
      if (syncPoint === null) {
        nextMediaIndex = this.getSyncSegmentCandidate_(playlist);
        isSyncRequest = true;
      } else if (currentMediaIndex !== null) {
        var segment = playlist.segments[currentMediaIndex];
        if (segment && segment.end) {
          startOfSegment = segment.end;
        } else {
          startOfSegment = lastBufferedEnd;
        }
        nextMediaIndex = currentMediaIndex + 1;
      } else if (this.fetchAtBuffer_) {
        var mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, lastBufferedEnd, syncPoint.segmentIndex, syncPoint.time);
        nextMediaIndex = mediaSourceInfo.mediaIndex;
        startOfSegment = mediaSourceInfo.startTime;
      } else {
        var _mediaSourceInfo = Playlist.getMediaInfoForTime(playlist, currentTime, syncPoint.segmentIndex, syncPoint.time);
        nextMediaIndex = _mediaSourceInfo.mediaIndex;
        startOfSegment = _mediaSourceInfo.startTime;
      }
      var segmentInfo = this.generateSegmentInfo_(playlist, nextMediaIndex, startOfSegment, isSyncRequest);
      if (!segmentInfo) {
        return;
      }
      if (this.mediaSource_ && this.playlist_ && segmentInfo.mediaIndex === this.playlist_.segments.length - 1 && this.mediaSource_.readyState === "ended" && !this.seeking_()) {
        return;
      }
      this.logger_("checkBuffer_ returning " + segmentInfo.uri, {
        segmentInfo,
        playlist,
        currentMediaIndex,
        nextMediaIndex,
        startOfSegment,
        isSyncRequest
      });
      return segmentInfo;
    };
    _proto.getSyncSegmentCandidate_ = function getSyncSegmentCandidate_(playlist) {
      var _this2 = this;
      if (this.currentTimeline_ === -1) {
        return 0;
      }
      var segmentIndexArray = playlist.segments.map(function(s, i) {
        return {
          timeline: s.timeline,
          segmentIndex: i
        };
      }).filter(function(s) {
        return s.timeline === _this2.currentTimeline_;
      });
      if (segmentIndexArray.length) {
        return segmentIndexArray[Math.min(segmentIndexArray.length - 1, 1)].segmentIndex;
      }
      return Math.max(playlist.segments.length - 1, 0);
    };
    _proto.generateSegmentInfo_ = function generateSegmentInfo_(playlist, mediaIndex, startOfSegment, isSyncRequest) {
      if (mediaIndex < 0 || mediaIndex >= playlist.segments.length) {
        return null;
      }
      var segment = playlist.segments[mediaIndex];
      var audioBuffered = this.sourceUpdater_.audioBuffered();
      var videoBuffered = this.sourceUpdater_.videoBuffered();
      var audioAppendStart;
      var gopsToAlignWith;
      if (audioBuffered.length) {
        audioAppendStart = audioBuffered.end(audioBuffered.length - 1) - this.sourceUpdater_.audioTimestampOffset();
      }
      if (videoBuffered.length) {
        gopsToAlignWith = gopsSafeToAlignWith(this.gopBuffer_, this.currentTime_() - this.sourceUpdater_.videoTimestampOffset(), this.timeMapping_);
      }
      return {
        requestId: "segment-loader-" + Math.random(),
        uri: segment.resolvedUri,
        mediaIndex,
        isSyncRequest,
        startOfSegment,
        playlist,
        bytes: null,
        encryptedBytes: null,
        timestampOffset: null,
        timeline: segment.timeline,
        duration: segment.duration,
        segment,
        byteLength: 0,
        transmuxer: this.transmuxer_,
        audioAppendStart,
        gopsToAlignWith
      };
    };
    _proto.earlyAbortWhenNeeded_ = function earlyAbortWhenNeeded_(stats) {
      if (this.vhs_.tech_.paused() || !this.xhrOptions_.timeout || !this.playlist_.attributes.BANDWIDTH) {
        return;
      }
      if (Date.now() - (stats.firstBytesReceivedAt || Date.now()) < 1e3) {
        return;
      }
      var currentTime = this.currentTime_();
      var measuredBandwidth = stats.bandwidth;
      var segmentDuration = this.pendingSegment_.duration;
      var requestTimeRemaining = Playlist.estimateSegmentRequestTime(segmentDuration, measuredBandwidth, this.playlist_, stats.bytesReceived);
      var timeUntilRebuffer$1 = timeUntilRebuffer(this.buffered_(), currentTime, this.vhs_.tech_.playbackRate()) - 1;
      if (requestTimeRemaining <= timeUntilRebuffer$1) {
        return;
      }
      var switchCandidate = minRebufferMaxBandwidthSelector({
        master: this.vhs_.playlists.master,
        currentTime,
        bandwidth: measuredBandwidth,
        duration: this.duration_(),
        segmentDuration,
        timeUntilRebuffer: timeUntilRebuffer$1,
        currentTimeline: this.currentTimeline_,
        syncController: this.syncController_
      });
      if (!switchCandidate) {
        return;
      }
      var rebufferingImpact = requestTimeRemaining - timeUntilRebuffer$1;
      var timeSavedBySwitching = rebufferingImpact - switchCandidate.rebufferingImpact;
      var minimumTimeSaving = 0.5;
      if (timeUntilRebuffer$1 <= TIME_FUDGE_FACTOR) {
        minimumTimeSaving = 1;
      }
      if (!switchCandidate.playlist || switchCandidate.playlist.uri === this.playlist_.uri || timeSavedBySwitching < minimumTimeSaving) {
        return;
      }
      this.bandwidth = switchCandidate.playlist.attributes.BANDWIDTH * Config.BANDWIDTH_VARIANCE + 1;
      this.trigger("earlyabort");
    };
    _proto.handleAbort_ = function handleAbort_() {
      this.mediaRequestsAborted += 1;
    };
    _proto.handleProgress_ = function handleProgress_(event, simpleSegment) {
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      this.trigger("progress");
    };
    _proto.handleTrackInfo_ = function handleTrackInfo_(simpleSegment, trackInfo) {
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      if (this.checkForIllegalMediaSwitch(trackInfo)) {
        return;
      }
      trackInfo = trackInfo || {};
      if (!shallowEqual(this.currentMediaInfo_, trackInfo)) {
        this.appendInitSegment_ = {
          audio: true,
          video: true
        };
        this.startingMediaInfo_ = trackInfo;
        this.currentMediaInfo_ = trackInfo;
        this.logger_("trackinfo update", trackInfo);
        this.trigger("trackinfo");
      }
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      this.pendingSegment_.trackInfo = trackInfo;
      if (this.hasEnoughInfoToAppend_()) {
        this.processCallQueue_();
      }
    };
    _proto.handleTimingInfo_ = function handleTimingInfo_(simpleSegment, mediaType, timeType, time) {
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      var segmentInfo = this.pendingSegment_;
      var timingInfoProperty = timingInfoPropertyForMedia(mediaType);
      segmentInfo[timingInfoProperty] = segmentInfo[timingInfoProperty] || {};
      segmentInfo[timingInfoProperty][timeType] = time;
      this.logger_("timinginfo: " + mediaType + " - " + timeType + " - " + time);
      if (this.hasEnoughInfoToAppend_()) {
        this.processCallQueue_();
      }
    };
    _proto.handleCaptions_ = function handleCaptions_(simpleSegment, captionData) {
      var _this3 = this;
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      if (captionData.length === 0) {
        this.logger_("SegmentLoader received no captions from a caption event");
        return;
      }
      var segmentInfo = this.pendingSegment_;
      if (!segmentInfo.hasAppendedData_) {
        this.metadataQueue_.caption.push(this.handleCaptions_.bind(this, simpleSegment, captionData));
        return;
      }
      var timestampOffset2 = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
      var captionTracks = {};
      captionData.forEach(function(caption) {
        captionTracks[caption.stream] = captionTracks[caption.stream] || {
          startTime: Infinity,
          captions: [],
          endTime: 0
        };
        var captionTrack = captionTracks[caption.stream];
        captionTrack.startTime = Math.min(captionTrack.startTime, caption.startTime + timestampOffset2);
        captionTrack.endTime = Math.max(captionTrack.endTime, caption.endTime + timestampOffset2);
        captionTrack.captions.push(caption);
      });
      Object.keys(captionTracks).forEach(function(trackName) {
        var _captionTracks$trackN = captionTracks[trackName], startTime = _captionTracks$trackN.startTime, endTime = _captionTracks$trackN.endTime, captions = _captionTracks$trackN.captions;
        var inbandTextTracks = _this3.inbandTextTracks_;
        _this3.logger_("adding cues from " + startTime + " -> " + endTime + " for " + trackName);
        createCaptionsTrackIfNotExists(inbandTextTracks, _this3.vhs_.tech_, trackName);
        removeCuesFromTrack(startTime, endTime, inbandTextTracks[trackName]);
        addCaptionData({
          captionArray: captions,
          inbandTextTracks,
          timestampOffset: timestampOffset2
        });
      });
      if (this.transmuxer_) {
        this.transmuxer_.postMessage({
          action: "clearParsedMp4Captions"
        });
      }
    };
    _proto.handleId3_ = function handleId3_(simpleSegment, id3Frames, dispatchType) {
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      var segmentInfo = this.pendingSegment_;
      if (!segmentInfo.hasAppendedData_) {
        this.metadataQueue_.id3.push(this.handleId3_.bind(this, simpleSegment, id3Frames, dispatchType));
        return;
      }
      var timestampOffset2 = this.sourceUpdater_.videoTimestampOffset() === null ? this.sourceUpdater_.audioTimestampOffset() : this.sourceUpdater_.videoTimestampOffset();
      createMetadataTrackIfNotExists(this.inbandTextTracks_, dispatchType, this.vhs_.tech_);
      addMetadata({
        inbandTextTracks: this.inbandTextTracks_,
        metadataArray: id3Frames,
        timestampOffset: timestampOffset2,
        videoDuration: this.duration_()
      });
    };
    _proto.processMetadataQueue_ = function processMetadataQueue_() {
      this.metadataQueue_.id3.forEach(function(fn) {
        return fn();
      });
      this.metadataQueue_.caption.forEach(function(fn) {
        return fn();
      });
      this.metadataQueue_.id3 = [];
      this.metadataQueue_.caption = [];
    };
    _proto.processCallQueue_ = function processCallQueue_() {
      var callQueue = this.callQueue_;
      this.callQueue_ = [];
      callQueue.forEach(function(fun) {
        return fun();
      });
    };
    _proto.processLoadQueue_ = function processLoadQueue_() {
      var loadQueue = this.loadQueue_;
      this.loadQueue_ = [];
      loadQueue.forEach(function(fun) {
        return fun();
      });
    };
    _proto.hasEnoughInfoToLoad_ = function hasEnoughInfoToLoad_() {
      if (this.loaderType_ !== "audio") {
        return true;
      }
      var segmentInfo = this.pendingSegment_;
      if (!segmentInfo) {
        return false;
      }
      if (!this.currentMediaInfo_) {
        return true;
      }
      if (shouldWaitForTimelineChange({
        timelineChangeController: this.timelineChangeController_,
        currentTimeline: this.currentTimeline_,
        segmentTimeline: segmentInfo.timeline,
        loaderType: this.loaderType_,
        audioDisabled: this.audioDisabled_
      })) {
        return false;
      }
      return true;
    };
    _proto.hasEnoughInfoToAppend_ = function hasEnoughInfoToAppend_() {
      if (!this.sourceUpdater_.ready()) {
        return false;
      }
      var segmentInfo = this.pendingSegment_;
      if (!segmentInfo || !segmentInfo.trackInfo) {
        return false;
      }
      if (!this.handlePartialData_) {
        var _this$currentMediaInf = this.currentMediaInfo_, hasAudio = _this$currentMediaInf.hasAudio, hasVideo = _this$currentMediaInf.hasVideo, isMuxed3 = _this$currentMediaInf.isMuxed;
        if (hasVideo && !segmentInfo.videoTimingInfo) {
          return false;
        }
        if (hasAudio && !this.audioDisabled_ && !isMuxed3 && !segmentInfo.audioTimingInfo) {
          return false;
        }
      }
      if (shouldWaitForTimelineChange({
        timelineChangeController: this.timelineChangeController_,
        currentTimeline: this.currentTimeline_,
        segmentTimeline: segmentInfo.timeline,
        loaderType: this.loaderType_,
        audioDisabled: this.audioDisabled_
      })) {
        return false;
      }
      return true;
    };
    _proto.handleData_ = function handleData_3(simpleSegment, result) {
      this.earlyAbortWhenNeeded_(simpleSegment.stats);
      if (this.checkForAbort_(simpleSegment.requestId)) {
        return;
      }
      if (this.callQueue_.length || !this.hasEnoughInfoToAppend_()) {
        this.callQueue_.push(this.handleData_.bind(this, simpleSegment, result));
        return;
      }
      var segmentInfo = this.pendingSegment_;
      this.setTimeMapping_(segmentInfo.timeline);
      this.updateMediaSecondsLoaded_(segmentInfo.segment);
      if (this.mediaSource_.readyState === "closed") {
        return;
      }
      if (simpleSegment.map) {
        simpleSegment.map = this.initSegmentForMap(simpleSegment.map, true);
        segmentInfo.segment.map = simpleSegment.map;
      }
      if (simpleSegment.key) {
        this.segmentKey(simpleSegment.key, true);
      }
      segmentInfo.isFmp4 = simpleSegment.isFmp4;
      segmentInfo.timingInfo = segmentInfo.timingInfo || {};
      if (segmentInfo.isFmp4) {
        this.trigger("fmp4");
        segmentInfo.timingInfo.start = segmentInfo[timingInfoPropertyForMedia(result.type)].start;
      } else {
        var useVideoTimingInfo = this.loaderType_ === "main" && this.currentMediaInfo_.hasVideo;
        var firstVideoFrameTimeForData;
        if (useVideoTimingInfo) {
          firstVideoFrameTimeForData = this.handlePartialData_ ? result.videoFramePtsTime : segmentInfo.videoTimingInfo.start;
        }
        segmentInfo.timingInfo.start = this.trueSegmentStart_({
          currentStart: segmentInfo.timingInfo.start,
          playlist: segmentInfo.playlist,
          mediaIndex: segmentInfo.mediaIndex,
          currentVideoTimestampOffset: this.sourceUpdater_.videoTimestampOffset(),
          useVideoTimingInfo,
          firstVideoFrameTimeForData,
          videoTimingInfo: segmentInfo.videoTimingInfo,
          audioTimingInfo: segmentInfo.audioTimingInfo
        });
      }
      this.updateAppendInitSegmentStatus(segmentInfo, result.type);
      this.updateSourceBufferTimestampOffset_(segmentInfo);
      segmentInfo.hasAppendedData_ = true;
      this.processMetadataQueue_();
      this.appendData_(segmentInfo, result);
    };
    _proto.updateAppendInitSegmentStatus = function updateAppendInitSegmentStatus(segmentInfo, type3) {
      if (this.loaderType_ === "main" && typeof segmentInfo.timestampOffset === "number" && !segmentInfo.changedTimestampOffset) {
        this.appendInitSegment_ = {
          audio: true,
          video: true
        };
      }
      if (this.playlistOfLastInitSegment_[type3] !== segmentInfo.playlist) {
        this.appendInitSegment_[type3] = true;
      }
    };
    _proto.getInitSegmentAndUpdateState_ = function getInitSegmentAndUpdateState_(_ref4) {
      var type3 = _ref4.type, initSegment = _ref4.initSegment, map = _ref4.map, playlist = _ref4.playlist;
      if (map) {
        var id = initSegmentId(map);
        if (this.activeInitSegmentId_ === id) {
          return null;
        }
        initSegment = this.initSegmentForMap(map, true).bytes;
        this.activeInitSegmentId_ = id;
      }
      if (initSegment && this.appendInitSegment_[type3]) {
        this.playlistOfLastInitSegment_[type3] = playlist;
        this.appendInitSegment_[type3] = map ? true : false;
        this.activeInitSegmentId_ = null;
        return initSegment;
      }
      return null;
    };
    _proto.appendToSourceBuffer_ = function appendToSourceBuffer_(_ref5) {
      var _this4 = this;
      var segmentInfo = _ref5.segmentInfo, type3 = _ref5.type, initSegment = _ref5.initSegment, data = _ref5.data;
      var segments = [data];
      var byteLength = data.byteLength;
      if (initSegment) {
        segments.unshift(initSegment);
        byteLength += initSegment.byteLength;
      }
      var bytes = concatSegments({
        bytes: byteLength,
        segments
      });
      this.sourceUpdater_.appendBuffer({
        segmentInfo,
        type: type3,
        bytes
      }, function(error) {
        if (error) {
          _this4.error(type3 + " append of " + bytes.length + "b failed for segment #" + segmentInfo.mediaIndex + " in playlist " + segmentInfo.playlist.id);
          _this4.trigger("appenderror");
        }
      });
    };
    _proto.handleSegmentTimingInfo_ = function handleSegmentTimingInfo_(type3, requestId, segmentTimingInfo) {
      if (!this.pendingSegment_ || requestId !== this.pendingSegment_.requestId) {
        return;
      }
      var segment = this.pendingSegment_.segment;
      var timingInfoProperty = type3 + "TimingInfo";
      if (!segment[timingInfoProperty]) {
        segment[timingInfoProperty] = {};
      }
      segment[timingInfoProperty].transmuxerPrependedSeconds = segmentTimingInfo.prependedContentDuration || 0;
      segment[timingInfoProperty].transmuxedPresentationStart = segmentTimingInfo.start.presentation;
      segment[timingInfoProperty].transmuxedDecodeStart = segmentTimingInfo.start.decode;
      segment[timingInfoProperty].transmuxedPresentationEnd = segmentTimingInfo.end.presentation;
      segment[timingInfoProperty].transmuxedDecodeEnd = segmentTimingInfo.end.decode;
      segment[timingInfoProperty].baseMediaDecodeTime = segmentTimingInfo.baseMediaDecodeTime;
    };
    _proto.appendData_ = function appendData_(segmentInfo, result) {
      var type3 = result.type, data = result.data;
      if (!data || !data.byteLength) {
        return;
      }
      if (type3 === "audio" && this.audioDisabled_) {
        return;
      }
      var initSegment = this.getInitSegmentAndUpdateState_({
        type: type3,
        initSegment: result.initSegment,
        playlist: segmentInfo.playlist,
        map: segmentInfo.isFmp4 ? segmentInfo.segment.map : null
      });
      this.appendToSourceBuffer_({
        segmentInfo,
        type: type3,
        initSegment,
        data
      });
    };
    _proto.loadSegment_ = function loadSegment_(segmentInfo) {
      var _this5 = this;
      this.state = "WAITING";
      this.pendingSegment_ = segmentInfo;
      this.trimBackBuffer_(segmentInfo);
      if (typeof segmentInfo.timestampOffset === "number") {
        if (this.transmuxer_) {
          this.transmuxer_.postMessage({
            action: "clearAllMp4Captions"
          });
        }
      }
      if (!this.hasEnoughInfoToLoad_()) {
        this.loadQueue_.push(function() {
          var buffered = _this5.buffered_();
          if (typeof segmentInfo.timestampOffset === "number") {
            segmentInfo.timestampOffset = timestampOffsetForSegment({
              segmentTimeline: segmentInfo.timeline,
              currentTimeline: _this5.currentTimeline_,
              startOfSegment: segmentInfo.startOfSegment,
              buffered,
              overrideCheck: true
            });
          }
          delete segmentInfo.audioAppendStart;
          var audioBuffered = _this5.sourceUpdater_.audioBuffered();
          if (audioBuffered.length) {
            segmentInfo.audioAppendStart = audioBuffered.end(audioBuffered.length - 1) - _this5.sourceUpdater_.audioTimestampOffset();
          }
          _this5.updateTransmuxerAndRequestSegment_(segmentInfo);
        });
        return;
      }
      this.updateTransmuxerAndRequestSegment_(segmentInfo);
    };
    _proto.updateTransmuxerAndRequestSegment_ = function updateTransmuxerAndRequestSegment_(segmentInfo) {
      if (this.shouldUpdateTransmuxerTimestampOffset_(segmentInfo.timestampOffset)) {
        this.gopBuffer_.length = 0;
        segmentInfo.gopsToAlignWith = [];
        this.timeMapping_ = 0;
        this.transmuxer_.postMessage({
          action: "reset"
        });
        this.transmuxer_.postMessage({
          action: "setTimestampOffset",
          timestampOffset: segmentInfo.timestampOffset
        });
      }
      var simpleSegment = this.createSimplifiedSegmentObj_(segmentInfo);
      segmentInfo.abortRequests = mediaSegmentRequest({
        xhr: this.vhs_.xhr,
        xhrOptions: this.xhrOptions_,
        decryptionWorker: this.decrypter_,
        segment: simpleSegment,
        handlePartialData: this.handlePartialData_,
        abortFn: this.handleAbort_.bind(this),
        progressFn: this.handleProgress_.bind(this),
        trackInfoFn: this.handleTrackInfo_.bind(this),
        timingInfoFn: this.handleTimingInfo_.bind(this),
        videoSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "video", segmentInfo.requestId),
        audioSegmentTimingInfoFn: this.handleSegmentTimingInfo_.bind(this, "audio", segmentInfo.requestId),
        captionsFn: this.handleCaptions_.bind(this),
        id3Fn: this.handleId3_.bind(this),
        dataFn: this.handleData_.bind(this),
        doneFn: this.segmentRequestFinished_.bind(this)
      });
    };
    _proto.trimBackBuffer_ = function trimBackBuffer_(segmentInfo) {
      var removeToTime = safeBackBufferTrimTime(this.seekable_(), this.currentTime_(), this.playlist_.targetDuration || 10);
      if (removeToTime > 0) {
        this.remove(0, removeToTime);
      }
    };
    _proto.createSimplifiedSegmentObj_ = function createSimplifiedSegmentObj_(segmentInfo) {
      var segment = segmentInfo.segment;
      var simpleSegment = {
        resolvedUri: segment.resolvedUri,
        byterange: segment.byterange,
        requestId: segmentInfo.requestId,
        transmuxer: segmentInfo.transmuxer,
        audioAppendStart: segmentInfo.audioAppendStart,
        gopsToAlignWith: segmentInfo.gopsToAlignWith
      };
      var previousSegment = segmentInfo.playlist.segments[segmentInfo.mediaIndex - 1];
      if (previousSegment && previousSegment.timeline === segment.timeline) {
        if (previousSegment.videoTimingInfo) {
          simpleSegment.baseStartTime = previousSegment.videoTimingInfo.transmuxedDecodeEnd;
        } else if (previousSegment.audioTimingInfo) {
          simpleSegment.baseStartTime = previousSegment.audioTimingInfo.transmuxedDecodeEnd;
        }
      }
      if (segment.key) {
        var iv = segment.key.iv || new Uint32Array([0, 0, 0, segmentInfo.mediaIndex + segmentInfo.playlist.mediaSequence]);
        simpleSegment.key = this.segmentKey(segment.key);
        simpleSegment.key.iv = iv;
      }
      if (segment.map) {
        simpleSegment.map = this.initSegmentForMap(segment.map);
      }
      return simpleSegment;
    };
    _proto.saveTransferStats_ = function saveTransferStats_(stats) {
      this.mediaRequests += 1;
      if (stats) {
        this.mediaBytesTransferred += stats.bytesReceived;
        this.mediaTransferDuration += stats.roundTripTime;
      }
    };
    _proto.saveBandwidthRelatedStats_ = function saveBandwidthRelatedStats_(duration5, stats) {
      this.pendingSegment_.byteLength = stats.bytesReceived;
      if (duration5 < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
        this.logger_("Ignoring segment's bandwidth because its duration of " + duration5 + (" is less than the min to record " + MIN_SEGMENT_DURATION_TO_SAVE_STATS));
        return;
      }
      this.bandwidth = stats.bandwidth;
      this.roundTrip = stats.roundTripTime;
    };
    _proto.handleTimeout_ = function handleTimeout_() {
      this.mediaRequestsTimedout += 1;
      this.bandwidth = 1;
      this.roundTrip = NaN;
      this.trigger("bandwidthupdate");
    };
    _proto.segmentRequestFinished_ = function segmentRequestFinished_(error, simpleSegment, result) {
      if (this.callQueue_.length) {
        this.callQueue_.push(this.segmentRequestFinished_.bind(this, error, simpleSegment, result));
        return;
      }
      this.saveTransferStats_(simpleSegment.stats);
      if (!this.pendingSegment_) {
        return;
      }
      if (simpleSegment.requestId !== this.pendingSegment_.requestId) {
        return;
      }
      if (error) {
        this.pendingSegment_ = null;
        this.state = "READY";
        if (error.code === REQUEST_ERRORS.ABORTED) {
          return;
        }
        this.pause();
        if (error.code === REQUEST_ERRORS.TIMEOUT) {
          this.handleTimeout_();
          return;
        }
        this.mediaRequestsErrored += 1;
        this.error(error);
        this.trigger("error");
        return;
      }
      var segmentInfo = this.pendingSegment_;
      this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);
      segmentInfo.endOfAllRequests = simpleSegment.endOfAllRequests;
      if (result.gopInfo) {
        this.gopBuffer_ = updateGopBuffer(this.gopBuffer_, result.gopInfo, this.safeAppend_);
      }
      this.state = "APPENDING";
      var isEndOfStream = this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist);
      var isWalkingForward = this.mediaIndex !== null;
      var isDiscontinuity = segmentInfo.timeline !== this.currentTimeline_ && segmentInfo.timeline > 0;
      if (!segmentInfo.isFmp4 && (isEndOfStream || isWalkingForward && isDiscontinuity)) {
        segmentTransmuxer.endTimeline(this.transmuxer_);
      }
      this.trigger("appending");
      this.waitForAppendsToComplete_(segmentInfo);
    };
    _proto.setTimeMapping_ = function setTimeMapping_(timeline) {
      var timelineMapping = this.syncController_.mappingForTimeline(timeline);
      if (timelineMapping !== null) {
        this.timeMapping_ = timelineMapping;
      }
    };
    _proto.updateMediaSecondsLoaded_ = function updateMediaSecondsLoaded_(segment) {
      if (typeof segment.start === "number" && typeof segment.end === "number") {
        this.mediaSecondsLoaded += segment.end - segment.start;
      } else {
        this.mediaSecondsLoaded += segment.duration;
      }
    };
    _proto.shouldUpdateTransmuxerTimestampOffset_ = function shouldUpdateTransmuxerTimestampOffset_(timestampOffset2) {
      if (timestampOffset2 === null) {
        return false;
      }
      if (this.loaderType_ === "main" && timestampOffset2 !== this.sourceUpdater_.videoTimestampOffset()) {
        return true;
      }
      if (!this.audioDisabled_ && timestampOffset2 !== this.sourceUpdater_.audioTimestampOffset()) {
        return true;
      }
      return false;
    };
    _proto.trueSegmentStart_ = function trueSegmentStart_(_ref6) {
      var currentStart = _ref6.currentStart, playlist = _ref6.playlist, mediaIndex = _ref6.mediaIndex, firstVideoFrameTimeForData = _ref6.firstVideoFrameTimeForData, currentVideoTimestampOffset = _ref6.currentVideoTimestampOffset, useVideoTimingInfo = _ref6.useVideoTimingInfo, videoTimingInfo = _ref6.videoTimingInfo, audioTimingInfo = _ref6.audioTimingInfo;
      if (typeof currentStart !== "undefined") {
        return currentStart;
      }
      if (!useVideoTimingInfo) {
        return audioTimingInfo.start;
      }
      var previousSegment = playlist.segments[mediaIndex - 1];
      if (mediaIndex === 0 || !previousSegment || typeof previousSegment.start === "undefined" || previousSegment.end !== firstVideoFrameTimeForData + currentVideoTimestampOffset) {
        return firstVideoFrameTimeForData;
      }
      return videoTimingInfo.start;
    };
    _proto.waitForAppendsToComplete_ = function waitForAppendsToComplete_(segmentInfo) {
      if (!this.currentMediaInfo_) {
        this.error({
          message: "No starting media returned, likely due to an unsupported media format.",
          blacklistDuration: Infinity
        });
        this.trigger("error");
        return;
      }
      var _this$currentMediaInf2 = this.currentMediaInfo_, hasAudio = _this$currentMediaInf2.hasAudio, hasVideo = _this$currentMediaInf2.hasVideo, isMuxed3 = _this$currentMediaInf2.isMuxed;
      var waitForVideo = this.loaderType_ === "main" && hasVideo;
      var waitForAudio = !this.audioDisabled_ && hasAudio && !isMuxed3;
      segmentInfo.waitingOnAppends = 0;
      if (!segmentInfo.hasAppendedData_) {
        if (!segmentInfo.timingInfo && typeof segmentInfo.timestampOffset === "number") {
          this.isPendingTimestampOffset_ = true;
        }
        segmentInfo.timingInfo = {
          start: 0
        };
        segmentInfo.waitingOnAppends++;
        if (!this.isPendingTimestampOffset_) {
          this.updateSourceBufferTimestampOffset_(segmentInfo);
          this.processMetadataQueue_();
        }
        this.checkAppendsDone_(segmentInfo);
        return;
      }
      if (waitForVideo) {
        segmentInfo.waitingOnAppends++;
      }
      if (waitForAudio) {
        segmentInfo.waitingOnAppends++;
      }
      if (waitForVideo) {
        this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));
      }
      if (waitForAudio) {
        this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this, segmentInfo));
      }
    };
    _proto.checkAppendsDone_ = function checkAppendsDone_(segmentInfo) {
      if (this.checkForAbort_(segmentInfo.requestId)) {
        return;
      }
      segmentInfo.waitingOnAppends--;
      if (segmentInfo.waitingOnAppends === 0) {
        this.handleAppendsDone_();
      }
    };
    _proto.checkForIllegalMediaSwitch = function checkForIllegalMediaSwitch(trackInfo) {
      var illegalMediaSwitchError = illegalMediaSwitch(this.loaderType_, this.currentMediaInfo_, trackInfo);
      if (illegalMediaSwitchError) {
        this.error({
          message: illegalMediaSwitchError,
          blacklistDuration: Infinity
        });
        this.trigger("error");
        return true;
      }
      return false;
    };
    _proto.updateSourceBufferTimestampOffset_ = function updateSourceBufferTimestampOffset_(segmentInfo) {
      if (segmentInfo.timestampOffset === null || typeof segmentInfo.timingInfo.start !== "number" || segmentInfo.changedTimestampOffset || this.loaderType_ !== "main") {
        return;
      }
      var didChange = false;
      segmentInfo.timestampOffset -= segmentInfo.timingInfo.start;
      segmentInfo.changedTimestampOffset = true;
      if (segmentInfo.timestampOffset !== this.sourceUpdater_.videoTimestampOffset()) {
        this.sourceUpdater_.videoTimestampOffset(segmentInfo.timestampOffset);
        didChange = true;
      }
      if (segmentInfo.timestampOffset !== this.sourceUpdater_.audioTimestampOffset()) {
        this.sourceUpdater_.audioTimestampOffset(segmentInfo.timestampOffset);
        didChange = true;
      }
      if (didChange) {
        this.trigger("timestampoffset");
      }
    };
    _proto.updateTimingInfoEnd_ = function updateTimingInfoEnd_(segmentInfo) {
      segmentInfo.timingInfo = segmentInfo.timingInfo || {};
      var useVideoTimingInfo = this.loaderType_ === "main" && this.currentMediaInfo_.hasVideo;
      var prioritizedTimingInfo = useVideoTimingInfo && segmentInfo.videoTimingInfo ? segmentInfo.videoTimingInfo : segmentInfo.audioTimingInfo;
      if (!prioritizedTimingInfo) {
        return;
      }
      segmentInfo.timingInfo.end = typeof prioritizedTimingInfo.end === "number" ? prioritizedTimingInfo.end : prioritizedTimingInfo.start + segmentInfo.duration;
    };
    _proto.handleAppendsDone_ = function handleAppendsDone_() {
      if (this.pendingSegment_) {
        this.trigger("appendsdone");
      }
      if (!this.pendingSegment_) {
        this.state = "READY";
        if (!this.paused()) {
          this.monitorBuffer_();
        }
        return;
      }
      var segmentInfo = this.pendingSegment_;
      this.updateTimingInfoEnd_(segmentInfo);
      if (this.shouldSaveSegmentTimingInfo_) {
        this.syncController_.saveSegmentTimingInfo({
          segmentInfo,
          shouldSaveTimelineMapping: this.loaderType_ === "main"
        });
      }
      this.logger_(segmentInfoString(segmentInfo));
      var segmentDurationMessage = getTroublesomeSegmentDurationMessage(segmentInfo, this.sourceType_);
      if (segmentDurationMessage) {
        if (segmentDurationMessage.severity === "warn") {
          videojs$1.log.warn(segmentDurationMessage.message);
        } else {
          this.logger_(segmentDurationMessage.message);
        }
      }
      this.recordThroughput_(segmentInfo);
      this.pendingSegment_ = null;
      this.state = "READY";
      if (segmentInfo.isSyncRequest) {
        this.trigger("syncinfoupdate");
        return;
      }
      this.addSegmentMetadataCue_(segmentInfo);
      this.fetchAtBuffer_ = true;
      if (this.currentTimeline_ !== segmentInfo.timeline) {
        this.timelineChangeController_.lastTimelineChange({
          type: this.loaderType_,
          from: this.currentTimeline_,
          to: segmentInfo.timeline
        });
        if (this.loaderType_ === "main" && !this.audioDisabled_) {
          this.timelineChangeController_.lastTimelineChange({
            type: "audio",
            from: this.currentTimeline_,
            to: segmentInfo.timeline
          });
        }
      }
      this.currentTimeline_ = segmentInfo.timeline;
      this.trigger("syncinfoupdate");
      var segment = segmentInfo.segment;
      if (segment.end && this.currentTime_() - segment.end > segmentInfo.playlist.targetDuration * 3) {
        this.resetEverything();
        return;
      }
      var isWalkingForward = this.mediaIndex !== null;
      if (isWalkingForward) {
        this.trigger("bandwidthupdate");
      }
      this.trigger("progress");
      this.mediaIndex = segmentInfo.mediaIndex;
      if (this.isEndOfStream_(segmentInfo.mediaIndex, segmentInfo.playlist)) {
        this.endOfStream();
      }
      this.trigger("appended");
      if (!this.paused()) {
        this.monitorBuffer_();
      }
    };
    _proto.recordThroughput_ = function recordThroughput_(segmentInfo) {
      if (segmentInfo.duration < MIN_SEGMENT_DURATION_TO_SAVE_STATS) {
        this.logger_("Ignoring segment's throughput because its duration of " + segmentInfo.duration + (" is less than the min to record " + MIN_SEGMENT_DURATION_TO_SAVE_STATS));
        return;
      }
      var rate = this.throughput.rate;
      var segmentProcessingTime = Date.now() - segmentInfo.endOfAllRequests + 1;
      var segmentProcessingThroughput = Math.floor(segmentInfo.byteLength / segmentProcessingTime * 8 * 1e3);
      this.throughput.rate += (segmentProcessingThroughput - rate) / ++this.throughput.count;
    };
    _proto.addSegmentMetadataCue_ = function addSegmentMetadataCue_(segmentInfo) {
      if (!this.segmentMetadataTrack_) {
        return;
      }
      var segment = segmentInfo.segment;
      var start2 = segment.start;
      var end = segment.end;
      if (!finite(start2) || !finite(end)) {
        return;
      }
      removeCuesFromTrack(start2, end, this.segmentMetadataTrack_);
      var Cue = import_window2.default.WebKitDataCue || import_window2.default.VTTCue;
      var value = {
        custom: segment.custom,
        dateTimeObject: segment.dateTimeObject,
        dateTimeString: segment.dateTimeString,
        bandwidth: segmentInfo.playlist.attributes.BANDWIDTH,
        resolution: segmentInfo.playlist.attributes.RESOLUTION,
        codecs: segmentInfo.playlist.attributes.CODECS,
        byteLength: segmentInfo.byteLength,
        uri: segmentInfo.uri,
        timeline: segmentInfo.timeline,
        playlist: segmentInfo.playlist.id,
        start: start2,
        end
      };
      var data = JSON.stringify(value);
      var cue = new Cue(start2, end, data);
      cue.value = value;
      this.segmentMetadataTrack_.addCue(cue);
    };
    return SegmentLoader2;
  }(videojs$1.EventTarget);
  function noop() {
  }
  var toTitleCase$1 = function toTitleCase3(string) {
    if (typeof string !== "string") {
      return string;
    }
    return string.replace(/./, function(w) {
      return w.toUpperCase();
    });
  };
  var bufferTypes = ["video", "audio"];
  var _updating = function updating(type3, sourceUpdater) {
    var sourceBuffer = sourceUpdater[type3 + "Buffer"];
    return sourceBuffer && sourceBuffer.updating || sourceUpdater.queuePending[type3];
  };
  var nextQueueIndexOfType = function nextQueueIndexOfType2(type3, queue) {
    for (var i = 0; i < queue.length; i++) {
      var queueEntry = queue[i];
      if (queueEntry.type === "mediaSource") {
        return null;
      }
      if (queueEntry.type === type3) {
        return i;
      }
    }
    return null;
  };
  var shiftQueue = function shiftQueue2(type3, sourceUpdater) {
    if (sourceUpdater.queue.length === 0) {
      return;
    }
    var queueIndex = 0;
    var queueEntry = sourceUpdater.queue[queueIndex];
    if (queueEntry.type === "mediaSource") {
      if (!sourceUpdater.updating() && sourceUpdater.mediaSource.readyState !== "closed") {
        sourceUpdater.queue.shift();
        queueEntry.action(sourceUpdater);
        if (queueEntry.doneFn) {
          queueEntry.doneFn();
        }
        shiftQueue2("audio", sourceUpdater);
        shiftQueue2("video", sourceUpdater);
      }
      return;
    }
    if (type3 === "mediaSource") {
      return;
    }
    if (!sourceUpdater.ready() || sourceUpdater.mediaSource.readyState === "closed" || _updating(type3, sourceUpdater)) {
      return;
    }
    if (queueEntry.type !== type3) {
      queueIndex = nextQueueIndexOfType(type3, sourceUpdater.queue);
      if (queueIndex === null) {
        return;
      }
      queueEntry = sourceUpdater.queue[queueIndex];
    }
    sourceUpdater.queue.splice(queueIndex, 1);
    queueEntry.action(type3, sourceUpdater);
    if (!queueEntry.doneFn) {
      shiftQueue2(type3, sourceUpdater);
      return;
    }
    sourceUpdater.queuePending[type3] = queueEntry;
  };
  var cleanupBuffer = function cleanupBuffer2(type3, sourceUpdater) {
    var buffer = sourceUpdater[type3 + "Buffer"];
    var titleType = toTitleCase$1(type3);
    if (!buffer) {
      return;
    }
    buffer.removeEventListener("updateend", sourceUpdater["on" + titleType + "UpdateEnd_"]);
    buffer.removeEventListener("error", sourceUpdater["on" + titleType + "Error_"]);
    sourceUpdater.codecs[type3] = null;
    sourceUpdater[type3 + "Buffer"] = null;
  };
  var inSourceBuffers = function inSourceBuffers2(mediaSource, sourceBuffer) {
    return mediaSource && sourceBuffer && Array.prototype.indexOf.call(mediaSource.sourceBuffers, sourceBuffer) !== -1;
  };
  var actions = {
    appendBuffer: function appendBuffer(bytes, segmentInfo) {
      return function(type3, sourceUpdater) {
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        sourceUpdater.logger_("Appending segment " + segmentInfo.mediaIndex + "'s " + bytes.length + " bytes to " + type3 + "Buffer");
        sourceBuffer.appendBuffer(bytes);
      };
    },
    remove: function remove(start2, end) {
      return function(type3, sourceUpdater) {
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        sourceUpdater.logger_("Removing " + start2 + " to " + end + " from " + type3 + "Buffer");
        sourceBuffer.remove(start2, end);
      };
    },
    timestampOffset: function timestampOffset(offset) {
      return function(type3, sourceUpdater) {
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        sourceUpdater.logger_("Setting " + type3 + "timestampOffset to " + offset);
        sourceBuffer.timestampOffset = offset;
      };
    },
    callback: function callback(_callback) {
      return function(type3, sourceUpdater) {
        _callback();
      };
    },
    endOfStream: function endOfStream(error) {
      return function(sourceUpdater) {
        if (sourceUpdater.mediaSource.readyState !== "open") {
          return;
        }
        sourceUpdater.logger_("Calling mediaSource endOfStream(" + (error || "") + ")");
        try {
          sourceUpdater.mediaSource.endOfStream(error);
        } catch (e) {
          videojs$1.log.warn("Failed to call media source endOfStream", e);
        }
      };
    },
    duration: function duration4(_duration) {
      return function(sourceUpdater) {
        sourceUpdater.logger_("Setting mediaSource duration to " + _duration);
        try {
          sourceUpdater.mediaSource.duration = _duration;
        } catch (e) {
          videojs$1.log.warn("Failed to set media source duration", e);
        }
      };
    },
    abort: function abort() {
      return function(type3, sourceUpdater) {
        if (sourceUpdater.mediaSource.readyState !== "open") {
          return;
        }
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        sourceUpdater.logger_("calling abort on " + type3 + "Buffer");
        try {
          sourceBuffer.abort();
        } catch (e) {
          videojs$1.log.warn("Failed to abort on " + type3 + "Buffer", e);
        }
      };
    },
    addSourceBuffer: function addSourceBuffer(type3, codec) {
      return function(sourceUpdater) {
        var titleType = toTitleCase$1(type3);
        var mime = import_codecs.getMimeForCodec(codec);
        sourceUpdater.logger_("Adding " + type3 + "Buffer with codec " + codec + " to mediaSource");
        var sourceBuffer = sourceUpdater.mediaSource.addSourceBuffer(mime);
        sourceBuffer.addEventListener("updateend", sourceUpdater["on" + titleType + "UpdateEnd_"]);
        sourceBuffer.addEventListener("error", sourceUpdater["on" + titleType + "Error_"]);
        sourceUpdater.codecs[type3] = codec;
        sourceUpdater[type3 + "Buffer"] = sourceBuffer;
      };
    },
    removeSourceBuffer: function removeSourceBuffer(type3) {
      return function(sourceUpdater) {
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        cleanupBuffer(type3, sourceUpdater);
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        sourceUpdater.logger_("Removing " + type3 + "Buffer with codec " + sourceUpdater.codecs[type3] + " from mediaSource");
        try {
          sourceUpdater.mediaSource.removeSourceBuffer(sourceBuffer);
        } catch (e) {
          videojs$1.log.warn("Failed to removeSourceBuffer " + type3 + "Buffer", e);
        }
      };
    },
    changeType: function changeType(codec) {
      return function(type3, sourceUpdater) {
        var sourceBuffer = sourceUpdater[type3 + "Buffer"];
        var mime = import_codecs.getMimeForCodec(codec);
        if (!inSourceBuffers(sourceUpdater.mediaSource, sourceBuffer)) {
          return;
        }
        if (sourceUpdater.codecs[type3] === codec) {
          return;
        }
        sourceUpdater.logger_("changing " + type3 + "Buffer codec from " + sourceUpdater.codecs[type3] + " to " + codec);
        sourceBuffer.changeType(mime);
        sourceUpdater.codecs[type3] = codec;
      };
    }
  };
  var pushQueue = function pushQueue2(_ref) {
    var type3 = _ref.type, sourceUpdater = _ref.sourceUpdater, action = _ref.action, doneFn = _ref.doneFn, name = _ref.name;
    sourceUpdater.queue.push({
      type: type3,
      action,
      doneFn,
      name
    });
    shiftQueue(type3, sourceUpdater);
  };
  var onUpdateend = function onUpdateend2(type3, sourceUpdater) {
    return function(e) {
      if (sourceUpdater.queuePending[type3]) {
        var doneFn = sourceUpdater.queuePending[type3].doneFn;
        sourceUpdater.queuePending[type3] = null;
        if (doneFn) {
          doneFn(sourceUpdater[type3 + "Error_"]);
        }
      }
      shiftQueue(type3, sourceUpdater);
    };
  };
  var SourceUpdater = /* @__PURE__ */ function(_videojs$EventTarget) {
    import_inheritsLoose2.default(SourceUpdater2, _videojs$EventTarget);
    function SourceUpdater2(mediaSource) {
      var _this;
      _this = _videojs$EventTarget.call(this) || this;
      _this.mediaSource = mediaSource;
      _this.sourceopenListener_ = function() {
        return shiftQueue("mediaSource", import_assertThisInitialized2.default(_this));
      };
      _this.mediaSource.addEventListener("sourceopen", _this.sourceopenListener_);
      _this.logger_ = logger("SourceUpdater");
      _this.audioTimestampOffset_ = 0;
      _this.videoTimestampOffset_ = 0;
      _this.queue = [];
      _this.queuePending = {
        audio: null,
        video: null
      };
      _this.delayedAudioAppendQueue_ = [];
      _this.videoAppendQueued_ = false;
      _this.codecs = {};
      _this.onVideoUpdateEnd_ = onUpdateend("video", import_assertThisInitialized2.default(_this));
      _this.onAudioUpdateEnd_ = onUpdateend("audio", import_assertThisInitialized2.default(_this));
      _this.onVideoError_ = function(e) {
        _this.videoError_ = e;
      };
      _this.onAudioError_ = function(e) {
        _this.audioError_ = e;
      };
      _this.createdSourceBuffers_ = false;
      _this.initializedEme_ = false;
      _this.triggeredReady_ = false;
      return _this;
    }
    var _proto = SourceUpdater2.prototype;
    _proto.initializedEme = function initializedEme() {
      this.initializedEme_ = true;
      this.triggerReady();
    };
    _proto.hasCreatedSourceBuffers = function hasCreatedSourceBuffers() {
      return this.createdSourceBuffers_;
    };
    _proto.hasInitializedAnyEme = function hasInitializedAnyEme() {
      return this.initializedEme_;
    };
    _proto.ready = function ready() {
      return this.hasCreatedSourceBuffers() && this.hasInitializedAnyEme();
    };
    _proto.createSourceBuffers = function createSourceBuffers(codecs) {
      if (this.hasCreatedSourceBuffers()) {
        return;
      }
      this.addOrChangeSourceBuffers(codecs);
      this.createdSourceBuffers_ = true;
      this.trigger("createdsourcebuffers");
      this.triggerReady();
    };
    _proto.triggerReady = function triggerReady() {
      if (this.ready() && !this.triggeredReady_) {
        this.triggeredReady_ = true;
        this.trigger("ready");
      }
    };
    _proto.addSourceBuffer = function addSourceBuffer2(type3, codec) {
      pushQueue({
        type: "mediaSource",
        sourceUpdater: this,
        action: actions.addSourceBuffer(type3, codec),
        name: "addSourceBuffer"
      });
    };
    _proto.abort = function abort2(type3) {
      pushQueue({
        type: type3,
        sourceUpdater: this,
        action: actions.abort(type3),
        name: "abort"
      });
    };
    _proto.removeSourceBuffer = function removeSourceBuffer2(type3) {
      if (!this.canRemoveSourceBuffer()) {
        videojs$1.log.error("removeSourceBuffer is not supported!");
        return;
      }
      pushQueue({
        type: "mediaSource",
        sourceUpdater: this,
        action: actions.removeSourceBuffer(type3),
        name: "removeSourceBuffer"
      });
    };
    _proto.canRemoveSourceBuffer = function canRemoveSourceBuffer() {
      return !videojs$1.browser.IE_VERSION && !videojs$1.browser.IS_FIREFOX && import_window2.default.MediaSource && import_window2.default.MediaSource.prototype && typeof import_window2.default.MediaSource.prototype.removeSourceBuffer === "function";
    };
    SourceUpdater2.canChangeType = function canChangeType() {
      return import_window2.default.SourceBuffer && import_window2.default.SourceBuffer.prototype && typeof import_window2.default.SourceBuffer.prototype.changeType === "function";
    };
    _proto.canChangeType = function canChangeType() {
      return this.constructor.canChangeType();
    };
    _proto.changeType = function changeType2(type3, codec) {
      if (!this.canChangeType()) {
        videojs$1.log.error("changeType is not supported!");
        return;
      }
      pushQueue({
        type: type3,
        sourceUpdater: this,
        action: actions.changeType(codec),
        name: "changeType"
      });
    };
    _proto.addOrChangeSourceBuffers = function addOrChangeSourceBuffers(codecs) {
      var _this2 = this;
      if (!codecs || typeof codecs !== "object" || Object.keys(codecs).length === 0) {
        throw new Error("Cannot addOrChangeSourceBuffers to undefined codecs");
      }
      Object.keys(codecs).forEach(function(type3) {
        var codec = codecs[type3];
        if (!_this2.hasCreatedSourceBuffers()) {
          return _this2.addSourceBuffer(type3, codec);
        }
        if (_this2.canChangeType()) {
          _this2.changeType(type3, codec);
        }
      });
    };
    _proto.appendBuffer = function appendBuffer2(options, doneFn) {
      var _this3 = this;
      var segmentInfo = options.segmentInfo, type3 = options.type, bytes = options.bytes;
      this.processedAppend_ = true;
      if (type3 === "audio" && this.videoBuffer && !this.videoAppendQueued_) {
        this.delayedAudioAppendQueue_.push([options, doneFn]);
        this.logger_("delayed audio append of " + bytes.length + " until video append");
        return;
      }
      pushQueue({
        type: type3,
        sourceUpdater: this,
        action: actions.appendBuffer(bytes, segmentInfo || {
          mediaIndex: -1
        }),
        doneFn,
        name: "appendBuffer"
      });
      if (type3 === "video") {
        this.videoAppendQueued_ = true;
        if (!this.delayedAudioAppendQueue_.length) {
          return;
        }
        var queue = this.delayedAudioAppendQueue_.slice();
        this.logger_("queuing delayed audio " + queue.length + " appendBuffers");
        this.delayedAudioAppendQueue_.length = 0;
        queue.forEach(function(que) {
          _this3.appendBuffer.apply(_this3, que);
        });
      }
    };
    _proto.audioBuffered = function audioBuffered() {
      if (!inSourceBuffers(this.mediaSource, this.audioBuffer)) {
        return videojs$1.createTimeRange();
      }
      return this.audioBuffer.buffered ? this.audioBuffer.buffered : videojs$1.createTimeRange();
    };
    _proto.videoBuffered = function videoBuffered() {
      if (!inSourceBuffers(this.mediaSource, this.videoBuffer)) {
        return videojs$1.createTimeRange();
      }
      return this.videoBuffer.buffered ? this.videoBuffer.buffered : videojs$1.createTimeRange();
    };
    _proto.buffered = function buffered() {
      var video = inSourceBuffers(this.mediaSource, this.videoBuffer) ? this.videoBuffer : null;
      var audio = inSourceBuffers(this.mediaSource, this.audioBuffer) ? this.audioBuffer : null;
      if (audio && !video) {
        return this.audioBuffered();
      }
      if (video && !audio) {
        return this.videoBuffered();
      }
      return bufferIntersection(this.audioBuffered(), this.videoBuffered());
    };
    _proto.setDuration = function setDuration(duration5, doneFn) {
      if (doneFn === void 0) {
        doneFn = noop;
      }
      pushQueue({
        type: "mediaSource",
        sourceUpdater: this,
        action: actions.duration(duration5),
        name: "duration",
        doneFn
      });
    };
    _proto.endOfStream = function endOfStream2(error, doneFn) {
      if (error === void 0) {
        error = null;
      }
      if (doneFn === void 0) {
        doneFn = noop;
      }
      if (typeof error !== "string") {
        error = void 0;
      }
      pushQueue({
        type: "mediaSource",
        sourceUpdater: this,
        action: actions.endOfStream(error),
        name: "endOfStream",
        doneFn
      });
    };
    _proto.removeAudio = function removeAudio(start2, end, done) {
      if (done === void 0) {
        done = noop;
      }
      if (!this.audioBuffered().length || this.audioBuffered().end(0) === 0) {
        done();
        return;
      }
      pushQueue({
        type: "audio",
        sourceUpdater: this,
        action: actions.remove(start2, end),
        doneFn: done,
        name: "remove"
      });
    };
    _proto.removeVideo = function removeVideo(start2, end, done) {
      if (done === void 0) {
        done = noop;
      }
      if (!this.videoBuffered().length || this.videoBuffered().end(0) === 0) {
        done();
        return;
      }
      pushQueue({
        type: "video",
        sourceUpdater: this,
        action: actions.remove(start2, end),
        doneFn: done,
        name: "remove"
      });
    };
    _proto.updating = function updating2() {
      if (_updating("audio", this) || _updating("video", this)) {
        return true;
      }
      return false;
    };
    _proto.audioTimestampOffset = function audioTimestampOffset(offset) {
      if (typeof offset !== "undefined" && this.audioBuffer && this.audioTimestampOffset_ !== offset) {
        pushQueue({
          type: "audio",
          sourceUpdater: this,
          action: actions.timestampOffset(offset),
          name: "timestampOffset"
        });
        this.audioTimestampOffset_ = offset;
      }
      return this.audioTimestampOffset_;
    };
    _proto.videoTimestampOffset = function videoTimestampOffset(offset) {
      if (typeof offset !== "undefined" && this.videoBuffer && this.videoTimestampOffset !== offset) {
        pushQueue({
          type: "video",
          sourceUpdater: this,
          action: actions.timestampOffset(offset),
          name: "timestampOffset"
        });
        this.videoTimestampOffset_ = offset;
      }
      return this.videoTimestampOffset_;
    };
    _proto.audioQueueCallback = function audioQueueCallback(callback2) {
      if (!this.audioBuffer) {
        return;
      }
      pushQueue({
        type: "audio",
        sourceUpdater: this,
        action: actions.callback(callback2),
        name: "callback"
      });
    };
    _proto.videoQueueCallback = function videoQueueCallback(callback2) {
      if (!this.videoBuffer) {
        return;
      }
      pushQueue({
        type: "video",
        sourceUpdater: this,
        action: actions.callback(callback2),
        name: "callback"
      });
    };
    _proto.dispose = function dispose3() {
      var _this4 = this;
      this.trigger("dispose");
      bufferTypes.forEach(function(type3) {
        _this4.abort(type3);
        if (_this4.canRemoveSourceBuffer()) {
          _this4.removeSourceBuffer(type3);
        } else {
          _this4[type3 + "QueueCallback"](function() {
            return cleanupBuffer(type3, _this4);
          });
        }
      });
      this.videoAppendQueued_ = false;
      this.delayedAudioAppendQueue_.length = 0;
      if (this.sourceopenListener_) {
        this.mediaSource.removeEventListener("sourceopen", this.sourceopenListener_);
      }
      this.off();
    };
    return SourceUpdater2;
  }(videojs$1.EventTarget);
  var uint8ToUtf8 = function uint8ToUtf82(uintArray) {
    return decodeURIComponent(escape(String.fromCharCode.apply(null, uintArray)));
  };
  var VTT_LINE_TERMINATORS = new Uint8Array("\n\n".split("").map(function(_char3) {
    return _char3.charCodeAt(0);
  }));
  var VTTSegmentLoader = /* @__PURE__ */ function(_SegmentLoader) {
    import_inheritsLoose2.default(VTTSegmentLoader2, _SegmentLoader);
    function VTTSegmentLoader2(settings, options) {
      var _this;
      if (options === void 0) {
        options = {};
      }
      _this = _SegmentLoader.call(this, settings, options) || this;
      _this.handlePartialData_ = false;
      _this.mediaSource_ = null;
      _this.subtitlesTrack_ = null;
      _this.loaderType_ = "subtitle";
      _this.featuresNativeTextTracks_ = settings.featuresNativeTextTracks;
      _this.shouldSaveSegmentTimingInfo_ = false;
      return _this;
    }
    var _proto = VTTSegmentLoader2.prototype;
    _proto.createTransmuxer_ = function createTransmuxer_() {
      return null;
    };
    _proto.buffered_ = function buffered_() {
      if (!this.subtitlesTrack_ || !this.subtitlesTrack_.cues.length) {
        return videojs$1.createTimeRanges();
      }
      var cues = this.subtitlesTrack_.cues;
      var start2 = cues[0].startTime;
      var end = cues[cues.length - 1].startTime;
      return videojs$1.createTimeRanges([[start2, end]]);
    };
    _proto.initSegmentForMap = function initSegmentForMap(map, set4) {
      if (set4 === void 0) {
        set4 = false;
      }
      if (!map) {
        return null;
      }
      var id = initSegmentId(map);
      var storedMap = this.initSegments_[id];
      if (set4 && !storedMap && map.bytes) {
        var combinedByteLength = VTT_LINE_TERMINATORS.byteLength + map.bytes.byteLength;
        var combinedSegment = new Uint8Array(combinedByteLength);
        combinedSegment.set(map.bytes);
        combinedSegment.set(VTT_LINE_TERMINATORS, map.bytes.byteLength);
        this.initSegments_[id] = storedMap = {
          resolvedUri: map.resolvedUri,
          byterange: map.byterange,
          bytes: combinedSegment
        };
      }
      return storedMap || map;
    };
    _proto.couldBeginLoading_ = function couldBeginLoading_() {
      return this.playlist_ && this.subtitlesTrack_ && !this.paused();
    };
    _proto.init_ = function init_() {
      this.state = "READY";
      this.resetEverything();
      return this.monitorBuffer_();
    };
    _proto.track = function track(_track) {
      if (typeof _track === "undefined") {
        return this.subtitlesTrack_;
      }
      this.subtitlesTrack_ = _track;
      if (this.state === "INIT" && this.couldBeginLoading_()) {
        this.init_();
      }
      return this.subtitlesTrack_;
    };
    _proto.remove = function remove2(start2, end) {
      removeCuesFromTrack(start2, end, this.subtitlesTrack_);
    };
    _proto.fillBuffer_ = function fillBuffer_() {
      var _this2 = this;
      if (!this.syncPoint_) {
        this.syncPoint_ = this.syncController_.getSyncPoint(this.playlist_, this.duration_(), this.currentTimeline_, this.currentTime_());
      }
      var segmentInfo = this.checkBuffer_(this.buffered_(), this.playlist_, this.mediaIndex, this.hasPlayed_(), this.currentTime_(), this.syncPoint_);
      segmentInfo = this.skipEmptySegments_(segmentInfo);
      if (!segmentInfo) {
        return;
      }
      if (this.syncController_.timestampOffsetForTimeline(segmentInfo.timeline) === null) {
        var checkTimestampOffset = function checkTimestampOffset2() {
          _this2.state = "READY";
          if (!_this2.paused()) {
            _this2.monitorBuffer_();
          }
        };
        this.syncController_.one("timestampoffset", checkTimestampOffset);
        this.state = "WAITING_ON_TIMELINE";
        return;
      }
      this.loadSegment_(segmentInfo);
    };
    _proto.skipEmptySegments_ = function skipEmptySegments_(segmentInfo) {
      while (segmentInfo && segmentInfo.segment.empty) {
        segmentInfo = this.generateSegmentInfo_(segmentInfo.playlist, segmentInfo.mediaIndex + 1, segmentInfo.startOfSegment + segmentInfo.duration, segmentInfo.isSyncRequest);
      }
      return segmentInfo;
    };
    _proto.stopForError = function stopForError(error) {
      this.error(error);
      this.state = "READY";
      this.pause();
      this.trigger("error");
    };
    _proto.segmentRequestFinished_ = function segmentRequestFinished_(error, simpleSegment, result) {
      var _this3 = this;
      if (!this.subtitlesTrack_) {
        this.state = "READY";
        return;
      }
      this.saveTransferStats_(simpleSegment.stats);
      if (!this.pendingSegment_) {
        this.state = "READY";
        this.mediaRequestsAborted += 1;
        return;
      }
      if (error) {
        if (error.code === REQUEST_ERRORS.TIMEOUT) {
          this.handleTimeout_();
        }
        if (error.code === REQUEST_ERRORS.ABORTED) {
          this.mediaRequestsAborted += 1;
        } else {
          this.mediaRequestsErrored += 1;
        }
        this.stopForError(error);
        return;
      }
      var segmentInfo = this.pendingSegment_;
      this.saveBandwidthRelatedStats_(segmentInfo.duration, simpleSegment.stats);
      this.state = "APPENDING";
      this.trigger("appending");
      var segment = segmentInfo.segment;
      if (segment.map) {
        segment.map.bytes = simpleSegment.map.bytes;
      }
      segmentInfo.bytes = simpleSegment.bytes;
      if (typeof import_window2.default.WebVTT !== "function" && this.subtitlesTrack_ && this.subtitlesTrack_.tech_) {
        var loadHandler;
        var errorHandler = function errorHandler2() {
          _this3.subtitlesTrack_.tech_.off("vttjsloaded", loadHandler);
          _this3.stopForError({
            message: "Error loading vtt.js"
          });
          return;
        };
        loadHandler = function loadHandler2() {
          _this3.subtitlesTrack_.tech_.off("vttjserror", errorHandler);
          _this3.segmentRequestFinished_(error, simpleSegment, result);
        };
        this.state = "WAITING_ON_VTTJS";
        this.subtitlesTrack_.tech_.one("vttjsloaded", loadHandler);
        this.subtitlesTrack_.tech_.one("vttjserror", errorHandler);
        return;
      }
      segment.requested = true;
      try {
        this.parseVTTCues_(segmentInfo);
      } catch (e) {
        this.stopForError({
          message: e.message
        });
        return;
      }
      this.updateTimeMapping_(segmentInfo, this.syncController_.timelines[segmentInfo.timeline], this.playlist_);
      if (segmentInfo.cues.length) {
        segmentInfo.timingInfo = {
          start: segmentInfo.cues[0].startTime,
          end: segmentInfo.cues[segmentInfo.cues.length - 1].endTime
        };
      } else {
        segmentInfo.timingInfo = {
          start: segmentInfo.startOfSegment,
          end: segmentInfo.startOfSegment + segmentInfo.duration
        };
      }
      if (segmentInfo.isSyncRequest) {
        this.trigger("syncinfoupdate");
        this.pendingSegment_ = null;
        this.state = "READY";
        return;
      }
      segmentInfo.byteLength = segmentInfo.bytes.byteLength;
      this.mediaSecondsLoaded += segment.duration;
      segmentInfo.cues.forEach(function(cue) {
        _this3.subtitlesTrack_.addCue(_this3.featuresNativeTextTracks_ ? new import_window2.default.VTTCue(cue.startTime, cue.endTime, cue.text) : cue);
      });
      removeDuplicateCuesFromTrack(this.subtitlesTrack_);
      this.handleAppendsDone_();
    };
    _proto.handleData_ = function handleData_3() {
    };
    _proto.updateTimingInfoEnd_ = function updateTimingInfoEnd_() {
    };
    _proto.parseVTTCues_ = function parseVTTCues_(segmentInfo) {
      var decoder;
      var decodeBytesToString = false;
      if (typeof import_window2.default.TextDecoder === "function") {
        decoder = new import_window2.default.TextDecoder("utf8");
      } else {
        decoder = import_window2.default.WebVTT.StringDecoder();
        decodeBytesToString = true;
      }
      var parser2 = new import_window2.default.WebVTT.Parser(import_window2.default, import_window2.default.vttjs, decoder);
      segmentInfo.cues = [];
      segmentInfo.timestampmap = {
        MPEGTS: 0,
        LOCAL: 0
      };
      parser2.oncue = segmentInfo.cues.push.bind(segmentInfo.cues);
      parser2.ontimestampmap = function(map) {
        segmentInfo.timestampmap = map;
      };
      parser2.onparsingerror = function(error) {
        videojs$1.log.warn("Error encountered when parsing cues: " + error.message);
      };
      if (segmentInfo.segment.map) {
        var mapData = segmentInfo.segment.map.bytes;
        if (decodeBytesToString) {
          mapData = uint8ToUtf8(mapData);
        }
        parser2.parse(mapData);
      }
      var segmentData = segmentInfo.bytes;
      if (decodeBytesToString) {
        segmentData = uint8ToUtf8(segmentData);
      }
      parser2.parse(segmentData);
      parser2.flush();
    };
    _proto.updateTimeMapping_ = function updateTimeMapping_(segmentInfo, mappingObj, playlist) {
      var segment = segmentInfo.segment;
      if (!mappingObj) {
        return;
      }
      if (!segmentInfo.cues.length) {
        segment.empty = true;
        return;
      }
      var timestampmap = segmentInfo.timestampmap;
      var diff = timestampmap.MPEGTS / import_clock.ONE_SECOND_IN_TS - timestampmap.LOCAL + mappingObj.mapping;
      segmentInfo.cues.forEach(function(cue) {
        cue.startTime += diff;
        cue.endTime += diff;
      });
      if (!playlist.syncInfo) {
        var firstStart = segmentInfo.cues[0].startTime;
        var lastStart = segmentInfo.cues[segmentInfo.cues.length - 1].startTime;
        playlist.syncInfo = {
          mediaSequence: playlist.mediaSequence + segmentInfo.mediaIndex,
          time: Math.min(firstStart, lastStart - segment.duration)
        };
      }
    };
    return VTTSegmentLoader2;
  }(SegmentLoader);
  var findAdCue = function findAdCue2(track, mediaTime) {
    var cues = track.cues;
    for (var i = 0; i < cues.length; i++) {
      var cue = cues[i];
      if (mediaTime >= cue.adStartTime && mediaTime <= cue.adEndTime) {
        return cue;
      }
    }
    return null;
  };
  var updateAdCues = function updateAdCues2(media, track, offset) {
    if (offset === void 0) {
      offset = 0;
    }
    if (!media.segments) {
      return;
    }
    var mediaTime = offset;
    var cue;
    for (var i = 0; i < media.segments.length; i++) {
      var segment = media.segments[i];
      if (!cue) {
        cue = findAdCue(track, mediaTime + segment.duration / 2);
      }
      if (cue) {
        if ("cueIn" in segment) {
          cue.endTime = mediaTime;
          cue.adEndTime = mediaTime;
          mediaTime += segment.duration;
          cue = null;
          continue;
        }
        if (mediaTime < cue.endTime) {
          mediaTime += segment.duration;
          continue;
        }
        cue.endTime += segment.duration;
      } else {
        if ("cueOut" in segment) {
          cue = new import_window2.default.VTTCue(mediaTime, mediaTime + segment.duration, segment.cueOut);
          cue.adStartTime = mediaTime;
          cue.adEndTime = mediaTime + parseFloat(segment.cueOut);
          track.addCue(cue);
        }
        if ("cueOutCont" in segment) {
          var _segment$cueOutCont$s = segment.cueOutCont.split("/").map(parseFloat), adOffset = _segment$cueOutCont$s[0], adTotal = _segment$cueOutCont$s[1];
          cue = new import_window2.default.VTTCue(mediaTime, mediaTime + segment.duration, "");
          cue.adStartTime = mediaTime - adOffset;
          cue.adEndTime = cue.adStartTime + adTotal;
          track.addCue(cue);
        }
      }
      mediaTime += segment.duration;
    }
  };
  var syncPointStrategies = [
    {
      name: "VOD",
      run: function run(syncController, playlist, duration5, currentTimeline, currentTime) {
        if (duration5 !== Infinity) {
          var syncPoint = {
            time: 0,
            segmentIndex: 0
          };
          return syncPoint;
        }
        return null;
      }
    },
    {
      name: "ProgramDateTime",
      run: function run2(syncController, playlist, duration5, currentTimeline, currentTime) {
        if (!syncController.datetimeToDisplayTime) {
          return null;
        }
        var segments = playlist.segments || [];
        var syncPoint = null;
        var lastDistance = null;
        currentTime = currentTime || 0;
        for (var i = 0; i < segments.length; i++) {
          var segment = segments[i];
          if (segment.dateTimeObject) {
            var segmentTime = segment.dateTimeObject.getTime() / 1e3;
            var segmentStart = segmentTime + syncController.datetimeToDisplayTime;
            var distance = Math.abs(currentTime - segmentStart);
            if (lastDistance !== null && (distance === 0 || lastDistance < distance)) {
              break;
            }
            lastDistance = distance;
            syncPoint = {
              time: segmentStart,
              segmentIndex: i
            };
          }
        }
        return syncPoint;
      }
    },
    {
      name: "Segment",
      run: function run3(syncController, playlist, duration5, currentTimeline, currentTime) {
        var segments = playlist.segments || [];
        var syncPoint = null;
        var lastDistance = null;
        currentTime = currentTime || 0;
        for (var i = 0; i < segments.length; i++) {
          var segment = segments[i];
          if (segment.timeline === currentTimeline && typeof segment.start !== "undefined") {
            var distance = Math.abs(currentTime - segment.start);
            if (lastDistance !== null && lastDistance < distance) {
              break;
            }
            if (!syncPoint || lastDistance === null || lastDistance >= distance) {
              lastDistance = distance;
              syncPoint = {
                time: segment.start,
                segmentIndex: i
              };
            }
          }
        }
        return syncPoint;
      }
    },
    {
      name: "Discontinuity",
      run: function run4(syncController, playlist, duration5, currentTimeline, currentTime) {
        var syncPoint = null;
        currentTime = currentTime || 0;
        if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
          var lastDistance = null;
          for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
            var segmentIndex = playlist.discontinuityStarts[i];
            var discontinuity = playlist.discontinuitySequence + i + 1;
            var discontinuitySync = syncController.discontinuities[discontinuity];
            if (discontinuitySync) {
              var distance = Math.abs(currentTime - discontinuitySync.time);
              if (lastDistance !== null && lastDistance < distance) {
                break;
              }
              if (!syncPoint || lastDistance === null || lastDistance >= distance) {
                lastDistance = distance;
                syncPoint = {
                  time: discontinuitySync.time,
                  segmentIndex
                };
              }
            }
          }
        }
        return syncPoint;
      }
    },
    {
      name: "Playlist",
      run: function run5(syncController, playlist, duration5, currentTimeline, currentTime) {
        if (playlist.syncInfo) {
          var syncPoint = {
            time: playlist.syncInfo.time,
            segmentIndex: playlist.syncInfo.mediaSequence - playlist.mediaSequence
          };
          return syncPoint;
        }
        return null;
      }
    }
  ];
  var SyncController = /* @__PURE__ */ function(_videojs$EventTarget) {
    import_inheritsLoose2.default(SyncController2, _videojs$EventTarget);
    function SyncController2(options) {
      var _this;
      _this = _videojs$EventTarget.call(this) || this;
      _this.timelines = [];
      _this.discontinuities = [];
      _this.datetimeToDisplayTime = null;
      _this.logger_ = logger("SyncController");
      return _this;
    }
    var _proto = SyncController2.prototype;
    _proto.getSyncPoint = function getSyncPoint(playlist, duration5, currentTimeline, currentTime) {
      var syncPoints = this.runStrategies_(playlist, duration5, currentTimeline, currentTime);
      if (!syncPoints.length) {
        return null;
      }
      return this.selectSyncPoint_(syncPoints, {
        key: "time",
        value: currentTime
      });
    };
    _proto.getExpiredTime = function getExpiredTime(playlist, duration5) {
      if (!playlist || !playlist.segments) {
        return null;
      }
      var syncPoints = this.runStrategies_(playlist, duration5, playlist.discontinuitySequence, 0);
      if (!syncPoints.length) {
        return null;
      }
      var syncPoint = this.selectSyncPoint_(syncPoints, {
        key: "segmentIndex",
        value: 0
      });
      if (syncPoint.segmentIndex > 0) {
        syncPoint.time *= -1;
      }
      return Math.abs(syncPoint.time + sumDurations(playlist, syncPoint.segmentIndex, 0));
    };
    _proto.runStrategies_ = function runStrategies_(playlist, duration5, currentTimeline, currentTime) {
      var syncPoints = [];
      for (var i = 0; i < syncPointStrategies.length; i++) {
        var strategy = syncPointStrategies[i];
        var syncPoint = strategy.run(this, playlist, duration5, currentTimeline, currentTime);
        if (syncPoint) {
          syncPoint.strategy = strategy.name;
          syncPoints.push({
            strategy: strategy.name,
            syncPoint
          });
        }
      }
      return syncPoints;
    };
    _proto.selectSyncPoint_ = function selectSyncPoint_(syncPoints, target) {
      var bestSyncPoint = syncPoints[0].syncPoint;
      var bestDistance = Math.abs(syncPoints[0].syncPoint[target.key] - target.value);
      var bestStrategy = syncPoints[0].strategy;
      for (var i = 1; i < syncPoints.length; i++) {
        var newDistance = Math.abs(syncPoints[i].syncPoint[target.key] - target.value);
        if (newDistance < bestDistance) {
          bestDistance = newDistance;
          bestSyncPoint = syncPoints[i].syncPoint;
          bestStrategy = syncPoints[i].strategy;
        }
      }
      this.logger_("syncPoint for [" + target.key + ": " + target.value + "] chosen with strategy" + (" [" + bestStrategy + "]: [time:" + bestSyncPoint.time + ",") + (" segmentIndex:" + bestSyncPoint.segmentIndex + "]"));
      return bestSyncPoint;
    };
    _proto.saveExpiredSegmentInfo = function saveExpiredSegmentInfo(oldPlaylist, newPlaylist) {
      var mediaSequenceDiff = newPlaylist.mediaSequence - oldPlaylist.mediaSequence;
      for (var i = mediaSequenceDiff - 1; i >= 0; i--) {
        var lastRemovedSegment = oldPlaylist.segments[i];
        if (lastRemovedSegment && typeof lastRemovedSegment.start !== "undefined") {
          newPlaylist.syncInfo = {
            mediaSequence: oldPlaylist.mediaSequence + i,
            time: lastRemovedSegment.start
          };
          this.logger_("playlist refresh sync: [time:" + newPlaylist.syncInfo.time + "," + (" mediaSequence: " + newPlaylist.syncInfo.mediaSequence + "]"));
          this.trigger("syncinfoupdate");
          break;
        }
      }
    };
    _proto.setDateTimeMapping = function setDateTimeMapping(playlist) {
      if (!this.datetimeToDisplayTime && playlist.segments && playlist.segments.length && playlist.segments[0].dateTimeObject) {
        var playlistTimestamp = playlist.segments[0].dateTimeObject.getTime() / 1e3;
        this.datetimeToDisplayTime = -playlistTimestamp;
      }
    };
    _proto.saveSegmentTimingInfo = function saveSegmentTimingInfo(_ref) {
      var segmentInfo = _ref.segmentInfo, shouldSaveTimelineMapping = _ref.shouldSaveTimelineMapping;
      var didCalculateSegmentTimeMapping = this.calculateSegmentTimeMapping_(segmentInfo, segmentInfo.timingInfo, shouldSaveTimelineMapping);
      if (didCalculateSegmentTimeMapping) {
        this.saveDiscontinuitySyncInfo_(segmentInfo);
        if (!segmentInfo.playlist.syncInfo) {
          segmentInfo.playlist.syncInfo = {
            mediaSequence: segmentInfo.playlist.mediaSequence + segmentInfo.mediaIndex,
            time: segmentInfo.segment.start
          };
        }
      }
    };
    _proto.timestampOffsetForTimeline = function timestampOffsetForTimeline(timeline) {
      if (typeof this.timelines[timeline] === "undefined") {
        return null;
      }
      return this.timelines[timeline].time;
    };
    _proto.mappingForTimeline = function mappingForTimeline(timeline) {
      if (typeof this.timelines[timeline] === "undefined") {
        return null;
      }
      return this.timelines[timeline].mapping;
    };
    _proto.calculateSegmentTimeMapping_ = function calculateSegmentTimeMapping_(segmentInfo, timingInfo, shouldSaveTimelineMapping) {
      var segment = segmentInfo.segment;
      var mappingObj = this.timelines[segmentInfo.timeline];
      if (segmentInfo.timestampOffset !== null) {
        mappingObj = {
          time: segmentInfo.startOfSegment,
          mapping: segmentInfo.startOfSegment - timingInfo.start
        };
        if (shouldSaveTimelineMapping) {
          this.timelines[segmentInfo.timeline] = mappingObj;
          this.trigger("timestampoffset");
          this.logger_("time mapping for timeline " + segmentInfo.timeline + ": " + ("[time: " + mappingObj.time + "] [mapping: " + mappingObj.mapping + "]"));
        }
        segment.start = segmentInfo.startOfSegment;
        segment.end = timingInfo.end + mappingObj.mapping;
      } else if (mappingObj) {
        segment.start = timingInfo.start + mappingObj.mapping;
        segment.end = timingInfo.end + mappingObj.mapping;
      } else {
        return false;
      }
      return true;
    };
    _proto.saveDiscontinuitySyncInfo_ = function saveDiscontinuitySyncInfo_(segmentInfo) {
      var playlist = segmentInfo.playlist;
      var segment = segmentInfo.segment;
      if (segment.discontinuity) {
        this.discontinuities[segment.timeline] = {
          time: segment.start,
          accuracy: 0
        };
      } else if (playlist.discontinuityStarts && playlist.discontinuityStarts.length) {
        for (var i = 0; i < playlist.discontinuityStarts.length; i++) {
          var segmentIndex = playlist.discontinuityStarts[i];
          var discontinuity = playlist.discontinuitySequence + i + 1;
          var mediaIndexDiff = segmentIndex - segmentInfo.mediaIndex;
          var accuracy = Math.abs(mediaIndexDiff);
          if (!this.discontinuities[discontinuity] || this.discontinuities[discontinuity].accuracy > accuracy) {
            var time = void 0;
            if (mediaIndexDiff < 0) {
              time = segment.start - sumDurations(playlist, segmentInfo.mediaIndex, segmentIndex);
            } else {
              time = segment.end + sumDurations(playlist, segmentInfo.mediaIndex + 1, segmentIndex);
            }
            this.discontinuities[discontinuity] = {
              time,
              accuracy
            };
          }
        }
      }
    };
    _proto.dispose = function dispose3() {
      this.trigger("dispose");
      this.off();
    };
    return SyncController2;
  }(videojs$1.EventTarget);
  var TimelineChangeController = /* @__PURE__ */ function(_videojs$EventTarget) {
    import_inheritsLoose2.default(TimelineChangeController2, _videojs$EventTarget);
    function TimelineChangeController2() {
      var _this;
      _this = _videojs$EventTarget.call(this) || this;
      _this.pendingTimelineChanges_ = {};
      _this.lastTimelineChanges_ = {};
      return _this;
    }
    var _proto = TimelineChangeController2.prototype;
    _proto.clearPendingTimelineChange = function clearPendingTimelineChange(type3) {
      this.pendingTimelineChanges_[type3] = null;
      this.trigger("pendingtimelinechange");
    };
    _proto.pendingTimelineChange = function pendingTimelineChange(_ref) {
      var type3 = _ref.type, from3 = _ref.from, to = _ref.to;
      if (typeof from3 === "number" && typeof to === "number") {
        this.pendingTimelineChanges_[type3] = {
          type: type3,
          from: from3,
          to
        };
        this.trigger("pendingtimelinechange");
      }
      return this.pendingTimelineChanges_[type3];
    };
    _proto.lastTimelineChange = function lastTimelineChange(_ref2) {
      var type3 = _ref2.type, from3 = _ref2.from, to = _ref2.to;
      if (typeof from3 === "number" && typeof to === "number") {
        this.lastTimelineChanges_[type3] = {
          type: type3,
          from: from3,
          to
        };
        delete this.pendingTimelineChanges_[type3];
        this.trigger("timelinechange");
      }
      return this.lastTimelineChanges_[type3];
    };
    _proto.dispose = function dispose3() {
      this.trigger("dispose");
      this.pendingTimelineChanges_ = {};
      this.lastTimelineChanges_ = {};
      this.off();
    };
    return TimelineChangeController2;
  }(videojs$1.EventTarget);
  var Decrypter = new shimWorker("./decrypter-worker.worker.js", function(window3, document3) {
    var self2 = this;
    /*! @name @videojs/http-streaming @version 2.4.2 @license Apache-2.0 */
    var decrypterWorker = function() {
      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps)
          _defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      var createClass = _createClass;
      function _inheritsLoose3(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }
      var inheritsLoose = _inheritsLoose3;
      /*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */
      var Stream2 = /* @__PURE__ */ function() {
        function Stream3() {
          this.listeners = {};
        }
        var _proto = Stream3.prototype;
        _proto.on = function on3(type3, listener) {
          if (!this.listeners[type3]) {
            this.listeners[type3] = [];
          }
          this.listeners[type3].push(listener);
        };
        _proto.off = function off2(type3, listener) {
          if (!this.listeners[type3]) {
            return false;
          }
          var index = this.listeners[type3].indexOf(listener);
          this.listeners[type3] = this.listeners[type3].slice(0);
          this.listeners[type3].splice(index, 1);
          return index > -1;
        };
        _proto.trigger = function trigger2(type3) {
          var callbacks = this.listeners[type3];
          if (!callbacks) {
            return;
          }
          if (arguments.length === 2) {
            var length = callbacks.length;
            for (var i = 0; i < length; ++i) {
              callbacks[i].call(this, arguments[1]);
            }
          } else {
            var args = Array.prototype.slice.call(arguments, 1);
            var _length = callbacks.length;
            for (var _i = 0; _i < _length; ++_i) {
              callbacks[_i].apply(this, args);
            }
          }
        };
        _proto.dispose = function dispose3() {
          this.listeners = {};
        };
        _proto.pipe = function pipe(destination) {
          this.on("data", function(data) {
            destination.push(data);
          });
        };
        return Stream3;
      }();
      var stream = Stream2;
      /*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */
      function unpad(padded) {
        return padded.subarray(0, padded.byteLength - padded[padded.byteLength - 1]);
      }
      /*! @name aes-decrypter @version 3.1.0 @license Apache-2.0 */
      var precompute = function precompute2() {
        var tables = [[[], [], [], [], []], [[], [], [], [], []]];
        var encTable = tables[0];
        var decTable = tables[1];
        var sbox = encTable[4];
        var sboxInv = decTable[4];
        var i;
        var x;
        var xInv;
        var d2 = [];
        var th = [];
        var x2;
        var x4;
        var x8;
        var s;
        var tEnc;
        var tDec;
        for (i = 0; i < 256; i++) {
          th[(d2[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
        }
        for (x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
          s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
          s = s >> 8 ^ s & 255 ^ 99;
          sbox[x] = s;
          sboxInv[s] = x;
          x8 = d2[x4 = d2[x2 = d2[x]]];
          tDec = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
          tEnc = d2[s] * 257 ^ s * 16843008;
          for (i = 0; i < 4; i++) {
            encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
            decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
          }
        }
        for (i = 0; i < 5; i++) {
          encTable[i] = encTable[i].slice(0);
          decTable[i] = decTable[i].slice(0);
        }
        return tables;
      };
      var aesTables = null;
      var AES = /* @__PURE__ */ function() {
        function AES2(key) {
          if (!aesTables) {
            aesTables = precompute();
          }
          this._tables = [[aesTables[0][0].slice(), aesTables[0][1].slice(), aesTables[0][2].slice(), aesTables[0][3].slice(), aesTables[0][4].slice()], [aesTables[1][0].slice(), aesTables[1][1].slice(), aesTables[1][2].slice(), aesTables[1][3].slice(), aesTables[1][4].slice()]];
          var i;
          var j;
          var tmp;
          var sbox = this._tables[0][4];
          var decTable = this._tables[1];
          var keyLen = key.length;
          var rcon = 1;
          if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
            throw new Error("Invalid aes key size");
          }
          var encKey = key.slice(0);
          var decKey = [];
          this._key = [encKey, decKey];
          for (i = keyLen; i < 4 * keyLen + 28; i++) {
            tmp = encKey[i - 1];
            if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
              tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];
              if (i % keyLen === 0) {
                tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
                rcon = rcon << 1 ^ (rcon >> 7) * 283;
              }
            }
            encKey[i] = encKey[i - keyLen] ^ tmp;
          }
          for (j = 0; i; j++, i--) {
            tmp = encKey[j & 3 ? i : i - 4];
            if (i <= 4 || j < 4) {
              decKey[j] = tmp;
            } else {
              decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
            }
          }
        }
        var _proto = AES2.prototype;
        _proto.decrypt = function decrypt2(encrypted0, encrypted1, encrypted2, encrypted3, out, offset) {
          var key = this._key[1];
          var a = encrypted0 ^ key[0];
          var b = encrypted3 ^ key[1];
          var c = encrypted2 ^ key[2];
          var d2 = encrypted1 ^ key[3];
          var a2;
          var b2;
          var c2;
          var nInnerRounds = key.length / 4 - 2;
          var i;
          var kIndex = 4;
          var table = this._tables[1];
          var table0 = table[0];
          var table1 = table[1];
          var table2 = table[2];
          var table3 = table[3];
          var sbox = table[4];
          for (i = 0; i < nInnerRounds; i++) {
            a2 = table0[a >>> 24] ^ table1[b >> 16 & 255] ^ table2[c >> 8 & 255] ^ table3[d2 & 255] ^ key[kIndex];
            b2 = table0[b >>> 24] ^ table1[c >> 16 & 255] ^ table2[d2 >> 8 & 255] ^ table3[a & 255] ^ key[kIndex + 1];
            c2 = table0[c >>> 24] ^ table1[d2 >> 16 & 255] ^ table2[a >> 8 & 255] ^ table3[b & 255] ^ key[kIndex + 2];
            d2 = table0[d2 >>> 24] ^ table1[a >> 16 & 255] ^ table2[b >> 8 & 255] ^ table3[c & 255] ^ key[kIndex + 3];
            kIndex += 4;
            a = a2;
            b = b2;
            c = c2;
          }
          for (i = 0; i < 4; i++) {
            out[(3 & -i) + offset] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d2 & 255] ^ key[kIndex++];
            a2 = a;
            a = b;
            b = c;
            c = d2;
            d2 = a2;
          }
        };
        return AES2;
      }();
      var AsyncStream = /* @__PURE__ */ function(_Stream) {
        inheritsLoose(AsyncStream2, _Stream);
        function AsyncStream2() {
          var _this;
          _this = _Stream.call(this, stream) || this;
          _this.jobs = [];
          _this.delay = 1;
          _this.timeout_ = null;
          return _this;
        }
        var _proto = AsyncStream2.prototype;
        _proto.processJob_ = function processJob_() {
          this.jobs.shift()();
          if (this.jobs.length) {
            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
          } else {
            this.timeout_ = null;
          }
        };
        _proto.push = function push(job) {
          this.jobs.push(job);
          if (!this.timeout_) {
            this.timeout_ = setTimeout(this.processJob_.bind(this), this.delay);
          }
        };
        return AsyncStream2;
      }(stream);
      var ntoh = function ntoh2(word) {
        return word << 24 | (word & 65280) << 8 | (word & 16711680) >> 8 | word >>> 24;
      };
      var decrypt = function decrypt2(encrypted, key, initVector) {
        var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);
        var decipher = new AES(Array.prototype.slice.call(key));
        var decrypted = new Uint8Array(encrypted.byteLength);
        var decrypted32 = new Int32Array(decrypted.buffer);
        var init0;
        var init1;
        var init2;
        var init3;
        var encrypted0;
        var encrypted1;
        var encrypted2;
        var encrypted3;
        var wordIx;
        init0 = initVector[0];
        init1 = initVector[1];
        init2 = initVector[2];
        init3 = initVector[3];
        for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {
          encrypted0 = ntoh(encrypted32[wordIx]);
          encrypted1 = ntoh(encrypted32[wordIx + 1]);
          encrypted2 = ntoh(encrypted32[wordIx + 2]);
          encrypted3 = ntoh(encrypted32[wordIx + 3]);
          decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);
          decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);
          decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);
          decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);
          decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);
          init0 = encrypted0;
          init1 = encrypted1;
          init2 = encrypted2;
          init3 = encrypted3;
        }
        return decrypted;
      };
      var Decrypter2 = /* @__PURE__ */ function() {
        function Decrypter3(encrypted, key, initVector, done) {
          var step = Decrypter3.STEP;
          var encrypted32 = new Int32Array(encrypted.buffer);
          var decrypted = new Uint8Array(encrypted.byteLength);
          var i = 0;
          this.asyncStream_ = new AsyncStream();
          this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
          for (i = step; i < encrypted32.length; i += step) {
            initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);
            this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));
          }
          this.asyncStream_.push(function() {
            done(null, unpad(decrypted));
          });
        }
        var _proto = Decrypter3.prototype;
        _proto.decryptChunk_ = function decryptChunk_(encrypted, key, initVector, decrypted) {
          return function() {
            var bytes = decrypt(encrypted, key, initVector);
            decrypted.set(bytes, encrypted.byteOffset);
          };
        };
        createClass(Decrypter3, null, [{
          key: "STEP",
          get: function get7() {
            return 32e3;
          }
        }]);
        return Decrypter3;
      }();
      var createTransferableMessage3 = function createTransferableMessage4(message) {
        var transferable = {};
        Object.keys(message).forEach(function(key) {
          var value = message[key];
          if (ArrayBuffer.isView(value)) {
            transferable[key] = {
              bytes: value.buffer,
              byteOffset: value.byteOffset,
              byteLength: value.byteLength
            };
          } else {
            transferable[key] = value;
          }
        });
        return transferable;
      };
      var DecrypterWorker = function DecrypterWorker2(self3) {
        self3.onmessage = function(event) {
          var data = event.data;
          var encrypted = new Uint8Array(data.encrypted.bytes, data.encrypted.byteOffset, data.encrypted.byteLength);
          var key = new Uint32Array(data.key.bytes, data.key.byteOffset, data.key.byteLength / 4);
          var iv = new Uint32Array(data.iv.bytes, data.iv.byteOffset, data.iv.byteLength / 4);
          new Decrypter2(encrypted, key, iv, function(err, bytes) {
            self3.postMessage(createTransferableMessage3({
              source: data.source,
              decrypted: bytes
            }), [bytes.buffer]);
          });
        };
      };
      var decrypterWorker2 = new DecrypterWorker(self2);
      return decrypterWorker2;
    }();
  });
  var audioTrackKind_ = function audioTrackKind_2(properties) {
    var kind = properties["default"] ? "main" : "alternative";
    if (properties.characteristics && properties.characteristics.indexOf("public.accessibility.describes-video") >= 0) {
      kind = "main-desc";
    }
    return kind;
  };
  var stopLoaders = function stopLoaders2(segmentLoader, mediaType) {
    segmentLoader.abort();
    segmentLoader.pause();
    if (mediaType && mediaType.activePlaylistLoader) {
      mediaType.activePlaylistLoader.pause();
      mediaType.activePlaylistLoader = null;
    }
  };
  var startLoaders = function startLoaders2(playlistLoader, mediaType) {
    mediaType.activePlaylistLoader = playlistLoader;
    playlistLoader.load();
  };
  var onGroupChanged = function onGroupChanged2(type3, settings) {
    return function() {
      var _settings$segmentLoad = settings.segmentLoaders, segmentLoader = _settings$segmentLoad[type3], mainSegmentLoader = _settings$segmentLoad.main, mediaType = settings.mediaTypes[type3];
      var activeTrack2 = mediaType.activeTrack();
      var activeGroup3 = mediaType.activeGroup(activeTrack2);
      var previousActiveLoader = mediaType.activePlaylistLoader;
      stopLoaders(segmentLoader, mediaType);
      if (!activeGroup3) {
        return;
      }
      if (!activeGroup3.playlistLoader) {
        if (previousActiveLoader) {
          mainSegmentLoader.resetEverything();
        }
        return;
      }
      segmentLoader.resyncLoader();
      startLoaders(activeGroup3.playlistLoader, mediaType);
    };
  };
  var onGroupChanging = function onGroupChanging2(type3, settings) {
    return function() {
      var segmentLoader = settings.segmentLoaders[type3];
      segmentLoader.abort();
      segmentLoader.pause();
    };
  };
  var onTrackChanged = function onTrackChanged2(type3, settings) {
    return function() {
      var _settings$segmentLoad2 = settings.segmentLoaders, segmentLoader = _settings$segmentLoad2[type3], mainSegmentLoader = _settings$segmentLoad2.main, mediaType = settings.mediaTypes[type3];
      var activeTrack2 = mediaType.activeTrack();
      var activeGroup3 = mediaType.activeGroup(activeTrack2);
      var previousActiveLoader = mediaType.activePlaylistLoader;
      stopLoaders(segmentLoader, mediaType);
      if (!activeGroup3) {
        return;
      }
      if (type3 === "AUDIO") {
        if (!activeGroup3.playlistLoader) {
          mainSegmentLoader.setAudio(true);
          mainSegmentLoader.resetEverything();
          return;
        }
        segmentLoader.setAudio(true);
        mainSegmentLoader.setAudio(false);
      }
      if (previousActiveLoader === activeGroup3.playlistLoader) {
        startLoaders(activeGroup3.playlistLoader, mediaType);
        return;
      }
      if (segmentLoader.track) {
        segmentLoader.track(activeTrack2);
      }
      segmentLoader.resetEverything();
      startLoaders(activeGroup3.playlistLoader, mediaType);
    };
  };
  var onError = {
    AUDIO: function AUDIO(type3, settings) {
      return function() {
        var segmentLoader = settings.segmentLoaders[type3], mediaType = settings.mediaTypes[type3], blacklistCurrentPlaylist = settings.blacklistCurrentPlaylist;
        stopLoaders(segmentLoader, mediaType);
        var activeTrack2 = mediaType.activeTrack();
        var activeGroup3 = mediaType.activeGroup();
        var id = (activeGroup3.filter(function(group) {
          return group["default"];
        })[0] || activeGroup3[0]).id;
        var defaultTrack = mediaType.tracks[id];
        if (activeTrack2 === defaultTrack) {
          blacklistCurrentPlaylist({
            message: "Problem encountered loading the default audio track."
          });
          return;
        }
        videojs$1.log.warn("Problem encountered loading the alternate audio track.Switching back to default.");
        for (var trackId in mediaType.tracks) {
          mediaType.tracks[trackId].enabled = mediaType.tracks[trackId] === defaultTrack;
        }
        mediaType.onTrackChanged();
      };
    },
    SUBTITLES: function SUBTITLES(type3, settings) {
      return function() {
        var segmentLoader = settings.segmentLoaders[type3], mediaType = settings.mediaTypes[type3];
        videojs$1.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track.");
        stopLoaders(segmentLoader, mediaType);
        var track = mediaType.activeTrack();
        if (track) {
          track.mode = "disabled";
        }
        mediaType.onTrackChanged();
      };
    }
  };
  var setupListeners = {
    AUDIO: function AUDIO2(type3, playlistLoader, settings) {
      if (!playlistLoader) {
        return;
      }
      var tech = settings.tech, requestOptions = settings.requestOptions, segmentLoader = settings.segmentLoaders[type3];
      playlistLoader.on("loadedmetadata", function() {
        var media = playlistLoader.media();
        segmentLoader.playlist(media, requestOptions);
        if (!tech.paused() || media.endList && tech.preload() !== "none") {
          segmentLoader.load();
        }
      });
      playlistLoader.on("loadedplaylist", function() {
        segmentLoader.playlist(playlistLoader.media(), requestOptions);
        if (!tech.paused()) {
          segmentLoader.load();
        }
      });
      playlistLoader.on("error", onError[type3](type3, settings));
    },
    SUBTITLES: function SUBTITLES2(type3, playlistLoader, settings) {
      var tech = settings.tech, requestOptions = settings.requestOptions, segmentLoader = settings.segmentLoaders[type3], mediaType = settings.mediaTypes[type3];
      playlistLoader.on("loadedmetadata", function() {
        var media = playlistLoader.media();
        segmentLoader.playlist(media, requestOptions);
        segmentLoader.track(mediaType.activeTrack());
        if (!tech.paused() || media.endList && tech.preload() !== "none") {
          segmentLoader.load();
        }
      });
      playlistLoader.on("loadedplaylist", function() {
        segmentLoader.playlist(playlistLoader.media(), requestOptions);
        if (!tech.paused()) {
          segmentLoader.load();
        }
      });
      playlistLoader.on("error", onError[type3](type3, settings));
    }
  };
  var initialize = {
    AUDIO: function AUDIO3(type3, settings) {
      var vhs = settings.vhs, sourceType = settings.sourceType, segmentLoader = settings.segmentLoaders[type3], requestOptions = settings.requestOptions, _settings$master = settings.master, mediaGroups = _settings$master.mediaGroups, playlists = _settings$master.playlists, _settings$mediaTypes$ = settings.mediaTypes[type3], groups = _settings$mediaTypes$.groups, tracks = _settings$mediaTypes$.tracks, masterPlaylistLoader = settings.masterPlaylistLoader;
      if (!mediaGroups[type3] || Object.keys(mediaGroups[type3]).length === 0) {
        mediaGroups[type3] = {
          main: {
            default: {
              default: true
            }
          }
        };
      }
      var _loop = function _loop2(groupId2) {
        if (!groups[groupId2]) {
          groups[groupId2] = [];
        }
        var groupPlaylists = playlists.filter(function(playlist) {
          return playlist.attributes[type3] === groupId2;
        });
        var _loop22 = function _loop23(variantLabel2) {
          var properties = mediaGroups[type3][groupId2][variantLabel2];
          var unmatchingPlaylists = groupPlaylists.filter(function(playlist) {
            return playlist.resolvedUri !== properties.resolvedUri;
          });
          if (!unmatchingPlaylists.length && groupPlaylists.length) {
            delete properties.resolvedUri;
          }
          var playlistLoader = void 0;
          if (sourceType === "vhs-json" && properties.playlists) {
            playlistLoader = new PlaylistLoader(properties.playlists[0], vhs, requestOptions);
          } else if (properties.resolvedUri) {
            playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);
          } else if (properties.playlists && sourceType === "dash") {
            playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, masterPlaylistLoader);
          } else {
            playlistLoader = null;
          }
          properties = videojs$1.mergeOptions({
            id: variantLabel2,
            playlistLoader
          }, properties);
          setupListeners[type3](type3, properties.playlistLoader, settings);
          groups[groupId2].push(properties);
          if (typeof tracks[variantLabel2] === "undefined") {
            var track = new videojs$1.AudioTrack({
              id: variantLabel2,
              kind: audioTrackKind_(properties),
              enabled: false,
              language: properties.language,
              default: properties["default"],
              label: variantLabel2
            });
            tracks[variantLabel2] = track;
          }
        };
        for (var variantLabel in mediaGroups[type3][groupId2]) {
          _loop22(variantLabel);
        }
      };
      for (var groupId in mediaGroups[type3]) {
        _loop(groupId);
      }
      segmentLoader.on("error", onError[type3](type3, settings));
    },
    SUBTITLES: function SUBTITLES3(type3, settings) {
      var tech = settings.tech, vhs = settings.vhs, sourceType = settings.sourceType, segmentLoader = settings.segmentLoaders[type3], requestOptions = settings.requestOptions, mediaGroups = settings.master.mediaGroups, _settings$mediaTypes$2 = settings.mediaTypes[type3], groups = _settings$mediaTypes$2.groups, tracks = _settings$mediaTypes$2.tracks, masterPlaylistLoader = settings.masterPlaylistLoader;
      for (var groupId in mediaGroups[type3]) {
        if (!groups[groupId]) {
          groups[groupId] = [];
        }
        for (var variantLabel in mediaGroups[type3][groupId]) {
          if (mediaGroups[type3][groupId][variantLabel].forced) {
            continue;
          }
          var properties = mediaGroups[type3][groupId][variantLabel];
          var playlistLoader = void 0;
          if (sourceType === "hls") {
            playlistLoader = new PlaylistLoader(properties.resolvedUri, vhs, requestOptions);
          } else if (sourceType === "dash") {
            var playlists = properties.playlists.filter(function(p) {
              return p.excludeUntil !== Infinity;
            });
            if (!playlists.length) {
              return;
            }
            playlistLoader = new DashPlaylistLoader(properties.playlists[0], vhs, requestOptions, masterPlaylistLoader);
          } else if (sourceType === "vhs-json") {
            playlistLoader = new PlaylistLoader(properties.playlists ? properties.playlists[0] : properties.resolvedUri, vhs, requestOptions);
          }
          properties = videojs$1.mergeOptions({
            id: variantLabel,
            playlistLoader
          }, properties);
          setupListeners[type3](type3, properties.playlistLoader, settings);
          groups[groupId].push(properties);
          if (typeof tracks[variantLabel] === "undefined") {
            var track = tech.addRemoteTextTrack({
              id: variantLabel,
              kind: "subtitles",
              default: properties["default"] && properties.autoselect,
              language: properties.language,
              label: variantLabel
            }, false).track;
            tracks[variantLabel] = track;
          }
        }
      }
      segmentLoader.on("error", onError[type3](type3, settings));
    },
    "CLOSED-CAPTIONS": function CLOSEDCAPTIONS(type3, settings) {
      var tech = settings.tech, mediaGroups = settings.master.mediaGroups, _settings$mediaTypes$3 = settings.mediaTypes[type3], groups = _settings$mediaTypes$3.groups, tracks = _settings$mediaTypes$3.tracks;
      for (var groupId in mediaGroups[type3]) {
        if (!groups[groupId]) {
          groups[groupId] = [];
        }
        for (var variantLabel in mediaGroups[type3][groupId]) {
          var properties = mediaGroups[type3][groupId][variantLabel];
          if (!properties.instreamId.match(/CC\d/)) {
            continue;
          }
          groups[groupId].push(videojs$1.mergeOptions({
            id: variantLabel
          }, properties));
          if (typeof tracks[variantLabel] === "undefined") {
            var track = tech.addRemoteTextTrack({
              id: properties.instreamId,
              kind: "captions",
              default: properties["default"] && properties.autoselect,
              language: properties.language,
              label: variantLabel
            }, false).track;
            tracks[variantLabel] = track;
          }
        }
      }
    }
  };
  var activeGroup = function activeGroup2(type3, settings) {
    return function(track) {
      var masterPlaylistLoader = settings.masterPlaylistLoader, groups = settings.mediaTypes[type3].groups;
      var media = masterPlaylistLoader.media();
      if (!media) {
        return null;
      }
      var variants = null;
      if (media.attributes[type3]) {
        variants = groups[media.attributes[type3]];
      }
      variants = variants || groups.main;
      if (typeof track === "undefined") {
        return variants;
      }
      if (track === null) {
        return null;
      }
      return variants.filter(function(props) {
        return props.id === track.id;
      })[0] || null;
    };
  };
  var activeTrack = {
    AUDIO: function AUDIO4(type3, settings) {
      return function() {
        var tracks = settings.mediaTypes[type3].tracks;
        for (var id in tracks) {
          if (tracks[id].enabled) {
            return tracks[id];
          }
        }
        return null;
      };
    },
    SUBTITLES: function SUBTITLES4(type3, settings) {
      return function() {
        var tracks = settings.mediaTypes[type3].tracks;
        for (var id in tracks) {
          if (tracks[id].mode === "showing" || tracks[id].mode === "hidden") {
            return tracks[id];
          }
        }
        return null;
      };
    }
  };
  var setupMediaGroups = function setupMediaGroups2(settings) {
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach(function(type3) {
      initialize[type3](type3, settings);
    });
    var mediaTypes = settings.mediaTypes, masterPlaylistLoader = settings.masterPlaylistLoader, tech = settings.tech, vhs = settings.vhs;
    ["AUDIO", "SUBTITLES"].forEach(function(type3) {
      mediaTypes[type3].activeGroup = activeGroup(type3, settings);
      mediaTypes[type3].activeTrack = activeTrack[type3](type3, settings);
      mediaTypes[type3].onGroupChanged = onGroupChanged(type3, settings);
      mediaTypes[type3].onGroupChanging = onGroupChanging(type3, settings);
      mediaTypes[type3].onTrackChanged = onTrackChanged(type3, settings);
    });
    var audioGroup = mediaTypes.AUDIO.activeGroup();
    if (audioGroup) {
      var groupId = (audioGroup.filter(function(group) {
        return group["default"];
      })[0] || audioGroup[0]).id;
      mediaTypes.AUDIO.tracks[groupId].enabled = true;
      mediaTypes.AUDIO.onTrackChanged();
    }
    masterPlaylistLoader.on("mediachange", function() {
      ["AUDIO", "SUBTITLES"].forEach(function(type3) {
        return mediaTypes[type3].onGroupChanged();
      });
    });
    masterPlaylistLoader.on("mediachanging", function() {
      ["AUDIO", "SUBTITLES"].forEach(function(type3) {
        return mediaTypes[type3].onGroupChanging();
      });
    });
    var onAudioTrackChanged = function onAudioTrackChanged2() {
      mediaTypes.AUDIO.onTrackChanged();
      tech.trigger({
        type: "usage",
        name: "vhs-audio-change"
      });
      tech.trigger({
        type: "usage",
        name: "hls-audio-change"
      });
    };
    tech.audioTracks().addEventListener("change", onAudioTrackChanged);
    tech.remoteTextTracks().addEventListener("change", mediaTypes.SUBTITLES.onTrackChanged);
    vhs.on("dispose", function() {
      tech.audioTracks().removeEventListener("change", onAudioTrackChanged);
      tech.remoteTextTracks().removeEventListener("change", mediaTypes.SUBTITLES.onTrackChanged);
    });
    tech.clearTracks("audio");
    for (var id in mediaTypes.AUDIO.tracks) {
      tech.audioTracks().addTrack(mediaTypes.AUDIO.tracks[id]);
    }
  };
  var createMediaTypes = function createMediaTypes2() {
    var mediaTypes = {};
    ["AUDIO", "SUBTITLES", "CLOSED-CAPTIONS"].forEach(function(type3) {
      mediaTypes[type3] = {
        groups: {},
        tracks: {},
        activePlaylistLoader: null,
        activeGroup: noop,
        activeTrack: noop,
        onGroupChanged: noop,
        onTrackChanged: noop
      };
    });
    return mediaTypes;
  };
  var ABORT_EARLY_BLACKLIST_SECONDS = 60 * 2;
  var Vhs;
  var loaderStats = ["mediaRequests", "mediaRequestsAborted", "mediaRequestsTimedout", "mediaRequestsErrored", "mediaTransferDuration", "mediaBytesTransferred"];
  var sumLoaderStat = function sumLoaderStat2(stat) {
    return this.audioSegmentLoader_[stat] + this.mainSegmentLoader_[stat];
  };
  var shouldSwitchToMedia = function shouldSwitchToMedia2(_ref) {
    var currentPlaylist = _ref.currentPlaylist, nextPlaylist = _ref.nextPlaylist, forwardBuffer = _ref.forwardBuffer, bufferLowWaterLine = _ref.bufferLowWaterLine, bufferHighWaterLine = _ref.bufferHighWaterLine, duration5 = _ref.duration, experimentalBufferBasedABR = _ref.experimentalBufferBasedABR, log2 = _ref.log;
    if (!nextPlaylist) {
      videojs$1.log.warn("We received no playlist to switch to. Please check your stream.");
      return false;
    }
    var sharedLogLine = "allowing switch " + (currentPlaylist && currentPlaylist.id || "null") + " -> " + nextPlaylist.id;
    if (!currentPlaylist || !currentPlaylist.endList) {
      log2(sharedLogLine + " as current playlist " + (!currentPlaylist ? "is not set" : "is live"));
      return true;
    }
    if (nextPlaylist.id === currentPlaylist.id) {
      return false;
    }
    var maxBufferLowWaterLine = experimentalBufferBasedABR ? Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE : Config.MAX_BUFFER_LOW_WATER_LINE;
    if (duration5 < maxBufferLowWaterLine) {
      log2(sharedLogLine + " as duration < max low water line (" + duration5 + " < " + maxBufferLowWaterLine + ")");
      return true;
    }
    var nextBandwidth = nextPlaylist.attributes.BANDWIDTH;
    var currBandwidth = currentPlaylist.attributes.BANDWIDTH;
    if (nextBandwidth < currBandwidth && (!experimentalBufferBasedABR || forwardBuffer < bufferHighWaterLine)) {
      var logLine = sharedLogLine + " as next bandwidth < current bandwidth (" + nextBandwidth + " < " + currBandwidth + ")";
      if (experimentalBufferBasedABR) {
        logLine += " and forwardBuffer < bufferHighWaterLine (" + forwardBuffer + " < " + bufferHighWaterLine + ")";
      }
      log2(logLine);
      return true;
    }
    if ((!experimentalBufferBasedABR || nextBandwidth > currBandwidth) && forwardBuffer >= bufferLowWaterLine) {
      var _logLine = sharedLogLine + " as forwardBuffer >= bufferLowWaterLine (" + forwardBuffer + " >= " + bufferLowWaterLine + ")";
      if (experimentalBufferBasedABR) {
        _logLine += " and next bandwidth > current bandwidth (" + nextBandwidth + " > " + currBandwidth + ")";
      }
      log2(_logLine);
      return true;
    }
    log2("not " + sharedLogLine + " as no switching criteria met");
    return false;
  };
  var MasterPlaylistController = /* @__PURE__ */ function(_videojs$EventTarget) {
    import_inheritsLoose2.default(MasterPlaylistController2, _videojs$EventTarget);
    function MasterPlaylistController2(options) {
      var _this;
      _this = _videojs$EventTarget.call(this) || this;
      var src = options.src, handleManifestRedirects = options.handleManifestRedirects, withCredentials = options.withCredentials, tech = options.tech, bandwidth2 = options.bandwidth, externVhs = options.externVhs, useCueTags = options.useCueTags, blacklistDuration = options.blacklistDuration, enableLowInitialPlaylist = options.enableLowInitialPlaylist, sourceType = options.sourceType, cacheEncryptionKeys = options.cacheEncryptionKeys, handlePartialData = options.handlePartialData, experimentalBufferBasedABR = options.experimentalBufferBasedABR;
      if (!src) {
        throw new Error("A non-empty playlist URL or JSON manifest string is required");
      }
      Vhs = externVhs;
      _this.experimentalBufferBasedABR = Boolean(experimentalBufferBasedABR);
      _this.withCredentials = withCredentials;
      _this.tech_ = tech;
      _this.vhs_ = tech.vhs;
      _this.sourceType_ = sourceType;
      _this.useCueTags_ = useCueTags;
      _this.blacklistDuration = blacklistDuration;
      _this.enableLowInitialPlaylist = enableLowInitialPlaylist;
      if (_this.useCueTags_) {
        _this.cueTagsTrack_ = _this.tech_.addTextTrack("metadata", "ad-cues");
        _this.cueTagsTrack_.inBandMetadataTrackDispatchType = "";
      }
      _this.requestOptions_ = {
        withCredentials,
        handleManifestRedirects,
        timeout: null
      };
      _this.on("error", _this.pauseLoading);
      _this.mediaTypes_ = createMediaTypes();
      _this.mediaSource = new import_window2.default.MediaSource();
      _this.handleDurationChange_ = _this.handleDurationChange_.bind(import_assertThisInitialized2.default(_this));
      _this.handleSourceOpen_ = _this.handleSourceOpen_.bind(import_assertThisInitialized2.default(_this));
      _this.handleSourceEnded_ = _this.handleSourceEnded_.bind(import_assertThisInitialized2.default(_this));
      _this.mediaSource.addEventListener("durationchange", _this.handleDurationChange_);
      _this.mediaSource.addEventListener("sourceopen", _this.handleSourceOpen_);
      _this.mediaSource.addEventListener("sourceended", _this.handleSourceEnded_);
      _this.seekable_ = videojs$1.createTimeRanges();
      _this.hasPlayed_ = false;
      _this.syncController_ = new SyncController(options);
      _this.segmentMetadataTrack_ = tech.addRemoteTextTrack({
        kind: "metadata",
        label: "segment-metadata"
      }, false).track;
      _this.decrypter_ = new Decrypter();
      _this.sourceUpdater_ = new SourceUpdater(_this.mediaSource);
      _this.inbandTextTracks_ = {};
      _this.timelineChangeController_ = new TimelineChangeController();
      var segmentLoaderSettings = {
        vhs: _this.vhs_,
        mediaSource: _this.mediaSource,
        currentTime: _this.tech_.currentTime.bind(_this.tech_),
        seekable: function seekable3() {
          return _this.seekable();
        },
        seeking: function seeking() {
          return _this.tech_.seeking();
        },
        duration: function duration5() {
          return _this.duration();
        },
        hasPlayed: function hasPlayed() {
          return _this.hasPlayed_;
        },
        goalBufferLength: function goalBufferLength() {
          return _this.goalBufferLength();
        },
        bandwidth: bandwidth2,
        syncController: _this.syncController_,
        decrypter: _this.decrypter_,
        sourceType: _this.sourceType_,
        inbandTextTracks: _this.inbandTextTracks_,
        cacheEncryptionKeys,
        handlePartialData,
        sourceUpdater: _this.sourceUpdater_,
        timelineChangeController: _this.timelineChangeController_
      };
      _this.masterPlaylistLoader_ = _this.sourceType_ === "dash" ? new DashPlaylistLoader(src, _this.vhs_, _this.requestOptions_) : new PlaylistLoader(src, _this.vhs_, _this.requestOptions_);
      _this.setupMasterPlaylistLoaderListeners_();
      _this.mainSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
        segmentMetadataTrack: _this.segmentMetadataTrack_,
        loaderType: "main"
      }), options);
      _this.audioSegmentLoader_ = new SegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
        loaderType: "audio"
      }), options);
      _this.subtitleSegmentLoader_ = new VTTSegmentLoader(videojs$1.mergeOptions(segmentLoaderSettings, {
        loaderType: "vtt",
        featuresNativeTextTracks: _this.tech_.featuresNativeTextTracks
      }), options);
      _this.setupSegmentLoaderListeners_();
      if (_this.experimentalBufferBasedABR) {
        _this.masterPlaylistLoader_.one("loadedplaylist", function() {
          return _this.startABRTimer_();
        });
        _this.tech_.on("pause", function() {
          return _this.stopABRTimer_();
        });
        _this.tech_.on("play", function() {
          return _this.startABRTimer_();
        });
      }
      loaderStats.forEach(function(stat) {
        _this[stat + "_"] = sumLoaderStat.bind(import_assertThisInitialized2.default(_this), stat);
      });
      _this.logger_ = logger("MPC");
      _this.triggeredFmp4Usage = false;
      _this.masterPlaylistLoader_.load();
      return _this;
    }
    var _proto = MasterPlaylistController2.prototype;
    _proto.checkABR_ = function checkABR_() {
      var nextPlaylist = this.selectPlaylist();
      if (this.shouldSwitchToMedia_(nextPlaylist)) {
        this.masterPlaylistLoader_.media(nextPlaylist);
      }
    };
    _proto.startABRTimer_ = function startABRTimer_() {
      var _this2 = this;
      this.stopABRTimer_();
      this.abrTimer_ = import_window2.default.setInterval(function() {
        return _this2.checkABR_();
      }, 250);
    };
    _proto.stopABRTimer_ = function stopABRTimer_() {
      if (this.tech_.scrubbing && this.tech_.scrubbing()) {
        return;
      }
      import_window2.default.clearInterval(this.abrTimer_);
      this.abrTimer_ = null;
    };
    _proto.setupMasterPlaylistLoaderListeners_ = function setupMasterPlaylistLoaderListeners_() {
      var _this3 = this;
      this.masterPlaylistLoader_.on("loadedmetadata", function() {
        var media = _this3.masterPlaylistLoader_.media();
        var requestTimeout = media.targetDuration * 1.5 * 1e3;
        if (isLowestEnabledRendition(_this3.masterPlaylistLoader_.master, _this3.masterPlaylistLoader_.media())) {
          _this3.requestOptions_.timeout = 0;
        } else {
          _this3.requestOptions_.timeout = requestTimeout;
        }
        if (media.endList && _this3.tech_.preload() !== "none") {
          _this3.mainSegmentLoader_.playlist(media, _this3.requestOptions_);
          _this3.mainSegmentLoader_.load();
        }
        setupMediaGroups({
          sourceType: _this3.sourceType_,
          segmentLoaders: {
            AUDIO: _this3.audioSegmentLoader_,
            SUBTITLES: _this3.subtitleSegmentLoader_,
            main: _this3.mainSegmentLoader_
          },
          tech: _this3.tech_,
          requestOptions: _this3.requestOptions_,
          masterPlaylistLoader: _this3.masterPlaylistLoader_,
          vhs: _this3.vhs_,
          master: _this3.master(),
          mediaTypes: _this3.mediaTypes_,
          blacklistCurrentPlaylist: _this3.blacklistCurrentPlaylist.bind(_this3)
        });
        _this3.triggerPresenceUsage_(_this3.master(), media);
        _this3.setupFirstPlay();
        if (!_this3.mediaTypes_.AUDIO.activePlaylistLoader || _this3.mediaTypes_.AUDIO.activePlaylistLoader.media()) {
          _this3.trigger("selectedinitialmedia");
        } else {
          _this3.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata", function() {
            _this3.trigger("selectedinitialmedia");
          });
        }
      });
      this.masterPlaylistLoader_.on("loadedplaylist", function() {
        var updatedPlaylist = _this3.masterPlaylistLoader_.media();
        if (!updatedPlaylist) {
          _this3.excludeUnsupportedVariants_();
          var selectedMedia;
          if (_this3.enableLowInitialPlaylist) {
            selectedMedia = _this3.selectInitialPlaylist();
          }
          if (!selectedMedia) {
            selectedMedia = _this3.selectPlaylist();
          }
          if (!selectedMedia || !_this3.shouldSwitchToMedia_(selectedMedia)) {
            return;
          }
          _this3.initialMedia_ = selectedMedia;
          _this3.masterPlaylistLoader_.media(_this3.initialMedia_);
          var haveJsonSource = _this3.sourceType_ === "vhs-json" && _this3.initialMedia_.segments;
          if (!haveJsonSource) {
            return;
          }
          updatedPlaylist = _this3.initialMedia_;
        }
        _this3.handleUpdatedMediaPlaylist(updatedPlaylist);
      });
      this.masterPlaylistLoader_.on("error", function() {
        _this3.blacklistCurrentPlaylist(_this3.masterPlaylistLoader_.error);
      });
      this.masterPlaylistLoader_.on("mediachanging", function() {
        _this3.mainSegmentLoader_.abort();
        _this3.mainSegmentLoader_.pause();
      });
      this.masterPlaylistLoader_.on("mediachange", function() {
        var media = _this3.masterPlaylistLoader_.media();
        var requestTimeout = media.targetDuration * 1.5 * 1e3;
        if (isLowestEnabledRendition(_this3.masterPlaylistLoader_.master, _this3.masterPlaylistLoader_.media())) {
          _this3.requestOptions_.timeout = 0;
        } else {
          _this3.requestOptions_.timeout = requestTimeout;
        }
        _this3.mainSegmentLoader_.playlist(media, _this3.requestOptions_);
        _this3.mainSegmentLoader_.load();
        _this3.tech_.trigger({
          type: "mediachange",
          bubbles: true
        });
      });
      this.masterPlaylistLoader_.on("playlistunchanged", function() {
        var updatedPlaylist = _this3.masterPlaylistLoader_.media();
        var playlistOutdated = _this3.stuckAtPlaylistEnd_(updatedPlaylist);
        if (playlistOutdated) {
          _this3.blacklistCurrentPlaylist({
            message: "Playlist no longer updating."
          });
          _this3.tech_.trigger("playliststuck");
        }
      });
      this.masterPlaylistLoader_.on("renditiondisabled", function() {
        _this3.tech_.trigger({
          type: "usage",
          name: "vhs-rendition-disabled"
        });
        _this3.tech_.trigger({
          type: "usage",
          name: "hls-rendition-disabled"
        });
      });
      this.masterPlaylistLoader_.on("renditionenabled", function() {
        _this3.tech_.trigger({
          type: "usage",
          name: "vhs-rendition-enabled"
        });
        _this3.tech_.trigger({
          type: "usage",
          name: "hls-rendition-enabled"
        });
      });
    };
    _proto.handleUpdatedMediaPlaylist = function handleUpdatedMediaPlaylist(updatedPlaylist) {
      if (this.useCueTags_) {
        this.updateAdCues_(updatedPlaylist);
      }
      this.mainSegmentLoader_.playlist(updatedPlaylist, this.requestOptions_);
      this.updateDuration(!updatedPlaylist.endList);
      if (!this.tech_.paused()) {
        this.mainSegmentLoader_.load();
        if (this.audioSegmentLoader_) {
          this.audioSegmentLoader_.load();
        }
      }
    };
    _proto.triggerPresenceUsage_ = function triggerPresenceUsage_(master, media) {
      var mediaGroups = master.mediaGroups || {};
      var defaultDemuxed = true;
      var audioGroupKeys = Object.keys(mediaGroups.AUDIO);
      for (var mediaGroup in mediaGroups.AUDIO) {
        for (var label in mediaGroups.AUDIO[mediaGroup]) {
          var properties = mediaGroups.AUDIO[mediaGroup][label];
          if (!properties.uri) {
            defaultDemuxed = false;
          }
        }
      }
      if (defaultDemuxed) {
        this.tech_.trigger({
          type: "usage",
          name: "vhs-demuxed"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-demuxed"
        });
      }
      if (Object.keys(mediaGroups.SUBTITLES).length) {
        this.tech_.trigger({
          type: "usage",
          name: "vhs-webvtt"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-webvtt"
        });
      }
      if (Vhs.Playlist.isAes(media)) {
        this.tech_.trigger({
          type: "usage",
          name: "vhs-aes"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-aes"
        });
      }
      if (audioGroupKeys.length && Object.keys(mediaGroups.AUDIO[audioGroupKeys[0]]).length > 1) {
        this.tech_.trigger({
          type: "usage",
          name: "vhs-alternate-audio"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-alternate-audio"
        });
      }
      if (this.useCueTags_) {
        this.tech_.trigger({
          type: "usage",
          name: "vhs-playlist-cue-tags"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-playlist-cue-tags"
        });
      }
    };
    _proto.shouldSwitchToMedia_ = function shouldSwitchToMedia_(nextPlaylist) {
      var currentPlaylist = this.masterPlaylistLoader_.media();
      var buffered = this.tech_.buffered();
      var forwardBuffer = buffered.length ? buffered.end(buffered.length - 1) - this.tech_.currentTime() : 0;
      var bufferLowWaterLine = this.bufferLowWaterLine();
      var bufferHighWaterLine = this.bufferHighWaterLine();
      return shouldSwitchToMedia({
        currentPlaylist,
        nextPlaylist,
        forwardBuffer,
        bufferLowWaterLine,
        bufferHighWaterLine,
        duration: this.duration(),
        experimentalBufferBasedABR: this.experimentalBufferBasedABR,
        log: this.logger_
      });
    };
    _proto.setupSegmentLoaderListeners_ = function setupSegmentLoaderListeners_() {
      var _this4 = this;
      if (!this.experimentalBufferBasedABR) {
        this.mainSegmentLoader_.on("bandwidthupdate", function() {
          var nextPlaylist = _this4.selectPlaylist();
          if (_this4.shouldSwitchToMedia_(nextPlaylist)) {
            _this4.masterPlaylistLoader_.media(nextPlaylist);
          }
          _this4.tech_.trigger("bandwidthupdate");
        });
        this.mainSegmentLoader_.on("progress", function() {
          _this4.trigger("progress");
        });
      }
      this.mainSegmentLoader_.on("error", function() {
        _this4.blacklistCurrentPlaylist(_this4.mainSegmentLoader_.error());
      });
      this.mainSegmentLoader_.on("appenderror", function() {
        _this4.error = _this4.mainSegmentLoader_.error_;
        _this4.trigger("error");
      });
      this.mainSegmentLoader_.on("syncinfoupdate", function() {
        _this4.onSyncInfoUpdate_();
      });
      this.mainSegmentLoader_.on("timestampoffset", function() {
        _this4.tech_.trigger({
          type: "usage",
          name: "vhs-timestamp-offset"
        });
        _this4.tech_.trigger({
          type: "usage",
          name: "hls-timestamp-offset"
        });
      });
      this.audioSegmentLoader_.on("syncinfoupdate", function() {
        _this4.onSyncInfoUpdate_();
      });
      this.audioSegmentLoader_.on("appenderror", function() {
        _this4.error = _this4.audioSegmentLoader_.error_;
        _this4.trigger("error");
      });
      this.mainSegmentLoader_.on("ended", function() {
        _this4.logger_("main segment loader ended");
        _this4.onEndOfStream();
      });
      this.mainSegmentLoader_.on("earlyabort", function(event) {
        if (_this4.experimentalBufferBasedABR) {
          return;
        }
        _this4.delegateLoaders_("all", ["abort"]);
        _this4.blacklistCurrentPlaylist({
          message: "Aborted early because there isn't enough bandwidth to complete the request without rebuffering."
        }, ABORT_EARLY_BLACKLIST_SECONDS);
      });
      var updateCodecs = function updateCodecs2() {
        if (!_this4.sourceUpdater_.hasCreatedSourceBuffers()) {
          return _this4.tryToCreateSourceBuffers_();
        }
        var codecs = _this4.getCodecsOrExclude_();
        if (!codecs) {
          return;
        }
        _this4.sourceUpdater_.addOrChangeSourceBuffers(codecs);
      };
      this.mainSegmentLoader_.on("trackinfo", updateCodecs);
      this.audioSegmentLoader_.on("trackinfo", updateCodecs);
      this.mainSegmentLoader_.on("fmp4", function() {
        if (!_this4.triggeredFmp4Usage) {
          _this4.tech_.trigger({
            type: "usage",
            name: "vhs-fmp4"
          });
          _this4.tech_.trigger({
            type: "usage",
            name: "hls-fmp4"
          });
          _this4.triggeredFmp4Usage = true;
        }
      });
      this.audioSegmentLoader_.on("fmp4", function() {
        if (!_this4.triggeredFmp4Usage) {
          _this4.tech_.trigger({
            type: "usage",
            name: "vhs-fmp4"
          });
          _this4.tech_.trigger({
            type: "usage",
            name: "hls-fmp4"
          });
          _this4.triggeredFmp4Usage = true;
        }
      });
      this.audioSegmentLoader_.on("ended", function() {
        _this4.logger_("audioSegmentLoader ended");
        _this4.onEndOfStream();
      });
    };
    _proto.mediaSecondsLoaded_ = function mediaSecondsLoaded_() {
      return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded + this.mainSegmentLoader_.mediaSecondsLoaded);
    };
    _proto.load = function load() {
      this.mainSegmentLoader_.load();
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        this.audioSegmentLoader_.load();
      }
      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
        this.subtitleSegmentLoader_.load();
      }
    };
    _proto.smoothQualityChange_ = function smoothQualityChange_(media) {
      if (media === void 0) {
        media = this.selectPlaylist();
      }
      if (media === this.masterPlaylistLoader_.media()) {
        return;
      }
      this.masterPlaylistLoader_.media(media);
      this.mainSegmentLoader_.resetLoader();
    };
    _proto.fastQualityChange_ = function fastQualityChange_(media) {
      var _this5 = this;
      if (media === void 0) {
        media = this.selectPlaylist();
      }
      if (media === this.masterPlaylistLoader_.media()) {
        return;
      }
      this.masterPlaylistLoader_.media(media);
      this.mainSegmentLoader_.resetEverything(function() {
        if (videojs$1.browser.IE_VERSION || videojs$1.browser.IS_EDGE) {
          _this5.tech_.setCurrentTime(_this5.tech_.currentTime() + 0.04);
        } else {
          _this5.tech_.setCurrentTime(_this5.tech_.currentTime());
        }
      });
    };
    _proto.play = function play() {
      if (this.setupFirstPlay()) {
        return;
      }
      if (this.tech_.ended()) {
        this.tech_.setCurrentTime(0);
      }
      if (this.hasPlayed_) {
        this.load();
      }
      var seekable3 = this.tech_.seekable();
      if (this.tech_.duration() === Infinity) {
        if (this.tech_.currentTime() < seekable3.start(0)) {
          return this.tech_.setCurrentTime(seekable3.end(seekable3.length - 1));
        }
      }
    };
    _proto.setupFirstPlay = function setupFirstPlay() {
      var _this6 = this;
      var media = this.masterPlaylistLoader_.media();
      if (!media || this.tech_.paused() || this.hasPlayed_) {
        return false;
      }
      if (!media.endList) {
        var seekable3 = this.seekable();
        if (!seekable3.length) {
          return false;
        }
        if (videojs$1.browser.IE_VERSION && this.tech_.readyState() === 0) {
          this.tech_.one("loadedmetadata", function() {
            _this6.trigger("firstplay");
            _this6.tech_.setCurrentTime(seekable3.end(0));
            _this6.hasPlayed_ = true;
          });
          return false;
        }
        this.trigger("firstplay");
        this.tech_.setCurrentTime(seekable3.end(0));
      }
      this.hasPlayed_ = true;
      this.load();
      return true;
    };
    _proto.handleSourceOpen_ = function handleSourceOpen_() {
      this.tryToCreateSourceBuffers_();
      if (this.tech_.autoplay()) {
        var playPromise = this.tech_.play();
        if (typeof playPromise !== "undefined" && typeof playPromise.then === "function") {
          playPromise.then(null, function(e) {
          });
        }
      }
      this.trigger("sourceopen");
    };
    _proto.handleSourceEnded_ = function handleSourceEnded_() {
      if (!this.inbandTextTracks_.metadataTrack_) {
        return;
      }
      var cues = this.inbandTextTracks_.metadataTrack_.cues;
      if (!cues || !cues.length) {
        return;
      }
      var duration5 = this.duration();
      cues[cues.length - 1].endTime = isNaN(duration5) || Math.abs(duration5) === Infinity ? Number.MAX_VALUE : duration5;
    };
    _proto.handleDurationChange_ = function handleDurationChange_() {
      this.tech_.trigger("durationchange");
    };
    _proto.onEndOfStream = function onEndOfStream() {
      var isEndOfStream = this.mainSegmentLoader_.ended_;
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        if (!this.mainSegmentLoader_.currentMediaInfo_ || this.mainSegmentLoader_.currentMediaInfo_.hasVideo) {
          isEndOfStream = isEndOfStream && this.audioSegmentLoader_.ended_;
        } else {
          isEndOfStream = this.audioSegmentLoader_.ended_;
        }
      }
      if (!isEndOfStream) {
        return;
      }
      this.stopABRTimer_();
      this.sourceUpdater_.endOfStream();
    };
    _proto.stuckAtPlaylistEnd_ = function stuckAtPlaylistEnd_(playlist) {
      var seekable3 = this.seekable();
      if (!seekable3.length) {
        return false;
      }
      var expired = this.syncController_.getExpiredTime(playlist, this.duration());
      if (expired === null) {
        return false;
      }
      var absolutePlaylistEnd = Vhs.Playlist.playlistEnd(playlist, expired);
      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();
      if (!buffered.length) {
        return absolutePlaylistEnd - currentTime <= SAFE_TIME_DELTA;
      }
      var bufferedEnd = buffered.end(buffered.length - 1);
      return bufferedEnd - currentTime <= SAFE_TIME_DELTA && absolutePlaylistEnd - bufferedEnd <= SAFE_TIME_DELTA;
    };
    _proto.blacklistCurrentPlaylist = function blacklistCurrentPlaylist(error, blacklistDuration) {
      if (error === void 0) {
        error = {};
      }
      var currentPlaylist = error.playlist || this.masterPlaylistLoader_.media();
      blacklistDuration = blacklistDuration || error.blacklistDuration || this.blacklistDuration;
      if (!currentPlaylist) {
        this.error = error;
        if (this.mediaSource.readyState !== "open") {
          this.trigger("error");
        } else {
          this.sourceUpdater_.endOfStream("network");
        }
        return;
      }
      var playlists = this.masterPlaylistLoader_.master.playlists;
      var enabledPlaylists = playlists.filter(isEnabled);
      var isFinalRendition = enabledPlaylists.length === 1 && enabledPlaylists[0] === currentPlaylist;
      if (playlists.length === 1 && blacklistDuration !== Infinity) {
        videojs$1.log.warn("Problem encountered with playlist " + currentPlaylist.id + ". Trying again since it is the only playlist.");
        this.tech_.trigger("retryplaylist");
        return this.masterPlaylistLoader_.load(isFinalRendition);
      }
      if (isFinalRendition) {
        var reincluded = false;
        playlists.forEach(function(playlist) {
          if (playlist === currentPlaylist) {
            return;
          }
          var excludeUntil = playlist.excludeUntil;
          if (typeof excludeUntil !== "undefined" && excludeUntil !== Infinity) {
            reincluded = true;
            delete playlist.excludeUntil;
          }
        });
        if (reincluded) {
          videojs$1.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded.");
          this.tech_.trigger("retryplaylist");
        }
      }
      currentPlaylist.excludeUntil = Date.now() + blacklistDuration * 1e3;
      this.tech_.trigger("blacklistplaylist");
      this.tech_.trigger({
        type: "usage",
        name: "vhs-rendition-blacklisted"
      });
      this.tech_.trigger({
        type: "usage",
        name: "hls-rendition-blacklisted"
      });
      var nextPlaylist = this.selectPlaylist();
      if (!nextPlaylist) {
        this.error = "Playback cannot continue. No available working or supported playlists.";
        this.trigger("error");
        return;
      }
      var logFn2 = error.internal ? this.logger_ : videojs$1.log.warn;
      var errorMessage = error.message ? " " + error.message : "";
      logFn2((error.internal ? "Internal problem" : "Problem") + " encountered with playlist " + currentPlaylist.id + "." + (errorMessage + " Switching to playlist " + nextPlaylist.id + "."));
      if (nextPlaylist.attributes.AUDIO !== currentPlaylist.attributes.AUDIO) {
        this.delegateLoaders_("audio", ["abort", "pause"]);
      }
      if (nextPlaylist.attributes.SUBTITLES !== currentPlaylist.attributes.SUBTITLES) {
        this.delegateLoaders_("subtitle", ["abort", "pause"]);
      }
      this.delegateLoaders_("main", ["abort", "pause"]);
      var delayDuration = nextPlaylist.targetDuration / 2 * 1e3 || 5 * 1e3;
      var shouldDelay = typeof nextPlaylist.lastRequest === "number" && Date.now() - nextPlaylist.lastRequest <= delayDuration;
      return this.masterPlaylistLoader_.media(nextPlaylist, isFinalRendition || shouldDelay);
    };
    _proto.pauseLoading = function pauseLoading() {
      this.delegateLoaders_("all", ["abort", "pause"]);
      this.stopABRTimer_();
    };
    _proto.delegateLoaders_ = function delegateLoaders_(filter, fnNames) {
      var _this7 = this;
      var loaders = [];
      var dontFilterPlaylist = filter === "all";
      if (dontFilterPlaylist || filter === "main") {
        loaders.push(this.masterPlaylistLoader_);
      }
      var mediaTypes = [];
      if (dontFilterPlaylist || filter === "audio") {
        mediaTypes.push("AUDIO");
      }
      if (dontFilterPlaylist || filter === "subtitle") {
        mediaTypes.push("CLOSED-CAPTIONS");
        mediaTypes.push("SUBTITLES");
      }
      mediaTypes.forEach(function(mediaType) {
        var loader = _this7.mediaTypes_[mediaType] && _this7.mediaTypes_[mediaType].activePlaylistLoader;
        if (loader) {
          loaders.push(loader);
        }
      });
      ["main", "audio", "subtitle"].forEach(function(name) {
        var loader = _this7[name + "SegmentLoader_"];
        if (loader && (filter === name || filter === "all")) {
          loaders.push(loader);
        }
      });
      loaders.forEach(function(loader) {
        return fnNames.forEach(function(fnName) {
          if (typeof loader[fnName] === "function") {
            loader[fnName]();
          }
        });
      });
    };
    _proto.setCurrentTime = function setCurrentTime(currentTime) {
      var buffered = findRange(this.tech_.buffered(), currentTime);
      if (!(this.masterPlaylistLoader_ && this.masterPlaylistLoader_.media())) {
        return 0;
      }
      if (!this.masterPlaylistLoader_.media().segments) {
        return 0;
      }
      if (buffered && buffered.length) {
        return currentTime;
      }
      this.mainSegmentLoader_.resetEverything();
      this.mainSegmentLoader_.abort();
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        this.audioSegmentLoader_.resetEverything();
        this.audioSegmentLoader_.abort();
      }
      if (this.mediaTypes_.SUBTITLES.activePlaylistLoader) {
        this.subtitleSegmentLoader_.resetEverything();
        this.subtitleSegmentLoader_.abort();
      }
      this.load();
    };
    _proto.duration = function duration5() {
      if (!this.masterPlaylistLoader_) {
        return 0;
      }
      var media = this.masterPlaylistLoader_.media();
      if (!media) {
        return 0;
      }
      if (!media.endList) {
        return Infinity;
      }
      if (this.mediaSource) {
        return this.mediaSource.duration;
      }
      return Vhs.Playlist.duration(media);
    };
    _proto.seekable = function seekable3() {
      return this.seekable_;
    };
    _proto.onSyncInfoUpdate_ = function onSyncInfoUpdate_() {
      var audioSeekable;
      if (!this.masterPlaylistLoader_) {
        return;
      }
      var media = this.masterPlaylistLoader_.media();
      if (!media) {
        return;
      }
      var expired = this.syncController_.getExpiredTime(media, this.duration());
      if (expired === null) {
        return;
      }
      var suggestedPresentationDelay2 = this.masterPlaylistLoader_.master.suggestedPresentationDelay;
      var mainSeekable = Vhs.Playlist.seekable(media, expired, suggestedPresentationDelay2);
      if (mainSeekable.length === 0) {
        return;
      }
      if (this.mediaTypes_.AUDIO.activePlaylistLoader) {
        media = this.mediaTypes_.AUDIO.activePlaylistLoader.media();
        expired = this.syncController_.getExpiredTime(media, this.duration());
        if (expired === null) {
          return;
        }
        audioSeekable = Vhs.Playlist.seekable(media, expired, suggestedPresentationDelay2);
        if (audioSeekable.length === 0) {
          return;
        }
      }
      var oldEnd;
      var oldStart;
      if (this.seekable_ && this.seekable_.length) {
        oldEnd = this.seekable_.end(0);
        oldStart = this.seekable_.start(0);
      }
      if (!audioSeekable) {
        this.seekable_ = mainSeekable;
      } else if (audioSeekable.start(0) > mainSeekable.end(0) || mainSeekable.start(0) > audioSeekable.end(0)) {
        this.seekable_ = mainSeekable;
      } else {
        this.seekable_ = videojs$1.createTimeRanges([[audioSeekable.start(0) > mainSeekable.start(0) ? audioSeekable.start(0) : mainSeekable.start(0), audioSeekable.end(0) < mainSeekable.end(0) ? audioSeekable.end(0) : mainSeekable.end(0)]]);
      }
      if (this.seekable_ && this.seekable_.length) {
        if (this.seekable_.end(0) === oldEnd && this.seekable_.start(0) === oldStart) {
          return;
        }
      }
      this.logger_("seekable updated [" + printableRange(this.seekable_) + "]");
      this.tech_.trigger("seekablechanged");
    };
    _proto.updateDuration = function updateDuration(isLive) {
      if (this.updateDuration_) {
        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
        this.updateDuration_ = null;
      }
      if (this.mediaSource.readyState !== "open") {
        this.updateDuration_ = this.updateDuration.bind(this, isLive);
        this.mediaSource.addEventListener("sourceopen", this.updateDuration_);
        return;
      }
      if (isLive) {
        var seekable3 = this.seekable();
        if (!seekable3.length) {
          return;
        }
        if (isNaN(this.mediaSource.duration) || this.mediaSource.duration < seekable3.end(seekable3.length - 1)) {
          this.sourceUpdater_.setDuration(seekable3.end(seekable3.length - 1));
        }
        return;
      }
      var buffered = this.tech_.buffered();
      var duration5 = Vhs.Playlist.duration(this.masterPlaylistLoader_.media());
      if (buffered.length > 0) {
        duration5 = Math.max(duration5, buffered.end(buffered.length - 1));
      }
      if (this.mediaSource.duration !== duration5) {
        this.sourceUpdater_.setDuration(duration5);
      }
    };
    _proto.dispose = function dispose3() {
      var _this8 = this;
      this.trigger("dispose");
      this.decrypter_.terminate();
      this.masterPlaylistLoader_.dispose();
      this.mainSegmentLoader_.dispose();
      ["AUDIO", "SUBTITLES"].forEach(function(type3) {
        var groups = _this8.mediaTypes_[type3].groups;
        for (var id in groups) {
          groups[id].forEach(function(group) {
            if (group.playlistLoader) {
              group.playlistLoader.dispose();
            }
          });
        }
      });
      this.audioSegmentLoader_.dispose();
      this.subtitleSegmentLoader_.dispose();
      this.sourceUpdater_.dispose();
      this.timelineChangeController_.dispose();
      this.stopABRTimer_();
      if (this.updateDuration_) {
        this.mediaSource.removeEventListener("sourceopen", this.updateDuration_);
      }
      this.mediaSource.removeEventListener("durationchange", this.handleDurationChange_);
      this.mediaSource.removeEventListener("sourceopen", this.handleSourceOpen_);
      this.mediaSource.removeEventListener("sourceended", this.handleSourceEnded_);
      this.off();
    };
    _proto.master = function master() {
      return this.masterPlaylistLoader_.master;
    };
    _proto.media = function media() {
      return this.masterPlaylistLoader_.media() || this.initialMedia_;
    };
    _proto.areMediaTypesKnown_ = function areMediaTypesKnown_() {
      var usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
      if (!this.mainSegmentLoader_.currentMediaInfo_ || usingAudioLoader && !this.audioSegmentLoader_.currentMediaInfo_) {
        return false;
      }
      return true;
    };
    _proto.getCodecsOrExclude_ = function getCodecsOrExclude_() {
      var _this9 = this;
      var media = {
        main: this.mainSegmentLoader_.currentMediaInfo_ || {},
        audio: this.audioSegmentLoader_.currentMediaInfo_ || {}
      };
      media.video = media.main;
      var playlistCodecs = codecsForPlaylist(this.master(), this.media());
      var codecs = {};
      var usingAudioLoader = !!this.mediaTypes_.AUDIO.activePlaylistLoader;
      if (media.main.hasVideo) {
        codecs.video = playlistCodecs.video || media.main.videoCodec || import_codecs.DEFAULT_VIDEO_CODEC;
      }
      if (media.main.isMuxed) {
        codecs.video += "," + (playlistCodecs.audio || media.main.audioCodec || import_codecs.DEFAULT_AUDIO_CODEC);
      }
      if (media.main.hasAudio && !media.main.isMuxed || media.audio.hasAudio || usingAudioLoader) {
        codecs.audio = playlistCodecs.audio || media.main.audioCodec || media.audio.audioCodec || import_codecs.DEFAULT_AUDIO_CODEC;
        media.audio.isFmp4 = media.main.hasAudio && !media.main.isMuxed ? media.main.isFmp4 : media.audio.isFmp4;
      }
      if (!codecs.audio && !codecs.video) {
        this.blacklistCurrentPlaylist({
          playlist: this.media(),
          message: "Could not determine codecs for playlist.",
          blacklistDuration: Infinity
        });
        return;
      }
      var supportFunction = function supportFunction2(isFmp4, codec) {
        return isFmp4 ? import_codecs.browserSupportsCodec(codec) : import_codecs.muxerSupportsCodec(codec);
      };
      var unsupportedCodecs = {};
      var unsupportedAudio;
      ["video", "audio"].forEach(function(type3) {
        if (codecs.hasOwnProperty(type3) && !supportFunction(media[type3].isFmp4, codecs[type3])) {
          var supporter = media[type3].isFmp4 ? "browser" : "muxer";
          unsupportedCodecs[supporter] = unsupportedCodecs[supporter] || [];
          unsupportedCodecs[supporter].push(codecs[type3]);
          if (type3 === "audio") {
            unsupportedAudio = supporter;
          }
        }
      });
      if (usingAudioLoader && unsupportedAudio && this.media().attributes.AUDIO) {
        var audioGroup = this.media().attributes.AUDIO;
        this.master().playlists.forEach(function(variant) {
          var variantAudioGroup = variant.attributes && variant.attributes.AUDIO;
          if (variantAudioGroup === audioGroup && variant !== _this9.media()) {
            variant.excludeUntil = Infinity;
          }
        });
        this.logger_("excluding audio group " + audioGroup + " as " + unsupportedAudio + ' does not support codec(s): "' + codecs.audio + '"');
      }
      if (Object.keys(unsupportedCodecs).length) {
        var message = Object.keys(unsupportedCodecs).reduce(function(acc, supporter) {
          if (acc) {
            acc += ", ";
          }
          acc += supporter + ' does not support codec(s): "' + unsupportedCodecs[supporter].join(",") + '"';
          return acc;
        }, "") + ".";
        this.blacklistCurrentPlaylist({
          playlist: this.media(),
          internal: true,
          message,
          blacklistDuration: Infinity
        });
        return;
      }
      if (this.sourceUpdater_.hasCreatedSourceBuffers() && !this.sourceUpdater_.canChangeType()) {
        var switchMessages = [];
        ["video", "audio"].forEach(function(type3) {
          var newCodec = (import_codecs.parseCodecs(_this9.sourceUpdater_.codecs[type3] || "")[type3] || {}).type;
          var oldCodec = (import_codecs.parseCodecs(codecs[type3] || "")[type3] || {}).type;
          if (newCodec && oldCodec && newCodec.toLowerCase() !== oldCodec.toLowerCase()) {
            switchMessages.push('"' + _this9.sourceUpdater_.codecs[type3] + '" -> "' + codecs[type3] + '"');
          }
        });
        if (switchMessages.length) {
          this.blacklistCurrentPlaylist({
            playlist: this.media(),
            message: "Codec switching not supported: " + switchMessages.join(", ") + ".",
            blacklistDuration: Infinity,
            internal: true
          });
          return;
        }
      }
      return codecs;
    };
    _proto.tryToCreateSourceBuffers_ = function tryToCreateSourceBuffers_() {
      if (this.mediaSource.readyState !== "open" || this.sourceUpdater_.hasCreatedSourceBuffers()) {
        return;
      }
      if (!this.areMediaTypesKnown_()) {
        return;
      }
      var codecs = this.getCodecsOrExclude_();
      if (!codecs) {
        return;
      }
      this.sourceUpdater_.createSourceBuffers(codecs);
      var codecString = [codecs.video, codecs.audio].filter(Boolean).join(",");
      this.excludeIncompatibleVariants_(codecString);
    };
    _proto.excludeUnsupportedVariants_ = function excludeUnsupportedVariants_() {
      var _this10 = this;
      var playlists = this.master().playlists;
      var ids = [];
      Object.keys(playlists).forEach(function(key) {
        var variant = playlists[key];
        if (ids.indexOf(variant.id) !== -1) {
          return;
        }
        ids.push(variant.id);
        var codecs = codecsForPlaylist(_this10.master, variant);
        var unsupported = [];
        if (codecs.audio && !import_codecs.muxerSupportsCodec(codecs.audio) && !import_codecs.browserSupportsCodec(codecs.audio)) {
          variant.excludeUntil = Infinity;
          unsupported.push("audio codec " + codecs.audio);
        }
        if (codecs.video && !import_codecs.muxerSupportsCodec(codecs.video) && !import_codecs.browserSupportsCodec(codecs.video)) {
          variant.excludeUntil = Infinity;
          unsupported.push("video codec " + codecs.video);
        }
        if (codecs.text && codecs.text === "stpp.ttml.im1t") {
          variant.excludeUntil = Infinity;
          unsupported.push("text codec " + codecs.text);
        }
        if (unsupported.length) {
          _this10.logger_("excluding " + variant.id + " as codecs " + unsupported.join(", ") + " are unsupported");
        }
      });
    };
    _proto.excludeIncompatibleVariants_ = function excludeIncompatibleVariants_(codecString) {
      var _this11 = this;
      var codecs = import_codecs.parseCodecs(codecString);
      var codecCount = Object.keys(codecs).length;
      this.master().playlists.forEach(function(variant) {
        if (variant.excludeUntil === Infinity) {
          return;
        }
        var variantCodecs = {};
        var variantCodecCount = 2;
        var blacklistReasons = [];
        var variantCodecStrings = codecsForPlaylist(_this11.masterPlaylistLoader_.master, variant);
        if (variantCodecStrings.audio || variantCodecStrings.video) {
          var variantCodecString = [variantCodecStrings.video, variantCodecStrings.audio].filter(Boolean).join(",");
          variantCodecs = import_codecs.parseCodecs(variantCodecString);
          variantCodecCount = Object.keys(variantCodecs).length;
        }
        if (variantCodecCount !== codecCount) {
          blacklistReasons.push('codec count "' + variantCodecCount + '" !== "' + codecCount + '"');
          variant.excludeUntil = Infinity;
        }
        if (!_this11.sourceUpdater_.canChangeType()) {
          if (variantCodecs.video && codecs.video && variantCodecs.video.type.toLowerCase() !== codecs.video.type.toLowerCase()) {
            blacklistReasons.push('video codec "' + variantCodecs.video.type + '" !== "' + codecs.video.type + '"');
            variant.excludeUntil = Infinity;
          }
          if (variantCodecs.audio && codecs.audio && variantCodecs.audio.type.toLowerCase() !== codecs.audio.type.toLowerCase()) {
            variant.excludeUntil = Infinity;
            blacklistReasons.push('audio codec "' + variantCodecs.audio.type + '" !== "' + codecs.audio.type + '"');
          }
        }
        if (blacklistReasons.length) {
          _this11.logger_("blacklisting " + variant.id + ": " + blacklistReasons.join(" && "));
        }
      });
    };
    _proto.updateAdCues_ = function updateAdCues_(media) {
      var offset = 0;
      var seekable3 = this.seekable();
      if (seekable3.length) {
        offset = seekable3.start(0);
      }
      updateAdCues(media, this.cueTagsTrack_, offset);
    };
    _proto.goalBufferLength = function goalBufferLength() {
      var currentTime = this.tech_.currentTime();
      var initial = Config.GOAL_BUFFER_LENGTH;
      var rate = Config.GOAL_BUFFER_LENGTH_RATE;
      var max = Math.max(initial, Config.MAX_GOAL_BUFFER_LENGTH);
      return Math.min(initial + currentTime * rate, max);
    };
    _proto.bufferLowWaterLine = function bufferLowWaterLine() {
      var currentTime = this.tech_.currentTime();
      var initial = Config.BUFFER_LOW_WATER_LINE;
      var rate = Config.BUFFER_LOW_WATER_LINE_RATE;
      var max = Math.max(initial, Config.MAX_BUFFER_LOW_WATER_LINE);
      var newMax = Math.max(initial, Config.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);
      return Math.min(initial + currentTime * rate, this.experimentalBufferBasedABR ? newMax : max);
    };
    _proto.bufferHighWaterLine = function bufferHighWaterLine() {
      return Config.BUFFER_HIGH_WATER_LINE;
    };
    return MasterPlaylistController2;
  }(videojs$1.EventTarget);
  var enableFunction = function enableFunction2(loader, playlistID, changePlaylistFn) {
    return function(enable) {
      var playlist = loader.master.playlists[playlistID];
      var incompatible = isIncompatible(playlist);
      var currentlyEnabled = isEnabled(playlist);
      if (typeof enable === "undefined") {
        return currentlyEnabled;
      }
      if (enable) {
        delete playlist.disabled;
      } else {
        playlist.disabled = true;
      }
      if (enable !== currentlyEnabled && !incompatible) {
        changePlaylistFn();
        if (enable) {
          loader.trigger("renditionenabled");
        } else {
          loader.trigger("renditiondisabled");
        }
      }
      return enable;
    };
  };
  var Representation = function Representation2(vhsHandler, playlist, id) {
    var mpc = vhsHandler.masterPlaylistController_, smoothQualityChange = vhsHandler.options_.smoothQualityChange;
    var changeType2 = smoothQualityChange ? "smooth" : "fast";
    var qualityChangeFunction = mpc[changeType2 + "QualityChange_"].bind(mpc);
    if (playlist.attributes.RESOLUTION) {
      var resolution = playlist.attributes.RESOLUTION;
      this.width = resolution.width;
      this.height = resolution.height;
    }
    this.bandwidth = playlist.attributes.BANDWIDTH;
    this.codecs = codecsForPlaylist(mpc.master(), playlist);
    this.playlist = playlist;
    this.id = id;
    this.enabled = enableFunction(vhsHandler.playlists, playlist.id, qualityChangeFunction);
  };
  var renditionSelectionMixin = function renditionSelectionMixin2(vhsHandler) {
    var playlists = vhsHandler.playlists;
    vhsHandler.representations = function() {
      if (!playlists || !playlists.master || !playlists.master.playlists) {
        return [];
      }
      return playlists.master.playlists.filter(function(media) {
        return !isIncompatible(media);
      }).map(function(e, i) {
        return new Representation(vhsHandler, e, e.id);
      });
    };
  };
  var timerCancelEvents = ["seeking", "seeked", "pause", "playing", "error"];
  var closeToBufferedContent = function closeToBufferedContent2(_ref) {
    var buffered = _ref.buffered, targetDuration = _ref.targetDuration, currentTime = _ref.currentTime;
    if (!buffered.length) {
      return false;
    }
    if (buffered.end(0) - buffered.start(0) < targetDuration * 2) {
      return false;
    }
    if (currentTime > buffered.start(0)) {
      return false;
    }
    return buffered.start(0) - currentTime < targetDuration;
  };
  var PlaybackWatcher = /* @__PURE__ */ function() {
    function PlaybackWatcher2(options) {
      var _this = this;
      this.masterPlaylistController_ = options.masterPlaylistController;
      this.tech_ = options.tech;
      this.seekable = options.seekable;
      this.allowSeeksWithinUnsafeLiveWindow = options.allowSeeksWithinUnsafeLiveWindow;
      this.liveRangeSafeTimeDelta = options.liveRangeSafeTimeDelta;
      this.media = options.media;
      this.consecutiveUpdates = 0;
      this.lastRecordedTime = null;
      this.timer_ = null;
      this.checkCurrentTimeTimeout_ = null;
      this.logger_ = logger("PlaybackWatcher");
      this.logger_("initialize");
      var canPlayHandler = function canPlayHandler2() {
        return _this.monitorCurrentTime_();
      };
      var waitingHandler = function waitingHandler2() {
        return _this.techWaiting_();
      };
      var cancelTimerHandler = function cancelTimerHandler2() {
        return _this.cancelTimer_();
      };
      var fixesBadSeeksHandler = function fixesBadSeeksHandler2() {
        return _this.fixesBadSeeks_();
      };
      var mpc = this.masterPlaylistController_;
      var loaderTypes = ["main", "subtitle", "audio"];
      var loaderChecks = {};
      loaderTypes.forEach(function(type3) {
        loaderChecks[type3] = {
          reset: function reset3() {
            return _this.resetSegmentDownloads_(type3);
          },
          updateend: function updateend() {
            return _this.checkSegmentDownloads_(type3);
          }
        };
        mpc[type3 + "SegmentLoader_"].on("appendsdone", loaderChecks[type3].updateend);
        mpc[type3 + "SegmentLoader_"].on("playlistupdate", loaderChecks[type3].reset);
        _this.tech_.on(["seeked", "seeking"], loaderChecks[type3].reset);
      });
      this.tech_.on("seekablechanged", fixesBadSeeksHandler);
      this.tech_.on("waiting", waitingHandler);
      this.tech_.on(timerCancelEvents, cancelTimerHandler);
      this.tech_.on("canplay", canPlayHandler);
      this.dispose = function() {
        _this.logger_("dispose");
        _this.tech_.off("seekablechanged", fixesBadSeeksHandler);
        _this.tech_.off("waiting", waitingHandler);
        _this.tech_.off(timerCancelEvents, cancelTimerHandler);
        _this.tech_.off("canplay", canPlayHandler);
        loaderTypes.forEach(function(type3) {
          mpc[type3 + "SegmentLoader_"].off("appendsdone", loaderChecks[type3].updateend);
          mpc[type3 + "SegmentLoader_"].off("playlistupdate", loaderChecks[type3].reset);
          _this.tech_.off(["seeked", "seeking"], loaderChecks[type3].reset);
        });
        if (_this.checkCurrentTimeTimeout_) {
          import_window2.default.clearTimeout(_this.checkCurrentTimeTimeout_);
        }
        _this.cancelTimer_();
      };
    }
    var _proto = PlaybackWatcher2.prototype;
    _proto.monitorCurrentTime_ = function monitorCurrentTime_() {
      this.checkCurrentTime_();
      if (this.checkCurrentTimeTimeout_) {
        import_window2.default.clearTimeout(this.checkCurrentTimeTimeout_);
      }
      this.checkCurrentTimeTimeout_ = import_window2.default.setTimeout(this.monitorCurrentTime_.bind(this), 250);
    };
    _proto.resetSegmentDownloads_ = function resetSegmentDownloads_(type3) {
      var loader = this.masterPlaylistController_[type3 + "SegmentLoader_"];
      if (this[type3 + "StalledDownloads_"] > 0) {
        this.logger_("resetting possible stalled download count for " + type3 + " loader");
      }
      this[type3 + "StalledDownloads_"] = 0;
      this[type3 + "Buffered_"] = loader.buffered_();
    };
    _proto.checkSegmentDownloads_ = function checkSegmentDownloads_(type3) {
      var mpc = this.masterPlaylistController_;
      var loader = mpc[type3 + "SegmentLoader_"];
      var buffered = loader.buffered_();
      var isBufferedDifferent = isRangeDifferent(this[type3 + "Buffered_"], buffered);
      this[type3 + "Buffered_"] = buffered;
      if (isBufferedDifferent) {
        this.resetSegmentDownloads_(type3);
        return;
      }
      this[type3 + "StalledDownloads_"]++;
      this.logger_("found #" + this[type3 + "StalledDownloads_"] + " " + type3 + " appends that did not increase buffer (possible stalled download)", {
        playlistId: loader.playlist_ && loader.playlist_.id,
        buffered: timeRangesToArray(buffered)
      });
      if (this[type3 + "StalledDownloads_"] < 10) {
        return;
      }
      this.logger_(type3 + " loader stalled download exclusion");
      this.resetSegmentDownloads_(type3);
      this.tech_.trigger({
        type: "usage",
        name: "vhs-" + type3 + "-download-exclusion"
      });
      if (type3 === "subtitle") {
        return;
      }
      mpc.blacklistCurrentPlaylist({
        message: "Excessive " + type3 + " segment downloading detected."
      }, Infinity);
    };
    _proto.checkCurrentTime_ = function checkCurrentTime_() {
      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
        this.consecutiveUpdates = 0;
        this.lastRecordedTime = this.tech_.currentTime();
        return;
      }
      if (this.tech_.paused() || this.tech_.seeking()) {
        return;
      }
      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();
      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {
        return this.techWaiting_();
      }
      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {
        this.consecutiveUpdates++;
        this.waiting_();
      } else if (currentTime === this.lastRecordedTime) {
        this.consecutiveUpdates++;
      } else {
        this.consecutiveUpdates = 0;
        this.lastRecordedTime = currentTime;
      }
    };
    _proto.cancelTimer_ = function cancelTimer_() {
      this.consecutiveUpdates = 0;
      if (this.timer_) {
        this.logger_("cancelTimer_");
        clearTimeout(this.timer_);
      }
      this.timer_ = null;
    };
    _proto.fixesBadSeeks_ = function fixesBadSeeks_() {
      var seeking = this.tech_.seeking();
      if (!seeking) {
        return false;
      }
      var seekable3 = this.seekable();
      var currentTime = this.tech_.currentTime();
      var isAfterSeekableRange = this.afterSeekableWindow_(seekable3, currentTime, this.media(), this.allowSeeksWithinUnsafeLiveWindow);
      var seekTo;
      if (isAfterSeekableRange) {
        var seekableEnd = seekable3.end(seekable3.length - 1);
        seekTo = seekableEnd;
      }
      if (this.beforeSeekableWindow_(seekable3, currentTime)) {
        var seekableStart = seekable3.start(0);
        seekTo = seekableStart + (seekableStart === seekable3.end(0) ? 0 : SAFE_TIME_DELTA);
      }
      if (typeof seekTo !== "undefined") {
        this.logger_("Trying to seek outside of seekable at time " + currentTime + " with " + ("seekable range " + printableRange(seekable3) + ". Seeking to ") + (seekTo + "."));
        this.tech_.setCurrentTime(seekTo);
        return true;
      }
      var buffered = this.tech_.buffered();
      if (closeToBufferedContent({
        buffered,
        targetDuration: this.media().targetDuration,
        currentTime
      })) {
        seekTo = buffered.start(0) + SAFE_TIME_DELTA;
        this.logger_("Buffered region starts (" + buffered.start(0) + ") " + (" just beyond seek point (" + currentTime + "). Seeking to " + seekTo + "."));
        this.tech_.setCurrentTime(seekTo);
        return true;
      }
      return false;
    };
    _proto.waiting_ = function waiting_() {
      if (this.techWaiting_()) {
        return;
      }
      var currentTime = this.tech_.currentTime();
      var buffered = this.tech_.buffered();
      var currentRange = findRange(buffered, currentTime);
      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {
        this.cancelTimer_();
        this.tech_.setCurrentTime(currentTime);
        this.logger_("Stopped at " + currentTime + " while inside a buffered region " + ("[" + currentRange.start(0) + " -> " + currentRange.end(0) + "]. Attempting to resume ") + "playback by seeking to the current time.");
        this.tech_.trigger({
          type: "usage",
          name: "vhs-unknown-waiting"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-unknown-waiting"
        });
        return;
      }
    };
    _proto.techWaiting_ = function techWaiting_() {
      var seekable3 = this.seekable();
      var currentTime = this.tech_.currentTime();
      if (this.tech_.seeking() && this.fixesBadSeeks_()) {
        return true;
      }
      if (this.tech_.seeking() || this.timer_ !== null) {
        return true;
      }
      if (this.beforeSeekableWindow_(seekable3, currentTime)) {
        var livePoint = seekable3.end(seekable3.length - 1);
        this.logger_("Fell out of live window at time " + currentTime + ". Seeking to " + ("live point (seekable end) " + livePoint));
        this.cancelTimer_();
        this.tech_.setCurrentTime(livePoint);
        this.tech_.trigger({
          type: "usage",
          name: "vhs-live-resync"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-live-resync"
        });
        return true;
      }
      var sourceUpdater = this.tech_.vhs.masterPlaylistController_.sourceUpdater_;
      var buffered = this.tech_.buffered();
      var videoUnderflow = this.videoUnderflow_({
        audioBuffered: sourceUpdater.audioBuffered(),
        videoBuffered: sourceUpdater.videoBuffered(),
        currentTime
      });
      if (videoUnderflow) {
        this.cancelTimer_();
        this.tech_.setCurrentTime(currentTime);
        this.tech_.trigger({
          type: "usage",
          name: "vhs-video-underflow"
        });
        this.tech_.trigger({
          type: "usage",
          name: "hls-video-underflow"
        });
        return true;
      }
      var nextRange = findNextRange(buffered, currentTime);
      if (nextRange.length > 0) {
        var difference = nextRange.start(0) - currentTime;
        this.logger_("Stopped at " + currentTime + ", setting timer for " + difference + ", seeking " + ("to " + nextRange.start(0)));
        this.cancelTimer_();
        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1e3, currentTime);
        return true;
      }
      return false;
    };
    _proto.afterSeekableWindow_ = function afterSeekableWindow_(seekable3, currentTime, playlist, allowSeeksWithinUnsafeLiveWindow) {
      if (allowSeeksWithinUnsafeLiveWindow === void 0) {
        allowSeeksWithinUnsafeLiveWindow = false;
      }
      if (!seekable3.length) {
        return false;
      }
      var allowedEnd = seekable3.end(seekable3.length - 1) + SAFE_TIME_DELTA;
      var isLive = !playlist.endList;
      if (isLive && allowSeeksWithinUnsafeLiveWindow) {
        allowedEnd = seekable3.end(seekable3.length - 1) + playlist.targetDuration * 3;
      }
      if (currentTime > allowedEnd) {
        return true;
      }
      return false;
    };
    _proto.beforeSeekableWindow_ = function beforeSeekableWindow_(seekable3, currentTime) {
      if (seekable3.length && seekable3.start(0) > 0 && currentTime < seekable3.start(0) - this.liveRangeSafeTimeDelta) {
        return true;
      }
      return false;
    };
    _proto.videoUnderflow_ = function videoUnderflow_(_ref2) {
      var videoBuffered = _ref2.videoBuffered, audioBuffered = _ref2.audioBuffered, currentTime = _ref2.currentTime;
      if (!videoBuffered) {
        return;
      }
      var gap;
      if (videoBuffered.length && audioBuffered.length) {
        var lastVideoRange = findRange(videoBuffered, currentTime - 3);
        var videoRange = findRange(videoBuffered, currentTime);
        var audioRange = findRange(audioBuffered, currentTime);
        if (audioRange.length && !videoRange.length && lastVideoRange.length) {
          gap = {
            start: lastVideoRange.end(0),
            end: audioRange.end(0)
          };
        }
      } else {
        var nextRange = findNextRange(videoBuffered, currentTime);
        if (!nextRange.length) {
          gap = this.gapFromVideoUnderflow_(videoBuffered, currentTime);
        }
      }
      if (gap) {
        this.logger_("Encountered a gap in video from " + gap.start + " to " + gap.end + ". " + ("Seeking to current time " + currentTime));
        return true;
      }
      return false;
    };
    _proto.skipTheGap_ = function skipTheGap_(scheduledCurrentTime) {
      var buffered = this.tech_.buffered();
      var currentTime = this.tech_.currentTime();
      var nextRange = findNextRange(buffered, currentTime);
      this.cancelTimer_();
      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {
        return;
      }
      this.logger_("skipTheGap_:", "currentTime:", currentTime, "scheduled currentTime:", scheduledCurrentTime, "nextRange start:", nextRange.start(0));
      this.tech_.setCurrentTime(nextRange.start(0) + TIME_FUDGE_FACTOR);
      this.tech_.trigger({
        type: "usage",
        name: "vhs-gap-skip"
      });
      this.tech_.trigger({
        type: "usage",
        name: "hls-gap-skip"
      });
    };
    _proto.gapFromVideoUnderflow_ = function gapFromVideoUnderflow_(buffered, currentTime) {
      var gaps = findGaps(buffered);
      for (var i = 0; i < gaps.length; i++) {
        var start2 = gaps.start(i);
        var end = gaps.end(i);
        if (currentTime - start2 < 4 && currentTime - start2 > 2) {
          return {
            start: start2,
            end
          };
        }
      }
      return null;
    };
    return PlaybackWatcher2;
  }();
  var defaultOptions = {
    errorInterval: 30,
    getSource: function getSource(next) {
      var tech = this.tech({
        IWillNotUseThisInPlugins: true
      });
      var sourceObj = tech.currentSource_ || this.currentSource();
      return next(sourceObj);
    }
  };
  var initPlugin = function initPlugin2(player, options) {
    var lastCalled = 0;
    var seekTo = 0;
    var localOptions = videojs$1.mergeOptions(defaultOptions, options);
    player.ready(function() {
      player.trigger({
        type: "usage",
        name: "vhs-error-reload-initialized"
      });
      player.trigger({
        type: "usage",
        name: "hls-error-reload-initialized"
      });
    });
    var loadedMetadataHandler = function loadedMetadataHandler2() {
      if (seekTo) {
        player.currentTime(seekTo);
      }
    };
    var setSource2 = function setSource3(sourceObj) {
      if (sourceObj === null || sourceObj === void 0) {
        return;
      }
      seekTo = player.duration() !== Infinity && player.currentTime() || 0;
      player.one("loadedmetadata", loadedMetadataHandler);
      player.src(sourceObj);
      player.trigger({
        type: "usage",
        name: "vhs-error-reload"
      });
      player.trigger({
        type: "usage",
        name: "hls-error-reload"
      });
      player.play();
    };
    var errorHandler = function errorHandler2() {
      if (Date.now() - lastCalled < localOptions.errorInterval * 1e3) {
        player.trigger({
          type: "usage",
          name: "vhs-error-reload-canceled"
        });
        player.trigger({
          type: "usage",
          name: "hls-error-reload-canceled"
        });
        return;
      }
      if (!localOptions.getSource || typeof localOptions.getSource !== "function") {
        videojs$1.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");
        return;
      }
      lastCalled = Date.now();
      return localOptions.getSource.call(player, setSource2);
    };
    var cleanupEvents = function cleanupEvents2() {
      player.off("loadedmetadata", loadedMetadataHandler);
      player.off("error", errorHandler);
      player.off("dispose", cleanupEvents2);
    };
    var reinitPlugin = function reinitPlugin2(newOptions) {
      cleanupEvents();
      initPlugin2(player, newOptions);
    };
    player.on("error", errorHandler);
    player.on("dispose", cleanupEvents);
    player.reloadSourceOnError = reinitPlugin;
  };
  var reloadSourceOnError = function reloadSourceOnError2(options) {
    initPlugin(this, options);
  };
  var version$1 = "2.4.2";
  var version$1$1 = "5.8.0";
  var version$2 = "0.15.0";
  var version$3 = "4.5.0";
  var version$4 = "3.1.0";
  var Vhs$1 = {
    PlaylistLoader,
    Playlist,
    utils,
    STANDARD_PLAYLIST_SELECTOR: lastBandwidthSelector,
    INITIAL_PLAYLIST_SELECTOR: lowestBitrateCompatibleVariantSelector,
    lastBandwidthSelector,
    movingAverageBandwidthSelector,
    comparePlaylistBandwidth,
    comparePlaylistResolution,
    xhr: xhrFactory()
  };
  Object.keys(Config).forEach(function(prop) {
    Object.defineProperty(Vhs$1, prop, {
      get: function get7() {
        videojs$1.log.warn("using Vhs." + prop + " is UNSAFE be sure you know what you are doing");
        return Config[prop];
      },
      set: function set4(value) {
        videojs$1.log.warn("using Vhs." + prop + " is UNSAFE be sure you know what you are doing");
        if (typeof value !== "number" || value < 0) {
          videojs$1.log.warn("value of Vhs." + prop + " must be greater than or equal to 0");
          return;
        }
        Config[prop] = value;
      }
    });
  });
  var LOCAL_STORAGE_KEY$1 = "videojs-vhs";
  var handleVhsMediaChange = function handleVhsMediaChange2(qualityLevels, playlistLoader) {
    var newPlaylist = playlistLoader.media();
    var selectedIndex = -1;
    for (var i = 0; i < qualityLevels.length; i++) {
      if (qualityLevels[i].id === newPlaylist.id) {
        selectedIndex = i;
        break;
      }
    }
    qualityLevels.selectedIndex_ = selectedIndex;
    qualityLevels.trigger({
      selectedIndex,
      type: "change"
    });
  };
  var handleVhsLoadedMetadata = function handleVhsLoadedMetadata2(qualityLevels, vhs) {
    vhs.representations().forEach(function(rep) {
      qualityLevels.addQualityLevel(rep);
    });
    handleVhsMediaChange(qualityLevels, vhs.playlists);
  };
  Vhs$1.canPlaySource = function() {
    return videojs$1.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
  };
  var emeKeySystems = function emeKeySystems2(keySystemOptions, videoPlaylist, audioPlaylist) {
    if (!keySystemOptions) {
      return keySystemOptions;
    }
    var codecs = {
      video: videoPlaylist && videoPlaylist.attributes && videoPlaylist.attributes.CODECS,
      audio: audioPlaylist && audioPlaylist.attributes && audioPlaylist.attributes.CODECS
    };
    if (!codecs.audio && codecs.video && codecs.video.split(",").length > 1) {
      codecs.video.split(",").forEach(function(codec) {
        codec = codec.trim();
        if (import_codecs.isAudioCodec(codec)) {
          codecs.audio = codec;
        } else if (import_codecs.isVideoCodec(codec)) {
          codecs.video = codec;
        }
      });
    }
    var videoContentType = codecs.video ? 'video/mp4;codecs="' + codecs.video + '"' : null;
    var audioContentType = codecs.audio ? 'audio/mp4;codecs="' + codecs.audio + '"' : null;
    var keySystemContentTypes = {};
    for (var keySystem in keySystemOptions) {
      keySystemContentTypes[keySystem] = {
        audioContentType,
        videoContentType
      };
      if (videoPlaylist.contentProtection && videoPlaylist.contentProtection[keySystem] && videoPlaylist.contentProtection[keySystem].pssh) {
        keySystemContentTypes[keySystem].pssh = videoPlaylist.contentProtection[keySystem].pssh;
      }
      if (typeof keySystemOptions[keySystem] === "string") {
        keySystemContentTypes[keySystem].url = keySystemOptions[keySystem];
      }
    }
    return videojs$1.mergeOptions(keySystemOptions, keySystemContentTypes);
  };
  var getAllPsshKeySystemsOptions = function getAllPsshKeySystemsOptions2(playlists, keySystems) {
    return playlists.reduce(function(keySystemsArr, playlist) {
      if (!playlist.contentProtection) {
        return keySystemsArr;
      }
      var keySystemsOptions = keySystems.reduce(function(keySystemsObj, keySystem) {
        var keySystemOptions = playlist.contentProtection[keySystem];
        if (keySystemOptions && keySystemOptions.pssh) {
          keySystemsObj[keySystem] = {
            pssh: keySystemOptions.pssh
          };
        }
        return keySystemsObj;
      }, {});
      if (Object.keys(keySystemsOptions).length) {
        keySystemsArr.push(keySystemsOptions);
      }
      return keySystemsArr;
    }, []);
  };
  var waitForKeySessionCreation = function waitForKeySessionCreation2(_ref) {
    var player = _ref.player, sourceKeySystems = _ref.sourceKeySystems, audioMedia = _ref.audioMedia, mainPlaylists = _ref.mainPlaylists;
    if (!player.eme.initializeMediaKeys) {
      return Promise.resolve();
    }
    var playlists = audioMedia ? mainPlaylists.concat([audioMedia]) : mainPlaylists;
    var keySystemsOptionsArr = getAllPsshKeySystemsOptions(playlists, Object.keys(sourceKeySystems));
    var initializationFinishedPromises = [];
    var keySessionCreatedPromises = [];
    keySystemsOptionsArr.forEach(function(keySystemsOptions) {
      keySessionCreatedPromises.push(new Promise(function(resolve, reject) {
        player.tech_.one("keysessioncreated", resolve);
      }));
      initializationFinishedPromises.push(new Promise(function(resolve, reject) {
        player.eme.initializeMediaKeys({
          keySystems: keySystemsOptions
        }, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      }));
    });
    return Promise.race([
      Promise.all(initializationFinishedPromises),
      Promise.race(keySessionCreatedPromises)
    ]);
  };
  var setupEmeOptions = function setupEmeOptions2(_ref2) {
    var player = _ref2.player, sourceKeySystems = _ref2.sourceKeySystems, media = _ref2.media, audioMedia = _ref2.audioMedia;
    var sourceOptions = emeKeySystems(sourceKeySystems, media, audioMedia);
    if (!sourceOptions) {
      return false;
    }
    player.currentSource().keySystems = sourceOptions;
    if (sourceOptions && !player.eme) {
      videojs$1.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin");
      return false;
    }
    return true;
  };
  var getVhsLocalStorage = function getVhsLocalStorage2() {
    if (!import_window2.default.localStorage) {
      return null;
    }
    var storedObject = import_window2.default.localStorage.getItem(LOCAL_STORAGE_KEY$1);
    if (!storedObject) {
      return null;
    }
    try {
      return JSON.parse(storedObject);
    } catch (e) {
      return null;
    }
  };
  var updateVhsLocalStorage = function updateVhsLocalStorage2(options) {
    if (!import_window2.default.localStorage) {
      return false;
    }
    var objectToStore = getVhsLocalStorage();
    objectToStore = objectToStore ? videojs$1.mergeOptions(objectToStore, options) : options;
    try {
      import_window2.default.localStorage.setItem(LOCAL_STORAGE_KEY$1, JSON.stringify(objectToStore));
    } catch (e) {
      return false;
    }
    return objectToStore;
  };
  var expandDataUri = function expandDataUri2(dataUri) {
    if (dataUri.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,") === 0) {
      return JSON.parse(dataUri.substring(dataUri.indexOf(",") + 1));
    }
    return dataUri;
  };
  Vhs$1.supportsNativeHls = function() {
    if (!import_document.default || !import_document.default.createElement) {
      return false;
    }
    var video = import_document.default.createElement("video");
    if (!videojs$1.getTech("Html5").isSupported()) {
      return false;
    }
    var canPlay = [
      "application/vnd.apple.mpegurl",
      "audio/mpegurl",
      "audio/x-mpegurl",
      "application/x-mpegurl",
      "video/x-mpegurl",
      "video/mpegurl",
      "application/mpegurl"
    ];
    return canPlay.some(function(canItPlay) {
      return /maybe|probably/i.test(video.canPlayType(canItPlay));
    });
  }();
  Vhs$1.supportsNativeDash = function() {
    if (!import_document.default || !import_document.default.createElement || !videojs$1.getTech("Html5").isSupported()) {
      return false;
    }
    return /maybe|probably/i.test(import_document.default.createElement("video").canPlayType("application/dash+xml"));
  }();
  Vhs$1.supportsTypeNatively = function(type3) {
    if (type3 === "hls") {
      return Vhs$1.supportsNativeHls;
    }
    if (type3 === "dash") {
      return Vhs$1.supportsNativeDash;
    }
    return false;
  };
  Vhs$1.isSupported = function() {
    return videojs$1.log.warn("HLS is no longer a tech. Please remove it from your player's techOrder.");
  };
  var Component$1 = videojs$1.getComponent("Component");
  var VhsHandler = /* @__PURE__ */ function(_Component) {
    import_inheritsLoose2.default(VhsHandler2, _Component);
    function VhsHandler2(source, tech, options) {
      var _this;
      _this = _Component.call(this, tech, videojs$1.mergeOptions(options.hls, options.vhs)) || this;
      if (options.hls && Object.keys(options.hls).length) {
        videojs$1.log.warn("Using hls options is deprecated. Use vhs instead.");
      }
      _this.logger_ = logger("VhsHandler");
      if (tech.options_ && tech.options_.playerId) {
        var _player = videojs$1(tech.options_.playerId);
        if (!_player.hasOwnProperty("hls")) {
          Object.defineProperty(_player, "hls", {
            get: function get7() {
              videojs$1.log.warn("player.hls is deprecated. Use player.tech().vhs instead.");
              tech.trigger({
                type: "usage",
                name: "hls-player-access"
              });
              return import_assertThisInitialized2.default(_this);
            },
            configurable: true
          });
        }
        if (!_player.hasOwnProperty("vhs")) {
          Object.defineProperty(_player, "vhs", {
            get: function get7() {
              videojs$1.log.warn("player.vhs is deprecated. Use player.tech().vhs instead.");
              tech.trigger({
                type: "usage",
                name: "vhs-player-access"
              });
              return import_assertThisInitialized2.default(_this);
            },
            configurable: true
          });
        }
        if (!_player.hasOwnProperty("dash")) {
          Object.defineProperty(_player, "dash", {
            get: function get7() {
              videojs$1.log.warn("player.dash is deprecated. Use player.tech().vhs instead.");
              return import_assertThisInitialized2.default(_this);
            },
            configurable: true
          });
        }
        _this.player_ = _player;
      }
      _this.tech_ = tech;
      _this.source_ = source;
      _this.stats = {};
      _this.ignoreNextSeekingEvent_ = false;
      _this.setOptions_();
      if (_this.options_.overrideNative && tech.overrideNativeAudioTracks && tech.overrideNativeVideoTracks) {
        tech.overrideNativeAudioTracks(true);
        tech.overrideNativeVideoTracks(true);
      } else if (_this.options_.overrideNative && (tech.featuresNativeVideoTracks || tech.featuresNativeAudioTracks)) {
        throw new Error("Overriding native HLS requires emulated tracks. See https://git.io/vMpjB");
      }
      _this.on(import_document.default, ["fullscreenchange", "webkitfullscreenchange", "mozfullscreenchange", "MSFullscreenChange"], function(event) {
        var fullscreenElement = import_document.default.fullscreenElement || import_document.default.webkitFullscreenElement || import_document.default.mozFullScreenElement || import_document.default.msFullscreenElement;
        if (fullscreenElement && fullscreenElement.contains(_this.tech_.el())) {
          _this.masterPlaylistController_.smoothQualityChange_();
        }
      });
      _this.on(_this.tech_, "seeking", function() {
        if (this.ignoreNextSeekingEvent_) {
          this.ignoreNextSeekingEvent_ = false;
          return;
        }
        this.setCurrentTime(this.tech_.currentTime());
      });
      _this.on(_this.tech_, "error", function() {
        if (this.tech_.error() && this.masterPlaylistController_) {
          this.masterPlaylistController_.pauseLoading();
        }
      });
      _this.on(_this.tech_, "play", _this.play);
      return _this;
    }
    var _proto = VhsHandler2.prototype;
    _proto.setOptions_ = function setOptions_() {
      var _this2 = this;
      this.options_.withCredentials = this.options_.withCredentials || false;
      this.options_.handleManifestRedirects = this.options_.handleManifestRedirects === false ? false : true;
      this.options_.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions === false ? false : true;
      this.options_.useDevicePixelRatio = this.options_.useDevicePixelRatio || false;
      this.options_.smoothQualityChange = this.options_.smoothQualityChange || false;
      this.options_.useBandwidthFromLocalStorage = typeof this.source_.useBandwidthFromLocalStorage !== "undefined" ? this.source_.useBandwidthFromLocalStorage : this.options_.useBandwidthFromLocalStorage || false;
      this.options_.customTagParsers = this.options_.customTagParsers || [];
      this.options_.customTagMappers = this.options_.customTagMappers || [];
      this.options_.cacheEncryptionKeys = this.options_.cacheEncryptionKeys || false;
      this.options_.handlePartialData = this.options_.handlePartialData || false;
      if (typeof this.options_.blacklistDuration !== "number") {
        this.options_.blacklistDuration = 5 * 60;
      }
      if (typeof this.options_.bandwidth !== "number") {
        if (this.options_.useBandwidthFromLocalStorage) {
          var storedObject = getVhsLocalStorage();
          if (storedObject && storedObject.bandwidth) {
            this.options_.bandwidth = storedObject.bandwidth;
            this.tech_.trigger({
              type: "usage",
              name: "vhs-bandwidth-from-local-storage"
            });
            this.tech_.trigger({
              type: "usage",
              name: "hls-bandwidth-from-local-storage"
            });
          }
          if (storedObject && storedObject.throughput) {
            this.options_.throughput = storedObject.throughput;
            this.tech_.trigger({
              type: "usage",
              name: "vhs-throughput-from-local-storage"
            });
            this.tech_.trigger({
              type: "usage",
              name: "hls-throughput-from-local-storage"
            });
          }
        }
      }
      if (typeof this.options_.bandwidth !== "number") {
        this.options_.bandwidth = Config.INITIAL_BANDWIDTH;
      }
      this.options_.enableLowInitialPlaylist = this.options_.enableLowInitialPlaylist && this.options_.bandwidth === Config.INITIAL_BANDWIDTH;
      ["withCredentials", "useDevicePixelRatio", "limitRenditionByPlayerDimensions", "bandwidth", "smoothQualityChange", "customTagParsers", "customTagMappers", "handleManifestRedirects", "cacheEncryptionKeys", "handlePartialData", "playlistSelector", "initialPlaylistSelector", "experimentalBufferBasedABR", "liveRangeSafeTimeDelta"].forEach(function(option) {
        if (typeof _this2.source_[option] !== "undefined") {
          _this2.options_[option] = _this2.source_[option];
        }
      });
      this.limitRenditionByPlayerDimensions = this.options_.limitRenditionByPlayerDimensions;
      this.useDevicePixelRatio = this.options_.useDevicePixelRatio;
    };
    _proto.src = function src(_src, type3) {
      var _this3 = this;
      if (!_src) {
        return;
      }
      this.setOptions_();
      this.options_.src = expandDataUri(this.source_.src);
      this.options_.tech = this.tech_;
      this.options_.externVhs = Vhs$1;
      this.options_.sourceType = import_media_types.simpleTypeFromSourceType(type3);
      this.options_.seekTo = function(time) {
        _this3.tech_.setCurrentTime(time);
      };
      this.masterPlaylistController_ = new MasterPlaylistController(this.options_);
      var playbackWatcherOptions = videojs$1.mergeOptions({
        liveRangeSafeTimeDelta: SAFE_TIME_DELTA
      }, this.options_, {
        seekable: function seekable3() {
          return _this3.seekable();
        },
        media: function media() {
          return _this3.masterPlaylistController_.media();
        },
        masterPlaylistController: this.masterPlaylistController_
      });
      this.playbackWatcher_ = new PlaybackWatcher(playbackWatcherOptions);
      this.masterPlaylistController_.on("error", function() {
        var player = videojs$1.players[_this3.tech_.options_.playerId];
        var error = _this3.masterPlaylistController_.error;
        if (typeof error === "object" && !error.code) {
          error.code = 3;
        } else if (typeof error === "string") {
          error = {
            message: error,
            code: 3
          };
        }
        player.error(error);
      });
      var defaultSelector = this.options_.experimentalBufferBasedABR ? Vhs$1.movingAverageBandwidthSelector(0.55) : Vhs$1.STANDARD_PLAYLIST_SELECTOR;
      this.masterPlaylistController_.selectPlaylist = this.selectPlaylist ? this.selectPlaylist.bind(this) : defaultSelector.bind(this);
      this.masterPlaylistController_.selectInitialPlaylist = Vhs$1.INITIAL_PLAYLIST_SELECTOR.bind(this);
      this.playlists = this.masterPlaylistController_.masterPlaylistLoader_;
      this.mediaSource = this.masterPlaylistController_.mediaSource;
      Object.defineProperties(this, {
        selectPlaylist: {
          get: function get7() {
            return this.masterPlaylistController_.selectPlaylist;
          },
          set: function set4(selectPlaylist) {
            this.masterPlaylistController_.selectPlaylist = selectPlaylist.bind(this);
          }
        },
        throughput: {
          get: function get7() {
            return this.masterPlaylistController_.mainSegmentLoader_.throughput.rate;
          },
          set: function set4(throughput) {
            this.masterPlaylistController_.mainSegmentLoader_.throughput.rate = throughput;
            this.masterPlaylistController_.mainSegmentLoader_.throughput.count = 1;
          }
        },
        bandwidth: {
          get: function get7() {
            return this.masterPlaylistController_.mainSegmentLoader_.bandwidth;
          },
          set: function set4(bandwidth2) {
            this.masterPlaylistController_.mainSegmentLoader_.bandwidth = bandwidth2;
            this.masterPlaylistController_.mainSegmentLoader_.throughput = {
              rate: 0,
              count: 0
            };
          }
        },
        systemBandwidth: {
          get: function get7() {
            var invBandwidth = 1 / (this.bandwidth || 1);
            var invThroughput;
            if (this.throughput > 0) {
              invThroughput = 1 / this.throughput;
            } else {
              invThroughput = 0;
            }
            var systemBitrate = Math.floor(1 / (invBandwidth + invThroughput));
            return systemBitrate;
          },
          set: function set4() {
            videojs$1.log.error('The "systemBandwidth" property is read-only');
          }
        }
      });
      if (this.options_.bandwidth) {
        this.bandwidth = this.options_.bandwidth;
      }
      if (this.options_.throughput) {
        this.throughput = this.options_.throughput;
      }
      Object.defineProperties(this.stats, {
        bandwidth: {
          get: function get7() {
            return _this3.bandwidth || 0;
          },
          enumerable: true
        },
        mediaRequests: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaRequests_() || 0;
          },
          enumerable: true
        },
        mediaRequestsAborted: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaRequestsAborted_() || 0;
          },
          enumerable: true
        },
        mediaRequestsTimedout: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaRequestsTimedout_() || 0;
          },
          enumerable: true
        },
        mediaRequestsErrored: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaRequestsErrored_() || 0;
          },
          enumerable: true
        },
        mediaTransferDuration: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaTransferDuration_() || 0;
          },
          enumerable: true
        },
        mediaBytesTransferred: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaBytesTransferred_() || 0;
          },
          enumerable: true
        },
        mediaSecondsLoaded: {
          get: function get7() {
            return _this3.masterPlaylistController_.mediaSecondsLoaded_() || 0;
          },
          enumerable: true
        },
        buffered: {
          get: function get7() {
            return timeRangesToArray(_this3.tech_.buffered());
          },
          enumerable: true
        },
        currentTime: {
          get: function get7() {
            return _this3.tech_.currentTime();
          },
          enumerable: true
        },
        currentSource: {
          get: function get7() {
            return _this3.tech_.currentSource_;
          },
          enumerable: true
        },
        currentTech: {
          get: function get7() {
            return _this3.tech_.name_;
          },
          enumerable: true
        },
        duration: {
          get: function get7() {
            return _this3.tech_.duration();
          },
          enumerable: true
        },
        master: {
          get: function get7() {
            return _this3.playlists.master;
          },
          enumerable: true
        },
        playerDimensions: {
          get: function get7() {
            return _this3.tech_.currentDimensions();
          },
          enumerable: true
        },
        seekable: {
          get: function get7() {
            return timeRangesToArray(_this3.tech_.seekable());
          },
          enumerable: true
        },
        timestamp: {
          get: function get7() {
            return Date.now();
          },
          enumerable: true
        },
        videoPlaybackQuality: {
          get: function get7() {
            return _this3.tech_.getVideoPlaybackQuality();
          },
          enumerable: true
        }
      });
      this.tech_.one("canplay", this.masterPlaylistController_.setupFirstPlay.bind(this.masterPlaylistController_));
      this.tech_.on("bandwidthupdate", function() {
        if (_this3.options_.useBandwidthFromLocalStorage) {
          updateVhsLocalStorage({
            bandwidth: _this3.bandwidth,
            throughput: Math.round(_this3.throughput)
          });
        }
      });
      this.masterPlaylistController_.on("selectedinitialmedia", function() {
        renditionSelectionMixin(_this3);
      });
      this.masterPlaylistController_.sourceUpdater_.on("createdsourcebuffers", function() {
        _this3.setupEme_();
      });
      this.on(this.masterPlaylistController_, "progress", function() {
        this.tech_.trigger("progress");
      });
      this.on(this.masterPlaylistController_, "firstplay", function() {
        this.ignoreNextSeekingEvent_ = true;
      });
      this.setupQualityLevels_();
      if (!this.tech_.el()) {
        return;
      }
      this.mediaSourceUrl_ = import_window2.default.URL.createObjectURL(this.masterPlaylistController_.mediaSource);
      this.tech_.src(this.mediaSourceUrl_);
    };
    _proto.setupEme_ = function setupEme_() {
      var _this4 = this;
      var audioPlaylistLoader = this.masterPlaylistController_.mediaTypes_.AUDIO.activePlaylistLoader;
      var didSetupEmeOptions = setupEmeOptions({
        player: this.player_,
        sourceKeySystems: this.source_.keySystems,
        media: this.playlists.media(),
        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media()
      });
      if (videojs$1.browser.IE_VERSION === 11 || !didSetupEmeOptions) {
        this.masterPlaylistController_.sourceUpdater_.initializedEme();
        return;
      }
      this.logger_("waiting for EME key session creation");
      waitForKeySessionCreation({
        player: this.player_,
        sourceKeySystems: this.source_.keySystems,
        audioMedia: audioPlaylistLoader && audioPlaylistLoader.media(),
        mainPlaylists: this.playlists.master.playlists
      }).then(function() {
        _this4.logger_("created EME key session");
        _this4.masterPlaylistController_.sourceUpdater_.initializedEme();
      })["catch"](function(err) {
        _this4.logger_("error while creating EME key session", err);
        _this4.player_.error({
          message: "Failed to initialize media keys for EME",
          code: 3
        });
      });
    };
    _proto.setupQualityLevels_ = function setupQualityLevels_() {
      var _this5 = this;
      var player = videojs$1.players[this.tech_.options_.playerId];
      if (!player || !player.qualityLevels || this.qualityLevels_) {
        return;
      }
      this.qualityLevels_ = player.qualityLevels();
      this.masterPlaylistController_.on("selectedinitialmedia", function() {
        handleVhsLoadedMetadata(_this5.qualityLevels_, _this5);
      });
      this.playlists.on("mediachange", function() {
        handleVhsMediaChange(_this5.qualityLevels_, _this5.playlists);
      });
    };
    VhsHandler2.version = function version$5() {
      return {
        "@videojs/http-streaming": version$1,
        "mux.js": version$1$1,
        "mpd-parser": version$2,
        "m3u8-parser": version$3,
        "aes-decrypter": version$4
      };
    };
    _proto.version = function version2() {
      return this.constructor.version();
    };
    _proto.canChangeType = function canChangeType() {
      return SourceUpdater.canChangeType();
    };
    _proto.play = function play() {
      this.masterPlaylistController_.play();
    };
    _proto.setCurrentTime = function setCurrentTime(currentTime) {
      this.masterPlaylistController_.setCurrentTime(currentTime);
    };
    _proto.duration = function duration5() {
      return this.masterPlaylistController_.duration();
    };
    _proto.seekable = function seekable3() {
      return this.masterPlaylistController_.seekable();
    };
    _proto.dispose = function dispose3() {
      if (this.playbackWatcher_) {
        this.playbackWatcher_.dispose();
      }
      if (this.masterPlaylistController_) {
        this.masterPlaylistController_.dispose();
      }
      if (this.qualityLevels_) {
        this.qualityLevels_.dispose();
      }
      if (this.player_) {
        delete this.player_.vhs;
        delete this.player_.dash;
        delete this.player_.hls;
      }
      if (this.tech_ && this.tech_.vhs) {
        delete this.tech_.vhs;
      }
      if (this.tech_) {
        delete this.tech_.hls;
      }
      if (this.mediaSourceUrl_ && import_window2.default.URL.revokeObjectURL) {
        import_window2.default.URL.revokeObjectURL(this.mediaSourceUrl_);
        this.mediaSourceUrl_ = null;
      }
      _Component.prototype.dispose.call(this);
    };
    _proto.convertToProgramTime = function convertToProgramTime(time, callback2) {
      return getProgramTime({
        playlist: this.masterPlaylistController_.media(),
        time,
        callback: callback2
      });
    };
    _proto.seekToProgramTime = function seekToProgramTime$1(programTime, callback2, pauseAfterSeek, retryCount) {
      if (pauseAfterSeek === void 0) {
        pauseAfterSeek = true;
      }
      if (retryCount === void 0) {
        retryCount = 2;
      }
      return seekToProgramTime({
        programTime,
        playlist: this.masterPlaylistController_.media(),
        retryCount,
        pauseAfterSeek,
        seekTo: this.options_.seekTo,
        tech: this.options_.tech,
        callback: callback2
      });
    };
    return VhsHandler2;
  }(Component$1);
  var VhsSourceHandler = {
    name: "videojs-http-streaming",
    VERSION: version$1,
    canHandleSource: function canHandleSource(srcObj, options) {
      if (options === void 0) {
        options = {};
      }
      var localOptions = videojs$1.mergeOptions(videojs$1.options, options);
      return VhsSourceHandler.canPlayType(srcObj.type, localOptions);
    },
    handleSource: function handleSource(source, tech, options) {
      if (options === void 0) {
        options = {};
      }
      var localOptions = videojs$1.mergeOptions(videojs$1.options, options);
      tech.vhs = new VhsHandler(source, tech, localOptions);
      if (!videojs$1.hasOwnProperty("hls")) {
        Object.defineProperty(tech, "hls", {
          get: function get7() {
            videojs$1.log.warn("player.tech().hls is deprecated. Use player.tech().vhs instead.");
            return tech.vhs;
          },
          configurable: true
        });
      }
      tech.vhs.xhr = xhrFactory();
      tech.vhs.src(source.src, source.type);
      return tech.vhs;
    },
    canPlayType: function canPlayType2(type3, options) {
      if (options === void 0) {
        options = {};
      }
      var _videojs$mergeOptions = videojs$1.mergeOptions(videojs$1.options, options), _videojs$mergeOptions2 = _videojs$mergeOptions.vhs.overrideNative, overrideNative = _videojs$mergeOptions2 === void 0 ? !videojs$1.browser.IS_ANY_SAFARI : _videojs$mergeOptions2;
      var supportedType = import_media_types.simpleTypeFromSourceType(type3);
      var canUseMsePlayback = supportedType && (!Vhs$1.supportsTypeNatively(supportedType) || overrideNative);
      return canUseMsePlayback ? "maybe" : "";
    }
  };
  var supportsNativeMediaSources = function supportsNativeMediaSources2() {
    return import_codecs.browserSupportsCodec("avc1.4d400d,mp4a.40.2");
  };
  if (supportsNativeMediaSources()) {
    videojs$1.getTech("Html5").registerSourceHandler(VhsSourceHandler, 0);
  }
  videojs$1.VhsHandler = VhsHandler;
  Object.defineProperty(videojs$1, "HlsHandler", {
    get: function get4() {
      videojs$1.log.warn("videojs.HlsHandler is deprecated. Use videojs.VhsHandler instead.");
      return VhsHandler;
    },
    configurable: true
  });
  videojs$1.VhsSourceHandler = VhsSourceHandler;
  Object.defineProperty(videojs$1, "HlsSourceHandler", {
    get: function get5() {
      videojs$1.log.warn("videojs.HlsSourceHandler is deprecated. Use videojs.VhsSourceHandler instead.");
      return VhsSourceHandler;
    },
    configurable: true
  });
  videojs$1.Vhs = Vhs$1;
  Object.defineProperty(videojs$1, "Hls", {
    get: function get6() {
      videojs$1.log.warn("videojs.Hls is deprecated. Use videojs.Vhs instead.");
      return Vhs$1;
    },
    configurable: true
  });
  if (!videojs$1.use) {
    videojs$1.registerComponent("Hls", Vhs$1);
    videojs$1.registerComponent("Vhs", Vhs$1);
  }
  videojs$1.options.vhs = videojs$1.options.vhs || {};
  videojs$1.options.hls = videojs$1.options.hls || {};
  if (videojs$1.registerPlugin) {
    videojs$1.registerPlugin("reloadSourceOnError", reloadSourceOnError);
  } else {
    videojs$1.plugin("reloadSourceOnError", reloadSourceOnError);
  }
  var video_es_default = videojs$1;

  // node_modules/bs-platform/lib/es6/caml_option.mjs
  function some(x) {
    if (x === void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: 0
      };
    } else if (x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0) {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: x.BS_PRIVATE_NESTED_SOME_NONE + 1 | 0
      };
    } else {
      return x;
    }
  }
  function nullable_to_opt(x) {
    if (x == null) {
      return;
    } else {
      return some(x);
    }
  }
  function valFromOption(x) {
    if (!(x !== null && x.BS_PRIVATE_NESTED_SOME_NONE !== void 0)) {
      return x;
    }
    var depth = x.BS_PRIVATE_NESTED_SOME_NONE;
    if (depth === 0) {
      return;
    } else {
      return {
        BS_PRIVATE_NESTED_SOME_NONE: depth - 1 | 0
      };
    }
  }

  // node_modules/bs-platform/lib/es6/belt_Option.mjs
  function getExn(x) {
    if (x !== void 0) {
      return valFromOption(x);
    }
    throw {
      RE_EXN_ID: "Not_found",
      Error: new Error()
    };
  }

  // src/Player.bs.js
  function Player2(Props) {
    var url = Props.url;
    var videoRef = React.useRef(null);
    React.useEffect(function() {
      var video = video_es_default(getExn(nullable_to_opt(videoRef.current)), {
        autoplay: false,
        controls: true,
        fluid: true
      });
      video.ready((video.src(url), void 0), true);
      return function(param) {
        video.dispose();
      };
    }, [url]);
    return React.createElement("video", {
      ref: videoRef,
      className: "video-js vjs-big-play-centered"
    });
  }
  var make = Player2;

  // src/App.bs.js
  function App(Props) {
    return React2.createElement("div", {
      style: {
        display: "flex",
        alignItems: "center",
        flexDirection: "column"
      }
    }, React2.createElement("div", {
      style: {
        height: "50%",
        width: "50%"
      }
    }, React2.createElement(make, {
      url: "https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8"
    })));
  }
  var make2 = App;

  // src/Index.bs.js
  var React3 = __toModule(require_react());
  var ReactDom = __toModule(require_react_dom());
  var root = document.querySelector("#root");
  if (!(root == null)) {
    ReactDom.render(React3.createElement(make2, {}), root);
  }
})();
//# sourceMappingURL=Index.bs.js.map
